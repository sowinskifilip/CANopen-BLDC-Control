
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00006cf4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070a8  080070a8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080070b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000084  08007134  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08007134  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee1  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003308  00000000  00000000  00038f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029caa  00000000  00000000  0003e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001883a  00000000  00000000  000684f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100a6f  00000000  00000000  00080d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018179b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005254  00000000  00000000  001817ec  2**2
=======
  1 .text         000070c8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007484  08007484  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800748c  0800748c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000088  0800751c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800751c  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1e7  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330e  00000000  00000000  0003a29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cba  00000000  00000000  0003fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019152  00000000  00000000  00069832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100eb2  00000000  00000000  00082984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  0018388c  2**2
>>>>>>> main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 8000210:	20000084 	.word	0x20000084
 8000214:	00000000 	.word	0x00000000
 8000218:	08006ed4 	.word	0x08006ed4
=======
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	080072a8 	.word	0x080072a8
>>>>>>> main

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000230:	20000088 	.word	0x20000088
 8000234:	08006ed4 	.word	0x08006ed4
=======
 8000230:	2000008c 	.word	0x2000008c
 8000234:	080072a8 	.word	0x080072a8
>>>>>>> main

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_CAN1_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000548:	2210      	movs	r2, #16
 800054a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_CAN1_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_CAN1_Init+0x68>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000564:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000568:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
<<<<<<< HEAD
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000590:	f001 fc28 	bl	8001de4 <HAL_CAN_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800059a:	f001 f857 	bl	800164c <Error_Handler>
=======
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f001 fe18 	bl	80021b8 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f001 fa07 	bl	80019a0 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
<<<<<<< HEAD
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000a0 	.word	0x200000a0
 80005a8:	40006400 	.word	0x40006400
=======
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000b0 	.word	0x200000b0
 800059c:	40006400 	.word	0x40006400
>>>>>>> main

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_CAN_MspInit+0x8c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d12f      	bne.n	800062e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fe:	2303      	movs	r3, #3
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060e:	2309      	movs	r3, #9
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< HEAD
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_CAN_MspInit+0x94>)
 800061a:	f002 fbf5 	bl	8002e08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2014      	movs	r0, #20
 8000624:	f002 fb27 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000628:	2014      	movs	r0, #20
 800062a:	f002 fb40 	bl	8002cae <HAL_NVIC_EnableIRQ>
=======
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f002 fde5 	bl	80031dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f002 fd17 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f002 fd30 	bl	8003082 <HAL_NVIC_EnableIRQ>
>>>>>>> main
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b6c      	ldr	r3, [pc, #432]	; (800080c <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a6b      	ldr	r2, [pc, #428]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b66      	ldr	r3, [pc, #408]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a65      	ldr	r2, [pc, #404]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a5f      	ldr	r2, [pc, #380]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b5d      	ldr	r3, [pc, #372]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b5a      	ldr	r3, [pc, #360]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a59      	ldr	r2, [pc, #356]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b57      	ldr	r3, [pc, #348]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b54      	ldr	r3, [pc, #336]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a53      	ldr	r2, [pc, #332]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b51      	ldr	r3, [pc, #324]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a4d      	ldr	r2, [pc, #308]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 80006ea:	2200      	movs	r2, #0
 80006ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <MX_GPIO_Init+0x1cc>)
 80006f2:	f002 fd35 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	4846      	ldr	r0, [pc, #280]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80006fc:	f002 fd30 	bl	8003160 <HAL_GPIO_WritePin>
=======
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 ff25 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 ff20 	bl	8003534 <HAL_GPIO_WritePin>
>>>>>>> main

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4840      	ldr	r0, [pc, #256]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000718:	f002 fb76 	bl	8002e08 <HAL_GPIO_Init>
=======
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f002 fd66 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800071c:	2332      	movs	r3, #50	; 0x32
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072c:	230b      	movs	r3, #11
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4838      	ldr	r0, [pc, #224]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000738:	f002 fb66 	bl	8002e08 <HAL_GPIO_Init>
=======
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f002 fd56 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800073c:	2386      	movs	r3, #134	; 0x86
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4831      	ldr	r0, [pc, #196]	; (800081c <MX_GPIO_Init+0x1d8>)
 8000758:	f002 fb56 	bl	8002e08 <HAL_GPIO_Init>
=======
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f002 fd46 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800075c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4826      	ldr	r0, [pc, #152]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000776:	f002 fb47 	bl	8002e08 <HAL_GPIO_Init>
=======
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f002 fd37 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000798:	f002 fb36 	bl	8002e08 <HAL_GPIO_Init>
=======
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f002 fd26 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007b4:	f002 fb28 	bl	8002e08 <HAL_GPIO_Init>
=======
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f002 fd18 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007cc:	f002 fb1c 	bl	8002e08 <HAL_GPIO_Init>
=======
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f002 fd0c 	bl	80031dc <HAL_GPIO_Init>
>>>>>>> main

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
<<<<<<< HEAD
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007ee:	f002 fb0b 	bl	8002e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f002 fa3d 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f002 fa56 	bl	8002cae <HAL_NVIC_EnableIRQ>
=======
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f002 fcfb 	bl	80031dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f002 fc2d 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f002 fc46 	bl	8003082 <HAL_NVIC_EnableIRQ>
>>>>>>> main

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	40021800 	.word	0x40021800
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000

08000820 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
<<<<<<< HEAD
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <fnLEDsErrorState+0x28>)
 800082a:	f002 fc99 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <fnLEDsErrorState+0x28>)
 8000834:	f002 fc94 	bl	8003160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <fnLEDsErrorState+0x28>)
 8000840:	f002 fc8e 	bl	8003160 <HAL_GPIO_WritePin>
=======
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <fnLEDsErrorState+0x28>)
 800081e:	f002 fe89 	bl	8003534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <fnLEDsErrorState+0x28>)
 8000828:	f002 fe84 	bl	8003534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	4802      	ldr	r0, [pc, #8]	; (800083c <fnLEDsErrorState+0x28>)
 8000834:	f002 fe7e 	bl	8003534 <HAL_GPIO_WritePin>
>>>>>>> main
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020400 	.word	0x40020400

0800084c <fnInit>:


//INIT FUNCTION
void fnInit(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000850:	4bc6      	ldr	r3, [pc, #792]	; (8000b6c <fnInit+0x320>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b50      	cmp	r3, #80	; 0x50
 8000856:	f200 833a 	bhi.w	8000ece <fnInit+0x682>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <fnInit+0x14>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080009a5 	.word	0x080009a5
 8000864:	08000ecf 	.word	0x08000ecf
 8000868:	08000ecf 	.word	0x08000ecf
 800086c:	08000ecf 	.word	0x08000ecf
 8000870:	08000ecf 	.word	0x08000ecf
 8000874:	080009ed 	.word	0x080009ed
 8000878:	08000ecf 	.word	0x08000ecf
 800087c:	08000ecf 	.word	0x08000ecf
 8000880:	08000ecf 	.word	0x08000ecf
 8000884:	08000ecf 	.word	0x08000ecf
 8000888:	08000a35 	.word	0x08000a35
 800088c:	08000ecf 	.word	0x08000ecf
 8000890:	08000ecf 	.word	0x08000ecf
 8000894:	08000ecf 	.word	0x08000ecf
 8000898:	08000ecf 	.word	0x08000ecf
 800089c:	08000ecf 	.word	0x08000ecf
 80008a0:	08000ecf 	.word	0x08000ecf
 80008a4:	08000ecf 	.word	0x08000ecf
 80008a8:	08000ecf 	.word	0x08000ecf
 80008ac:	08000ecf 	.word	0x08000ecf
 80008b0:	08000aa3 	.word	0x08000aa3
 80008b4:	08000ecf 	.word	0x08000ecf
 80008b8:	08000ecf 	.word	0x08000ecf
 80008bc:	08000ecf 	.word	0x08000ecf
 80008c0:	08000ecf 	.word	0x08000ecf
 80008c4:	08000b11 	.word	0x08000b11
 80008c8:	08000ecf 	.word	0x08000ecf
 80008cc:	08000ecf 	.word	0x08000ecf
 80008d0:	08000ecf 	.word	0x08000ecf
 80008d4:	08000ecf 	.word	0x08000ecf
 80008d8:	08000ba9 	.word	0x08000ba9
 80008dc:	08000ecf 	.word	0x08000ecf
 80008e0:	08000ecf 	.word	0x08000ecf
 80008e4:	08000ecf 	.word	0x08000ecf
 80008e8:	08000ecf 	.word	0x08000ecf
 80008ec:	08000ecf 	.word	0x08000ecf
 80008f0:	08000ecf 	.word	0x08000ecf
 80008f4:	08000ecf 	.word	0x08000ecf
 80008f8:	08000ecf 	.word	0x08000ecf
 80008fc:	08000ecf 	.word	0x08000ecf
 8000900:	08000c17 	.word	0x08000c17
 8000904:	08000ecf 	.word	0x08000ecf
 8000908:	08000ecf 	.word	0x08000ecf
 800090c:	08000ecf 	.word	0x08000ecf
 8000910:	08000ecf 	.word	0x08000ecf
 8000914:	08000ecf 	.word	0x08000ecf
 8000918:	08000ecf 	.word	0x08000ecf
 800091c:	08000ecf 	.word	0x08000ecf
 8000920:	08000ecf 	.word	0x08000ecf
 8000924:	08000ecf 	.word	0x08000ecf
 8000928:	08000c85 	.word	0x08000c85
 800092c:	08000ecf 	.word	0x08000ecf
 8000930:	08000ecf 	.word	0x08000ecf
 8000934:	08000ecf 	.word	0x08000ecf
 8000938:	08000ecf 	.word	0x08000ecf
 800093c:	08000cf3 	.word	0x08000cf3
 8000940:	08000ecf 	.word	0x08000ecf
 8000944:	08000ecf 	.word	0x08000ecf
 8000948:	08000ecf 	.word	0x08000ecf
 800094c:	08000ecf 	.word	0x08000ecf
 8000950:	08000d6f 	.word	0x08000d6f
 8000954:	08000ecf 	.word	0x08000ecf
 8000958:	08000ecf 	.word	0x08000ecf
 800095c:	08000ecf 	.word	0x08000ecf
 8000960:	08000ecf 	.word	0x08000ecf
 8000964:	08000ecf 	.word	0x08000ecf
 8000968:	08000ecf 	.word	0x08000ecf
 800096c:	08000ecf 	.word	0x08000ecf
 8000970:	08000ecf 	.word	0x08000ecf
 8000974:	08000ecf 	.word	0x08000ecf
 8000978:	08000ddd 	.word	0x08000ddd
 800097c:	08000ecf 	.word	0x08000ecf
 8000980:	08000ecf 	.word	0x08000ecf
 8000984:	08000ecf 	.word	0x08000ecf
 8000988:	08000ecf 	.word	0x08000ecf
 800098c:	08000ecf 	.word	0x08000ecf
 8000990:	08000ecf 	.word	0x08000ecf
 8000994:	08000ecf 	.word	0x08000ecf
 8000998:	08000ecf 	.word	0x08000ecf
 800099c:	08000ecf 	.word	0x08000ecf
 80009a0:	08000e91 	.word	0x08000e91

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 80009a4:	4b72      	ldr	r3, [pc, #456]	; (8000b70 <fnInit+0x324>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009aa:	4b71      	ldr	r3, [pc, #452]	; (8000b70 <fnInit+0x324>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 80009b0:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <fnInit+0x328>)
 80009b2:	2282      	movs	r2, #130	; 0x82
 80009b4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <fnInit+0x328>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 80009bc:	4b6e      	ldr	r3, [pc, #440]	; (8000b78 <fnInit+0x32c>)
 80009be:	4a6d      	ldr	r2, [pc, #436]	; (8000b74 <fnInit+0x328>)
 80009c0:	496b      	ldr	r1, [pc, #428]	; (8000b70 <fnInit+0x324>)
 80009c2:	486e      	ldr	r0, [pc, #440]	; (8000b7c <fnInit+0x330>)
 80009c4:	f001 fc3a 	bl	800223c <HAL_CAN_AddTxMessage>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d004      	beq.n	80009d8 <fnInit+0x18c>
=======
 80009b0:	4b6e      	ldr	r3, [pc, #440]	; (8000b6c <fnInit+0x32c>)
 80009b2:	4a6d      	ldr	r2, [pc, #436]	; (8000b68 <fnInit+0x328>)
 80009b4:	496b      	ldr	r1, [pc, #428]	; (8000b64 <fnInit+0x324>)
 80009b6:	486e      	ldr	r0, [pc, #440]	; (8000b70 <fnInit+0x330>)
 80009b8:	f001 fe2a 	bl	8002610 <HAL_CAN_AddTxMessage>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <fnInit+0x18c>
>>>>>>> main
			fnLEDsErrorState();
 80009ce:	f7ff ff27 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 80009d2:	f000 fe3b 	bl	800164c <Error_Handler>
=======
 80009c6:	f000 ffeb 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 80009d6:	e27a      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 5;
 80009d8:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <fnInit+0x320>)
 80009da:	2205      	movs	r2, #5
 80009dc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
<<<<<<< HEAD
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2204      	movs	r2, #4
 80009e2:	4967      	ldr	r1, [pc, #412]	; (8000b80 <fnInit+0x334>)
 80009e4:	4867      	ldr	r0, [pc, #412]	; (8000b84 <fnInit+0x338>)
 80009e6:	f004 fbe7 	bl	80051b8 <HAL_UART_Transmit>
=======
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	2204      	movs	r2, #4
 80009d6:	4967      	ldr	r1, [pc, #412]	; (8000b74 <fnInit+0x334>)
 80009d8:	4867      	ldr	r0, [pc, #412]	; (8000b78 <fnInit+0x338>)
 80009da:	f004 fdd9 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 80009ea:	e270      	b.n	8000ece <fnInit+0x682>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 80009ec:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <fnInit+0x324>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009f2:	4b5f      	ldr	r3, [pc, #380]	; (8000b70 <fnInit+0x324>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 80009f8:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <fnInit+0x328>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <fnInit+0x328>)
 8000a00:	220a      	movs	r2, #10
 8000a02:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000a04:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <fnInit+0x32c>)
 8000a06:	4a5b      	ldr	r2, [pc, #364]	; (8000b74 <fnInit+0x328>)
 8000a08:	4959      	ldr	r1, [pc, #356]	; (8000b70 <fnInit+0x324>)
 8000a0a:	485c      	ldr	r0, [pc, #368]	; (8000b7c <fnInit+0x330>)
 8000a0c:	f001 fc16 	bl	800223c <HAL_CAN_AddTxMessage>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d004      	beq.n	8000a20 <fnInit+0x1d4>
=======
 80009f8:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <fnInit+0x32c>)
 80009fa:	4a5b      	ldr	r2, [pc, #364]	; (8000b68 <fnInit+0x328>)
 80009fc:	4959      	ldr	r1, [pc, #356]	; (8000b64 <fnInit+0x324>)
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <fnInit+0x330>)
 8000a00:	f001 fe06 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <fnInit+0x1d4>
>>>>>>> main
			fnLEDsErrorState();
 8000a16:	f7ff ff03 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000a1a:	f000 fe17 	bl	800164c <Error_Handler>
=======
 8000a0e:	f000 ffc7 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000a1e:	e256      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 10;
 8000a20:	4b52      	ldr	r3, [pc, #328]	; (8000b6c <fnInit+0x320>)
 8000a22:	220a      	movs	r2, #10
 8000a24:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
<<<<<<< HEAD
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4957      	ldr	r1, [pc, #348]	; (8000b88 <fnInit+0x33c>)
 8000a2c:	4855      	ldr	r0, [pc, #340]	; (8000b84 <fnInit+0x338>)
 8000a2e:	f004 fbc3 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4957      	ldr	r1, [pc, #348]	; (8000b7c <fnInit+0x33c>)
 8000a20:	4855      	ldr	r0, [pc, #340]	; (8000b78 <fnInit+0x338>)
 8000a22:	f004 fdb5 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000a32:	e24c      	b.n	8000ece <fnInit+0x682>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000a34:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <fnInit+0x324>)
 8000a36:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a3a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <fnInit+0x324>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <fnInit+0x328>)
 8000a44:	2222      	movs	r2, #34	; 0x22
 8000a46:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <fnInit+0x328>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <fnInit+0x328>)
 8000a50:	2260      	movs	r2, #96	; 0x60
 8000a52:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <fnInit+0x328>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <fnInit+0x328>)
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <fnInit+0x328>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <fnInit+0x328>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <fnInit+0x328>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <fnInit+0x32c>)
 8000a74:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <fnInit+0x328>)
 8000a76:	493e      	ldr	r1, [pc, #248]	; (8000b70 <fnInit+0x324>)
 8000a78:	4840      	ldr	r0, [pc, #256]	; (8000b7c <fnInit+0x330>)
 8000a7a:	f001 fbdf 	bl	800223c <HAL_CAN_AddTxMessage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <fnInit+0x242>
=======
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <fnInit+0x32c>)
 8000a68:	4a3f      	ldr	r2, [pc, #252]	; (8000b68 <fnInit+0x328>)
 8000a6a:	493e      	ldr	r1, [pc, #248]	; (8000b64 <fnInit+0x324>)
 8000a6c:	4840      	ldr	r0, [pc, #256]	; (8000b70 <fnInit+0x330>)
 8000a6e:	f001 fdcf 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <fnInit+0x242>
>>>>>>> main
			fnLEDsErrorState();
 8000a84:	f7ff fecc 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000a88:	f000 fde0 	bl	800164c <Error_Handler>
=======
 8000a7c:	f000 ff90 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a8c:	e21f      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 20;
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <fnInit+0x320>)
 8000a90:	2214      	movs	r2, #20
 8000a92:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
<<<<<<< HEAD
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2204      	movs	r2, #4
 8000a98:	493c      	ldr	r1, [pc, #240]	; (8000b8c <fnInit+0x340>)
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <fnInit+0x338>)
 8000a9c:	f004 fb8c 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	493c      	ldr	r1, [pc, #240]	; (8000b80 <fnInit+0x340>)
 8000a8e:	483a      	ldr	r0, [pc, #232]	; (8000b78 <fnInit+0x338>)
 8000a90:	f004 fd7e 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000aa0:	e215      	b.n	8000ece <fnInit+0x682>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <fnInit+0x324>)
 8000aa4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000aa8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <fnInit+0x324>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <fnInit+0x328>)
 8000ab2:	2222      	movs	r2, #34	; 0x22
 8000ab4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <fnInit+0x328>)
 8000ab8:	2240      	movs	r2, #64	; 0x40
 8000aba:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <fnInit+0x328>)
 8000abe:	2260      	movs	r2, #96	; 0x60
 8000ac0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <fnInit+0x328>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <fnInit+0x328>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <fnInit+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <fnInit+0x328>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <fnInit+0x328>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <fnInit+0x32c>)
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <fnInit+0x328>)
 8000ae4:	4922      	ldr	r1, [pc, #136]	; (8000b70 <fnInit+0x324>)
 8000ae6:	4825      	ldr	r0, [pc, #148]	; (8000b7c <fnInit+0x330>)
 8000ae8:	f001 fba8 	bl	800223c <HAL_CAN_AddTxMessage>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <fnInit+0x2b0>
=======
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <fnInit+0x32c>)
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <fnInit+0x328>)
 8000ad8:	4922      	ldr	r1, [pc, #136]	; (8000b64 <fnInit+0x324>)
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <fnInit+0x330>)
 8000adc:	f001 fd98 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <fnInit+0x2b0>
>>>>>>> main
			fnLEDsErrorState();
 8000af2:	f7ff fe95 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000af6:	f000 fda9 	bl	800164c <Error_Handler>
=======
 8000aea:	f000 ff59 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000afa:	e1e8      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 25;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <fnInit+0x320>)
 8000afe:	2219      	movs	r2, #25
 8000b00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
<<<<<<< HEAD
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2204      	movs	r2, #4
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <fnInit+0x344>)
 8000b08:	481e      	ldr	r0, [pc, #120]	; (8000b84 <fnInit+0x338>)
 8000b0a:	f004 fb55 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2204      	movs	r2, #4
 8000afa:	4922      	ldr	r1, [pc, #136]	; (8000b84 <fnInit+0x344>)
 8000afc:	481e      	ldr	r0, [pc, #120]	; (8000b78 <fnInit+0x338>)
 8000afe:	f004 fd47 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000b0e:	e1de      	b.n	8000ece <fnInit+0x682>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <fnInit+0x324>)
 8000b12:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b16:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <fnInit+0x324>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <fnInit+0x328>)
 8000b20:	2222      	movs	r2, #34	; 0x22
 8000b22:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <fnInit+0x328>)
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <fnInit+0x328>)
 8000b2c:	2260      	movs	r2, #96	; 0x60
 8000b2e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <fnInit+0x328>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <fnInit+0x328>)
 8000b38:	220f      	movs	r2, #15
 8000b3a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <fnInit+0x328>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <fnInit+0x328>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <fnInit+0x328>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <fnInit+0x32c>)
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <fnInit+0x328>)
 8000b52:	4907      	ldr	r1, [pc, #28]	; (8000b70 <fnInit+0x324>)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <fnInit+0x330>)
 8000b56:	f001 fb71 	bl	800223c <HAL_CAN_AddTxMessage>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d019      	beq.n	8000b94 <fnInit+0x348>
=======
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <fnInit+0x32c>)
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <fnInit+0x328>)
 8000b46:	4907      	ldr	r1, [pc, #28]	; (8000b64 <fnInit+0x324>)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <fnInit+0x330>)
 8000b4a:	f001 fd61 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d019      	beq.n	8000b88 <fnInit+0x348>
>>>>>>> main
			fnLEDsErrorState();
 8000b60:	f7ff fe5e 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000b64:	f000 fd72 	bl	800164c <Error_Handler>
=======
 8000b58:	f000 ff22 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
<<<<<<< HEAD
 8000b68:	e1b1      	b.n	8000ece <fnInit+0x682>
 8000b6a:	bf00      	nop
 8000b6c:	20000002 	.word	0x20000002
 8000b70:	200000cc 	.word	0x200000cc
 8000b74:	200000e4 	.word	0x200000e4
 8000b78:	200000ec 	.word	0x200000ec
 8000b7c:	200000a0 	.word	0x200000a0
 8000b80:	08006eec 	.word	0x08006eec
 8000b84:	20000230 	.word	0x20000230
 8000b88:	08006ef4 	.word	0x08006ef4
 8000b8c:	08006efc 	.word	0x08006efc
 8000b90:	08006f04 	.word	0x08006f04
=======
 8000b5c:	e1b1      	b.n	8000ec2 <fnInit+0x682>
 8000b5e:	bf00      	nop
 8000b60:	20000002 	.word	0x20000002
 8000b64:	2000012c 	.word	0x2000012c
 8000b68:	200000dc 	.word	0x200000dc
 8000b6c:	200000f4 	.word	0x200000f4
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	080072c0 	.word	0x080072c0
 8000b78:	20000290 	.word	0x20000290
 8000b7c:	080072c8 	.word	0x080072c8
 8000b80:	080072d0 	.word	0x080072d0
 8000b84:	080072d8 	.word	0x080072d8
>>>>>>> main
			iMachineStatus = 30;
 8000b94:	4bb0      	ldr	r3, [pc, #704]	; (8000e58 <fnInit+0x60c>)
 8000b96:	221e      	movs	r2, #30
 8000b98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
<<<<<<< HEAD
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	49af      	ldr	r1, [pc, #700]	; (8000e5c <fnInit+0x610>)
 8000ba0:	48af      	ldr	r0, [pc, #700]	; (8000e60 <fnInit+0x614>)
 8000ba2:	f004 fb09 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2204      	movs	r2, #4
 8000b92:	49af      	ldr	r1, [pc, #700]	; (8000e50 <fnInit+0x610>)
 8000b94:	48af      	ldr	r0, [pc, #700]	; (8000e54 <fnInit+0x614>)
 8000b96:	f004 fcfb 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000ba6:	e192      	b.n	8000ece <fnInit+0x682>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000ba8:	4bae      	ldr	r3, [pc, #696]	; (8000e64 <fnInit+0x618>)
 8000baa:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bae:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bb0:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <fnInit+0x618>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bb6:	4bac      	ldr	r3, [pc, #688]	; (8000e68 <fnInit+0x61c>)
 8000bb8:	2222      	movs	r2, #34	; 0x22
 8000bba:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000bbc:	4baa      	ldr	r3, [pc, #680]	; (8000e68 <fnInit+0x61c>)
 8000bbe:	2260      	movs	r2, #96	; 0x60
 8000bc0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bc2:	4ba9      	ldr	r3, [pc, #676]	; (8000e68 <fnInit+0x61c>)
 8000bc4:	2260      	movs	r2, #96	; 0x60
 8000bc6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bc8:	4ba7      	ldr	r3, [pc, #668]	; (8000e68 <fnInit+0x61c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000bce:	4ba6      	ldr	r3, [pc, #664]	; (8000e68 <fnInit+0x61c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bd4:	4ba4      	ldr	r3, [pc, #656]	; (8000e68 <fnInit+0x61c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bda:	4ba3      	ldr	r3, [pc, #652]	; (8000e68 <fnInit+0x61c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000be0:	4ba1      	ldr	r3, [pc, #644]	; (8000e68 <fnInit+0x61c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000be6:	4ba1      	ldr	r3, [pc, #644]	; (8000e6c <fnInit+0x620>)
 8000be8:	4a9f      	ldr	r2, [pc, #636]	; (8000e68 <fnInit+0x61c>)
 8000bea:	499e      	ldr	r1, [pc, #632]	; (8000e64 <fnInit+0x618>)
 8000bec:	48a0      	ldr	r0, [pc, #640]	; (8000e70 <fnInit+0x624>)
 8000bee:	f001 fb25 	bl	800223c <HAL_CAN_AddTxMessage>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <fnInit+0x3b6>
=======
 8000bda:	4ba1      	ldr	r3, [pc, #644]	; (8000e60 <fnInit+0x620>)
 8000bdc:	4a9f      	ldr	r2, [pc, #636]	; (8000e5c <fnInit+0x61c>)
 8000bde:	499e      	ldr	r1, [pc, #632]	; (8000e58 <fnInit+0x618>)
 8000be0:	48a0      	ldr	r0, [pc, #640]	; (8000e64 <fnInit+0x624>)
 8000be2:	f001 fd15 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <fnInit+0x3b6>
>>>>>>> main
			fnLEDsErrorState();
 8000bf8:	f7ff fe12 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000bfc:	f000 fd26 	bl	800164c <Error_Handler>
=======
 8000bf0:	f000 fed6 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000c00:	e165      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 40;
 8000c02:	4b95      	ldr	r3, [pc, #596]	; (8000e58 <fnInit+0x60c>)
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
<<<<<<< HEAD
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4999      	ldr	r1, [pc, #612]	; (8000e74 <fnInit+0x628>)
 8000c0e:	4894      	ldr	r0, [pc, #592]	; (8000e60 <fnInit+0x614>)
 8000c10:	f004 fad2 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4999      	ldr	r1, [pc, #612]	; (8000e68 <fnInit+0x628>)
 8000c02:	4894      	ldr	r0, [pc, #592]	; (8000e54 <fnInit+0x614>)
 8000c04:	f004 fcc4 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000c14:	e15b      	b.n	8000ece <fnInit+0x682>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c16:	4b93      	ldr	r3, [pc, #588]	; (8000e64 <fnInit+0x618>)
 8000c18:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c1c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c1e:	4b91      	ldr	r3, [pc, #580]	; (8000e64 <fnInit+0x618>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c24:	4b90      	ldr	r3, [pc, #576]	; (8000e68 <fnInit+0x61c>)
 8000c26:	2222      	movs	r2, #34	; 0x22
 8000c28:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000c2a:	4b8f      	ldr	r3, [pc, #572]	; (8000e68 <fnInit+0x61c>)
 8000c2c:	227a      	movs	r2, #122	; 0x7a
 8000c2e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c30:	4b8d      	ldr	r3, [pc, #564]	; (8000e68 <fnInit+0x61c>)
 8000c32:	2260      	movs	r2, #96	; 0x60
 8000c34:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c36:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <fnInit+0x61c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000c3c:	4b8a      	ldr	r3, [pc, #552]	; (8000e68 <fnInit+0x61c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <fnInit+0x61c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c48:	4b87      	ldr	r3, [pc, #540]	; (8000e68 <fnInit+0x61c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c4e:	4b86      	ldr	r3, [pc, #536]	; (8000e68 <fnInit+0x61c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000c54:	4b85      	ldr	r3, [pc, #532]	; (8000e6c <fnInit+0x620>)
 8000c56:	4a84      	ldr	r2, [pc, #528]	; (8000e68 <fnInit+0x61c>)
 8000c58:	4982      	ldr	r1, [pc, #520]	; (8000e64 <fnInit+0x618>)
 8000c5a:	4885      	ldr	r0, [pc, #532]	; (8000e70 <fnInit+0x624>)
 8000c5c:	f001 faee 	bl	800223c <HAL_CAN_AddTxMessage>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <fnInit+0x424>
=======
 8000c48:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <fnInit+0x620>)
 8000c4a:	4a84      	ldr	r2, [pc, #528]	; (8000e5c <fnInit+0x61c>)
 8000c4c:	4982      	ldr	r1, [pc, #520]	; (8000e58 <fnInit+0x618>)
 8000c4e:	4885      	ldr	r0, [pc, #532]	; (8000e64 <fnInit+0x624>)
 8000c50:	f001 fcde 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <fnInit+0x424>
>>>>>>> main
			fnLEDsErrorState();
 8000c66:	f7ff fddb 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000c6a:	f000 fcef 	bl	800164c <Error_Handler>
=======
 8000c5e:	f000 fe9f 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000c6e:	e12e      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 50;
 8000c70:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <fnInit+0x60c>)
 8000c72:	2232      	movs	r2, #50	; 0x32
 8000c74:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
<<<<<<< HEAD
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	2204      	movs	r2, #4
 8000c7a:	497f      	ldr	r1, [pc, #508]	; (8000e78 <fnInit+0x62c>)
 8000c7c:	4878      	ldr	r0, [pc, #480]	; (8000e60 <fnInit+0x614>)
 8000c7e:	f004 fa9b 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	497f      	ldr	r1, [pc, #508]	; (8000e6c <fnInit+0x62c>)
 8000c70:	4878      	ldr	r0, [pc, #480]	; (8000e54 <fnInit+0x614>)
 8000c72:	f004 fc8d 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000c82:	e124      	b.n	8000ece <fnInit+0x682>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <fnInit+0x618>)
 8000c86:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c8a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <fnInit+0x618>)
 8000c8e:	2208      	movs	r2, #8
 8000c90:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c92:	4b75      	ldr	r3, [pc, #468]	; (8000e68 <fnInit+0x61c>)
 8000c94:	2222      	movs	r2, #34	; 0x22
 8000c96:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c98:	4b73      	ldr	r3, [pc, #460]	; (8000e68 <fnInit+0x61c>)
 8000c9a:	2240      	movs	r2, #64	; 0x40
 8000c9c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c9e:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <fnInit+0x61c>)
 8000ca0:	2260      	movs	r2, #96	; 0x60
 8000ca2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ca4:	4b70      	ldr	r3, [pc, #448]	; (8000e68 <fnInit+0x61c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <fnInit+0x61c>)
 8000cac:	221f      	movs	r2, #31
 8000cae:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cb0:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <fnInit+0x61c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cb6:	4b6c      	ldr	r3, [pc, #432]	; (8000e68 <fnInit+0x61c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cbc:	4b6a      	ldr	r3, [pc, #424]	; (8000e68 <fnInit+0x61c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000cc2:	4b6a      	ldr	r3, [pc, #424]	; (8000e6c <fnInit+0x620>)
 8000cc4:	4a68      	ldr	r2, [pc, #416]	; (8000e68 <fnInit+0x61c>)
 8000cc6:	4967      	ldr	r1, [pc, #412]	; (8000e64 <fnInit+0x618>)
 8000cc8:	4869      	ldr	r0, [pc, #420]	; (8000e70 <fnInit+0x624>)
 8000cca:	f001 fab7 	bl	800223c <HAL_CAN_AddTxMessage>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <fnInit+0x492>
=======
 8000cb6:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <fnInit+0x620>)
 8000cb8:	4a68      	ldr	r2, [pc, #416]	; (8000e5c <fnInit+0x61c>)
 8000cba:	4967      	ldr	r1, [pc, #412]	; (8000e58 <fnInit+0x618>)
 8000cbc:	4869      	ldr	r0, [pc, #420]	; (8000e64 <fnInit+0x624>)
 8000cbe:	f001 fca7 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <fnInit+0x492>
>>>>>>> main
			fnLEDsErrorState();
 8000cd4:	f7ff fda4 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000cd8:	f000 fcb8 	bl	800164c <Error_Handler>
=======
 8000ccc:	f000 fe68 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 55;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000cdc:	e0f7      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 55;
 8000cde:	4b5e      	ldr	r3, [pc, #376]	; (8000e58 <fnInit+0x60c>)
 8000ce0:	2237      	movs	r2, #55	; 0x37
 8000ce2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
<<<<<<< HEAD
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4964      	ldr	r1, [pc, #400]	; (8000e7c <fnInit+0x630>)
 8000cea:	485d      	ldr	r0, [pc, #372]	; (8000e60 <fnInit+0x614>)
 8000cec:	f004 fa64 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4964      	ldr	r1, [pc, #400]	; (8000e70 <fnInit+0x630>)
 8000cde:	485d      	ldr	r0, [pc, #372]	; (8000e54 <fnInit+0x614>)
 8000ce0:	f004 fc56 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000cf0:	e0ed      	b.n	8000ece <fnInit+0x682>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000cf2:	4b5c      	ldr	r3, [pc, #368]	; (8000e64 <fnInit+0x618>)
 8000cf4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cf8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <fnInit+0x618>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d00:	4b59      	ldr	r3, [pc, #356]	; (8000e68 <fnInit+0x61c>)
 8000d02:	2240      	movs	r2, #64	; 0x40
 8000d04:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d06:	4b58      	ldr	r3, [pc, #352]	; (8000e68 <fnInit+0x61c>)
 8000d08:	2241      	movs	r2, #65	; 0x41
 8000d0a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d0c:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <fnInit+0x61c>)
 8000d0e:	2260      	movs	r2, #96	; 0x60
 8000d10:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d12:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <fnInit+0x61c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d18:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <fnInit+0x61c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <fnInit+0x61c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d24:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <fnInit+0x61c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d2a:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <fnInit+0x61c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <fnInit+0x620>)
 8000d32:	4a4d      	ldr	r2, [pc, #308]	; (8000e68 <fnInit+0x61c>)
 8000d34:	494b      	ldr	r1, [pc, #300]	; (8000e64 <fnInit+0x618>)
 8000d36:	484e      	ldr	r0, [pc, #312]	; (8000e70 <fnInit+0x624>)
 8000d38:	f001 fa80 	bl	800223c <HAL_CAN_AddTxMessage>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <fnInit+0x500>
=======
 8000d24:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <fnInit+0x620>)
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <fnInit+0x61c>)
 8000d28:	494b      	ldr	r1, [pc, #300]	; (8000e58 <fnInit+0x618>)
 8000d2a:	484e      	ldr	r0, [pc, #312]	; (8000e64 <fnInit+0x624>)
 8000d2c:	f001 fc70 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <fnInit+0x500>
>>>>>>> main
			fnLEDsErrorState();
 8000d42:	f7ff fd6d 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000d46:	f000 fc81 	bl	800164c <Error_Handler>
=======
 8000d3a:	f000 fe31 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
		}
		break;
 8000d4a:	e0bd      	b.n	8000ec8 <fnInit+0x67c>
		else if (RxData[5] & 0b10000) {
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <fnInit+0x634>)
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80b7 	beq.w	8000ec8 <fnInit+0x67c>
			iMachineStatus = 60;
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <fnInit+0x60c>)
 8000d5c:	223c      	movs	r2, #60	; 0x3c
 8000d5e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
<<<<<<< HEAD
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	2204      	movs	r2, #4
 8000d64:	4947      	ldr	r1, [pc, #284]	; (8000e84 <fnInit+0x638>)
 8000d66:	483e      	ldr	r0, [pc, #248]	; (8000e60 <fnInit+0x614>)
 8000d68:	f004 fa26 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	2204      	movs	r2, #4
 8000d58:	4947      	ldr	r1, [pc, #284]	; (8000e78 <fnInit+0x638>)
 8000d5a:	483e      	ldr	r0, [pc, #248]	; (8000e54 <fnInit+0x614>)
 8000d5c:	f004 fc18 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000d6c:	e0ac      	b.n	8000ec8 <fnInit+0x67c>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <fnInit+0x618>)
 8000d70:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d74:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <fnInit+0x618>)
 8000d78:	2208      	movs	r2, #8
 8000d7a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <fnInit+0x61c>)
 8000d7e:	2222      	movs	r2, #34	; 0x22
 8000d80:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <fnInit+0x61c>)
 8000d84:	2240      	movs	r2, #64	; 0x40
 8000d86:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d88:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <fnInit+0x61c>)
 8000d8a:	2260      	movs	r2, #96	; 0x60
 8000d8c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <fnInit+0x61c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <fnInit+0x61c>)
 8000d96:	220f      	movs	r2, #15
 8000d98:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d9a:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <fnInit+0x61c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <fnInit+0x61c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <fnInit+0x61c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <fnInit+0x620>)
 8000dae:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <fnInit+0x61c>)
 8000db0:	492c      	ldr	r1, [pc, #176]	; (8000e64 <fnInit+0x618>)
 8000db2:	482f      	ldr	r0, [pc, #188]	; (8000e70 <fnInit+0x624>)
 8000db4:	f001 fa42 	bl	800223c <HAL_CAN_AddTxMessage>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <fnInit+0x57c>
=======
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <fnInit+0x620>)
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <fnInit+0x61c>)
 8000da4:	492c      	ldr	r1, [pc, #176]	; (8000e58 <fnInit+0x618>)
 8000da6:	482f      	ldr	r0, [pc, #188]	; (8000e64 <fnInit+0x624>)
 8000da8:	f001 fc32 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <fnInit+0x57c>
>>>>>>> main
			fnLEDsErrorState();
 8000dbe:	f7ff fd2f 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000dc2:	f000 fc43 	bl	800164c <Error_Handler>
=======
 8000db6:	f000 fdf3 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000dc6:	e082      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 70;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <fnInit+0x60c>)
 8000dca:	2246      	movs	r2, #70	; 0x46
 8000dcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
<<<<<<< HEAD
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	492d      	ldr	r1, [pc, #180]	; (8000e88 <fnInit+0x63c>)
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <fnInit+0x614>)
 8000dd6:	f004 f9ef 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	492d      	ldr	r1, [pc, #180]	; (8000e7c <fnInit+0x63c>)
 8000dc8:	4822      	ldr	r0, [pc, #136]	; (8000e54 <fnInit+0x614>)
 8000dca:	f004 fbe1 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		break;
 8000dda:	e078      	b.n	8000ece <fnInit+0x682>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <fnInit+0x618>)
 8000dde:	f240 620a 	movw	r2, #1546	; 0x60a
 8000de2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <fnInit+0x618>)
 8000de6:	2208      	movs	r2, #8
 8000de8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <fnInit+0x61c>)
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <fnInit+0x61c>)
 8000df2:	2241      	movs	r2, #65	; 0x41
 8000df4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <fnInit+0x61c>)
 8000df8:	2260      	movs	r2, #96	; 0x60
 8000dfa:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <fnInit+0x61c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <fnInit+0x61c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <fnInit+0x61c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <fnInit+0x61c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <fnInit+0x61c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <fnInit+0x620>)
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <fnInit+0x61c>)
 8000e1e:	4911      	ldr	r1, [pc, #68]	; (8000e64 <fnInit+0x618>)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <fnInit+0x624>)
 8000e22:	f001 fa0b 	bl	800223c <HAL_CAN_AddTxMessage>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <fnInit+0x5ea>
=======
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <fnInit+0x620>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <fnInit+0x61c>)
 8000e12:	4911      	ldr	r1, [pc, #68]	; (8000e58 <fnInit+0x618>)
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <fnInit+0x624>)
 8000e16:	f001 fbfb 	bl	8002610 <HAL_CAN_AddTxMessage>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <fnInit+0x5ea>
>>>>>>> main
			fnLEDsErrorState();
 8000e2c:	f7ff fcf8 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000e30:	f000 fc0c 	bl	800164c <Error_Handler>
=======
 8000e24:	f000 fdbc 	bl	80019a0 <Error_Handler>
>>>>>>> main
		}
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000e34:	e04a      	b.n	8000ecc <fnInit+0x680>
		else if (RxData[5] & 0b00100) {
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <fnInit+0x634>)
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d044      	beq.n	8000ecc <fnInit+0x680>
			iMachineStatus = 80;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <fnInit+0x60c>)
 8000e44:	2250      	movs	r2, #80	; 0x50
 8000e46:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
<<<<<<< HEAD
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	490f      	ldr	r1, [pc, #60]	; (8000e8c <fnInit+0x640>)
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <fnInit+0x614>)
 8000e50:	f004 f9b2 	bl	80051b8 <HAL_UART_Transmit>
		break;
 8000e54:	e03a      	b.n	8000ecc <fnInit+0x680>
 8000e56:	bf00      	nop
 8000e58:	20000002 	.word	0x20000002
 8000e5c:	08006f0c 	.word	0x08006f0c
 8000e60:	20000230 	.word	0x20000230
 8000e64:	200000cc 	.word	0x200000cc
 8000e68:	200000e4 	.word	0x200000e4
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	200000a0 	.word	0x200000a0
 8000e74:	08006f14 	.word	0x08006f14
 8000e78:	08006f1c 	.word	0x08006f1c
 8000e7c:	08006f24 	.word	0x08006f24
 8000e80:	2000010c 	.word	0x2000010c
 8000e84:	08006f2c 	.word	0x08006f2c
 8000e88:	08006f34 	.word	0x08006f34
 8000e8c:	08006f3c 	.word	0x08006f3c
=======
 8000e3c:	2364      	movs	r3, #100	; 0x64
 8000e3e:	2204      	movs	r2, #4
 8000e40:	490f      	ldr	r1, [pc, #60]	; (8000e80 <fnInit+0x640>)
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <fnInit+0x614>)
 8000e44:	f004 fba4 	bl	8005590 <HAL_UART_Transmit>
		break;
 8000e48:	e03a      	b.n	8000ec0 <fnInit+0x680>
 8000e4a:	bf00      	nop
 8000e4c:	20000002 	.word	0x20000002
 8000e50:	080072e0 	.word	0x080072e0
 8000e54:	20000290 	.word	0x20000290
 8000e58:	2000012c 	.word	0x2000012c
 8000e5c:	200000dc 	.word	0x200000dc
 8000e60:	200000f4 	.word	0x200000f4
 8000e64:	200000b0 	.word	0x200000b0
 8000e68:	080072e8 	.word	0x080072e8
 8000e6c:	080072f0 	.word	0x080072f0
 8000e70:	080072f8 	.word	0x080072f8
 8000e74:	200000f8 	.word	0x200000f8
 8000e78:	08007300 	.word	0x08007300
 8000e7c:	08007308 	.word	0x08007308
 8000e80:	08007310 	.word	0x08007310
>>>>>>> main

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <fnInit+0x688>)
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	2b27      	cmp	r3, #39	; 0x27
 8000e96:	d112      	bne.n	8000ebe <fnInit+0x672>
			iMachineStatus = 1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <fnInit+0x68c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <fnInit+0x690>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
<<<<<<< HEAD
 8000ea4:	213c      	movs	r1, #60	; 0x3c
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <fnInit+0x694>)
 8000ea8:	f003 fdf0 	bl	8004a8c <HAL_TIM_Encoder_Start>
=======
 8000e98:	213c      	movs	r1, #60	; 0x3c
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <fnInit+0x694>)
 8000e9c:	f003 ffe2 	bl	8004e64 <HAL_TIM_Encoder_Start>
>>>>>>> main
			fnEncCalibration();
 8000eac:	f000 f872 	bl	8000f94 <fnEncCalibration>

			HAL_UART_Transmit(&huart3, "C080", 4, 100);
<<<<<<< HEAD
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	490b      	ldr	r1, [pc, #44]	; (8000ee4 <fnInit+0x698>)
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <fnInit+0x69c>)
 8000eb8:	f004 f97e 	bl	80051b8 <HAL_UART_Transmit>
=======
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	490b      	ldr	r1, [pc, #44]	; (8000ed8 <fnInit+0x698>)
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <fnInit+0x69c>)
 8000eac:	f004 fb70 	bl	8005590 <HAL_UART_Transmit>
>>>>>>> main
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000ebc:	e007      	b.n	8000ece <fnInit+0x682>
			fnLEDsErrorState();
 8000ebe:	f7ff fcaf 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 8000ec2:	f000 fbc3 	bl	800164c <Error_Handler>
=======
 8000eb6:	f000 fd73 	bl	80019a0 <Error_Handler>
>>>>>>> main
		break;
 8000ec6:	e002      	b.n	8000ece <fnInit+0x682>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e000      	b.n	8000ece <fnInit+0x682>
		break;
 8000ecc:	bf00      	nop
	}
}
<<<<<<< HEAD
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000010c 	.word	0x2000010c
 8000ed8:	20000002 	.word	0x20000002
 8000edc:	20000003 	.word	0x20000003
 8000ee0:	2000014c 	.word	0x2000014c
 8000ee4:	08006f44 	.word	0x08006f44
 8000ee8:	20000230 	.word	0x20000230
=======
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000f8 	.word	0x200000f8
 8000ecc:	20000002 	.word	0x20000002
 8000ed0:	20000003 	.word	0x20000003
 8000ed4:	200001ac 	.word	0x200001ac
 8000ed8:	08007318 	.word	0x08007318
 8000edc:	20000290 	.word	0x20000290
>>>>>>> main

08000eec <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <fnEncCounts2Angle+0x3c>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <fnEncCounts2Angle+0x40>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <fnEncCounts2Angle+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
}
<<<<<<< HEAD
 8000f18:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000144 	.word	0x20000144
=======
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200000ac 	.word	0x200000ac
>>>>>>> main

08000f30 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <fnEncReadCount+0x54>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <fnEncReadCount+0x58>)
 8000f3e:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <fnEncReadCount+0x58>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d208      	bcs.n	8000f62 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8000f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <fnEncReadCount+0x58>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <fnEncReadCount+0x5c>)
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	e003      	b.n	8000f6a <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <fnEncReadCount+0x58>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <fnEncReadCount+0x5c>)
 8000f68:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <fnEncReadCount+0x5c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffbc 	bl	8000eec <fnEncCounts2Angle>
 8000f74:	eef0 7a40 	vmov.f32	s15, s0
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <fnEncReadCount+0x60>)
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
}
<<<<<<< HEAD
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000014c 	.word	0x2000014c
 8000f88:	2000013c 	.word	0x2000013c
 8000f8c:	2000013e 	.word	0x2000013e
 8000f90:	20000140 	.word	0x20000140
=======
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001ac 	.word	0x200001ac
 8000f7c:	200000a4 	.word	0x200000a4
 8000f80:	200000a6 	.word	0x200000a6
 8000f84:	200000a8 	.word	0x200000a8
>>>>>>> main

08000f94 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <fnEncCalibration+0x14>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 8000f9e:	f7ff ffc7 	bl	8000f30 <fnEncReadCount>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40000400 	.word	0x40000400

08000fac <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b5a      	cmp	r3, #90	; 0x5a
 8000fbc:	d901      	bls.n	8000fc2 <fnMoveAbsolute+0x16>
		iNumber = 90;
 8000fbe:	235a      	movs	r3, #90	; 0x5a
 8000fc0:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

<<<<<<< HEAD
	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <fnMoveAbsolute+0xc4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e00e      	b.n	8000ffc <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <fnMoveAbsolute+0xc4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d107      	bne.n	8000ff8 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <fnMoveAbsolute+0xc8>)
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e001      	b.n	8000ffc <fnMoveAbsolute+0x50>
	}
=======
	iNumber = iNumber * 1000;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	607b      	str	r3, [r7, #4]

	TxHeader.StdId = 0x60A;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <fnMoveAbsolute+0x8c>)
 8000fc0:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fc4:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <fnMoveAbsolute+0x8c>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	611a      	str	r2, [r3, #16]
	TxData[0] = 0x22;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <fnMoveAbsolute+0x90>)
 8000fce:	2222      	movs	r2, #34	; 0x22
 8000fd0:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x7A;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <fnMoveAbsolute+0x90>)
 8000fd4:	227a      	movs	r2, #122	; 0x7a
 8000fd6:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x60;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <fnMoveAbsolute+0x90>)
 8000fda:	2260      	movs	r2, #96	; 0x60
 8000fdc:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <fnMoveAbsolute+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) iNumber;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <fnMoveAbsolute+0x90>)
 8000fea:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)(iNumber >> 8);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <fnMoveAbsolute+0x90>)
 8000ff4:	715a      	strb	r2, [r3, #5]
	TxData[6] = (uint8_t)(iNumber >> 16);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0c1b      	lsrs	r3, r3, #16
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <fnMoveAbsolute+0x90>)
 8000ffe:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t)(iNumber >> 24);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	0e1b      	lsrs	r3, r3, #24
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <fnMoveAbsolute+0x90>)
 8001008:	71da      	strb	r2, [r3, #7]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <fnMoveAbsolute+0x94>)
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <fnMoveAbsolute+0x90>)
 800100e:	4907      	ldr	r1, [pc, #28]	; (800102c <fnMoveAbsolute+0x8c>)
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <fnMoveAbsolute+0x98>)
 8001012:	f001 fafd 	bl	8002610 <HAL_CAN_AddTxMessage>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <fnMoveAbsolute+0x84>
		fnLEDsErrorState();
 800101c:	f7ff fbfa 	bl	8000814 <fnLEDsErrorState>
		Error_Handler();
 8001020:	f000 fcbe 	bl	80019a0 <Error_Handler>
	}

}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000012c 	.word	0x2000012c
 8001030:	200000dc 	.word	0x200000dc
 8001034:	200000f4 	.word	0x200000f4
 8001038:	200000b0 	.word	0x200000b0
>>>>>>> main

	else
		iMoveEnabled = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d132      	bne.n	8001068 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <fnMoveAbsolute+0xcc>)
 8001004:	f240 620a 	movw	r2, #1546	; 0x60a
 8001008:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <fnMoveAbsolute+0xcc>)
 800100c:	2208      	movs	r2, #8
 800100e:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <fnMoveAbsolute+0xd0>)
 8001012:	2222      	movs	r2, #34	; 0x22
 8001014:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <fnMoveAbsolute+0xd0>)
 8001018:	227a      	movs	r2, #122	; 0x7a
 800101a:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <fnMoveAbsolute+0xd0>)
 800101e:	2260      	movs	r2, #96	; 0x60
 8001020:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <fnMoveAbsolute+0xd0>)
 8001024:	2200      	movs	r2, #0
 8001026:	70da      	strb	r2, [r3, #3]
			TxData[4] = (uint8_t) iNumber;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <fnMoveAbsolute+0xd0>)
 800102e:	711a      	strb	r2, [r3, #4]
			TxData[5] = (uint8_t)(iNumber >> 8);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <fnMoveAbsolute+0xd0>)
 8001038:	715a      	strb	r2, [r3, #5]
			TxData[6] = (uint8_t)(iNumber >> 16);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0c1b      	lsrs	r3, r3, #16
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <fnMoveAbsolute+0xd0>)
 8001042:	719a      	strb	r2, [r3, #6]
			TxData[7] = (uint8_t)(iNumber >> 24);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	0e1b      	lsrs	r3, r3, #24
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <fnMoveAbsolute+0xd0>)
 800104c:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <fnMoveAbsolute+0xd4>)
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <fnMoveAbsolute+0xd0>)
 8001052:	4909      	ldr	r1, [pc, #36]	; (8001078 <fnMoveAbsolute+0xcc>)
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <fnMoveAbsolute+0xd8>)
 8001056:	f001 f8f1 	bl	800223c <HAL_CAN_AddTxMessage>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <fnMoveAbsolute+0xbc>
				fnLEDsErrorState();
 8001060:	f7ff fbde 	bl	8000820 <fnLEDsErrorState>
				Error_Handler();
 8001064:	f000 faf2 	bl	800164c <Error_Handler>
			}

	}
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000001 	.word	0x20000001
 8001074:	fffffc18 	.word	0xfffffc18
 8001078:	200000cc 	.word	0x200000cc
 800107c:	200000e4 	.word	0x200000e4
 8001080:	200000ec 	.word	0x200000ec
 8001084:	200000a0 	.word	0x200000a0

08001088 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	switch (iSingleMachineStatus){
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <fnSingleMotionAction+0xfc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b1e      	cmp	r3, #30
 8001092:	d040      	beq.n	8001116 <fnSingleMotionAction+0x8e>
 8001094:	2b1e      	cmp	r3, #30
 8001096:	dc72      	bgt.n	800117e <fnSingleMotionAction+0xf6>
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d002      	beq.n	80010a2 <fnSingleMotionAction+0x1a>
 800109c:	2b14      	cmp	r3, #20
 800109e:	d031      	beq.n	8001104 <fnSingleMotionAction+0x7c>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
		}
		break;
	}
}
 80010a0:	e06d      	b.n	800117e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <fnSingleMotionAction+0x100>)
 80010a4:	f240 620a 	movw	r2, #1546	; 0x60a
 80010a8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <fnSingleMotionAction+0x100>)
 80010ac:	2208      	movs	r2, #8
 80010ae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <fnSingleMotionAction+0x104>)
 80010b2:	2222      	movs	r2, #34	; 0x22
 80010b4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <fnSingleMotionAction+0x104>)
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <fnSingleMotionAction+0x104>)
 80010be:	2260      	movs	r2, #96	; 0x60
 80010c0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <fnSingleMotionAction+0x104>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <fnSingleMotionAction+0x104>)
 80010ca:	221f      	movs	r2, #31
 80010cc:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <fnSingleMotionAction+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <fnSingleMotionAction+0x104>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <fnSingleMotionAction+0x104>)
 80010dc:	2200      	movs	r2, #0
 80010de:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <fnSingleMotionAction+0x108>)
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <fnSingleMotionAction+0x104>)
 80010e4:	4928      	ldr	r1, [pc, #160]	; (8001188 <fnSingleMotionAction+0x100>)
 80010e6:	482b      	ldr	r0, [pc, #172]	; (8001194 <fnSingleMotionAction+0x10c>)
 80010e8:	f001 f8a8 	bl	800223c <HAL_CAN_AddTxMessage>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <fnSingleMotionAction+0x74>
=======
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <fnSingleMotionAction+0x108>)
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <fnSingleMotionAction+0x104>)
 8001098:	4928      	ldr	r1, [pc, #160]	; (800113c <fnSingleMotionAction+0x100>)
 800109a:	482b      	ldr	r0, [pc, #172]	; (8001148 <fnSingleMotionAction+0x10c>)
 800109c:	f001 fab8 	bl	8002610 <HAL_CAN_AddTxMessage>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <fnSingleMotionAction+0x74>
>>>>>>> main
			fnLEDsErrorState();
 80010f2:	f7ff fb95 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 80010f6:	f000 faa9 	bl	800164c <Error_Handler>
=======
 80010aa:	f000 fc79 	bl	80019a0 <Error_Handler>
>>>>>>> main
		break;
 80010fa:	e040      	b.n	800117e <fnSingleMotionAction+0xf6>
			iSingleMachineStatus = 20;
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <fnSingleMotionAction+0xfc>)
 80010fe:	2214      	movs	r2, #20
 8001100:	701a      	strb	r2, [r3, #0]
		break;
 8001102:	e03c      	b.n	800117e <fnSingleMotionAction+0xf6>
		fnMoveAbsolute(iPosition);
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <fnSingleMotionAction+0x110>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff4f 	bl	8000fac <fnMoveAbsolute>
		iSingleMachineStatus = 30;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <fnSingleMotionAction+0xfc>)
 8001110:	221e      	movs	r2, #30
 8001112:	701a      	strb	r2, [r3, #0]
		break;
 8001114:	e033      	b.n	800117e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <fnSingleMotionAction+0x100>)
 8001118:	f240 620a 	movw	r2, #1546	; 0x60a
 800111c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <fnSingleMotionAction+0x100>)
 8001120:	2208      	movs	r2, #8
 8001122:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <fnSingleMotionAction+0x104>)
 8001126:	2222      	movs	r2, #34	; 0x22
 8001128:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <fnSingleMotionAction+0x104>)
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <fnSingleMotionAction+0x104>)
 8001132:	2260      	movs	r2, #96	; 0x60
 8001134:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <fnSingleMotionAction+0x104>)
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <fnSingleMotionAction+0x104>)
 800113e:	220f      	movs	r2, #15
 8001140:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <fnSingleMotionAction+0x104>)
 8001144:	2200      	movs	r2, #0
 8001146:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <fnSingleMotionAction+0x104>)
 800114a:	2200      	movs	r2, #0
 800114c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <fnSingleMotionAction+0x104>)
 8001150:	2200      	movs	r2, #0
 8001152:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
<<<<<<< HEAD
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <fnSingleMotionAction+0x108>)
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <fnSingleMotionAction+0x104>)
 8001158:	490b      	ldr	r1, [pc, #44]	; (8001188 <fnSingleMotionAction+0x100>)
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <fnSingleMotionAction+0x10c>)
 800115c:	f001 f86e 	bl	800223c <HAL_CAN_AddTxMessage>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <fnSingleMotionAction+0xe8>
=======
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <fnSingleMotionAction+0x108>)
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <fnSingleMotionAction+0x104>)
 800110c:	490b      	ldr	r1, [pc, #44]	; (800113c <fnSingleMotionAction+0x100>)
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <fnSingleMotionAction+0x10c>)
 8001110:	f001 fa7e 	bl	8002610 <HAL_CAN_AddTxMessage>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <fnSingleMotionAction+0xe8>
>>>>>>> main
			fnLEDsErrorState();
 8001166:	f7ff fb5b 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
<<<<<<< HEAD
 800116a:	f000 fa6f 	bl	800164c <Error_Handler>
=======
 800111e:	f000 fc3f 	bl	80019a0 <Error_Handler>
>>>>>>> main
		break;
 800116e:	e005      	b.n	800117c <fnSingleMotionAction+0xf4>
			iSingleMachineStatus = 100;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <fnSingleMotionAction+0xfc>)
 8001172:	2264      	movs	r2, #100	; 0x64
 8001174:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
<<<<<<< HEAD
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <fnSingleMotionAction+0x114>)
 8001178:	f003 fbb2 	bl	80048e0 <HAL_TIM_Base_Stop_IT>
=======
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <fnSingleMotionAction+0x114>)
 800112c:	f003 fdc4 	bl	8004cb8 <HAL_TIM_Base_Stop_IT>
>>>>>>> main
		break;
 800117c:	bf00      	nop
}
<<<<<<< HEAD
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000004 	.word	0x20000004
 8001188:	200000cc 	.word	0x200000cc
 800118c:	200000e4 	.word	0x200000e4
 8001190:	200000ec 	.word	0x200000ec
 8001194:	200000a0 	.word	0x200000a0
 8001198:	20000148 	.word	0x20000148
 800119c:	200001e4 	.word	0x200001e4

080011a0 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000004 	.word	0x20000004
 800113c:	2000012c 	.word	0x2000012c
 8001140:	200000dc 	.word	0x200000dc
 8001144:	200000f4 	.word	0x200000f4
 8001148:	200000b0 	.word	0x200000b0
 800114c:	200000d8 	.word	0x200000d8
 8001150:	20000244 	.word	0x20000244

08001154 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	switch (iSerialMachineStatus){
 8001158:	4bad      	ldr	r3, [pc, #692]	; (8001410 <fnSerialMotionAction+0x2bc>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3b0a      	subs	r3, #10
 800115e:	2b1e      	cmp	r3, #30
 8001160:	f200 8153 	bhi.w	800140a <fnSerialMotionAction+0x2b6>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <fnSerialMotionAction+0x18>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	080011e9 	.word	0x080011e9
 8001170:	0800140b 	.word	0x0800140b
 8001174:	0800140b 	.word	0x0800140b
 8001178:	0800140b 	.word	0x0800140b
 800117c:	0800140b 	.word	0x0800140b
 8001180:	0800140b 	.word	0x0800140b
 8001184:	0800140b 	.word	0x0800140b
 8001188:	0800140b 	.word	0x0800140b
 800118c:	0800140b 	.word	0x0800140b
 8001190:	0800140b 	.word	0x0800140b
 8001194:	0800124b 	.word	0x0800124b
 8001198:	0800140b 	.word	0x0800140b
 800119c:	0800140b 	.word	0x0800140b
 80011a0:	0800140b 	.word	0x0800140b
 80011a4:	0800140b 	.word	0x0800140b
 80011a8:	0800125d 	.word	0x0800125d
 80011ac:	0800140b 	.word	0x0800140b
 80011b0:	0800140b 	.word	0x0800140b
 80011b4:	0800140b 	.word	0x0800140b
 80011b8:	0800140b 	.word	0x0800140b
 80011bc:	080012cd 	.word	0x080012cd
 80011c0:	0800140b 	.word	0x0800140b
 80011c4:	0800140b 	.word	0x0800140b
 80011c8:	0800140b 	.word	0x0800140b
 80011cc:	0800140b 	.word	0x0800140b
 80011d0:	0800132f 	.word	0x0800132f
 80011d4:	0800140b 	.word	0x0800140b
 80011d8:	0800140b 	.word	0x0800140b
 80011dc:	0800140b 	.word	0x0800140b
 80011e0:	0800140b 	.word	0x0800140b
 80011e4:	080013a9 	.word	0x080013a9
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 80011e8:	4b8a      	ldr	r3, [pc, #552]	; (8001414 <fnSerialMotionAction+0x2c0>)
 80011ea:	f240 620a 	movw	r2, #1546	; 0x60a
 80011ee:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80011f0:	4b88      	ldr	r3, [pc, #544]	; (8001414 <fnSerialMotionAction+0x2c0>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80011f8:	2222      	movs	r2, #34	; 0x22
 80011fa:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80011fc:	4b86      	ldr	r3, [pc, #536]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001204:	2260      	movs	r2, #96	; 0x60
 8001206:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001208:	4b83      	ldr	r3, [pc, #524]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800120a:	2200      	movs	r2, #0
 800120c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001210:	221f      	movs	r2, #31
 8001212:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001214:	4b80      	ldr	r3, [pc, #512]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001216:	2200      	movs	r2, #0
 8001218:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800121a:	4b7f      	ldr	r3, [pc, #508]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800121c:	2200      	movs	r2, #0
 800121e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001220:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001222:	2200      	movs	r2, #0
 8001224:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001226:	4b7d      	ldr	r3, [pc, #500]	; (800141c <fnSerialMotionAction+0x2c8>)
 8001228:	4a7b      	ldr	r2, [pc, #492]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800122a:	497a      	ldr	r1, [pc, #488]	; (8001414 <fnSerialMotionAction+0x2c0>)
 800122c:	487c      	ldr	r0, [pc, #496]	; (8001420 <fnSerialMotionAction+0x2cc>)
 800122e:	f001 f9ef 	bl	8002610 <HAL_CAN_AddTxMessage>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <fnSerialMotionAction+0xee>
			fnLEDsErrorState();
 8001238:	f7ff faec 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 800123c:	f000 fbb0 	bl	80019a0 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 8001240:	e0e3      	b.n	800140a <fnSerialMotionAction+0x2b6>
			iSerialMachineStatus = 20;
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <fnSerialMotionAction+0x2bc>)
 8001244:	2214      	movs	r2, #20
 8001246:	701a      	strb	r2, [r3, #0]
		break;
 8001248:	e0df      	b.n	800140a <fnSerialMotionAction+0x2b6>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <fnSerialMotionAction+0x2d0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fea6 	bl	8000fa0 <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 8001254:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <fnSerialMotionAction+0x2bc>)
 8001256:	2219      	movs	r2, #25
 8001258:	701a      	strb	r2, [r3, #0]
		break;
 800125a:	e0d6      	b.n	800140a <fnSerialMotionAction+0x2b6>

	case 25://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 800125c:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <fnSerialMotionAction+0x2c0>)
 800125e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001262:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <fnSerialMotionAction+0x2c0>)
 8001266:	2208      	movs	r2, #8
 8001268:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800126a:	4b6b      	ldr	r3, [pc, #428]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800126c:	2240      	movs	r2, #64	; 0x40
 800126e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001272:	2241      	movs	r2, #65	; 0x41
 8001274:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001276:	4b68      	ldr	r3, [pc, #416]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001278:	2260      	movs	r2, #96	; 0x60
 800127a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800127e:	2200      	movs	r2, #0
 8001280:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001282:	4b65      	ldr	r3, [pc, #404]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001284:	2200      	movs	r2, #0
 8001286:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001288:	4b63      	ldr	r3, [pc, #396]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001290:	2200      	movs	r2, #0
 8001292:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <fnSerialMotionAction+0x2c8>)
 800129c:	4a5e      	ldr	r2, [pc, #376]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800129e:	495d      	ldr	r1, [pc, #372]	; (8001414 <fnSerialMotionAction+0x2c0>)
 80012a0:	485f      	ldr	r0, [pc, #380]	; (8001420 <fnSerialMotionAction+0x2cc>)
 80012a2:	f001 f9b5 	bl	8002610 <HAL_CAN_AddTxMessage>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <fnSerialMotionAction+0x162>
			fnLEDsErrorState();
 80012ac:	f7ff fab2 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80012b0:	f000 fb76 	bl	80019a0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 80012b4:	e0a6      	b.n	8001404 <fnSerialMotionAction+0x2b0>
		else if (RxData[5] & 0b10000) {
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <fnSerialMotionAction+0x2d4>)
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80a0 	beq.w	8001404 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 30;
 80012c4:	4b52      	ldr	r3, [pc, #328]	; (8001410 <fnSerialMotionAction+0x2bc>)
 80012c6:	221e      	movs	r2, #30
 80012c8:	701a      	strb	r2, [r3, #0]
		break;
 80012ca:	e09b      	b.n	8001404 <fnSerialMotionAction+0x2b0>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 80012cc:	4b51      	ldr	r3, [pc, #324]	; (8001414 <fnSerialMotionAction+0x2c0>)
 80012ce:	f240 620a 	movw	r2, #1546	; 0x60a
 80012d2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <fnSerialMotionAction+0x2c0>)
 80012d6:	2208      	movs	r2, #8
 80012d8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80012dc:	2222      	movs	r2, #34	; 0x22
 80012de:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80012e0:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80012e2:	2240      	movs	r2, #64	; 0x40
 80012e4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80012e6:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80012e8:	2260      	movs	r2, #96	; 0x60
 80012ea:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80012f4:	220f      	movs	r2, #15
 80012f6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <fnSerialMotionAction+0x2c4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80012fe:	4b46      	ldr	r3, [pc, #280]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001300:	2200      	movs	r2, #0
 8001302:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001304:	4b44      	ldr	r3, [pc, #272]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001306:	2200      	movs	r2, #0
 8001308:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <fnSerialMotionAction+0x2c8>)
 800130c:	4a42      	ldr	r2, [pc, #264]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800130e:	4941      	ldr	r1, [pc, #260]	; (8001414 <fnSerialMotionAction+0x2c0>)
 8001310:	4843      	ldr	r0, [pc, #268]	; (8001420 <fnSerialMotionAction+0x2cc>)
 8001312:	f001 f97d 	bl	8002610 <HAL_CAN_AddTxMessage>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <fnSerialMotionAction+0x1d2>
			fnLEDsErrorState();
 800131c:	f7ff fa7a 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8001320:	f000 fb3e 	bl	80019a0 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 8001324:	e071      	b.n	800140a <fnSerialMotionAction+0x2b6>
			iSerialMachineStatus = 35;
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <fnSerialMotionAction+0x2bc>)
 8001328:	2223      	movs	r2, #35	; 0x23
 800132a:	701a      	strb	r2, [r3, #0]
		break;
 800132c:	e06d      	b.n	800140a <fnSerialMotionAction+0x2b6>

	case 35://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <fnSerialMotionAction+0x2c0>)
 8001330:	f240 620a 	movw	r2, #1546	; 0x60a
 8001334:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001336:	4b37      	ldr	r3, [pc, #220]	; (8001414 <fnSerialMotionAction+0x2c0>)
 8001338:	2208      	movs	r2, #8
 800133a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001344:	2241      	movs	r2, #65	; 0x41
 8001346:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800134a:	2260      	movs	r2, #96	; 0x60
 800134c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001350:	2200      	movs	r2, #0
 8001352:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001356:	2200      	movs	r2, #0
 8001358:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <fnSerialMotionAction+0x2c4>)
 800135c:	2200      	movs	r2, #0
 800135e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001362:	2200      	movs	r2, #0
 8001364:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001368:	2200      	movs	r2, #0
 800136a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <fnSerialMotionAction+0x2c8>)
 800136e:	4a2a      	ldr	r2, [pc, #168]	; (8001418 <fnSerialMotionAction+0x2c4>)
 8001370:	4928      	ldr	r1, [pc, #160]	; (8001414 <fnSerialMotionAction+0x2c0>)
 8001372:	482b      	ldr	r0, [pc, #172]	; (8001420 <fnSerialMotionAction+0x2cc>)
 8001374:	f001 f94c 	bl	8002610 <HAL_CAN_AddTxMessage>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <fnSerialMotionAction+0x234>
			fnLEDsErrorState();
 800137e:	f7ff fa49 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8001382:	f000 fb0d 	bl	80019a0 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 8001386:	e03f      	b.n	8001408 <fnSerialMotionAction+0x2b4>
		else if (RxData[5] & 0b00100) {
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <fnSerialMotionAction+0x2d4>)
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d039      	beq.n	8001408 <fnSerialMotionAction+0x2b4>
			iSerialCounter++;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <fnSerialMotionAction+0x2d8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <fnSerialMotionAction+0x2d8>)
 800139e:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <fnSerialMotionAction+0x2bc>)
 80013a2:	2228      	movs	r2, #40	; 0x28
 80013a4:	701a      	strb	r2, [r3, #0]
		break;
 80013a6:	e02f      	b.n	8001408 <fnSerialMotionAction+0x2b4>

	case 40://REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <fnSerialMotionAction+0x2d8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <fnSerialMotionAction+0x2dc>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d10f      	bne.n	80013d8 <fnSerialMotionAction+0x284>
			iSerialCounter = 0;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <fnSerialMotionAction+0x2d8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 100;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <fnSerialMotionAction+0x2bc>)
 80013c0:	2264      	movs	r2, #100	; 0x64
 80013c2:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <fnSerialMotionAction+0x2e0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <fnSerialMotionAction+0x2dc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 80013d0:	4819      	ldr	r0, [pc, #100]	; (8001438 <fnSerialMotionAction+0x2e4>)
 80013d2:	f003 fbd2 	bl	8004b7a <HAL_TIM_Base_Stop>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 80013d6:	e018      	b.n	800140a <fnSerialMotionAction+0x2b6>
		else if (iSerialCounter % 2 == 0) {
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <fnSerialMotionAction+0x2d8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d107      	bne.n	80013f6 <fnSerialMotionAction+0x2a2>
			iPosition = iSerialRange;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <fnSerialMotionAction+0x2e0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <fnSerialMotionAction+0x2d0>)
 80013ec:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <fnSerialMotionAction+0x2bc>)
 80013f0:	220a      	movs	r2, #10
 80013f2:	701a      	strb	r2, [r3, #0]
		break;
 80013f4:	e009      	b.n	800140a <fnSerialMotionAction+0x2b6>
			iPosition = 0;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <fnSerialMotionAction+0x2d0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <fnSerialMotionAction+0x2bc>)
 80013fe:	220a      	movs	r2, #10
 8001400:	701a      	strb	r2, [r3, #0]
		break;
 8001402:	e002      	b.n	800140a <fnSerialMotionAction+0x2b6>
		break;
 8001404:	bf00      	nop
 8001406:	e000      	b.n	800140a <fnSerialMotionAction+0x2b6>
		break;
 8001408:	bf00      	nop
	}
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000005 	.word	0x20000005
 8001414:	2000012c 	.word	0x2000012c
 8001418:	200000dc 	.word	0x200000dc
 800141c:	200000f4 	.word	0x200000f4
 8001420:	200000b0 	.word	0x200000b0
 8001424:	200000d8 	.word	0x200000d8
 8001428:	200000f8 	.word	0x200000f8
 800142c:	2000000c 	.word	0x2000000c
 8001430:	20000014 	.word	0x20000014
 8001434:	20000010 	.word	0x20000010
 8001438:	20000160 	.word	0x20000160

0800143c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> main
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
<<<<<<< HEAD
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d116      	bne.n	80011e0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if (iHomingStatus != 1) {
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d006      	beq.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 80011ba:	f7ff fb47 	bl	800084c <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011be:	2101      	movs	r1, #1
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011c2:	f001 ffe6 	bl	8003192 <HAL_GPIO_TogglePin>
=======
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d116      	bne.n	800147c <HAL_TIM_PeriodElapsedCallback+0x40>
		if (iHomingStatus != 1) {
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d006      	beq.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 8001456:	f7ff f9f3 	bl	8000840 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800145a:	2101      	movs	r1, #1
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800145e:	f002 f882 	bl	8003566 <HAL_GPIO_TogglePin>
>>>>>>> main
	}
	else if(htim -> Instance == TIM10){
		fnSerialMotionAction();
	}

}
<<<<<<< HEAD
 80011c6:	e012      	b.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80011c8:	213c      	movs	r1, #60	; 0x3c
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011cc:	f003 fc5e 	bl	8004a8c <HAL_TIM_Encoder_Start>
			fnEncReadCount();
 80011d0:	f7ff feae 	bl	8000f30 <fnEncReadCount>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011da:	f001 ffc1 	bl	8003160 <HAL_GPIO_WritePin>
}
 80011de:	e006      	b.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim -> Instance == TIM7){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x4e>
		fnSingleMotionAction();
 80011ea:	f7ff ff4d 	bl	8001088 <fnSingleMotionAction>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40001000 	.word	0x40001000
 80011fc:	20000003 	.word	0x20000003
 8001200:	40020400 	.word	0x40020400
 8001204:	2000014c 	.word	0x2000014c
 8001208:	40001400 	.word	0x40001400

0800120c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800121c:	d129      	bne.n	8001272 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_GPIO_EXTI_Callback+0x70>)
 8001220:	f240 620a 	movw	r2, #1546	; 0x60a
 8001224:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_GPIO_EXTI_Callback+0x70>)
 8001228:	2208      	movs	r2, #8
 800122a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 8001234:	2241      	movs	r2, #65	; 0x41
 8001236:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 800123a:	2260      	movs	r2, #96	; 0x60
 800123c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_GPIO_EXTI_Callback+0x78>)
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_GPIO_EXTI_Callback+0x74>)
 8001260:	4906      	ldr	r1, [pc, #24]	; (800127c <HAL_GPIO_EXTI_Callback+0x70>)
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001264:	f000 ffea 	bl	800223c <HAL_CAN_AddTxMessage>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 800126e:	f000 f9ed 	bl	800164c <Error_Handler>
=======
 8001462:	e01a      	b.n	800149a <HAL_TIM_PeriodElapsedCallback+0x5e>
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001464:	213c      	movs	r1, #60	; 0x3c
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001468:	f003 fcfc 	bl	8004e64 <HAL_TIM_Encoder_Start>
			fnEncReadCount();
 800146c:	f7ff fd5a 	bl	8000f24 <fnEncReadCount>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2101      	movs	r1, #1
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001476:	f002 f85d 	bl	8003534 <HAL_GPIO_WritePin>
}
 800147a:	e00e      	b.n	800149a <HAL_TIM_PeriodElapsedCallback+0x5e>
	else if(htim -> Instance == TIM7){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d102      	bne.n	800148c <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 8001486:	f7ff fdd9 	bl	800103c <fnSingleMotionAction>
}
 800148a:	e006      	b.n	800149a <HAL_TIM_PeriodElapsedCallback+0x5e>
	else if(htim -> Instance == TIM10){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_TIM_PeriodElapsedCallback+0x5e>
		fnSerialMotionAction();
 8001496:	f7ff fe5d 	bl	8001154 <fnSerialMotionAction>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40001000 	.word	0x40001000
 80014a8:	20000003 	.word	0x20000003
 80014ac:	40020400 	.word	0x40020400
 80014b0:	200001ac 	.word	0x200001ac
 80014b4:	40001400 	.word	0x40001400
 80014b8:	40014400 	.word	0x40014400

080014bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014cc:	d129      	bne.n	8001522 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_GPIO_EXTI_Callback+0x70>)
 80014d0:	f240 620a 	movw	r2, #1546	; 0x60a
 80014d4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_GPIO_EXTI_Callback+0x70>)
 80014d8:	2208      	movs	r2, #8
 80014da:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 80014e4:	2241      	movs	r2, #65	; 0x41
 80014e6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 80014ea:	2260      	movs	r2, #96	; 0x60
 80014ec:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_GPIO_EXTI_Callback+0x78>)
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_GPIO_EXTI_Callback+0x74>)
 8001510:	4906      	ldr	r1, [pc, #24]	; (800152c <HAL_GPIO_EXTI_Callback+0x70>)
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001514:	f001 f87c 	bl	8002610 <HAL_CAN_AddTxMessage>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 800151e:	f000 fa3f 	bl	80019a0 <Error_Handler>
>>>>>>> main

		//// ENCODER CALIBRATION - BASE
		//		fnEncCalibration();

	}
}
<<<<<<< HEAD
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000cc 	.word	0x200000cc
 8001280:	200000e4 	.word	0x200000e4
 8001284:	200000ec 	.word	0x200000ec
 8001288:	200000a0 	.word	0x200000a0

0800128c <main>:
=======
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000012c 	.word	0x2000012c
 8001530:	200000dc 	.word	0x200000dc
 8001534:	200000f4 	.word	0x200000f4
 8001538:	200000b0 	.word	0x200000b0

0800153c <main>:
>>>>>>> main
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
<<<<<<< HEAD
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
=======
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
>>>>>>> main
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
<<<<<<< HEAD
 8001290:	f000 fd1e 	bl	8001cd0 <HAL_Init>
=======
 8001540:	f000 fdb9 	bl	80020b6 <HAL_Init>
>>>>>>> main
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
<<<<<<< HEAD
 8001294:	f000 f85c 	bl	8001350 <SystemClock_Config>
=======
 8001544:	f000 f85e 	bl	8001604 <SystemClock_Config>
>>>>>>> main
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
<<<<<<< HEAD
 8001298:	f7ff f9d4 	bl	8000644 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800129c:	f000 fbe8 	bl	8001a70 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80012a0:	f000 fc62 	bl	8001b68 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 80012a4:	f7ff f94a 	bl	800053c <MX_CAN1_Init>
	MX_TIM6_Init();
 80012a8:	f000 fac6 	bl	8001838 <MX_TIM6_Init>
	MX_TIM3_Init();
 80012ac:	f000 fa6e 	bl	800178c <MX_TIM3_Init>
	MX_TIM7_Init();
 80012b0:	f000 fafa 	bl	80018a8 <MX_TIM7_Init>
=======
 8001548:	f7ff f876 	bl	8000638 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800154c:	f000 fc84 	bl	8001e58 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001550:	f000 fcfe 	bl	8001f50 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001554:	f7fe ffec 	bl	8000530 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001558:	f000 fb22 	bl	8001ba0 <MX_TIM6_Init>
	MX_TIM3_Init();
 800155c:	f000 faca 	bl	8001af4 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001560:	f000 fb56 	bl	8001c10 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001564:	f000 fb8c 	bl	8001c80 <MX_TIM10_Init>
>>>>>>> main
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
<<<<<<< HEAD
 80012b4:	2204      	movs	r2, #4
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <main+0xb0>)
 80012b8:	4821      	ldr	r0, [pc, #132]	; (8001340 <main+0xb4>)
 80012ba:	f004 f810 	bl	80052de <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <main+0xb8>)
 80012c0:	f000 ff78 	bl	80021b4 <HAL_CAN_Start>
=======
 8001568:	2204      	movs	r2, #4
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <main+0xb4>)
 800156c:	4821      	ldr	r0, [pc, #132]	; (80015f4 <main+0xb8>)
 800156e:	f004 f8a2 	bl	80056b6 <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8001572:	4821      	ldr	r0, [pc, #132]	; (80015f8 <main+0xbc>)
 8001574:	f001 f808 	bl	8002588 <HAL_CAN_Start>
>>>>>>> main

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
<<<<<<< HEAD
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <main+0xbc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <main+0xbc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <main+0xbc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <main+0xbc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <main+0xbc>)
 80012de:	2202      	movs	r2, #2
 80012e0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <main+0xbc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <main+0xc0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <main+0xc0>)
 80012f0:	2212      	movs	r2, #18
 80012f2:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <main+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <main+0xc0>)
 80012fc:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001300:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <main+0xc0>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <main+0xc0>)
 800130a:	f24b 1240 	movw	r2, #45376	; 0xb140
 800130e:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <main+0xc0>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <main+0xc0>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <main+0xc0>)
 800131e:	2201      	movs	r2, #1
 8001320:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <main+0xc0>)
 8001324:	2214      	movs	r2, #20
 8001326:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001328:	4908      	ldr	r1, [pc, #32]	; (800134c <main+0xc0>)
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <main+0xb8>)
 800132c:	f000 fe56 	bl	8001fdc <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001330:	2102      	movs	r1, #2
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <main+0xb8>)
 8001334:	f001 f96f 	bl	8002616 <HAL_CAN_ActivateNotification>
=======
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <main+0xc0>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <main+0xc0>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <main+0xc0>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <main+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <main+0xc0>)
 8001592:	2202      	movs	r2, #2
 8001594:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <main+0xc0>)
 8001598:	2200      	movs	r2, #0
 800159a:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <main+0xc4>)
 800159e:	2201      	movs	r2, #1
 80015a0:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <main+0xc4>)
 80015a4:	2212      	movs	r2, #18
 80015a6:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <main+0xc4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <main+0xc4>)
 80015b0:	f24b 1240 	movw	r2, #45376	; 0xb140
 80015b4:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <main+0xc4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <main+0xc4>)
 80015be:	f24b 1240 	movw	r2, #45376	; 0xb140
 80015c2:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <main+0xc4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <main+0xc4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <main+0xc4>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <main+0xc4>)
 80015d8:	2214      	movs	r2, #20
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 80015dc:	4908      	ldr	r1, [pc, #32]	; (8001600 <main+0xc4>)
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <main+0xbc>)
 80015e0:	f000 fee6 	bl	80023b0 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80015e4:	2102      	movs	r1, #2
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <main+0xbc>)
 80015e8:	f001 f9ff 	bl	80029ea <HAL_CAN_ActivateNotification>
>>>>>>> main

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
<<<<<<< HEAD
 8001338:	e7fe      	b.n	8001338 <main+0xac>
 800133a:	bf00      	nop
 800133c:	200000c8 	.word	0x200000c8
 8001340:	20000230 	.word	0x20000230
 8001344:	200000a0 	.word	0x200000a0
 8001348:	200000cc 	.word	0x200000cc
 800134c:	20000114 	.word	0x20000114

08001350 <SystemClock_Config>:
=======
 80015ec:	e7fe      	b.n	80015ec <main+0xb0>
 80015ee:	bf00      	nop
 80015f0:	20000100 	.word	0x20000100
 80015f4:	20000290 	.word	0x20000290
 80015f8:	200000b0 	.word	0x200000b0
 80015fc:	2000012c 	.word	0x2000012c
 8001600:	20000104 	.word	0x20000104

08001604 <SystemClock_Config>:
>>>>>>> main
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b8      	sub	sp, #224	; 0xe0
 8001354:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800135a:	2234      	movs	r2, #52	; 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fd10 	bl	8006d84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2290      	movs	r2, #144	; 0x90
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f005 fd01 	bl	8006d84 <memset>
=======
 8001604:	b580      	push	{r7, lr}
 8001606:	b0b8      	sub	sp, #224	; 0xe0
 8001608:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800160e:	2234      	movs	r2, #52	; 0x34
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fda0 	bl	8007158 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	2290      	movs	r2, #144	; 0x90
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f005 fd91 	bl	8007158 <memset>
>>>>>>> main

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
<<<<<<< HEAD
 8001382:	f002 f881 	bl	8003488 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <SystemClock_Config+0x128>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <SystemClock_Config+0x128>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <SystemClock_Config+0x128>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <SystemClock_Config+0x12c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a6:	4a35      	ldr	r2, [pc, #212]	; (800147c <SystemClock_Config+0x12c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <SystemClock_Config+0x12c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
=======
 8001636:	f002 f911 	bl	800385c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <SystemClock_Config+0x128>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a3b      	ldr	r2, [pc, #236]	; (800172c <SystemClock_Config+0x128>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b39      	ldr	r3, [pc, #228]	; (800172c <SystemClock_Config+0x128>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <SystemClock_Config+0x12c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800165a:	4a35      	ldr	r2, [pc, #212]	; (8001730 <SystemClock_Config+0x12c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <SystemClock_Config+0x12c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
>>>>>>> main
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80013ba:	2301      	movs	r3, #1
 80013bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80013d6:	2304      	movs	r3, #4
 80013d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 f8a5 	bl	8003548 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001404:	f000 f922 	bl	800164c <Error_Handler>
=======
 800166e:	2301      	movs	r3, #1
 8001670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 800168a:	2304      	movs	r3, #4
 800168c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001690:	2360      	movs	r3, #96	; 0x60
 8001692:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800169c:	2304      	movs	r3, #4
 800169e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 f935 	bl	800391c <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xb8>
	{
		Error_Handler();
 80016b8:	f000 f972 	bl	80019a0 <Error_Handler>
>>>>>>> main
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< HEAD
 8001408:	f002 f84e 	bl	80034a8 <HAL_PWREx_EnableOverDrive>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001412:	f000 f91b 	bl	800164c <Error_Handler>
=======
 80016bc:	f002 f8de 	bl	800387c <HAL_PWREx_EnableOverDrive>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80016c6:	f000 f96b 	bl	80019a0 <Error_Handler>
>>>>>>> main
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001416:	230f      	movs	r3, #15
 8001418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001436:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800143a:	2103      	movs	r1, #3
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fb31 	bl	8003aa4 <HAL_RCC_ClockConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001448:	f000 f900 	bl	800164c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SystemClock_Config+0x130>)
 800144e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001450:	2300      	movs	r3, #0
 8001452:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fd46 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x11e>
	{
		Error_Handler();
 800146a:	f000 f8ef 	bl	800164c <Error_Handler>
	}
}
 800146e:	bf00      	nop
 8001470:	37e0      	adds	r7, #224	; 0xe0
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	00200100 	.word	0x00200100

08001484 <HAL_UART_RxCpltCallback>:
=======
 80016ca:	230f      	movs	r3, #15
 80016cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016ee:	2103      	movs	r1, #3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fbc1 	bl	8003e78 <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 80016fc:	f000 f950 	bl	80019a0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <SystemClock_Config+0x130>)
 8001702:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001704:	2300      	movs	r3, #0
 8001706:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fdb2 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 800171e:	f000 f93f 	bl	80019a0 <Error_Handler>
	}
}
 8001722:	bf00      	nop
 8001724:	37e0      	adds	r7, #224	; 0xe0
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	00200100 	.word	0x00200100

08001738 <HAL_UART_RxCpltCallback>:
>>>>>>> main

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
<<<<<<< HEAD
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <HAL_UART_RxCpltCallback+0x148>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f040 808b 	bne.w	80015ae <HAL_UART_RxCpltCallback+0x12a>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001498:	2204      	movs	r2, #4
 800149a:	494d      	ldr	r1, [pc, #308]	; (80015d0 <HAL_UART_RxCpltCallback+0x14c>)
 800149c:	484d      	ldr	r0, [pc, #308]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 800149e:	f005 fc79 	bl	8006d94 <strncmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_UART_RxCpltCallback+0x154>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 80014ae:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HAL_UART_RxCpltCallback+0x158>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80014b4:	484a      	ldr	r0, [pc, #296]	; (80015e0 <HAL_UART_RxCpltCallback+0x15c>)
 80014b6:	f003 f99b 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 80014ba:	e07e      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
=======
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a72      	ldr	r2, [pc, #456]	; (8001910 <HAL_UART_RxCpltCallback+0x1d8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	f040 80d3 	bne.w	80018f2 <HAL_UART_RxCpltCallback+0x1ba>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 800174c:	2204      	movs	r2, #4
 800174e:	4971      	ldr	r1, [pc, #452]	; (8001914 <HAL_UART_RxCpltCallback+0x1dc>)
 8001750:	4871      	ldr	r0, [pc, #452]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 8001752:	f005 fd09 	bl	8007168 <strncmp>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 800175c:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_UART_RxCpltCallback+0x1e4>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8001762:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_UART_RxCpltCallback+0x1e8>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001768:	486e      	ldr	r0, [pc, #440]	; (8001924 <HAL_UART_RxCpltCallback+0x1ec>)
 800176a:	f003 fa2d 	bl	8004bc8 <HAL_TIM_Base_Start_IT>
 800176e:	e0c6      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
>>>>>>> main
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
<<<<<<< HEAD
 80014bc:	2204      	movs	r2, #4
 80014be:	4949      	ldr	r1, [pc, #292]	; (80015e4 <HAL_UART_RxCpltCallback+0x160>)
 80014c0:	4844      	ldr	r0, [pc, #272]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 80014c2:	f005 fc67 	bl	8006d94 <strncmp>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 80014cc:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_UART_RxCpltCallback+0x164>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4845      	ldr	r0, [pc, #276]	; (80015ec <HAL_UART_RxCpltCallback+0x168>)
 80014d6:	f001 fe5c 	bl	8003192 <HAL_GPIO_TogglePin>
 80014da:	e06e      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 80014dc:	2204      	movs	r2, #4
 80014de:	4944      	ldr	r1, [pc, #272]	; (80015f0 <HAL_UART_RxCpltCallback+0x16c>)
 80014e0:	483c      	ldr	r0, [pc, #240]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 80014e2:	f005 fc57 	bl	8006d94 <strncmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 80014ec:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <HAL_UART_RxCpltCallback+0x164>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	483d      	ldr	r0, [pc, #244]	; (80015ec <HAL_UART_RxCpltCallback+0x168>)
 80014f6:	f001 fe4c 	bl	8003192 <HAL_GPIO_TogglePin>
 80014fa:	e05e      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
=======
 8001770:	2204      	movs	r2, #4
 8001772:	496d      	ldr	r1, [pc, #436]	; (8001928 <HAL_UART_RxCpltCallback+0x1f0>)
 8001774:	4868      	ldr	r0, [pc, #416]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 8001776:	f005 fcf7 	bl	8007168 <strncmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_UART_RxCpltCallback+0x1f4>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001786:	2101      	movs	r1, #1
 8001788:	4869      	ldr	r0, [pc, #420]	; (8001930 <HAL_UART_RxCpltCallback+0x1f8>)
 800178a:	f001 feec 	bl	8003566 <HAL_GPIO_TogglePin>
 800178e:	e0b6      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 8001790:	2204      	movs	r2, #4
 8001792:	4968      	ldr	r1, [pc, #416]	; (8001934 <HAL_UART_RxCpltCallback+0x1fc>)
 8001794:	4860      	ldr	r0, [pc, #384]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 8001796:	f005 fce7 	bl	8007168 <strncmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_UART_RxCpltCallback+0x1f4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	4861      	ldr	r0, [pc, #388]	; (8001930 <HAL_UART_RxCpltCallback+0x1f8>)
 80017aa:	f001 fedc 	bl	8003566 <HAL_GPIO_TogglePin>
 80017ae:	e0a6      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
>>>>>>> main
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
<<<<<<< HEAD
 80014fc:	2204      	movs	r2, #4
 80014fe:	493d      	ldr	r1, [pc, #244]	; (80015f4 <HAL_UART_RxCpltCallback+0x170>)
 8001500:	4834      	ldr	r0, [pc, #208]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 8001502:	f005 fc47 	bl	8006d94 <strncmp>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_UART_RxCpltCallback+0x98>
			iSelected_leg = 0;
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_UART_RxCpltCallback+0x174>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001512:	2101      	movs	r1, #1
 8001514:	4835      	ldr	r0, [pc, #212]	; (80015ec <HAL_UART_RxCpltCallback+0x168>)
 8001516:	f001 fe3c 	bl	8003192 <HAL_GPIO_TogglePin>
 800151a:	e04e      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 800151c:	2204      	movs	r2, #4
 800151e:	4937      	ldr	r1, [pc, #220]	; (80015fc <HAL_UART_RxCpltCallback+0x178>)
 8001520:	482c      	ldr	r0, [pc, #176]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 8001522:	f005 fc37 	bl	8006d94 <strncmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_UART_RxCpltCallback+0xb8>
			iSelected_leg = 1;
 800152c:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <HAL_UART_RxCpltCallback+0x174>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <HAL_UART_RxCpltCallback+0x168>)
 8001536:	f001 fe2c 	bl	8003192 <HAL_GPIO_TogglePin>
 800153a:	e03e      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	2b50      	cmp	r3, #80	; 0x50
 8001542:	d112      	bne.n	800156a <HAL_UART_RxCpltCallback+0xe6>

			if(iMode == 0){
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_UART_RxCpltCallback+0x164>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d135      	bne.n	80015ba <HAL_UART_RxCpltCallback+0x136>
				iPosition = (uint32_t)(atoi(sUserMessage));
 800154e:	4821      	ldr	r0, [pc, #132]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 8001550:	f005 fbea 	bl	8006d28 <atoi>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_UART_RxCpltCallback+0x17c>)
 800155a:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_UART_RxCpltCallback+0x180>)
 800155e:	220a      	movs	r2, #10
 8001560:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001562:	4829      	ldr	r0, [pc, #164]	; (8001608 <HAL_UART_RxCpltCallback+0x184>)
 8001564:	f003 f944 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 8001568:	e027      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
=======
 80017b0:	2204      	movs	r2, #4
 80017b2:	4961      	ldr	r1, [pc, #388]	; (8001938 <HAL_UART_RxCpltCallback+0x200>)
 80017b4:	4858      	ldr	r0, [pc, #352]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 80017b6:	f005 fcd7 	bl	8007168 <strncmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_UART_RxCpltCallback+0x98>
			iSelected_leg = 0;
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <HAL_UART_RxCpltCallback+0x204>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80017c6:	2101      	movs	r1, #1
 80017c8:	4859      	ldr	r0, [pc, #356]	; (8001930 <HAL_UART_RxCpltCallback+0x1f8>)
 80017ca:	f001 fecc 	bl	8003566 <HAL_GPIO_TogglePin>
 80017ce:	e096      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 80017d0:	2204      	movs	r2, #4
 80017d2:	495b      	ldr	r1, [pc, #364]	; (8001940 <HAL_UART_RxCpltCallback+0x208>)
 80017d4:	4850      	ldr	r0, [pc, #320]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 80017d6:	f005 fcc7 	bl	8007168 <strncmp>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_UART_RxCpltCallback+0xb8>
			iSelected_leg = 1;
 80017e0:	4b56      	ldr	r3, [pc, #344]	; (800193c <HAL_UART_RxCpltCallback+0x204>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	4851      	ldr	r0, [pc, #324]	; (8001930 <HAL_UART_RxCpltCallback+0x1f8>)
 80017ea:	f001 febc 	bl	8003566 <HAL_GPIO_TogglePin>
 80017ee:	e086      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
		}
		else if (strncmp(sUserMessage, sMoveCommand,4) == 0) {
 80017f0:	2204      	movs	r2, #4
 80017f2:	4954      	ldr	r1, [pc, #336]	; (8001944 <HAL_UART_RxCpltCallback+0x20c>)
 80017f4:	4848      	ldr	r0, [pc, #288]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 80017f6:	f005 fcb7 	bl	8007168 <strncmp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12c      	bne.n	800185a <HAL_UART_RxCpltCallback+0x122>
			TxHeader.StdId = 0x60A;
 8001800:	4b51      	ldr	r3, [pc, #324]	; (8001948 <HAL_UART_RxCpltCallback+0x210>)
 8001802:	f240 620a 	movw	r2, #1546	; 0x60a
 8001806:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_UART_RxCpltCallback+0x210>)
 800180a:	2208      	movs	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001810:	2222      	movs	r2, #34	; 0x22
 8001812:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 800181c:	2260      	movs	r2, #96	; 0x60
 800181e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001822:	2200      	movs	r2, #0
 8001824:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x1F;
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001828:	221f      	movs	r2, #31
 800182a:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 800182c:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 800182e:	2200      	movs	r2, #0
 8001830:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001834:	2200      	movs	r2, #0
 8001836:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001838:	4b44      	ldr	r3, [pc, #272]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 800183a:	2200      	movs	r2, #0
 800183c:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800183e:	4b44      	ldr	r3, [pc, #272]	; (8001950 <HAL_UART_RxCpltCallback+0x218>)
 8001840:	4a42      	ldr	r2, [pc, #264]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001842:	4941      	ldr	r1, [pc, #260]	; (8001948 <HAL_UART_RxCpltCallback+0x210>)
 8001844:	4843      	ldr	r0, [pc, #268]	; (8001954 <HAL_UART_RxCpltCallback+0x21c>)
 8001846:	f000 fee3 	bl	8002610 <HAL_CAN_AddTxMessage>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d056      	beq.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
				fnLEDsErrorState();
 8001850:	f7fe ffe0 	bl	8000814 <fnLEDsErrorState>
				Error_Handler();
 8001854:	f000 f8a4 	bl	80019a0 <Error_Handler>
 8001858:	e051      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
			}
		}
		else if (strncmp(sUserMessage, sStopCommand,4) == 0) {
 800185a:	2204      	movs	r2, #4
 800185c:	493e      	ldr	r1, [pc, #248]	; (8001958 <HAL_UART_RxCpltCallback+0x220>)
 800185e:	482e      	ldr	r0, [pc, #184]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 8001860:	f005 fc82 	bl	8007168 <strncmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d12c      	bne.n	80018c4 <HAL_UART_RxCpltCallback+0x18c>
			TxHeader.StdId = 0x60A;
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_UART_RxCpltCallback+0x210>)
 800186c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001870:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_UART_RxCpltCallback+0x210>)
 8001874:	2208      	movs	r2, #8
 8001876:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 800187a:	2222      	movs	r2, #34	; 0x22
 800187c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001880:	2240      	movs	r2, #64	; 0x40
 8001882:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001886:	2260      	movs	r2, #96	; 0x60
 8001888:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 800188c:	2200      	movs	r2, #0
 800188e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001892:	220f      	movs	r2, #15
 8001894:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 8001898:	2200      	movs	r2, #0
 800189a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 800189e:	2200      	movs	r2, #0
 80018a0:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_UART_RxCpltCallback+0x218>)
 80018aa:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_UART_RxCpltCallback+0x214>)
 80018ac:	4926      	ldr	r1, [pc, #152]	; (8001948 <HAL_UART_RxCpltCallback+0x210>)
 80018ae:	4829      	ldr	r0, [pc, #164]	; (8001954 <HAL_UART_RxCpltCallback+0x21c>)
 80018b0:	f000 feae 	bl	8002610 <HAL_CAN_AddTxMessage>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d021      	beq.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
				fnLEDsErrorState();
 80018ba:	f7fe ffab 	bl	8000814 <fnLEDsErrorState>
				Error_Handler();
 80018be:	f000 f86f 	bl	80019a0 <Error_Handler>
 80018c2:	e01c      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
			}
		}
		else if(sUserMessage[3] == 'P'){
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 80018c6:	78db      	ldrb	r3, [r3, #3]
 80018c8:	2b50      	cmp	r3, #80	; 0x50
 80018ca:	d118      	bne.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>

			if(iMode == 0){
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_UART_RxCpltCallback+0x1f4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d113      	bne.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
				iPosition = (uint32_t)(atoi(sUserMessage));
 80018d6:	4810      	ldr	r0, [pc, #64]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 80018d8:	f005 fc10 	bl	80070fc <atoi>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_UART_RxCpltCallback+0x224>)
 80018e2:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_UART_RxCpltCallback+0x228>)
 80018e6:	220a      	movs	r2, #10
 80018e8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 80018ea:	481e      	ldr	r0, [pc, #120]	; (8001964 <HAL_UART_RxCpltCallback+0x22c>)
 80018ec:	f003 f96c 	bl	8004bc8 <HAL_TIM_Base_Start_IT>
 80018f0:	e005      	b.n	80018fe <HAL_UART_RxCpltCallback+0x1c6>
>>>>>>> main

			}
		}

		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	2b4e      	cmp	r3, #78	; 0x4e
 8001570:	d10c      	bne.n	800158c <HAL_UART_RxCpltCallback+0x108>
			if(iMode == 1){
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_UART_RxCpltCallback+0x164>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d11e      	bne.n	80015ba <HAL_UART_RxCpltCallback+0x136>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 800157c:	4815      	ldr	r0, [pc, #84]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 800157e:	f005 fbd3 	bl	8006d28 <atoi>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_UART_RxCpltCallback+0x188>)
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e016      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 800158e:	78db      	ldrb	r3, [r3, #3]
 8001590:	2b52      	cmp	r3, #82	; 0x52
 8001592:	d112      	bne.n	80015ba <HAL_UART_RxCpltCallback+0x136>
			if(iMode == 1){
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_UART_RxCpltCallback+0x164>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10d      	bne.n	80015ba <HAL_UART_RxCpltCallback+0x136>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 80015a0:	f005 fbc2 	bl	8006d28 <atoi>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_UART_RxCpltCallback+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e005      	b.n	80015ba <HAL_UART_RxCpltCallback+0x136>



	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
<<<<<<< HEAD
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	220c      	movs	r2, #12
 80015b2:	4918      	ldr	r1, [pc, #96]	; (8001614 <HAL_UART_RxCpltCallback+0x190>)
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <HAL_UART_RxCpltCallback+0x194>)
 80015b6:	f003 fdff 	bl	80051b8 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80015ba:	2204      	movs	r2, #4
 80015bc:	4905      	ldr	r1, [pc, #20]	; (80015d4 <HAL_UART_RxCpltCallback+0x150>)
 80015be:	4816      	ldr	r0, [pc, #88]	; (8001618 <HAL_UART_RxCpltCallback+0x194>)
 80015c0:	f003 fe8d 	bl	80052de <HAL_UART_Receive_IT>
=======
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	220c      	movs	r2, #12
 80018f6:	491c      	ldr	r1, [pc, #112]	; (8001968 <HAL_UART_RxCpltCallback+0x230>)
 80018f8:	481c      	ldr	r0, [pc, #112]	; (800196c <HAL_UART_RxCpltCallback+0x234>)
 80018fa:	f003 fe49 	bl	8005590 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80018fe:	2204      	movs	r2, #4
 8001900:	4905      	ldr	r1, [pc, #20]	; (8001918 <HAL_UART_RxCpltCallback+0x1e0>)
 8001902:	481a      	ldr	r0, [pc, #104]	; (800196c <HAL_UART_RxCpltCallback+0x234>)
 8001904:	f003 fed7 	bl	80056b6 <HAL_UART_Receive_IT>
>>>>>>> main
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
<<<<<<< HEAD
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004800 	.word	0x40004800
 80015d0:	08006f4c 	.word	0x08006f4c
 80015d4:	200000c8 	.word	0x200000c8
 80015d8:	20000002 	.word	0x20000002
 80015dc:	20000003 	.word	0x20000003
 80015e0:	20000198 	.word	0x20000198
 80015e4:	08006f64 	.word	0x08006f64
 80015e8:	20000000 	.word	0x20000000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	08006f6c 	.word	0x08006f6c
 80015f4:	08006f7c 	.word	0x08006f7c
 80015f8:	20000001 	.word	0x20000001
 80015fc:	08006f74 	.word	0x08006f74
 8001600:	20000148 	.word	0x20000148
 8001604:	20000004 	.word	0x20000004
 8001608:	200001e4 	.word	0x200001e4
 800160c:	20000010 	.word	0x20000010
 8001610:	2000000c 	.word	0x2000000c
 8001614:	08006f54 	.word	0x08006f54
 8001618:	20000230 	.word	0x20000230

0800161c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fee1 	bl	80023f2 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001634:	f001 fdad 	bl	8003192 <HAL_GPIO_TogglePin>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000010c 	.word	0x2000010c
 8001644:	200000f0 	.word	0x200000f0
 8001648:	40020400 	.word	0x40020400

0800164c <Error_Handler>:
=======
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40004800 	.word	0x40004800
 8001914:	08007320 	.word	0x08007320
 8001918:	20000100 	.word	0x20000100
 800191c:	20000002 	.word	0x20000002
 8001920:	20000003 	.word	0x20000003
 8001924:	200001f8 	.word	0x200001f8
 8001928:	08007348 	.word	0x08007348
 800192c:	20000000 	.word	0x20000000
 8001930:	40020400 	.word	0x40020400
 8001934:	08007350 	.word	0x08007350
 8001938:	08007360 	.word	0x08007360
 800193c:	20000001 	.word	0x20000001
 8001940:	08007358 	.word	0x08007358
 8001944:	08007338 	.word	0x08007338
 8001948:	2000012c 	.word	0x2000012c
 800194c:	200000dc 	.word	0x200000dc
 8001950:	200000f4 	.word	0x200000f4
 8001954:	200000b0 	.word	0x200000b0
 8001958:	08007340 	.word	0x08007340
 800195c:	200000d8 	.word	0x200000d8
 8001960:	20000004 	.word	0x20000004
 8001964:	20000244 	.word	0x20000244
 8001968:	08007328 	.word	0x08007328
 800196c:	20000290 	.word	0x20000290

08001970 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 ff21 	bl	80027c6 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001988:	f001 fded 	bl	8003566 <HAL_GPIO_TogglePin>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200000f8 	.word	0x200000f8
 8001998:	20000144 	.word	0x20000144
 800199c:	40020400 	.word	0x40020400

080019a0 <Error_Handler>:
>>>>>>> main
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
<<<<<<< HEAD
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
=======
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
>>>>>>> main
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
=======
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
>>>>>>> main
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <HAL_MspInit>:
=======
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
>>>>>>> main
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
=======
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_MspInit+0x44>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_MspInit+0x44>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x44>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x44>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x44>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
=======
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
>>>>>>> main
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <NMI_Handler>:
=======
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <NMI_Handler>:
>>>>>>> main
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
=======
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:
=======
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
=======
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:
=======
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:
>>>>>>> main

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
=======
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:
=======
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
=======
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:
=======
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
=======
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:
=======
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:
>>>>>>> main

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
=======
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:
=======
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:
>>>>>>> main

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
=======
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:
=======
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:
>>>>>>> main

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
=======
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:
=======
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:
>>>>>>> main

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
=======
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80016ec:	f000 fb36 	bl	8001d5c <HAL_IncTick>
=======
 8001a40:	f000 fb76 	bl	8002130 <HAL_IncTick>
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <CAN1_RX0_IRQHandler>:
=======
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <CAN1_RX0_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
=======
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <CAN1_RX0_IRQHandler+0x10>)
 80016fa:	f000 ffb2 	bl	8002662 <HAL_CAN_IRQHandler>
=======
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <CAN1_RX0_IRQHandler+0x10>)
 8001a4e:	f000 fff2 	bl	8002a36 <HAL_CAN_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000a0 	.word	0x200000a0

08001708 <TIM3_IRQHandler>:
=======
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000b0 	.word	0x200000b0

08001a5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a62:	f003 fa8d 	bl	8004f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000160 	.word	0x20000160

08001a70 <TIM3_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
=======
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <TIM3_IRQHandler+0x10>)
 800170e:	f003 fa4b 	bl	8004ba8 <HAL_TIM_IRQHandler>
=======
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM3_IRQHandler+0x10>)
 8001a76:	f003 fa83 	bl	8004f80 <HAL_TIM_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000014c 	.word	0x2000014c

0800171c <USART3_IRQHandler>:
=======
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001ac 	.word	0x200001ac

08001a84 <USART3_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< HEAD
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
=======
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< HEAD
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <USART3_IRQHandler+0x10>)
 8001722:	f003 fe2b 	bl	800537c <HAL_UART_IRQHandler>
=======
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART3_IRQHandler+0x10>)
 8001a8a:	f003 fe63 	bl	8005754 <HAL_UART_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< HEAD
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000230 	.word	0x20000230

08001730 <EXTI15_10_IRQHandler>:
=======
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000290 	.word	0x20000290

08001a98 <EXTI15_10_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
=======
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
<<<<<<< HEAD
 8001734:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001738:	f001 fd46 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001a9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aa0:	f001 fd7c 	bl	800359c <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <TIM6_DAC_IRQHandler>:
=======
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM6_DAC_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< HEAD
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
=======
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM6_DAC_IRQHandler+0x10>)
 8001746:	f003 fa2f 	bl	8004ba8 <HAL_TIM_IRQHandler>
=======
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM6_DAC_IRQHandler+0x10>)
 8001aae:	f003 fa67 	bl	8004f80 <HAL_TIM_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< HEAD
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000198 	.word	0x20000198

08001754 <TIM7_IRQHandler>:
=======
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001f8 	.word	0x200001f8

08001abc <TIM7_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< HEAD
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
=======
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< HEAD
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <TIM7_IRQHandler+0x10>)
 800175a:	f003 fa25 	bl	8004ba8 <HAL_TIM_IRQHandler>
=======
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM7_IRQHandler+0x10>)
 8001ac2:	f003 fa5d 	bl	8004f80 <HAL_TIM_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
<<<<<<< HEAD
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001e4 	.word	0x200001e4

08001768 <SystemInit>:
=======
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000244 	.word	0x20000244

08001ad0 <SystemInit>:
>>>>>>> main
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> main

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
=======
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <MX_TIM3_Init>:
>>>>>>> main
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
=======
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	2224      	movs	r2, #36	; 0x24
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f005 faf2 	bl	8006d84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
=======
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	2224      	movs	r2, #36	; 0x24
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 fb28 	bl	8007158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
>>>>>>> main

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <MX_TIM3_Init+0xa8>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017d8:	2301      	movs	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <MX_TIM3_Init+0xa4>)
 80017fc:	f003 f8a0 	bl	8004940 <HAL_TIM_Encoder_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001806:	f7ff ff21 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_TIM3_Init+0xa4>)
 8001818:	f003 fbd4 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001822:	f7ff ff13 	bl	800164c <Error_Handler>
=======
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <MX_TIM3_Init+0xa8>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b40:	2301      	movs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b50:	2301      	movs	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b64:	f003 f8d8 	bl	8004d18 <HAL_TIM_Encoder_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b6e:	f7ff ff17 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM3_Init+0xa4>)
 8001b80:	f003 fc0c 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b8a:	f7ff ff09 	bl	80019a0 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 8001826:	bf00      	nop
 8001828:	3730      	adds	r7, #48	; 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000014c 	.word	0x2000014c
 8001834:	40000400 	.word	0x40000400

08001838 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
=======
 8001b8e:	bf00      	nop
 8001b90:	3730      	adds	r7, #48	; 0x30
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200001ac 	.word	0x200001ac
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
=======
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
>>>>>>> main

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
<<<<<<< HEAD
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_TIM6_Init+0x68>)
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <MX_TIM6_Init+0x6c>)
 800184c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_TIM6_Init+0x68>)
 8001850:	f242 527f 	movw	r2, #9599	; 0x257f
 8001854:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_TIM6_Init+0x68>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_TIM6_Init+0x68>)
 800185e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001862:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_TIM6_Init+0x68>)
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_TIM6_Init+0x68>)
 800186c:	f002 ff68 	bl	8004740 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001876:	f7ff fee9 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_TIM6_Init+0x68>)
 8001888:	f003 fb9c 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001892:	f7ff fedb 	bl	800164c <Error_Handler>
=======
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <MX_TIM6_Init+0x6c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bb8:	f242 527f 	movw	r2, #9599	; 0x257f
 8001bbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bc6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bd4:	f002 ff7a 	bl	8004acc <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001bde:	f7ff fedf 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bf0:	f003 fbd4 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001bfa:	f7ff fed1 	bl	80019a0 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
<<<<<<< HEAD
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000198 	.word	0x20000198
 80018a4:	40001000 	.word	0x40001000

080018a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
=======
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001f8 	.word	0x200001f8
 8001c0c:	40001000 	.word	0x40001000

08001c10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
=======
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
>>>>>>> main

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
<<<<<<< HEAD
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM7_Init+0x68>)
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <MX_TIM7_Init+0x6c>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_TIM7_Init+0x68>)
 80018c0:	f242 527f 	movw	r2, #9599	; 0x257f
 80018c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_TIM7_Init+0x68>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_TIM7_Init+0x68>)
 80018ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80018d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM7_Init+0x68>)
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM7_Init+0x68>)
 80018dc:	f002 ff30 	bl	8004740 <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80018e6:	f7ff feb1 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_TIM7_Init+0x68>)
 80018f8:	f003 fb64 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001902:	f7ff fea3 	bl	800164c <Error_Handler>
=======
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <MX_TIM7_Init+0x6c>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c28:	f242 527f 	movw	r2, #9599	; 0x257f
 8001c2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c36:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c42:	480d      	ldr	r0, [pc, #52]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c44:	f002 ff42 	bl	8004acc <HAL_TIM_Base_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001c4e:	f7ff fea7 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4806      	ldr	r0, [pc, #24]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c60:	f003 fb9c 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001c6a:	f7ff fe99 	bl	80019a0 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
<<<<<<< HEAD
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001e4 	.word	0x200001e4
 8001914:	40001400 	.word	0x40001400

08001918 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a29      	ldr	r2, [pc, #164]	; (80019dc <HAL_TIM_Encoder_MspInit+0xc4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d14b      	bne.n	80019d2 <HAL_TIM_Encoder_MspInit+0xba>
=======
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000244 	.word	0x20000244
 8001c7c:	40001400 	.word	0x40001400

08001c80 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <MX_TIM10_Init+0x44>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9599;
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001c8c:	f242 527f 	movw	r2, #9599	; 0x257f
 8001c90:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001c9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c9e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MX_TIM10_Init+0x40>)
 8001cae:	f002 ff0d 	bl	8004acc <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001cb8:	f7ff fe72 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000160 	.word	0x20000160
 8001cc4:	40014400 	.word	0x40014400

08001cc8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d14b      	bne.n	8001d82 <HAL_TIM_Encoder_MspInit+0xba>
>>>>>>> main
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
=======
 8001cea:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
>>>>>>> main
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
<<<<<<< HEAD
 8001982:	2340      	movs	r3, #64	; 0x40
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001992:	2302      	movs	r3, #2
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800199e:	f001 fa33 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b2:	2302      	movs	r3, #2
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	480a      	ldr	r0, [pc, #40]	; (80019e8 <HAL_TIM_Encoder_MspInit+0xd0>)
 80019be:	f001 fa23 	bl	8002e08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201d      	movs	r0, #29
 80019c8:	f001 f955 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019cc:	201d      	movs	r0, #29
 80019ce:	f001 f96e 	bl	8002cae <HAL_NVIC_EnableIRQ>
=======
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4811      	ldr	r0, [pc, #68]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001d4e:	f001 fa45 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d62:	2302      	movs	r3, #2
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d6e:	f001 fa35 	bl	80031dc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	201d      	movs	r0, #29
 8001d78:	f001 f967 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d7c:	201d      	movs	r0, #29
 8001d7e:	f001 f980 	bl	8003082 <HAL_NVIC_EnableIRQ>
>>>>>>> main
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
<<<<<<< HEAD
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020800 	.word	0x40020800

080019ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_TIM_Base_MspInit+0x78>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d114      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x3c>
=======
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020800 	.word	0x40020800

08001d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <HAL_TIM_Base_MspInit+0xac>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d114      	bne.n	8001dd8 <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> main
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
<<<<<<< HEAD
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_TIM_Base_MspInit+0x7c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_TIM_Base_MspInit+0x7c>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_TIM_Base_MspInit+0x7c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2036      	movs	r0, #54	; 0x36
 8001a1c:	f001 f92b 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a20:	2036      	movs	r0, #54	; 0x36
 8001a22:	f001 f944 	bl	8002cae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */
=======
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2036      	movs	r0, #54	; 0x36
 8001dcc:	f001 f93d 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dd0:	2036      	movs	r0, #54	; 0x36
 8001dd2:	f001 f956 	bl	8003082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */
>>>>>>> main

  /* USER CODE END TIM10_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001a26:	e018      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_TIM_Base_MspInit+0x80>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d113      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x7c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_TIM_Base_MspInit+0x7c>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0x7c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2037      	movs	r0, #55	; 0x37
 8001a50:	f001 f911 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a54:	2037      	movs	r0, #55	; 0x37
 8001a56:	f001 f92a 	bl	8002cae <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40001000 	.word	0x40001000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40001400 	.word	0x40001400

08001a70 <MX_USART3_UART_Init>:
=======
 8001dd6:	e032      	b.n	8001e3e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_TIM_Base_MspInit+0xb4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d114      	bne.n	8001e0c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2037      	movs	r0, #55	; 0x37
 8001e00:	f001 f923 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e04:	2037      	movs	r0, #55	; 0x37
 8001e06:	f001 f93c 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 8001e0a:	e018      	b.n	8001e3e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM10)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_TIM_Base_MspInit+0xb8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d113      	bne.n	8001e3e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_Base_MspInit+0xb0>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2019      	movs	r0, #25
 8001e34:	f001 f909 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e38:	2019      	movs	r0, #25
 8001e3a:	f001 f922 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40001000 	.word	0x40001000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40001400 	.word	0x40001400
 8001e54:	40014400 	.word	0x40014400

08001e58 <MX_USART3_UART_Init>:
>>>>>>> main
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
=======
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_USART3_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001ab4:	f003 fb32 	bl	800511c <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001abe:	f7ff fdc5 	bl	800164c <Error_Handler>
=======
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <MX_USART3_UART_Init+0x5c>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_USART3_UART_Init+0x58>)
 8001e9c:	f003 fb2a 	bl	80054f4 <HAL_UART_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ea6:	f7ff fd7b 	bl	80019a0 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000230 	.word	0x20000230
 8001acc:	40004800 	.word	0x40004800

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_UART_MspInit+0x8c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d130      	bne.n	8001b54 <HAL_UART_MspInit+0x84>
=======
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000290 	.word	0x20000290
 8001eb4:	40004800 	.word	0x40004800

08001eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <HAL_UART_MspInit+0x8c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d130      	bne.n	8001f3c <HAL_UART_MspInit+0x84>
>>>>>>> main
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< HEAD
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_UART_MspInit+0x90>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_UART_MspInit+0x90>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_UART_MspInit+0x90>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_UART_MspInit+0x90>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0x90>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_UART_MspInit+0x90>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
=======
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_UART_MspInit+0x90>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_UART_MspInit+0x90>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_UART_MspInit+0x90>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_UART_MspInit+0x90>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_UART_MspInit+0x90>)
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_UART_MspInit+0x90>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
>>>>>>> main
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
<<<<<<< HEAD
 8001b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b34:	2307      	movs	r3, #7
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_UART_MspInit+0x94>)
 8001b40:	f001 f962 	bl	8002e08 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2027      	movs	r0, #39	; 0x27
 8001b4a:	f001 f894 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b4e:	2027      	movs	r0, #39	; 0x27
 8001b50:	f001 f8ad 	bl	8002cae <HAL_NVIC_EnableIRQ>
=======
 8001f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <HAL_UART_MspInit+0x94>)
 8001f28:	f001 f958 	bl	80031dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2027      	movs	r0, #39	; 0x27
 8001f32:	f001 f88a 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f36:	2027      	movs	r0, #39	; 0x27
 8001f38:	f001 f8a3 	bl	8003082 <HAL_NVIC_EnableIRQ>
>>>>>>> main
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40004800 	.word	0x40004800
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020c00 	.word	0x40020c00

08001b68 <MX_USB_OTG_FS_PCD_Init>:
=======
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40004800 	.word	0x40004800
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020c00 	.word	0x40020c00

08001f50 <MX_USB_OTG_FS_PCD_Init>:
>>>>>>> main
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
<<<<<<< HEAD
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
=======
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
<<<<<<< HEAD
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b76:	2206      	movs	r2, #6
 8001b78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bac:	f001 fb24 	bl	80031f8 <HAL_PCD_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f7ff fd49 	bl	800164c <Error_Handler>
=======
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5e:	2206      	movs	r2, #6
 8001f60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f64:	2202      	movs	r2, #2
 8001f66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f70:	2202      	movs	r2, #2
 8001f72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f94:	f001 fb1a 	bl	80035cc <HAL_PCD_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f9e:	f7ff fcff 	bl	80019a0 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
<<<<<<< HEAD
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200002b4 	.word	0x200002b4

08001bc4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be4:	d141      	bne.n	8001c6a <HAL_PCD_MspInit+0xa6>
=======
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000314 	.word	0x20000314

08001fac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fcc:	d141      	bne.n	8002052 <HAL_PCD_MspInit+0xa6>
>>>>>>> main
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
=======
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a22      	ldr	r2, [pc, #136]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
>>>>>>> main
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
<<<<<<< HEAD
 8001bfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c10:	230a      	movs	r3, #10
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4817      	ldr	r0, [pc, #92]	; (8001c78 <HAL_PCD_MspInit+0xb4>)
 8001c1c:	f001 f8f4 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <HAL_PCD_MspInit+0xb4>)
 8001c36:	f001 f8e7 	bl	8002e08 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6353      	str	r3, [r2, #52]	; 0x34
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
=======
 8001fe6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ff8:	230a      	movs	r3, #10
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4817      	ldr	r0, [pc, #92]	; (8002060 <HAL_PCD_MspInit+0xb4>)
 8002004:	f001 f8ea 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4810      	ldr	r0, [pc, #64]	; (8002060 <HAL_PCD_MspInit+0xb4>)
 800201e:	f001 f8dd 	bl	80031dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	4a0d      	ldr	r2, [pc, #52]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	6353      	str	r3, [r2, #52]	; 0x34
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_PCD_MspInit+0xb0>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_PCD_MspInit+0xb0>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
>>>>>>> main
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <Reset_Handler>:
=======
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000

08002064 <Reset_Handler>:
>>>>>>> main

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c82:	490e      	ldr	r1, [pc, #56]	; (8001cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c98:	4c0b      	ldr	r4, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff fd5f 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f005 f847 	bl	8006d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff faed 	bl	800128c <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001cc0:	080070b0 	.word	0x080070b0
  ldr r2, =_sbss
 8001cc4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001cc8:	200006bc 	.word	0x200006bc

08001ccc <ADC_IRQHandler>:
=======
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800209c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800206a:	490e      	ldr	r1, [pc, #56]	; (80020a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002080:	4c0b      	ldr	r4, [pc, #44]	; (80020b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800208e:	f7ff fd1f 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f005 f83d 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7ff fa51 	bl	800153c <main>
  bx  lr    
 800209a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80020a8:	08007494 	.word	0x08007494
  ldr r2, =_sbss
 80020ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80020b0:	2000071c 	.word	0x2000071c

080020b4 <ADC_IRQHandler>:
>>>>>>> main
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>
	...

08001cd0 <HAL_Init>:
=======
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>

080020b6 <HAL_Init>:
>>>>>>> main
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x28>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x28>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cde:	6013      	str	r3, [r2, #0]
=======
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
>>>>>>> main
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 ffbd 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fcb4 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
=======
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 ffba 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 f805 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c6:	f7ff fc71 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_InitTick>:
>>>>>>> main
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 ffd5 	bl	8002cca <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
=======
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 ffd5 	bl	800309e <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
>>>>>>> main
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 ff9d 	bl	8002c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
=======
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 ff9d 	bl	800304a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
>>>>>>> main
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000014 	.word	0x20000014
 8001d54:	2000001c 	.word	0x2000001c
 8001d58:	20000018 	.word	0x20000018

08001d5c <HAL_IncTick>:
=======
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000018 	.word	0x20000018
 8002128:	20000020 	.word	0x20000020
 800212c:	2000001c 	.word	0x2000001c

08002130 <HAL_IncTick>:
>>>>>>> main
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000001c 	.word	0x2000001c
 8001d80:	200006b8 	.word	0x200006b8

08001d84 <HAL_GetTick>:
=======
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000020 	.word	0x20000020
 8002154:	20000718 	.word	0x20000718

08002158 <HAL_GetTick>:
>>>>>>> main
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200006b8 	.word	0x200006b8

08001d9c <HAL_Delay>:
=======
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000718 	.word	0x20000718

08002170 <HAL_Delay>:
>>>>>>> main
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000001c 	.word	0x2000001c

08001de4 <HAL_CAN_Init>:
=======
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000020 	.word	0x20000020

080021b8 <HAL_CAN_Init>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
=======
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0ed      	b.n	8001fd2 <HAL_CAN_Init+0x1ee>
=======
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0ed      	b.n	80023a6 <HAL_CAN_Init+0x1ee>
>>>>>>> main
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fbd2 	bl	80005ac <HAL_CAN_MspInit>
=======
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe f9e2 	bl	80005a0 <HAL_CAN_MspInit>
>>>>>>> main
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e18:	f7ff ffb4 	bl	8001d84 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e1e:	e012      	b.n	8001e46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e20:	f7ff ffb0 	bl	8001d84 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d90b      	bls.n	8001e46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0c5      	b.n	8001fd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0e5      	beq.n	8001e20 <HAL_CAN_Init+0x3c>
=======
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff ffb4 	bl	8002158 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021f2:	e012      	b.n	800221a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f4:	f7ff ffb0 	bl	8002158 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d90b      	bls.n	800221a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2205      	movs	r2, #5
 8002212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0c5      	b.n	80023a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0e5      	beq.n	80021f4 <HAL_CAN_Init+0x3c>
>>>>>>> main
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0202 	bic.w	r2, r2, #2
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e64:	f7ff ff8e 	bl	8001d84 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6a:	e012      	b.n	8001e92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e6c:	f7ff ff8a 	bl	8001d84 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d90b      	bls.n	8001e92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e09f      	b.n	8001fd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e5      	bne.n	8001e6c <HAL_CAN_Init+0x88>
=======
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0202 	bic.w	r2, r2, #2
 8002236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7ff ff8e 	bl	8002158 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800223e:	e012      	b.n	8002266 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002240:	f7ff ff8a 	bl	8002158 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d90b      	bls.n	8002266 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2205      	movs	r2, #5
 800225e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e09f      	b.n	80023a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e5      	bne.n	8002240 <HAL_CAN_Init+0x88>
>>>>>>> main
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7e5b      	ldrb	r3, [r3, #25]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7e9b      	ldrb	r3, [r3, #26]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0220 	orr.w	r2, r2, #32
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e007      	b.n	8001f1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0220 	bic.w	r2, r2, #32
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7edb      	ldrb	r3, [r3, #27]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0210 	bic.w	r2, r2, #16
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0210 	orr.w	r2, r2, #16
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7f1b      	ldrb	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d108      	bne.n	8001f62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e007      	b.n	8001f72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7f5b      	ldrb	r3, [r3, #29]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0204 	orr.w	r2, r2, #4
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e007      	b.n	8001f9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	ea42 0103 	orr.w	r1, r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	61da      	str	r2, [r3, #28]
=======
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e1b      	ldrb	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e007      	b.n	800229e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e5b      	ldrb	r3, [r3, #25]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e007      	b.n	80022c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e9b      	ldrb	r3, [r3, #26]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d108      	bne.n	80022e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e007      	b.n	80022f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0220 	bic.w	r2, r2, #32
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7edb      	ldrb	r3, [r3, #27]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0210 	bic.w	r2, r2, #16
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e007      	b.n	800231c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0210 	orr.w	r2, r2, #16
 800231a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f1b      	ldrb	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d108      	bne.n	8002336 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0208 	orr.w	r2, r2, #8
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e007      	b.n	8002346 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0208 	bic.w	r2, r2, #8
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7f5b      	ldrb	r3, [r3, #29]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0204 	orr.w	r2, r2, #4
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e007      	b.n	8002370 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0204 	bic.w	r2, r2, #4
 800236e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	ea42 0103 	orr.w	r1, r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	61da      	str	r2, [r3, #28]
>>>>>>> main
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_CAN_ConfigFilter>:
=======
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_CAN_ConfigFilter>:
>>>>>>> main
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d003      	beq.n	8002002 <HAL_CAN_ConfigFilter+0x26>
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	f040 80c7 	bne.w	8002190 <HAL_CAN_ConfigFilter+0x1b4>
=======
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d003      	beq.n	80023d6 <HAL_CAN_ConfigFilter+0x26>
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f040 80c7 	bne.w	8002564 <HAL_CAN_ConfigFilter+0x1b4>
>>>>>>> main
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
<<<<<<< HEAD
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a69      	ldr	r2, [pc, #420]	; (80021ac <HAL_CAN_ConfigFilter+0x1d0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d001      	beq.n	8002010 <HAL_CAN_ConfigFilter+0x34>
=======
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a69      	ldr	r2, [pc, #420]	; (8002580 <HAL_CAN_ConfigFilter+0x1d0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d001      	beq.n	80023e4 <HAL_CAN_ConfigFilter+0x34>
>>>>>>> main
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
<<<<<<< HEAD
 800200c:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_CAN_ConfigFilter+0x1d4>)
 800200e:	617b      	str	r3, [r7, #20]
=======
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_CAN_ConfigFilter+0x1d4>)
 80023e2:	617b      	str	r3, [r7, #20]
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> main

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
<<<<<<< HEAD
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	4a63      	ldr	r2, [pc, #396]	; (80021b0 <HAL_CAN_ConfigFilter+0x1d4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800202e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	431a      	orrs	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4a63      	ldr	r2, [pc, #396]	; (8002584 <HAL_CAN_ConfigFilter+0x1d4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002402:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> main
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2201      	movs	r2, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d123      	bne.n	80020be <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	401a      	ands	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2201      	movs	r2, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d123      	bne.n	8002492 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> main

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002098:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3248      	adds	r2, #72	; 0x48
 800209e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800246c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3248      	adds	r2, #72	; 0x48
 8002472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> main

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020b4:	6979      	ldr	r1, [r7, #20]
 80020b6:	3348      	adds	r3, #72	; 0x48
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d122      	bne.n	800210c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002488:	6979      	ldr	r1, [r7, #20]
 800248a:	3348      	adds	r3, #72	; 0x48
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d122      	bne.n	80024e0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> main

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3248      	adds	r2, #72	; 0x48
 80020ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3248      	adds	r2, #72	; 0x48
 80024c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> main

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002100:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002102:	6979      	ldr	r1, [r7, #20]
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	605a      	str	r2, [r3, #4]
=======
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	3348      	adds	r3, #72	; 0x48
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	605a      	str	r2, [r3, #4]
>>>>>>> main
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002126:	e007      	b.n	8002138 <HAL_CAN_ConfigFilter+0x15c>
=======
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024fa:	e007      	b.n	800250c <HAL_CAN_ConfigFilter+0x15c>
>>>>>>> main
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	431a      	orrs	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	431a      	orrs	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> main
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002152:	e007      	b.n	8002164 <HAL_CAN_ConfigFilter+0x188>
=======
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002526:	e007      	b.n	8002538 <HAL_CAN_ConfigFilter+0x188>
>>>>>>> main
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	431a      	orrs	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> main
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	431a      	orrs	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	431a      	orrs	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> main
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002182:	f023 0201 	bic.w	r2, r3, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e006      	b.n	800219e <HAL_CAN_ConfigFilter+0x1c2>
=======
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e006      	b.n	8002572 <HAL_CAN_ConfigFilter+0x1c2>
>>>>>>> main
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40003400 	.word	0x40003400
 80021b0:	40006400 	.word	0x40006400

080021b4 <HAL_CAN_Start>:
=======
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40003400 	.word	0x40003400
 8002584:	40006400 	.word	0x40006400

08002588 <HAL_CAN_Start>:
>>>>>>> main
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d12e      	bne.n	8002226 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021e0:	f7ff fdd0 	bl	8001d84 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021e6:	e012      	b.n	800220e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021e8:	f7ff fdcc 	bl	8001d84 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d90b      	bls.n	800220e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2205      	movs	r2, #5
 8002206:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e012      	b.n	8002234 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e5      	bne.n	80021e8 <HAL_CAN_Start+0x34>
=======
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d12e      	bne.n	80025fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff fdd0 	bl	8002158 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025ba:	e012      	b.n	80025e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025bc:	f7ff fdcc 	bl	8002158 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b0a      	cmp	r3, #10
 80025c8:	d90b      	bls.n	80025e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2205      	movs	r2, #5
 80025da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e012      	b.n	8002608 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e5      	bne.n	80025bc <HAL_CAN_Start+0x34>
>>>>>>> main
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e006      	b.n	8002234 <HAL_CAN_Start+0x80>
=======
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e006      	b.n	8002608 <HAL_CAN_Start+0x80>
>>>>>>> main
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_CAN_AddTxMessage>:
=======
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_CAN_AddTxMessage>:
>>>>>>> main
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002250:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	61bb      	str	r3, [r7, #24]
=======
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	61bb      	str	r3, [r7, #24]
>>>>>>> main
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d003      	beq.n	8002268 <HAL_CAN_AddTxMessage+0x2c>
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	2b02      	cmp	r3, #2
 8002264:	f040 80b8 	bne.w	80023d8 <HAL_CAN_AddTxMessage+0x19c>
=======
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d003      	beq.n	800263c <HAL_CAN_AddTxMessage+0x2c>
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	2b02      	cmp	r3, #2
 8002638:	f040 80b8 	bne.w	80027ac <HAL_CAN_AddTxMessage+0x19c>
>>>>>>> main
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80a0 	beq.w	80023c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	0e1b      	lsrs	r3, r3, #24
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d907      	bls.n	80022a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e09e      	b.n	80023e6 <HAL_CAN_AddTxMessage+0x1aa>
=======
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a0 	beq.w	800279c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	0e1b      	lsrs	r3, r3, #24
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d907      	bls.n	800267c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e09e      	b.n	80027ba <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> main
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< HEAD
 80022a8:	2201      	movs	r2, #1
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	409a      	lsls	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	6809      	ldr	r1, [r1, #0]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3318      	adds	r3, #24
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e00f      	b.n	80022f6 <HAL_CAN_AddTxMessage+0xba>
=======
 800267c:	2201      	movs	r2, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	409a      	lsls	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	6809      	ldr	r1, [r1, #0]
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3318      	adds	r3, #24
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	440b      	add	r3, r1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e00f      	b.n	80026ca <HAL_CAN_AddTxMessage+0xba>
>>>>>>> main
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3318      	adds	r3, #24
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	601a      	str	r2, [r3, #0]
=======
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3318      	adds	r3, #24
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	440b      	add	r3, r1
 80026c8:	601a      	str	r2, [r3, #0]
>>>>>>> main
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3318      	adds	r3, #24
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	3304      	adds	r3, #4
 8002308:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	7d1b      	ldrb	r3, [r3, #20]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d111      	bne.n	8002336 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3318      	adds	r3, #24
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3318      	adds	r3, #24
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	3304      	adds	r3, #4
 8002334:	601a      	str	r2, [r3, #0]
=======
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3318      	adds	r3, #24
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	440b      	add	r3, r1
 80026da:	3304      	adds	r3, #4
 80026dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	7d1b      	ldrb	r3, [r3, #20]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d111      	bne.n	800270a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3318      	adds	r3, #24
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6811      	ldr	r1, [r2, #0]
 80026fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3318      	adds	r3, #24
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	440b      	add	r3, r1
 8002706:	3304      	adds	r3, #4
 8002708:	601a      	str	r2, [r3, #0]
>>>>>>> main
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3307      	adds	r3, #7
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	061a      	lsls	r2, r3, #24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3306      	adds	r3, #6
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3305      	adds	r3, #5
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4313      	orrs	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	3204      	adds	r2, #4
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	4610      	mov	r0, r2
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	ea43 0200 	orr.w	r2, r3, r0
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	440b      	add	r3, r1
 8002368:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800236c:	601a      	str	r2, [r3, #0]
=======
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3307      	adds	r3, #7
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	061a      	lsls	r2, r3, #24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3306      	adds	r3, #6
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3305      	adds	r3, #5
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	3204      	adds	r2, #4
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	4610      	mov	r0, r2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	ea43 0200 	orr.w	r2, r3, r0
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	440b      	add	r3, r1
 800273c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002740:	601a      	str	r2, [r3, #0]
>>>>>>> main
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3303      	adds	r3, #3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	061a      	lsls	r2, r3, #24
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3302      	adds	r3, #2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	4313      	orrs	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	4610      	mov	r0, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6811      	ldr	r1, [r2, #0]
 8002394:	ea43 0200 	orr.w	r2, r3, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	440b      	add	r3, r1
 800239e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023a2:	601a      	str	r2, [r3, #0]
=======
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3303      	adds	r3, #3
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	061a      	lsls	r2, r3, #24
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3302      	adds	r3, #2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3301      	adds	r3, #1
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	4313      	orrs	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	4610      	mov	r0, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	6811      	ldr	r1, [r2, #0]
 8002768:	ea43 0200 	orr.w	r2, r3, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	440b      	add	r3, r1
 8002772:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002776:	601a      	str	r2, [r3, #0]
>>>>>>> main
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3318      	adds	r3, #24
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	6811      	ldr	r1, [r2, #0]
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3318      	adds	r3, #24
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	440b      	add	r3, r1
 80023c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e00e      	b.n	80023e6 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3318      	adds	r3, #24
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	4413      	add	r3, r2
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6811      	ldr	r1, [r2, #0]
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3318      	adds	r3, #24
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	440b      	add	r3, r1
 8002796:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e00e      	b.n	80027ba <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> main
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e006      	b.n	80023e6 <HAL_CAN_AddTxMessage+0x1aa>
=======
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e006      	b.n	80027ba <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> main
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_GetRxMessage>:
=======
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_CAN_GetRxMessage>:
>>>>>>> main
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002406:	75fb      	strb	r3, [r7, #23]
=======
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027da:	75fb      	strb	r3, [r7, #23]
>>>>>>> main

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d003      	beq.n	8002416 <HAL_CAN_GetRxMessage+0x24>
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b02      	cmp	r3, #2
 8002412:	f040 80f3 	bne.w	80025fc <HAL_CAN_GetRxMessage+0x20a>
=======
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d003      	beq.n	80027ea <HAL_CAN_GetRxMessage+0x24>
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f040 80f3 	bne.w	80029d0 <HAL_CAN_GetRxMessage+0x20a>
>>>>>>> main
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0e7      	b.n	800260a <HAL_CAN_GetRxMessage+0x218>
=======
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10e      	bne.n	800280e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0e7      	b.n	80029de <HAL_CAN_GetRxMessage+0x218>
>>>>>>> main
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0d8      	b.n	800260a <HAL_CAN_GetRxMessage+0x218>
=======
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0d8      	b.n	80029de <HAL_CAN_GetRxMessage+0x218>
>>>>>>> main
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	331b      	adds	r3, #27
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0204 	and.w	r2, r3, #4
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	331b      	adds	r3, #27
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_CAN_GetRxMessage+0xb6>
=======
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	331b      	adds	r3, #27
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4413      	add	r3, r2
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0204 	and.w	r2, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	331b      	adds	r3, #27
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4413      	add	r3, r2
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0d5b      	lsrs	r3, r3, #21
 800285a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e00b      	b.n	800287c <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> main
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	331b      	adds	r3, #27
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	331b      	adds	r3, #27
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4413      	add	r3, r2
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0202 	and.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	331b      	adds	r3, #27
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 020f 	and.w	r2, r3, #15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	331b      	adds	r3, #27
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	4413      	add	r3, r2
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	331b      	adds	r3, #27
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	4413      	add	r3, r2
 8002510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	4413      	add	r3, r2
 8002526:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0a1a      	lsrs	r2, r3, #8
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	4413      	add	r3, r2
 8002540:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0c1a      	lsrs	r2, r3, #16
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	3302      	adds	r3, #2
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e1a      	lsrs	r2, r3, #24
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3303      	adds	r3, #3
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	3304      	adds	r3, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	4413      	add	r3, r2
 800258c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0a1a      	lsrs	r2, r3, #8
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3305      	adds	r3, #5
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0c1a      	lsrs	r2, r3, #16
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3306      	adds	r3, #6
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	4413      	add	r3, r2
 80025c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e1a      	lsrs	r2, r3, #24
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	3307      	adds	r3, #7
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	e007      	b.n	80025f8 <HAL_CAN_GetRxMessage+0x206>
=======
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	331b      	adds	r3, #27
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4413      	add	r3, r2
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	331b      	adds	r3, #27
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0202 	and.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	331b      	adds	r3, #27
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	331b      	adds	r3, #27
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	331b      	adds	r3, #27
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0a1a      	lsrs	r2, r3, #8
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0c1a      	lsrs	r2, r3, #16
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3302      	adds	r3, #2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4413      	add	r3, r2
 800292e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e1a      	lsrs	r2, r3, #24
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3303      	adds	r3, #3
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	4413      	add	r3, r2
 8002948:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3304      	adds	r3, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0a1a      	lsrs	r2, r3, #8
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3305      	adds	r3, #5
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0c1a      	lsrs	r2, r3, #16
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3306      	adds	r3, #6
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e1a      	lsrs	r2, r3, #24
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	3307      	adds	r3, #7
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0220 	orr.w	r2, r2, #32
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	e007      	b.n	80029cc <HAL_CAN_GetRxMessage+0x206>
>>>>>>> main
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	611a      	str	r2, [r3, #16]
=======
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0220 	orr.w	r2, r2, #32
 80029ca:	611a      	str	r2, [r3, #16]
>>>>>>> main
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 80025f8:	2300      	movs	r3, #0
 80025fa:	e006      	b.n	800260a <HAL_CAN_GetRxMessage+0x218>
=======
 80029cc:	2300      	movs	r3, #0
 80029ce:	e006      	b.n	80029de <HAL_CAN_GetRxMessage+0x218>
>>>>>>> main
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_CAN_ActivateNotification>:
=======
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_ActivateNotification>:
>>>>>>> main
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
<<<<<<< HEAD
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002626:	73fb      	strb	r3, [r7, #15]
=======
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fa:	73fb      	strb	r3, [r7, #15]
>>>>>>> main

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d002      	beq.n	8002634 <HAL_CAN_ActivateNotification+0x1e>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d109      	bne.n	8002648 <HAL_CAN_ActivateNotification+0x32>
=======
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d002      	beq.n	8002a08 <HAL_CAN_ActivateNotification+0x1e>
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d109      	bne.n	8002a1c <HAL_CAN_ActivateNotification+0x32>
>>>>>>> main
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
<<<<<<< HEAD
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6959      	ldr	r1, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e006      	b.n	8002656 <HAL_CAN_ActivateNotification+0x40>
=======
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6959      	ldr	r1, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_ActivateNotification+0x40>
>>>>>>> main
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_CAN_IRQHandler>:
=======
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_IRQHandler>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002662:	b580      	push	{r7, lr}
 8002664:	b08a      	sub	sp, #40	; 0x28
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d07c      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d023      	beq.n	80026fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_CAN_IRQHandler+0x6a>
=======
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08a      	sub	sp, #40	; 0x28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d07c      	beq.n	8002b76 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d023      	beq.n	8002ace <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x6a>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
<<<<<<< HEAD
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f983 	bl	80029d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80026ca:	e016      	b.n	80026fa <HAL_CAN_IRQHandler+0x98>
=======
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f983 	bl	8002da4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a9e:	e016      	b.n	8002ace <HAL_CAN_IRQHandler+0x98>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< HEAD
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e00c      	b.n	80026fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e002      	b.n	80026fa <HAL_CAN_IRQHandler+0x98>
=======
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	e00c      	b.n	8002ace <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	e002      	b.n	8002ace <HAL_CAN_IRQHandler+0x98>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
<<<<<<< HEAD
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f989 	bl	8002a0c <HAL_CAN_TxMailbox0AbortCallback>
=======
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f989 	bl	8002de0 <HAL_CAN_TxMailbox0AbortCallback>
>>>>>>> main
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< HEAD
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d024      	beq.n	800274e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_CAN_IRQHandler+0xbe>
=======
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d024      	beq.n	8002b22 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_CAN_IRQHandler+0xbe>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
<<<<<<< HEAD
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f963 	bl	80029e4 <HAL_CAN_TxMailbox1CompleteCallback>
 800271e:	e016      	b.n	800274e <HAL_CAN_IRQHandler+0xec>
=======
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f963 	bl	8002db8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002af2:	e016      	b.n	8002b22 <HAL_CAN_IRQHandler+0xec>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< HEAD
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e00c      	b.n	800274e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e002      	b.n	800274e <HAL_CAN_IRQHandler+0xec>
=======
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	e00c      	b.n	8002b22 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e002      	b.n	8002b22 <HAL_CAN_IRQHandler+0xec>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
<<<<<<< HEAD
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f969 	bl	8002a20 <HAL_CAN_TxMailbox1AbortCallback>
=======
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f969 	bl	8002df4 <HAL_CAN_TxMailbox1AbortCallback>
>>>>>>> main
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< HEAD
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d024      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002760:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_CAN_IRQHandler+0x112>
=======
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d024      	beq.n	8002b76 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x112>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
<<<<<<< HEAD
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f943 	bl	80029f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002772:	e016      	b.n	80027a2 <HAL_CAN_IRQHandler+0x140>
=======
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f943 	bl	8002dcc <HAL_CAN_TxMailbox2CompleteCallback>
 8002b46:	e016      	b.n	8002b76 <HAL_CAN_IRQHandler+0x140>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< HEAD
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e00c      	b.n	80027a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	e002      	b.n	80027a2 <HAL_CAN_IRQHandler+0x140>
=======
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e00c      	b.n	8002b76 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e002      	b.n	8002b76 <HAL_CAN_IRQHandler+0x140>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
<<<<<<< HEAD
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f949 	bl	8002a34 <HAL_CAN_TxMailbox2AbortCallback>
=======
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f949 	bl	8002e08 <HAL_CAN_TxMailbox2AbortCallback>
>>>>>>> main
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< HEAD
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00c      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2210      	movs	r2, #16
 80027c4:	60da      	str	r2, [r3, #12]
=======
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2210      	movs	r2, #16
 8002b98:	60da      	str	r2, [r3, #12]
>>>>>>> main
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< HEAD
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2208      	movs	r2, #8
 80027e0:	60da      	str	r2, [r3, #12]
=======
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	60da      	str	r2, [r3, #12]
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
<<<<<<< HEAD
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f930 	bl	8002a48 <HAL_CAN_RxFifo0FullCallback>
=======
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f930 	bl	8002e1c <HAL_CAN_RxFifo0FullCallback>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
<<<<<<< HEAD
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_CAN_IRQHandler+0x1a4>
=======
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_CAN_IRQHandler+0x1a4>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
<<<<<<< HEAD
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fe ff0b 	bl	800161c <HAL_CAN_RxFifo0MsgPendingCallback>
=======
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7fe fecb 	bl	8001970 <HAL_CAN_RxFifo0MsgPendingCallback>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< HEAD
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00c      	beq.n	800282a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002820:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2210      	movs	r2, #16
 8002828:	611a      	str	r2, [r3, #16]
=======
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00c      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	611a      	str	r2, [r3, #16]
>>>>>>> main
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< HEAD
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	611a      	str	r2, [r3, #16]
=======
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
<<<<<<< HEAD
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f912 	bl	8002a70 <HAL_CAN_RxFifo1FullCallback>
=======
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f912 	bl	8002e44 <HAL_CAN_RxFifo1FullCallback>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
<<<<<<< HEAD
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_CAN_IRQHandler+0x208>
=======
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x208>
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
<<<<<<< HEAD
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8f9 	bl	8002a5c <HAL_CAN_RxFifo1MsgPendingCallback>
=======
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8f9 	bl	8002e30 <HAL_CAN_RxFifo1MsgPendingCallback>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< HEAD
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2210      	movs	r2, #16
 8002884:	605a      	str	r2, [r3, #4]
=======
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2210      	movs	r2, #16
 8002c58:	605a      	str	r2, [r3, #4]
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
<<<<<<< HEAD
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8fc 	bl	8002a84 <HAL_CAN_SleepCallback>
=======
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8fc 	bl	8002e58 <HAL_CAN_SleepCallback>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< HEAD
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	605a      	str	r2, [r3, #4]
=======
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	605a      	str	r2, [r3, #4]
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
<<<<<<< HEAD
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8f5 	bl	8002a98 <HAL_CAN_WakeUpFromRxMsgCallback>
=======
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f8f5 	bl	8002e6c <HAL_CAN_WakeUpFromRxMsgCallback>
>>>>>>> main
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< HEAD
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d07b      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d072      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d07b      	beq.n	8002d84 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d072      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> main

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< HEAD
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> main

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< HEAD
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> main

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< HEAD
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291c:	2b00      	cmp	r3, #0
 800291e:	d043      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03e      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002930:	2b60      	cmp	r3, #96	; 0x60
 8002932:	d02b      	beq.n	800298c <HAL_CAN_IRQHandler+0x32a>
 8002934:	2b60      	cmp	r3, #96	; 0x60
 8002936:	d82e      	bhi.n	8002996 <HAL_CAN_IRQHandler+0x334>
 8002938:	2b50      	cmp	r3, #80	; 0x50
 800293a:	d022      	beq.n	8002982 <HAL_CAN_IRQHandler+0x320>
 800293c:	2b50      	cmp	r3, #80	; 0x50
 800293e:	d82a      	bhi.n	8002996 <HAL_CAN_IRQHandler+0x334>
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d019      	beq.n	8002978 <HAL_CAN_IRQHandler+0x316>
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d826      	bhi.n	8002996 <HAL_CAN_IRQHandler+0x334>
 8002948:	2b30      	cmp	r3, #48	; 0x30
 800294a:	d010      	beq.n	800296e <HAL_CAN_IRQHandler+0x30c>
 800294c:	2b30      	cmp	r3, #48	; 0x30
 800294e:	d822      	bhi.n	8002996 <HAL_CAN_IRQHandler+0x334>
 8002950:	2b10      	cmp	r3, #16
 8002952:	d002      	beq.n	800295a <HAL_CAN_IRQHandler+0x2f8>
 8002954:	2b20      	cmp	r3, #32
 8002956:	d005      	beq.n	8002964 <HAL_CAN_IRQHandler+0x302>
=======
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d043      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d03e      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d04:	2b60      	cmp	r3, #96	; 0x60
 8002d06:	d02b      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x32a>
 8002d08:	2b60      	cmp	r3, #96	; 0x60
 8002d0a:	d82e      	bhi.n	8002d6a <HAL_CAN_IRQHandler+0x334>
 8002d0c:	2b50      	cmp	r3, #80	; 0x50
 8002d0e:	d022      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x320>
 8002d10:	2b50      	cmp	r3, #80	; 0x50
 8002d12:	d82a      	bhi.n	8002d6a <HAL_CAN_IRQHandler+0x334>
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d019      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x316>
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d826      	bhi.n	8002d6a <HAL_CAN_IRQHandler+0x334>
 8002d1c:	2b30      	cmp	r3, #48	; 0x30
 8002d1e:	d010      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x30c>
 8002d20:	2b30      	cmp	r3, #48	; 0x30
 8002d22:	d822      	bhi.n	8002d6a <HAL_CAN_IRQHandler+0x334>
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d002      	beq.n	8002d2e <HAL_CAN_IRQHandler+0x2f8>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d005      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x302>
>>>>>>> main
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< HEAD
 8002958:	e01d      	b.n	8002996 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002962:	e019      	b.n	8002998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f043 0310 	orr.w	r3, r3, #16
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800296c:	e014      	b.n	8002998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002976:	e00f      	b.n	8002998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002980:	e00a      	b.n	8002998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298a:	e005      	b.n	8002998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002994:	e000      	b.n	8002998 <HAL_CAN_IRQHandler+0x336>
            break;
 8002996:	bf00      	nop
=======
 8002d2c:	e01d      	b.n	8002d6a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d36:	e019      	b.n	8002d6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d40:	e014      	b.n	8002d6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f043 0320 	orr.w	r3, r3, #32
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d4a:	e00f      	b.n	8002d6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d54:	e00a      	b.n	8002d6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d5e:	e005      	b.n	8002d6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d68:	e000      	b.n	8002d6c <HAL_CAN_IRQHandler+0x336>
            break;
 8002d6a:	bf00      	nop
>>>>>>> main
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< HEAD
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029a6:	619a      	str	r2, [r3, #24]
=======
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d7a:	619a      	str	r2, [r3, #24]
>>>>>>> main
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< HEAD
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2204      	movs	r2, #4
 80029ae:	605a      	str	r2, [r3, #4]
=======
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2204      	movs	r2, #4
 8002d82:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< HEAD
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> main
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
<<<<<<< HEAD
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f872 	bl	8002aac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f872 	bl	8002e80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
=======
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
=======
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
=======
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_CAN_TxMailbox0AbortCallback>:
=======
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> main
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
=======
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_CAN_TxMailbox1AbortCallback>:
=======
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> main
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
=======
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> main
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
=======
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_CAN_RxFifo0FullCallback>:
=======
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
=======
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
=======
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_CAN_RxFifo1FullCallback>:
=======
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
=======
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_CAN_SleepCallback>:
=======
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_CAN_SleepCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
=======
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
=======
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_CAN_ErrorCallback>:
=======
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_CAN_ErrorCallback>:
>>>>>>> main
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
=======
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <__NVIC_SetPriorityGrouping>:
=======
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <__NVIC_SetPriorityGrouping>:
>>>>>>> main
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <__NVIC_SetPriorityGrouping+0x40>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00
 8002b04:	05fa0000 	.word	0x05fa0000

08002b08 <__NVIC_GetPriorityGrouping>:
=======
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00
 8002ed8:	05fa0000 	.word	0x05fa0000

08002edc <__NVIC_GetPriorityGrouping>:
>>>>>>> main
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
=======
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
>>>>>>> main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <__NVIC_EnableIRQ+0x38>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
=======
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
>>>>>>> main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	; (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> main
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
=======
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	; (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
>>>>>>> main
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
=======
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <SysTick_Config>:
=======
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
>>>>>>> main
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff8e 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> main
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
=======
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff29 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
=======
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
>>>>>>> main
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
=======
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
>>>>>>> main
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002c88:	f7ff ff3e 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff8e 	bl	8002bb4 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5d 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
=======
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff8e 	bl	8002f88 <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5d 	bl	8002f34 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
>>>>>>> main
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
=======
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff31 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
=======
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff31 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
>>>>>>> main
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_DMA_Abort>:
=======
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_DMA_Abort>:
>>>>>>> main
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff f848 	bl	8001d84 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d008      	beq.n	8002d14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e052      	b.n	8002dba <HAL_DMA_Abort+0xd8>
=======
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff f848 	bl	8002158 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e052      	b.n	800318e <HAL_DMA_Abort+0xd8>
>>>>>>> main
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0216 	bic.w	r2, r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_DMA_Abort+0x62>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0208 	bic.w	r2, r2, #8
 8002d52:	601a      	str	r2, [r3, #0]
=======
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0216 	bic.w	r2, r2, #22
 80030f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_DMA_Abort+0x62>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0208 	bic.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
>>>>>>> main
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e013      	b.n	8002d8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7ff f80d 	bl	8001d84 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d90c      	bls.n	8002d8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e015      	b.n	8002dba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e4      	bne.n	8002d66 <HAL_DMA_Abort+0x84>
=======
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003138:	e013      	b.n	8003162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800313a:	f7ff f80d 	bl	8002158 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b05      	cmp	r3, #5
 8003146:	d90c      	bls.n	8003162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e015      	b.n	800318e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e4      	bne.n	800313a <HAL_DMA_Abort+0x84>
>>>>>>> main
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	223f      	movs	r2, #63	; 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DMA_Abort_IT>:
=======
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	223f      	movs	r2, #63	; 0x3f
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_DMA_Abort_IT>:
>>>>>>> main
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e00c      	b.n	8002dfa <HAL_DMA_Abort_IT+0x38>
=======
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e00c      	b.n	80031ce <HAL_DMA_Abort_IT+0x38>
>>>>>>> main
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2205      	movs	r2, #5
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_GPIO_Init>:
=======
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2205      	movs	r2, #5
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_GPIO_Init>:
>>>>>>> main
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
=======
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
>>>>>>> main
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e175      	b.n	8003114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f040 8164 	bne.w	800310e <HAL_GPIO_Init+0x306>
=======
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e175      	b.n	80034e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 8164 	bne.w	80034e2 <HAL_GPIO_Init+0x306>
>>>>>>> main
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d005      	beq.n	8002e5e <HAL_GPIO_Init+0x56>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d130      	bne.n	8002ec0 <HAL_GPIO_Init+0xb8>
=======
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d005      	beq.n	8003232 <HAL_GPIO_Init+0x56>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d130      	bne.n	8003294 <HAL_GPIO_Init+0xb8>
>>>>>>> main
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 0201 	and.w	r2, r3, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d017      	beq.n	8002efc <HAL_GPIO_Init+0xf4>
=======
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	2203      	movs	r2, #3
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003268:	2201      	movs	r2, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 0201 	and.w	r2, r3, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d017      	beq.n	80032d0 <HAL_GPIO_Init+0xf4>
>>>>>>> main
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]
=======
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	60da      	str	r2, [r3, #12]
>>>>>>> main
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d123      	bne.n	8002f50 <HAL_GPIO_Init+0x148>
=======
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d123      	bne.n	8003324 <HAL_GPIO_Init+0x148>
>>>>>>> main
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
<<<<<<< HEAD
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	08da      	lsrs	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3208      	adds	r2, #8
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	08da      	lsrs	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3208      	adds	r2, #8
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> main
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	601a      	str	r2, [r3, #0]
=======
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]
>>>>>>> main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80be 	beq.w	800310e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_GPIO_Init+0x324>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_GPIO_Init+0x324>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002faa:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_GPIO_Init+0x328>)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_GPIO_Init+0x32c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d037      	beq.n	8003046 <HAL_GPIO_Init+0x23e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_GPIO_Init+0x23a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x334>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02b      	beq.n	800303e <HAL_GPIO_Init+0x236>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_GPIO_Init+0x338>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d025      	beq.n	800303a <HAL_GPIO_Init+0x232>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a54      	ldr	r2, [pc, #336]	; (8003144 <HAL_GPIO_Init+0x33c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <HAL_GPIO_Init+0x22e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_GPIO_Init+0x340>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x22a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_GPIO_Init+0x344>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x226>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_GPIO_Init+0x348>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x222>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a50      	ldr	r2, [pc, #320]	; (8003154 <HAL_GPIO_Init+0x34c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x21e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4f      	ldr	r2, [pc, #316]	; (8003158 <HAL_GPIO_Init+0x350>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x21a>
 800301e:	2309      	movs	r3, #9
 8003020:	e012      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003022:	230a      	movs	r3, #10
 8003024:	e010      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003026:	2308      	movs	r3, #8
 8003028:	e00e      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302a:	2307      	movs	r3, #7
 800302c:	e00c      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800302e:	2306      	movs	r3, #6
 8003030:	e00a      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003032:	2305      	movs	r3, #5
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003036:	2304      	movs	r3, #4
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x240>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x240>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	; (8003130 <HAL_GPIO_Init+0x328>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_GPIO_Init+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_GPIO_Init+0x354>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_GPIO_Init+0x354>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_GPIO_Init+0x354>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_GPIO_Init+0x354>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_GPIO_Init+0x354>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_GPIO_Init+0x354>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_GPIO_Init+0x354>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f ae86 	bls.w	8002e28 <HAL_GPIO_Init+0x20>
=======
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80be 	beq.w	80034e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_GPIO_Init+0x324>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_GPIO_Init+0x324>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800337e:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_GPIO_Init+0x328>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_GPIO_Init+0x32c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d037      	beq.n	800341a <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_GPIO_Init+0x330>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_GPIO_Init+0x334>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_GPIO_Init+0x338>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_GPIO_Init+0x33c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_GPIO_Init+0x340>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x22a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a52      	ldr	r2, [pc, #328]	; (8003520 <HAL_GPIO_Init+0x344>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x226>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_GPIO_Init+0x348>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_GPIO_Init+0x34c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_GPIO_Init+0x350>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033f2:	2309      	movs	r3, #9
 80033f4:	e012      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033f6:	230a      	movs	r3, #10
 80033f8:	e010      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00e      	b.n	800341c <HAL_GPIO_Init+0x240>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00c      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003402:	2306      	movs	r3, #6
 8003404:	e00a      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003406:	2305      	movs	r3, #5
 8003408:	e008      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340a:	2304      	movs	r3, #4
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x240>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x240>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x240>
 800341a:	2300      	movs	r3, #0
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_GPIO_Init+0x328>)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_GPIO_Init+0x354>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348e:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x354>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_GPIO_Init+0x354>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	f67f ae86 	bls.w	80031fc <HAL_GPIO_Init+0x20>
>>>>>>> main
      }
    }
  }
}
<<<<<<< HEAD
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40022000 	.word	0x40022000
 8003158:	40022400 	.word	0x40022400
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
=======
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_WritePin>:
>>>>>>> main
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
=======
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
=======
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
>>>>>>> main
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
<<<<<<< HEAD
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_GPIO_TogglePin>:
=======
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_GPIO_TogglePin>:
>>>>>>> main
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]
=======
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	807b      	strh	r3, [r7, #2]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	041a      	lsls	r2, r3, #16
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	400b      	ands	r3, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	041a      	lsls	r2, r3, #16
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43d9      	mvns	r1, r3
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	400b      	ands	r3, r1
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> main
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f810 	bl	800120c <HAL_GPIO_EXTI_Callback>
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_PCD_Init>:
=======
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd ff7e 	bl	80014bc <HAL_GPIO_EXTI_Callback>
  }
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40013c00 	.word	0x40013c00

080035cc <HAL_PCD_Init>:
>>>>>>> main
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	b08f      	sub	sp, #60	; 0x3c
 80031fc:	af0a      	add	r7, sp, #40	; 0x28
 80031fe:	6078      	str	r0, [r7, #4]
=======
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b08f      	sub	sp, #60	; 0x3c
 80035d0:	af0a      	add	r7, sp, #40	; 0x28
 80035d2:	6078      	str	r0, [r7, #4]
>>>>>>> main
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e116      	b.n	8003438 <HAL_PCD_Init+0x240>
=======
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e116      	b.n	800380c <HAL_PCD_Init+0x240>
>>>>>>> main
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
<<<<<<< HEAD
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
=======
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
>>>>>>> main

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fe fccd 	bl	8001bc4 <HAL_PCD_MspInit>
=======
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fe fcd7 	bl	8001fac <HAL_PCD_MspInit>
>>>>>>> main
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
=======
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
>>>>>>> main
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fad7 	bl	80067fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	687e      	ldr	r6, [r7, #4]
 8003256:	466d      	mov	r5, sp
 8003258:	f106 0410 	add.w	r4, r6, #16
 800325c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003264:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003268:	e885 0003 	stmia.w	r5, {r0, r1}
 800326c:	1d33      	adds	r3, r6, #4
 800326e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f003 fa6b 	bl	800674c <USB_CoreInit>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0d7      	b.n	8003438 <HAL_PCD_Init+0x240>
=======
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fad7 	bl	8006bd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	687e      	ldr	r6, [r7, #4]
 800362a:	466d      	mov	r5, sp
 800362c:	f106 0410 	add.w	r4, r6, #16
 8003630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003638:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003640:	1d33      	adds	r3, r6, #4
 8003642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003644:	6838      	ldr	r0, [r7, #0]
 8003646:	f003 fa6b 	bl	8006b20 <USB_CoreInit>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0d7      	b.n	800380c <HAL_PCD_Init+0x240>
>>>>>>> main
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
<<<<<<< HEAD
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fac5 	bl	800681e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	e04a      	b.n	8003330 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	333d      	adds	r3, #61	; 0x3d
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	333c      	adds	r3, #60	; 0x3c
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	b298      	uxth	r0, r3
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3342      	adds	r3, #66	; 0x42
 80032d6:	4602      	mov	r2, r0
 80032d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	333f      	adds	r3, #63	; 0x3f
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	; 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3348      	adds	r3, #72	; 0x48
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3350      	adds	r3, #80	; 0x50
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	3301      	adds	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3af      	bcc.n	800329a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e044      	b.n	80033ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	3301      	adds	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3b5      	bcc.n	8003340 <HAL_PCD_Init+0x148>
=======
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f003 fac5 	bl	8006bf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e04a      	b.n	8003704 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	333d      	adds	r3, #61	; 0x3d
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	333c      	adds	r3, #60	; 0x3c
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	b298      	uxth	r0, r3
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3342      	adds	r3, #66	; 0x42
 80036aa:	4602      	mov	r2, r0
 80036ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	333f      	adds	r3, #63	; 0x3f
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3344      	adds	r3, #68	; 0x44
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3348      	adds	r3, #72	; 0x48
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3350      	adds	r3, #80	; 0x50
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	3301      	adds	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3af      	bcc.n	800366e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	3301      	adds	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d3b5      	bcc.n	8003714 <HAL_PCD_Init+0x148>
>>>>>>> main
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	687e      	ldr	r6, [r7, #4]
 80033dc:	466d      	mov	r5, sp
 80033de:	f106 0410 	add.w	r4, r6, #16
 80033e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80033f2:	1d33      	adds	r3, r6, #4
 80033f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f003 fa5e 	bl	80068b8 <USB_DevInit>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e014      	b.n	8003438 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f80a 	bl	8003440 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f003 fc18 	bl	8006c66 <USB_DevDisconnect>

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003440 <HAL_PCDEx_ActivateLPM>:
=======
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	687e      	ldr	r6, [r7, #4]
 80037b0:	466d      	mov	r5, sp
 80037b2:	f106 0410 	add.w	r4, r6, #16
 80037b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c6:	1d33      	adds	r3, r6, #4
 80037c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ca:	6838      	ldr	r0, [r7, #0]
 80037cc:	f003 fa5e 	bl	8006c8c <USB_DevInit>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e014      	b.n	800380c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f80a 	bl	8003814 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fc18 	bl	800703a <USB_DevDisconnect>

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003814 <HAL_PCDEx_ActivateLPM>:
>>>>>>> main
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_PCDEx_ActivateLPM+0x44>)
 8003470:	4313      	orrs	r3, r2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	10000003 	.word	0x10000003

08003488 <HAL_PWR_EnableBkUpAccess>:
=======
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_PCDEx_ActivateLPM+0x44>)
 8003844:	4313      	orrs	r3, r2
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	10000003 	.word	0x10000003

0800385c <HAL_PWR_EnableBkUpAccess>:
>>>>>>> main
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< HEAD
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40007000 	.word	0x40007000

080034a8 <HAL_PWREx_EnableOverDrive>:
=======
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_PWREx_EnableOverDrive>:
>>>>>>> main
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< HEAD
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_PWREx_EnableOverDrive+0x98>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d6:	f7fe fc55 	bl	8001d84 <HAL_GetTick>
 80034da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034dc:	e009      	b.n	80034f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034de:	f7fe fc51 	bl	8001d84 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ec:	d901      	bls.n	80034f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e022      	b.n	8003538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fe:	d1ee      	bne.n	80034de <HAL_PWREx_EnableOverDrive+0x36>
=======
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_PWREx_EnableOverDrive+0x98>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_PWREx_EnableOverDrive+0x98>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_PWREx_EnableOverDrive+0x98>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038aa:	f7fe fc55 	bl	8002158 <HAL_GetTick>
 80038ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038b0:	e009      	b.n	80038c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038b2:	f7fe fc51 	bl	8002158 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c0:	d901      	bls.n	80038c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e022      	b.n	800390c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d2:	d1ee      	bne.n	80038b2 <HAL_PWREx_EnableOverDrive+0x36>
>>>>>>> main
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< HEAD
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350c:	f7fe fc3a 	bl	8001d84 <HAL_GetTick>
 8003510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003512:	e009      	b.n	8003528 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003514:	f7fe fc36 	bl	8001d84 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003522:	d901      	bls.n	8003528 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e007      	b.n	8003538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003534:	d1ee      	bne.n	8003514 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000

08003548 <HAL_RCC_OscConfig>:
=======
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e0:	f7fe fc3a 	bl	8002158 <HAL_GetTick>
 80038e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038e6:	e009      	b.n	80038fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038e8:	f7fe fc36 	bl	8002158 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038f6:	d901      	bls.n	80038fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e007      	b.n	800390c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003908:	d1ee      	bne.n	80038e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	40007000 	.word	0x40007000

0800391c <HAL_RCC_OscConfig>:
>>>>>>> main
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e29b      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
=======
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e29b      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8087 	beq.w	800367a <HAL_RCC_OscConfig+0x132>
=======
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x132>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 800356c:	4b96      	ldr	r3, [pc, #600]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b04      	cmp	r3, #4
 8003576:	d00c      	beq.n	8003592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003578:	4b93      	ldr	r3, [pc, #588]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d112      	bne.n	80035aa <HAL_RCC_OscConfig+0x62>
 8003584:	4b90      	ldr	r3, [pc, #576]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003590:	d10b      	bne.n	80035aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d06c      	beq.n	8003678 <HAL_RCC_OscConfig+0x130>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d168      	bne.n	8003678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e275      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
=======
 8003940:	4b96      	ldr	r3, [pc, #600]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b04      	cmp	r3, #4
 800394a:	d00c      	beq.n	8003966 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394c:	4b93      	ldr	r3, [pc, #588]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d112      	bne.n	800397e <HAL_RCC_OscConfig+0x62>
 8003958:	4b90      	ldr	r3, [pc, #576]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003964:	d10b      	bne.n	800397e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003966:	4b8d      	ldr	r3, [pc, #564]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d06c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x130>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d168      	bne.n	8003a4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e275      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
>>>>>>> main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x7a>
 80035b4:	4b84      	ldr	r3, [pc, #528]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a83      	ldr	r2, [pc, #524]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e02e      	b.n	8003620 <HAL_RCC_OscConfig+0xd8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x9c>
 80035ca:	4b7f      	ldr	r3, [pc, #508]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7e      	ldr	r2, [pc, #504]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b7c      	ldr	r3, [pc, #496]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7b      	ldr	r2, [pc, #492]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xd8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0xc0>
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a72      	ldr	r2, [pc, #456]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xd8>
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6e      	ldr	r2, [pc, #440]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6b      	ldr	r2, [pc, #428]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe fbac 	bl	8001d84 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fe fba8 	bl	8001d84 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e229      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xe8>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x132>
=======
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x7a>
 8003988:	4b84      	ldr	r3, [pc, #528]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a83      	ldr	r2, [pc, #524]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e02e      	b.n	80039f4 <HAL_RCC_OscConfig+0xd8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x9c>
 800399e:	4b7f      	ldr	r3, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7e      	ldr	r2, [pc, #504]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b7c      	ldr	r3, [pc, #496]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7b      	ldr	r2, [pc, #492]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xd8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0xc0>
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a72      	ldr	r2, [pc, #456]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xd8>
 80039dc:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6b      	ldr	r2, [pc, #428]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fbac 	bl	8002158 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fe fba8 	bl	8002158 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e229      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xe8>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x132>
>>>>>>> main
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003650:	f7fe fb98 	bl	8001d84 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe fb94 	bl	8001d84 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e215      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x110>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
=======
 8003a24:	f7fe fb98 	bl	8002158 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fb94 	bl	8002158 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e215      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b57      	ldr	r3, [pc, #348]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x110>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d069      	beq.n	800375a <HAL_RCC_OscConfig+0x212>
=======
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d069      	beq.n	8003b2e <HAL_RCC_OscConfig+0x212>
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x190>
 800369e:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1e9      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
=======
 8003a5a:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b4d      	ldr	r3, [pc, #308]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x190>
 8003a72:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1e9      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
>>>>>>> main
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	493d      	ldr	r1, [pc, #244]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e040      	b.n	800375a <HAL_RCC_OscConfig+0x212>
=======
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	493d      	ldr	r1, [pc, #244]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e040      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
>>>>>>> main
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d023      	beq.n	8003728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fb4a 	bl	8001d84 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fb46 	bl	8001d84 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1c7      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1ac>
=======
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d023      	beq.n	8003afc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a38      	ldr	r2, [pc, #224]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fb4a 	bl	8002158 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fe fb46 	bl	8002158 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1c7      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x1ac>
>>>>>>> main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4929      	ldr	r1, [pc, #164]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x212>
=======
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4929      	ldr	r1, [pc, #164]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
 8003afa:	e018      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
>>>>>>> main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fb26 	bl	8001d84 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe fb22 	bl	8001d84 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1a3      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1f4>
=======
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe fb26 	bl	8002158 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe fb22 	bl	8002158 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1a3      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d038      	beq.n	80037d8 <HAL_RCC_OscConfig+0x290>
=======
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d038      	beq.n	8003bac <HAL_RCC_OscConfig+0x290>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe fb03 	bl	8001d84 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7fe faff 	bl	8001d84 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e180      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x23a>
 80037a0:	e01a      	b.n	80037d8 <HAL_RCC_OscConfig+0x290>
=======
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d019      	beq.n	8003b76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe fb03 	bl	8002158 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fe faff 	bl	8002158 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e180      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x23a>
 8003b74:	e01a      	b.n	8003bac <HAL_RCC_OscConfig+0x290>
>>>>>>> main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a6:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fae9 	bl	8001d84 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fe fae5 	bl	8001d84 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d903      	bls.n	80037cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e166      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
 80037c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ee      	bne.n	80037b6 <HAL_RCC_OscConfig+0x26e>
=======
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fe fae9 	bl	8002158 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fe fae5 	bl	8002158 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d903      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e166      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
 8003b9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b92      	ldr	r3, [pc, #584]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ee      	bne.n	8003b8a <HAL_RCC_OscConfig+0x26e>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a4 	beq.w	800392e <HAL_RCC_OscConfig+0x3e6>
=======
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a4 	beq.w	8003d02 <HAL_RCC_OscConfig+0x3e6>
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80037e6:	4b8c      	ldr	r3, [pc, #560]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a88      	ldr	r2, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	4b83      	ldr	r3, [pc, #524]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d118      	bne.n	800384c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800381a:	4b80      	ldr	r3, [pc, #512]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7f      	ldr	r2, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fe faad 	bl	8001d84 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe faa9 	bl	8001d84 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	; 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e12a      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003840:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x2e6>
=======
 8003bba:	4b8c      	ldr	r3, [pc, #560]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4b89      	ldr	r3, [pc, #548]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a88      	ldr	r2, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b86      	ldr	r3, [pc, #536]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be2:	4b83      	ldr	r3, [pc, #524]	; (8003df0 <HAL_RCC_OscConfig+0x4d4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d118      	bne.n	8003c20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bee:	4b80      	ldr	r3, [pc, #512]	; (8003df0 <HAL_RCC_OscConfig+0x4d4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7f      	ldr	r2, [pc, #508]	; (8003df0 <HAL_RCC_OscConfig+0x4d4>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fe faad 	bl	8002158 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fe faa9 	bl	8002158 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	; 0x64
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e12a      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c14:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <HAL_RCC_OscConfig+0x4d4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2e6>
>>>>>>> main
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x31a>
 8003854:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a6f      	ldr	r2, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	e02d      	b.n	80038be <HAL_RCC_OscConfig+0x376>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x33c>
 800386a:	4b6b      	ldr	r3, [pc, #428]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4a6a      	ldr	r2, [pc, #424]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
 8003876:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	e01c      	b.n	80038be <HAL_RCC_OscConfig+0x376>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x35e>
 800388c:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a61      	ldr	r2, [pc, #388]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	e00b      	b.n	80038be <HAL_RCC_OscConfig+0x376>
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fe fa5d 	bl	8001d84 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fa59 	bl	8001d84 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0d8      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ee      	beq.n	80038ce <HAL_RCC_OscConfig+0x386>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x3d4>
=======
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x31a>
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a6f      	ldr	r2, [pc, #444]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	e02d      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x33c>
 8003c3e:	4b6b      	ldr	r3, [pc, #428]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a6a      	ldr	r2, [pc, #424]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4a:	4b68      	ldr	r3, [pc, #416]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a67      	ldr	r2, [pc, #412]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
 8003c56:	e01c      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCC_OscConfig+0x35e>
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a61      	ldr	r2, [pc, #388]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a5e      	ldr	r2, [pc, #376]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	e00b      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
 8003c7a:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a5b      	ldr	r2, [pc, #364]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d015      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fa5d 	bl	8002158 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fa59 	bl	8002158 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0d8      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	4b4c      	ldr	r3, [pc, #304]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ee      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x386>
 8003cc4:	e014      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3d4>
>>>>>>> main
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80038f2:	f7fe fa47 	bl	8001d84 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe fa43 	bl	8001d84 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0c2      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x3b2>
=======
 8003cc6:	f7fe fa47 	bl	8002158 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe fa43 	bl	8002158 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0c2      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce4:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x3b2>
>>>>>>> main
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a3c      	ldr	r2, [pc, #240]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> main
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80ae 	beq.w	8003a94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003938:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d06d      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d14b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x49c>
=======
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80ae 	beq.w	8003e68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d0c:	4b37      	ldr	r3, [pc, #220]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d06d      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d14b      	bne.n	8003db8 <HAL_RCC_OscConfig+0x49c>
>>>>>>> main
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe fa14 	bl	8001d84 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe fa10 	bl	8001d84 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e091      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x418>
=======
 8003d20:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fa14 	bl	8002158 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe fa10 	bl	8002158 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e091      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x418>
>>>>>>> main
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	071b      	lsls	r3, r3, #28
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
=======
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	071b      	lsls	r3, r3, #28
 8003d7e:	491b      	ldr	r1, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
>>>>>>> main
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe f9e2 	bl	8001d84 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe f9de 	bl	8001d84 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e05f      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x47c>
 80039e2:	e057      	b.n	8003a94 <HAL_RCC_OscConfig+0x54c>
=======
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe f9e2 	bl	8002158 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe f9de 	bl	8002158 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e05f      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x47c>
 8003db6:	e057      	b.n	8003e68 <HAL_RCC_OscConfig+0x54c>
>>>>>>> main
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe f9c8 	bl	8001d84 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe f9c4 	bl	8001d84 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e045      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4b0>
 8003a16:	e03d      	b.n	8003a94 <HAL_RCC_OscConfig+0x54c>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
=======
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f9c8 	bl	8002158 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe f9c4 	bl	8002158 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e045      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4b0>
 8003dea:	e03d      	b.n	8003e68 <HAL_RCC_OscConfig+0x54c>
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40007000 	.word	0x40007000
>>>>>>> main
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8003a20:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x558>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d030      	beq.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d122      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d119      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10f      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x54c>
=======
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <HAL_RCC_OscConfig+0x558>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d030      	beq.n	8003e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d129      	bne.n	8003e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d122      	bne.n	8003e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d119      	bne.n	8003e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10f      	bne.n	8003e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x54c>
>>>>>>> main
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
=======
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x54e>
>>>>>>> main
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_RCC_ClockConfig>:
=======
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <HAL_RCC_ClockConfig>:
>>>>>>> main
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0d0      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
=======
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0d0      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003abc:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	4965      	ldr	r1, [pc, #404]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
=======
 8003e90:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d910      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b67      	ldr	r3, [pc, #412]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 020f 	bic.w	r2, r3, #15
 8003ea6:	4965      	ldr	r1, [pc, #404]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0b8      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
=======
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b8      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x96>
=======
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x96>
>>>>>>> main
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b1c:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a52      	ldr	r2, [pc, #328]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b26:	6093      	str	r3, [r2, #8]
=======
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003efa:	6093      	str	r3, [r2, #8]
>>>>>>> main
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	494d      	ldr	r1, [pc, #308]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
=======
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	494d      	ldr	r1, [pc, #308]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
>>>>>>> main
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d040      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x124>
=======
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d040      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x124>
>>>>>>> main
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
=======
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d115      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e073      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
=======
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3a:	4b41      	ldr	r3, [pc, #260]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e073      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06b      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
=======
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06b      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7fe f8f4 	bl	8001d84 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fe f8f0 	bl	8001d84 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e053      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xfc>
=======
 8003f5a:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f023 0203 	bic.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4936      	ldr	r1, [pc, #216]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6c:	f7fe f8f4 	bl	8002158 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7fe f8f0 	bl	8002158 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e053      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 020c 	and.w	r2, r3, #12
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1eb      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xfc>
>>>>>>> main
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d210      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	4922      	ldr	r1, [pc, #136]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
=======
 8003f9c:	4b27      	ldr	r3, [pc, #156]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d210      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b24      	ldr	r3, [pc, #144]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 020f 	bic.w	r2, r3, #15
 8003fb2:	4922      	ldr	r1, [pc, #136]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e032      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
=======
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e032      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> main
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4916      	ldr	r1, [pc, #88]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
=======
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4916      	ldr	r1, [pc, #88]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
>>>>>>> main
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
=======
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490e      	ldr	r1, [pc, #56]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
>>>>>>> main
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003c36:	f000 f821 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	490a      	ldr	r1, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1cc>)
 8003c48:	5ccb      	ldrb	r3, [r1, r3]
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1d0>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1d4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe f850 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023c00 	.word	0x40023c00
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08006f84 	.word	0x08006f84
 8003c74:	20000014 	.word	0x20000014
 8003c78:	20000018 	.word	0x20000018

08003c7c <HAL_RCC_GetSysClockFreq>:
=======
 800400a:	f000 f821 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490a      	ldr	r1, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x1cc>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1d0>)
 8004024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_ClockConfig+0x1d4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe f850 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	08007368 	.word	0x08007368
 8004048:	20000018 	.word	0x20000018
 800404c:	2000001c 	.word	0x2000001c

08004050 <HAL_RCC_GetSysClockFreq>:
>>>>>>> main
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c80:	b094      	sub	sp, #80	; 0x50
 8003c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	647b      	str	r3, [r7, #68]	; 0x44
 8003c88:	2300      	movs	r3, #0
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c94:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d00d      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	f200 80e1 	bhi.w	8003e68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cae:	e0db      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8004050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	2300      	movs	r3, #0
 8004062:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004068:	4b67      	ldr	r3, [pc, #412]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d00d      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x40>
 8004074:	2b08      	cmp	r3, #8
 8004076:	f200 80bd 	bhi.w	80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x34>
 800407e:	2b04      	cmp	r3, #4
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x3a>
 8004082:	e0b7      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>
>>>>>>> main
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003cb0:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb4:	e0db      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8004084:	4b61      	ldr	r3, [pc, #388]	; (800420c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004086:	60bb      	str	r3, [r7, #8]
      break;
 8004088:	e0b7      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003cb6:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cba:	e0d8      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800408a:	4b61      	ldr	r3, [pc, #388]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800408c:	60bb      	str	r3, [r7, #8]
      break;
 800408e:	e0b4      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cc6:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d063      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	2200      	movs	r2, #0
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	0159      	lsls	r1, r3, #5
 8003cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d00:	0150      	lsls	r0, r2, #5
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4621      	mov	r1, r4
 8003d08:	1a51      	subs	r1, r2, r1
 8003d0a:	6139      	str	r1, [r7, #16]
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d20:	4659      	mov	r1, fp
 8003d22:	018b      	lsls	r3, r1, #6
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	018a      	lsls	r2, r1, #6
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ebb2 0801 	subs.w	r8, r2, r1
 8003d34:	4659      	mov	r1, fp
 8003d36:	eb63 0901 	sbc.w	r9, r3, r1
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4e:	4690      	mov	r8, r2
 8003d50:	4699      	mov	r9, r3
 8003d52:	4623      	mov	r3, r4
 8003d54:	eb18 0303 	adds.w	r3, r8, r3
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	eb49 0303 	adc.w	r3, r9, r3
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	024b      	lsls	r3, r1, #9
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d78:	4621      	mov	r1, r4
 8003d7a:	024a      	lsls	r2, r1, #9
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	2200      	movs	r2, #0
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d8c:	f7fc fa54 	bl	8000238 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d98:	e058      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8004090:	4b5d      	ldr	r3, [pc, #372]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004098:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800409a:	4b5b      	ldr	r3, [pc, #364]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d04d      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b58      	ldr	r3, [pc, #352]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	461a      	mov	r2, r3
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	ea02 0800 	and.w	r8, r2, r0
 80040be:	ea03 0901 	and.w	r9, r3, r1
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	014b      	lsls	r3, r1, #5
 80040d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040d4:	0142      	lsls	r2, r0, #5
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	ebb0 0008 	subs.w	r0, r0, r8
 80040de:	eb61 0109 	sbc.w	r1, r1, r9
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	018b      	lsls	r3, r1, #6
 80040ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040f0:	0182      	lsls	r2, r0, #6
 80040f2:	1a12      	subs	r2, r2, r0
 80040f4:	eb63 0301 	sbc.w	r3, r3, r1
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	00d9      	lsls	r1, r3, #3
 8004102:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004106:	00d0      	lsls	r0, r2, #3
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	eb12 0208 	adds.w	r2, r2, r8
 8004110:	eb43 0309 	adc.w	r3, r3, r9
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	0259      	lsls	r1, r3, #9
 800411e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004122:	0250      	lsls	r0, r2, #9
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	461a      	mov	r2, r3
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	f7fc f880 	bl	8000238 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e04a      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x188>
>>>>>>> main
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003d9a:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	2200      	movs	r2, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	4611      	mov	r1, r2
 8003da6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	f04f 0000 	mov.w	r0, #0
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	0159      	lsls	r1, r3, #5
 8003dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc6:	0150      	lsls	r0, r2, #5
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dec:	ebb2 040a 	subs.w	r4, r2, sl
 8003df0:	eb63 050b 	sbc.w	r5, r3, fp
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	00eb      	lsls	r3, r5, #3
 8003dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e02:	00e2      	lsls	r2, r4, #3
 8003e04:	4614      	mov	r4, r2
 8003e06:	461d      	mov	r5, r3
 8003e08:	4643      	mov	r3, r8
 8003e0a:	18e3      	adds	r3, r4, r3
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	464b      	mov	r3, r9
 8003e10:	eb45 0303 	adc.w	r3, r5, r3
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e22:	4629      	mov	r1, r5
 8003e24:	028b      	lsls	r3, r1, #10
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	028a      	lsls	r2, r1, #10
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e36:	2200      	movs	r2, #0
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	61fa      	str	r2, [r7, #28]
 8003e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e40:	f7fc f9fa 	bl	8000238 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	3301      	adds	r3, #1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	461a      	mov	r2, r3
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	ea02 0400 	and.w	r4, r2, r0
 800415a:	ea03 0501 	and.w	r5, r3, r1
 800415e:	4620      	mov	r0, r4
 8004160:	4629      	mov	r1, r5
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	014b      	lsls	r3, r1, #5
 800416c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004170:	0142      	lsls	r2, r0, #5
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	1b00      	subs	r0, r0, r4
 8004178:	eb61 0105 	sbc.w	r1, r1, r5
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	018b      	lsls	r3, r1, #6
 8004186:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800418a:	0182      	lsls	r2, r0, #6
 800418c:	1a12      	subs	r2, r2, r0
 800418e:	eb63 0301 	sbc.w	r3, r3, r1
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	00d9      	lsls	r1, r3, #3
 800419c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a0:	00d0      	lsls	r0, r2, #3
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	1912      	adds	r2, r2, r4
 80041a8:	eb45 0303 	adc.w	r3, r5, r3
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	0299      	lsls	r1, r3, #10
 80041b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041ba:	0290      	lsls	r0, r2, #10
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	f7fc f834 	bl	8000238 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4613      	mov	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	60bb      	str	r3, [r7, #8]
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> main
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3750      	adds	r7, #80	; 0x50
 8003e74:	46bd      	mov	sp, r7
 8003e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	00f42400 	.word	0x00f42400
 8003e84:	007a1200 	.word	0x007a1200

08003e88 <HAL_RCC_GetHCLKFreq>:
=======
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041f6:	60bb      	str	r3, [r7, #8]
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	68bb      	ldr	r3, [r7, #8]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200

08004214 <HAL_RCC_GetHCLKFreq>:
>>>>>>> main
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000014 	.word	0x20000014

08003ea0 <HAL_RCC_GetPCLK1Freq>:
=======
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000018 	.word	0x20000018

0800422c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> main
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea4:	f7ff fff0 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0a9b      	lsrs	r3, r3, #10
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4903      	ldr	r1, [pc, #12]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	08006f94 	.word	0x08006f94

08003ec8 <HAL_RCC_GetPCLK2Freq>:
=======
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	08007378 	.word	0x08007378

08004254 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> main
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ecc:	f7ff ffdc 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0b5b      	lsrs	r3, r3, #13
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4903      	ldr	r1, [pc, #12]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	08006f94 	.word	0x08006f94

08003ef0 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff ffdc 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	08007378 	.word	0x08007378

0800427c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> main
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
=======
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< HEAD
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d012      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 8003f18:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a68      	ldr	r2, [pc, #416]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f22:	6093      	str	r3, [r2, #8]
 8003f24:	4b66      	ldr	r3, [pc, #408]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	4964      	ldr	r1, [pc, #400]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
=======
 80042a4:	4b69      	ldr	r3, [pc, #420]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a68      	ldr	r2, [pc, #416]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	4964      	ldr	r1, [pc, #400]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
>>>>>>> main
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d017      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< HEAD
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	4959      	ldr	r1, [pc, #356]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]
=======
 80042d6:	4b5d      	ldr	r3, [pc, #372]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	4959      	ldr	r1, [pc, #356]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
>>>>>>> main
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d017      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
<<<<<<< HEAD
 8003f86:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	494a      	ldr	r1, [pc, #296]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa4:	d101      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]
=======
 8004312:	4b4e      	ldr	r3, [pc, #312]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	494a      	ldr	r1, [pc, #296]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800433e:	2301      	movs	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
>>>>>>> main
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
=======
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 808b 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 808b 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> main
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8003fd4:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe0:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fec:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff8:	f7fd fec4 	bl	8001d84 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fd fec0 	bl	8001d84 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e38f      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004012:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	4a39      	ldr	r2, [pc, #228]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436a:	6413      	str	r3, [r2, #64]	; 0x40
 800436c:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a34      	ldr	r2, [pc, #208]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fd fee8 	bl	8002158 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fd fee4 	bl	8002158 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e38f      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800439e:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> main
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 800401e:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d035      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d02e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800405e:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004064:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d114      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fe88 	bl	8001d84 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd fe84 	bl	8001d84 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e351      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ee      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 80043aa:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d035      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d02e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d114      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd feac 	bl	8002158 <HAL_GetTick>
 8004400:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd fea8 	bl	8002158 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e351      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> main
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a6:	d111      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040b6:	400b      	ands	r3, r1
 80040b8:	4901      	ldr	r1, [pc, #4]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
 80040be:	e00b      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	0ffffcff 	.word	0x0ffffcff
 80040cc:	4bac      	ldr	r3, [pc, #688]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4aab      	ldr	r2, [pc, #684]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	4ba9      	ldr	r3, [pc, #676]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e4:	49a6      	ldr	r1, [pc, #664]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	670b      	str	r3, [r1, #112]	; 0x70
=======
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004432:	d111      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004442:	400b      	ands	r3, r1
 8004444:	4901      	ldr	r1, [pc, #4]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
 800444a:	e00b      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	0ffffcff 	.word	0x0ffffcff
 8004458:	4bb3      	ldr	r3, [pc, #716]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4ab2      	ldr	r2, [pc, #712]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800445e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004462:	6093      	str	r3, [r2, #8]
 8004464:	4bb0      	ldr	r3, [pc, #704]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	49ad      	ldr	r1, [pc, #692]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004472:	4313      	orrs	r3, r2
 8004474:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> main
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< HEAD
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d010      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< HEAD
 80040f6:	4ba2      	ldr	r3, [pc, #648]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040fc:	4aa0      	ldr	r2, [pc, #640]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004102:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004106:	4b9e      	ldr	r3, [pc, #632]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	499b      	ldr	r1, [pc, #620]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004482:	4ba9      	ldr	r3, [pc, #676]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004488:	4aa7      	ldr	r2, [pc, #668]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004492:	4ba5      	ldr	r3, [pc, #660]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004494:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	49a2      	ldr	r1, [pc, #648]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> main
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8004124:	4b96      	ldr	r3, [pc, #600]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004132:	4993      	ldr	r1, [pc, #588]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80044b0:	4b9d      	ldr	r3, [pc, #628]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	499a      	ldr	r1, [pc, #616]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8004146:	4b8e      	ldr	r3, [pc, #568]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004154:	498a      	ldr	r1, [pc, #552]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80044d2:	4b95      	ldr	r3, [pc, #596]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e0:	4991      	ldr	r1, [pc, #580]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8004168:	4b85      	ldr	r3, [pc, #532]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004176:	4982      	ldr	r1, [pc, #520]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004502:	4989      	ldr	r1, [pc, #548]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 800418a:	4b7d      	ldr	r3, [pc, #500]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4979      	ldr	r1, [pc, #484]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004516:	4b84      	ldr	r3, [pc, #528]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	4980      	ldr	r1, [pc, #512]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 80041ac:	4b74      	ldr	r3, [pc, #464]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	4971      	ldr	r1, [pc, #452]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004538:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	4978      	ldr	r1, [pc, #480]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 80041ce:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f023 020c 	bic.w	r2, r3, #12
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	4968      	ldr	r1, [pc, #416]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800455a:	4b73      	ldr	r3, [pc, #460]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f023 020c 	bic.w	r2, r3, #12
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	496f      	ldr	r1, [pc, #444]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 80041f0:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	4960      	ldr	r1, [pc, #384]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800457c:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	4967      	ldr	r1, [pc, #412]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8004212:	4b5b      	ldr	r3, [pc, #364]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	4957      	ldr	r1, [pc, #348]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800459e:	4b62      	ldr	r3, [pc, #392]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	495e      	ldr	r1, [pc, #376]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 8004234:	4b52      	ldr	r3, [pc, #328]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	494f      	ldr	r1, [pc, #316]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045c0:	4b59      	ldr	r3, [pc, #356]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	4956      	ldr	r1, [pc, #344]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
<<<<<<< HEAD
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
<<<<<<< HEAD
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	4946      	ldr	r1, [pc, #280]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045e2:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	494d      	ldr	r1, [pc, #308]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
<<<<<<< HEAD
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
<<<<<<< HEAD
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	493e      	ldr	r1, [pc, #248]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004604:	4b48      	ldr	r3, [pc, #288]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	4945      	ldr	r1, [pc, #276]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
<<<<<<< HEAD
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
<<<<<<< HEAD
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	4935      	ldr	r1, [pc, #212]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004626:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004634:	493c      	ldr	r1, [pc, #240]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< HEAD
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< HEAD
 80042bc:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ca:	492d      	ldr	r1, [pc, #180]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004648:	4b37      	ldr	r3, [pc, #220]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004656:	4934      	ldr	r1, [pc, #208]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
<<<<<<< HEAD
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d011      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
<<<<<<< HEAD
 80042de:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ec:	4924      	ldr	r1, [pc, #144]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fc:	d101      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
=======
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004678:	492b      	ldr	r1, [pc, #172]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
>>>>>>> main
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< HEAD
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800430e:	2301      	movs	r3, #1
 8004310:	61bb      	str	r3, [r7, #24]
=======
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
>>>>>>> main
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< HEAD
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	4914      	ldr	r1, [pc, #80]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	491b      	ldr	r1, [pc, #108]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
<<<<<<< HEAD
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
<<<<<<< HEAD
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004350:	490b      	ldr	r1, [pc, #44]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046dc:	4912      	ldr	r1, [pc, #72]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
<<<<<<< HEAD
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x494>
=======
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
<<<<<<< HEAD
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004374:	4902      	ldr	r1, [pc, #8]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800437c:	e002      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
=======
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	4909      	ldr	r1, [pc, #36]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> main
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
=======
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 8004390:	4b8a      	ldr	r3, [pc, #552]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004396:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	4986      	ldr	r1, [pc, #536]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	e002      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	4986      	ldr	r1, [pc, #536]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> main
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
<<<<<<< HEAD
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
=======
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
<<<<<<< HEAD
 80043b4:	4b81      	ldr	r3, [pc, #516]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	497d      	ldr	r1, [pc, #500]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004740:	4b81      	ldr	r3, [pc, #516]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004746:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	497d      	ldr	r1, [pc, #500]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> main
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
<<<<<<< HEAD
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d006      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80d6 	beq.w	800458c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043e0:	4b76      	ldr	r3, [pc, #472]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a75      	ldr	r2, [pc, #468]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd fcca 	bl	8001d84 <HAL_GetTick>
 80043f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043f4:	f7fd fcc6 	bl	8001d84 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e195      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004406:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
=======
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d006      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80d6 	beq.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800476c:	4b76      	ldr	r3, [pc, #472]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a75      	ldr	r2, [pc, #468]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd fcee 	bl	8002158 <HAL_GetTick>
 800477c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004780:	f7fd fcea 	bl	8002158 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e195      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004792:	4b6d      	ldr	r3, [pc, #436]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x504>
>>>>>>> main

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
<<<<<<< HEAD
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d021      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11d      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x572>
=======
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d021      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d11d      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x572>
>>>>>>> main
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< HEAD
 8004426:	4b65      	ldr	r3, [pc, #404]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443a:	0e1b      	lsrs	r3, r3, #24
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	60fb      	str	r3, [r7, #12]
=======
 80047b2:	4b65      	ldr	r3, [pc, #404]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	60fb      	str	r3, [r7, #12]
>>>>>>> main
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	019a      	lsls	r2, r3, #6
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	4958      	ldr	r1, [pc, #352]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	019a      	lsls	r2, r3, #6
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	071b      	lsls	r3, r3, #28
 80047e6:	4958      	ldr	r1, [pc, #352]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> main
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
<<<<<<< HEAD
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02e      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448c:	d129      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
=======
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02e      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004818:	d129      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
>>>>>>> main
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< HEAD
 800448e:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800449c:	4b47      	ldr	r3, [pc, #284]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a2:	0f1b      	lsrs	r3, r3, #28
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]
=======
 800481a:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004828:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	0f1b      	lsrs	r3, r3, #28
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
>>>>>>> main
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
<<<<<<< HEAD
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	019a      	lsls	r2, r3, #6
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	493e      	ldr	r1, [pc, #248]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044ca:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d0:	f023 021f 	bic.w	r2, r3, #31
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	3b01      	subs	r3, #1
 80044da:	4938      	ldr	r1, [pc, #224]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	019a      	lsls	r2, r3, #6
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	431a      	orrs	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	071b      	lsls	r3, r3, #28
 800484e:	493e      	ldr	r1, [pc, #248]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004856:	4b3c      	ldr	r3, [pc, #240]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485c:	f023 021f 	bic.w	r2, r3, #31
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	3b01      	subs	r3, #1
 8004866:	4938      	ldr	r1, [pc, #224]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> main
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x63a>
=======
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01d      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
>>>>>>> main
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
<<<<<<< HEAD
 80044ee:	4b33      	ldr	r3, [pc, #204]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044fc:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004502:	0f1b      	lsrs	r3, r3, #28
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	60fb      	str	r3, [r7, #12]
=======
 800487a:	4b33      	ldr	r3, [pc, #204]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004888:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	0f1b      	lsrs	r3, r3, #28
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
>>>>>>> main
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
<<<<<<< HEAD
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	4926      	ldr	r1, [pc, #152]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	019a      	lsls	r2, r3, #6
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	431a      	orrs	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	071b      	lsls	r3, r3, #28
 80048ae:	4926      	ldr	r1, [pc, #152]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> main
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< HEAD
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d011      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x66a>
=======
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
>>>>>>> main
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	019a      	lsls	r2, r3, #6
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	071b      	lsls	r3, r3, #28
 8004552:	491a      	ldr	r1, [pc, #104]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	071b      	lsls	r3, r3, #28
 80048de:	491a      	ldr	r1, [pc, #104]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> main
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< HEAD
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004566:	f7fd fc0d 	bl	8001d84 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800456e:	f7fd fc09 	bl	8001d84 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b64      	cmp	r3, #100	; 0x64
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0d8      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x67e>
=======
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f2:	f7fd fc31 	bl	8002158 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048fa:	f7fd fc2d 	bl	8002158 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b64      	cmp	r3, #100	; 0x64
 8004906:	d901      	bls.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e0d8      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
>>>>>>> main
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
<<<<<<< HEAD
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	f040 80ce 	bne.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a08      	ldr	r2, [pc, #32]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fd fbf0 	bl	8001d84 <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045a6:	e00b      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a8:	f7fd fbec 	bl	8001d84 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d904      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0bb      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045c0:	4b5e      	ldr	r3, [pc, #376]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045cc:	d0ec      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
=======
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	f040 80ce 	bne.w	8004abc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fd fc14 	bl	8002158 <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004932:	e00b      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004934:	f7fd fc10 	bl	8002158 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d904      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e0bb      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800494c:	4b5e      	ldr	r3, [pc, #376]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004958:	d0ec      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
>>>>>>> main

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
<<<<<<< HEAD
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d02e      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d12a      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x75c>
=======
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02e      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d12a      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
>>>>>>> main
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
<<<<<<< HEAD
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004604:	4b4d      	ldr	r3, [pc, #308]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	0f1b      	lsrs	r3, r3, #28
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	60fb      	str	r3, [r7, #12]
=======
 8004982:	4b51      	ldr	r3, [pc, #324]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004990:	4b4d      	ldr	r3, [pc, #308]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	0f1b      	lsrs	r3, r3, #28
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	60fb      	str	r3, [r7, #12]
>>>>>>> main
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< HEAD
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	019a      	lsls	r2, r3, #6
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	061b      	lsls	r3, r3, #24
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	071b      	lsls	r3, r3, #28
 800462a:	4944      	ldr	r1, [pc, #272]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004632:	4b42      	ldr	r3, [pc, #264]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	493d      	ldr	r1, [pc, #244]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	019a      	lsls	r2, r3, #6
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	071b      	lsls	r3, r3, #28
 80049b6:	4944      	ldr	r1, [pc, #272]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049be:	4b42      	ldr	r3, [pc, #264]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	493d      	ldr	r1, [pc, #244]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> main
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
<<<<<<< HEAD
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d022      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004660:	d11d      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
=======
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d022      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ec:	d11d      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
>>>>>>> main
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	0e1b      	lsrs	r3, r3, #24
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	0f1b      	lsrs	r3, r3, #28
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
=======
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	0e1b      	lsrs	r3, r3, #24
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049fc:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
>>>>>>> main

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
<<<<<<< HEAD
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	019a      	lsls	r2, r3, #6
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	071b      	lsls	r3, r3, #28
 8004696:	4929      	ldr	r1, [pc, #164]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	4929      	ldr	r1, [pc, #164]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> main
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< HEAD
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d028      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
=======
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d028      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
>>>>>>> main
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	0e1b      	lsrs	r3, r3, #24
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	60fb      	str	r3, [r7, #12]
=======
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	60fb      	str	r3, [r7, #12]
>>>>>>> main

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< HEAD
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	019a      	lsls	r2, r3, #6
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	071b      	lsls	r3, r3, #28
 80046de:	4917      	ldr	r1, [pc, #92]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4911      	ldr	r1, [pc, #68]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	019a      	lsls	r2, r3, #6
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	4917      	ldr	r1, [pc, #92]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4911      	ldr	r1, [pc, #68]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> main
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
<<<<<<< HEAD
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0e      	ldr	r2, [pc, #56]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004708:	f7fd fb3c 	bl	8001d84 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004710:	f7fd fb38 	bl	8001d84 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e007      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472e:	d1ef      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x820>
=======
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fd fb60 	bl	8002158 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a9c:	f7fd fb5c 	bl	8002158 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e007      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aba:	d1ef      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x820>
>>>>>>> main
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <HAL_TIM_Base_Init>:
=======
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800

08004acc <HAL_TIM_Base_Init>:
>>>>>>> main
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e049      	b.n	80047e6 <HAL_TIM_Base_Init+0xa6>
=======
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e049      	b.n	8004b72 <HAL_TIM_Base_Init+0xa6>
>>>>>>> main
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fd f940 	bl	80019ec <HAL_TIM_Base_MspInit>
=======
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd f952 	bl	8001d9c <HAL_TIM_Base_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fb5a 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_TIM_Base_Start_IT>:
=======
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 fb80 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a1a      	ldr	r2, [r3, #32]
 8004b88:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10f      	bne.n	8004bb2 <HAL_TIM_Base_Stop+0x38>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	f240 4344 	movw	r3, #1092	; 0x444
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_Base_Stop+0x38>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_Base_Start_IT>:
>>>>>>> main
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
=======
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e054      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xc2>
=======
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d001      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e054      	b.n	8004c8a <HAL_TIM_Base_Start_IT+0xc2>
>>>>>>> main
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004832:	d01d      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <HAL_TIM_Base_Start_IT+0xdc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d115      	bne.n	800489c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_TIM_Base_Start_IT+0xec>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d015      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d011      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e008      	b.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
=======
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d022      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d01d      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d018      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00e      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_TIM_Base_Start_IT+0xe4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d115      	bne.n	8004c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d015      	beq.n	8004c86 <HAL_TIM_Base_Start_IT+0xbe>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d011      	beq.n	8004c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	e008      	b.n	8004c86 <HAL_TIM_Base_Start_IT+0xbe>
>>>>>>> main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e000      	b.n	80048b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	bf00      	nop
=======
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e000      	b.n	8004c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	bf00      	nop
>>>>>>> main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40001800 	.word	0x40001800
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_Base_Stop_IT>:
=======
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40010400 	.word	0x40010400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40001800 	.word	0x40001800
 8004cb4:	00010007 	.word	0x00010007

08004cb8 <HAL_TIM_Base_Stop_IT>:
>>>>>>> main
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
=======
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <HAL_TIM_Base_Stop_IT+0x48>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f240 4344 	movw	r3, #1092	; 0x444
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_TIM_Base_Stop_IT+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIM_Encoder_Init>:
=======
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10f      	bne.n	8004d00 <HAL_TIM_Base_Stop_IT+0x48>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	f240 4344 	movw	r3, #1092	; 0x444
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_Base_Stop_IT+0x48>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_TIM_Encoder_Init>:
>>>>>>> main
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
=======
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e08f      	b.n	8004a74 <HAL_TIM_Encoder_Init+0x134>
=======
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e08f      	b.n	8004e4c <HAL_TIM_Encoder_Init+0x134>
>>>>>>> main
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc ffd5 	bl	8001918 <HAL_TIM_Encoder_MspInit>
=======
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc ffc1 	bl	8001cc8 <HAL_TIM_Encoder_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6899      	ldr	r1, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <HAL_TIM_Encoder_Init+0x13c>)
 8004982:	400b      	ands	r3, r1
 8004984:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f000 fa51 	bl	8004e38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <HAL_TIM_Encoder_Init+0x140>)
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	4313      	orrs	r3, r2
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <HAL_TIM_Encoder_Init+0x144>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4b2a      	ldr	r3, [pc, #168]	; (8004a88 <HAL_TIM_Encoder_Init+0x148>)
 80049de:	4013      	ands	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	4313      	orrs	r3, r2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	011a      	lsls	r2, r3, #4
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	031b      	lsls	r3, r3, #12
 8004a00:	4313      	orrs	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	4313      	orrs	r3, r2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	fffebff8 	.word	0xfffebff8
 8004a80:	fffffcfc 	.word	0xfffffcfc
 8004a84:	fffff3f3 	.word	0xfffff3f3
 8004a88:	ffff0f0f 	.word	0xffff0f0f

08004a8c <HAL_TIM_Encoder_Start>:
=======
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <HAL_TIM_Encoder_Init+0x13c>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 fa51 	bl	8005210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <HAL_TIM_Encoder_Init+0x140>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	4313      	orrs	r3, r2
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_TIM_Encoder_Init+0x144>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <HAL_TIM_Encoder_Init+0x148>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	011a      	lsls	r2, r3, #4
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	031b      	lsls	r3, r3, #12
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	fffebff8 	.word	0xfffebff8
 8004e58:	fffffcfc 	.word	0xfffffcfc
 8004e5c:	fffff3f3 	.word	0xfffff3f3
 8004e60:	ffff0f0f 	.word	0xffff0f0f

08004e64 <HAL_TIM_Encoder_Start>:
>>>>>>> main
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab4:	733b      	strb	r3, [r7, #12]
=======
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8c:	733b      	strb	r3, [r7, #12]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
<<<<<<< HEAD
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d110      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d102      	bne.n	8004ac8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ac2:	7b7b      	ldrb	r3, [r7, #13]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e069      	b.n	8004ba0 <HAL_TIM_Encoder_Start+0x114>
=======
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d110      	bne.n	8004eb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e9a:	7b7b      	ldrb	r3, [r7, #13]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e069      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> main
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004adc:	e031      	b.n	8004b42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d110      	bne.n	8004b06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d102      	bne.n	8004af0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aea:	7b3b      	ldrb	r3, [r7, #12]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d001      	beq.n	8004af4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e055      	b.n	8004ba0 <HAL_TIM_Encoder_Start+0x114>
=======
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb4:	e031      	b.n	8004f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d110      	bne.n	8004ede <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec2:	7b3b      	ldrb	r3, [r7, #12]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e055      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> main
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b04:	e01d      	b.n	8004b42 <HAL_TIM_Encoder_Start+0xb6>
=======
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	e01d      	b.n	8004f1a <HAL_TIM_Encoder_Start+0xb6>
>>>>>>> main
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d108      	bne.n	8004b1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b0c:	7bbb      	ldrb	r3, [r7, #14]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b12:	7b7b      	ldrb	r3, [r7, #13]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d102      	bne.n	8004b1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b18:	7b3b      	ldrb	r3, [r7, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d001      	beq.n	8004b22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e03e      	b.n	8004ba0 <HAL_TIM_Encoder_Start+0x114>
=======
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d108      	bne.n	8004ef6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d105      	bne.n	8004ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eea:	7b7b      	ldrb	r3, [r7, #13]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ef0:	7b3b      	ldrb	r3, [r7, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d001      	beq.n	8004efa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e03e      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> main
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> main
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_TIM_Encoder_Start+0xc4>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d008      	beq.n	8004b60 <HAL_TIM_Encoder_Start+0xd4>
 8004b4e:	e00f      	b.n	8004b70 <HAL_TIM_Encoder_Start+0xe4>
=======
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_TIM_Encoder_Start+0xc4>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d008      	beq.n	8004f38 <HAL_TIM_Encoder_Start+0xd4>
 8004f26:	e00f      	b.n	8004f48 <HAL_TIM_Encoder_Start+0xe4>
>>>>>>> main
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fa0d 	bl	8004f78 <TIM_CCxChannelCmd>
      break;
 8004b5e:	e016      	b.n	8004b8e <HAL_TIM_Encoder_Start+0x102>
=======
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fa0d 	bl	8005350 <TIM_CCxChannelCmd>
      break;
 8004f36:	e016      	b.n	8004f66 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> main
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2201      	movs	r2, #1
 8004b66:	2104      	movs	r1, #4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fa05 	bl	8004f78 <TIM_CCxChannelCmd>
      break;
 8004b6e:	e00e      	b.n	8004b8e <HAL_TIM_Encoder_Start+0x102>
=======
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2104      	movs	r1, #4
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa05 	bl	8005350 <TIM_CCxChannelCmd>
      break;
 8004f46:	e00e      	b.n	8004f66 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> main
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f9fd 	bl	8004f78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2201      	movs	r2, #1
 8004b84:	2104      	movs	r1, #4
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f9f6 	bl	8004f78 <TIM_CCxChannelCmd>
      break;
 8004b8c:	bf00      	nop
=======
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f9fd 	bl	8005350 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	2104      	movs	r1, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f9f6 	bl	8005350 <TIM_CCxChannelCmd>
      break;
 8004f64:	bf00      	nop
>>>>>>> main
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_IRQHandler>:
=======
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_IRQHandler>:
>>>>>>> main
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x4a>
=======
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0202 	mvn.w	r2, #2
 8004fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x4a>
>>>>>>> main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f905 	bl	8004dfa <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x56>
=======
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f905 	bl	80051d2 <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0x56>
>>>>>>> main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8f7 	bl	8004de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f908 	bl	8004e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
=======
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8f7 	bl	80051be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f908 	bl	80051e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
>>>>>>> main
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0204 	mvn.w	r2, #4
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x9e>
=======
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0204 	mvn.w	r2, #4
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8db 	bl	8004dfa <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0xaa>
=======
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8db 	bl	80051d2 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f8cd 	bl	8004de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f8de 	bl	8004e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
=======
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8cd 	bl	80051be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8de 	bl	80051e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0208 	mvn.w	r2, #8
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0xf2>
=======
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b08      	cmp	r3, #8
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b08      	cmp	r3, #8
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0208 	mvn.w	r2, #8
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8b1 	bl	8004dfa <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xfe>
=======
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8b1 	bl	80051d2 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0xfe>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8a3 	bl	8004de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f8b4 	bl	8004e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
=======
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8a3 	bl	80051be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8b4 	bl	80051e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0210 	mvn.w	r2, #16
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x146>
=======
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b10      	cmp	r3, #16
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0210 	mvn.w	r2, #16
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2208      	movs	r2, #8
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x146>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f887 	bl	8004dfa <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x152>
=======
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f887 	bl	80051d2 <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x152>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f879 	bl	8004de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f88a 	bl	8004e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
=======
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f879 	bl	80051be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f88a 	bl	80051e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0201 	mvn.w	r2, #1
 8004d24:	611a      	str	r2, [r3, #16]
=======
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0201 	mvn.w	r2, #1
 80050fc:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc fa3a 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
=======
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc f99c 	bl	800143c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d50:	611a      	str	r2, [r3, #16]
=======
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005128:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9ce 	bl	80050f4 <HAL_TIMEx_BreakCallback>
=======
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f9ce 	bl	80054cc <HAL_TIMEx_BreakCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d66:	d10e      	bne.n	8004d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d107      	bne.n	8004d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d7e:	611a      	str	r2, [r3, #16]
=======
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513e:	d10e      	bne.n	800515e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d107      	bne.n	800515e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005156:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f9c1 	bl	8005108 <HAL_TIMEx_Break2Callback>
=======
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f9c1 	bl	80054e0 <HAL_TIMEx_Break2Callback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d10e      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d107      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004daa:	611a      	str	r2, [r3, #16]
=======
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d10e      	bne.n	800518a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d107      	bne.n	800518a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005182:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f838 	bl	8004e22 <HAL_TIM_TriggerCallback>
=======
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f838 	bl	80051fa <HAL_TIM_TriggerCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d10e      	bne.n	8004dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0220 	mvn.w	r2, #32
 8004dd6:	611a      	str	r2, [r3, #16]
=======
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b20      	cmp	r3, #32
 8005196:	d10e      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d107      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0220 	mvn.w	r2, #32
 80051ae:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f981 	bl	80050e0 <HAL_TIMEx_CommutCallback>
=======
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f981 	bl	80054b8 <HAL_TIMEx_CommutCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> main
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
=======
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_IC_CaptureCallback>:
=======
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> main
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
=======
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> main
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
=======
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_TIM_TriggerCallback>:
=======
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_TriggerCallback>:
>>>>>>> main
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
=======
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <TIM_Base_SetConfig>:
=======
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <TIM_Base_SetConfig>:
>>>>>>> main
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a40      	ldr	r2, [pc, #256]	; (8004f4c <TIM_Base_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e56:	d00f      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <TIM_Base_SetConfig+0x118>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3c      	ldr	r2, [pc, #240]	; (8004f54 <TIM_Base_SetConfig+0x11c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <TIM_Base_SetConfig+0x120>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3a      	ldr	r2, [pc, #232]	; (8004f5c <TIM_Base_SetConfig+0x124>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d108      	bne.n	8004e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <TIM_Base_SetConfig+0x114>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d02b      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d027      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2c      	ldr	r2, [pc, #176]	; (8004f50 <TIM_Base_SetConfig+0x118>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d023      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	; (8004f54 <TIM_Base_SetConfig+0x11c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2a      	ldr	r2, [pc, #168]	; (8004f58 <TIM_Base_SetConfig+0x120>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01b      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <TIM_Base_SetConfig+0x124>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d017      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a28      	ldr	r2, [pc, #160]	; (8004f60 <TIM_Base_SetConfig+0x128>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a27      	ldr	r2, [pc, #156]	; (8004f64 <TIM_Base_SetConfig+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <TIM_Base_SetConfig+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <TIM_Base_SetConfig+0x134>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <TIM_Base_SetConfig+0x138>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <TIM_Base_SetConfig+0x13c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
=======
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a40      	ldr	r2, [pc, #256]	; (8005324 <TIM_Base_SetConfig+0x114>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d00f      	beq.n	8005250 <TIM_Base_SetConfig+0x40>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a3d      	ldr	r2, [pc, #244]	; (8005328 <TIM_Base_SetConfig+0x118>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00b      	beq.n	8005250 <TIM_Base_SetConfig+0x40>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a3c      	ldr	r2, [pc, #240]	; (800532c <TIM_Base_SetConfig+0x11c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d007      	beq.n	8005250 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3b      	ldr	r2, [pc, #236]	; (8005330 <TIM_Base_SetConfig+0x120>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3a      	ldr	r2, [pc, #232]	; (8005334 <TIM_Base_SetConfig+0x124>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d108      	bne.n	8005262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <TIM_Base_SetConfig+0x114>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02b      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d027      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <TIM_Base_SetConfig+0x118>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d023      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2b      	ldr	r2, [pc, #172]	; (800532c <TIM_Base_SetConfig+0x11c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01f      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <TIM_Base_SetConfig+0x120>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01b      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a29      	ldr	r2, [pc, #164]	; (8005334 <TIM_Base_SetConfig+0x124>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d017      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a28      	ldr	r2, [pc, #160]	; (8005338 <TIM_Base_SetConfig+0x128>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a27      	ldr	r2, [pc, #156]	; (800533c <TIM_Base_SetConfig+0x12c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a26      	ldr	r2, [pc, #152]	; (8005340 <TIM_Base_SetConfig+0x130>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a25      	ldr	r2, [pc, #148]	; (8005344 <TIM_Base_SetConfig+0x134>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a24      	ldr	r2, [pc, #144]	; (8005348 <TIM_Base_SetConfig+0x138>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a23      	ldr	r2, [pc, #140]	; (800534c <TIM_Base_SetConfig+0x13c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <TIM_Base_SetConfig+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0xf8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <TIM_Base_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d103      	bne.n	8004f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <TIM_Base_SetConfig+0x114>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0xf8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <TIM_Base_SetConfig+0x124>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d103      	bne.n	8005310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> main
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800
 8004f6c:	40001800 	.word	0x40001800
 8004f70:	40001c00 	.word	0x40001c00
 8004f74:	40002000 	.word	0x40002000

08004f78 <TIM_CCxChannelCmd>:
=======
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	615a      	str	r2, [r3, #20]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800
 8005344:	40001800 	.word	0x40001800
 8005348:	40001c00 	.word	0x40001c00
 800534c:	40002000 	.word	0x40002000

08005350 <TIM_CCxChannelCmd>:
>>>>>>> main
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
=======
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> main
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
=======
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
>>>>>>> main
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06d      	b.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e06d      	b.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a30      	ldr	r2, [pc, #192]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d108      	bne.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
=======
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
=======
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d022      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005426:	d01d      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d018      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10c      	bne.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4313      	orrs	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIMEx_CommutCallback>:
=======
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40010000 	.word	0x40010000
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40001800 	.word	0x40001800

080054b8 <HAL_TIMEx_CommutCallback>:
>>>>>>> main
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
=======
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_BreakCallback>:
=======
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIMEx_BreakCallback>:
>>>>>>> main
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
=======
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_Break2Callback>:
=======
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_Break2Callback>:
>>>>>>> main
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
=======
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
=======
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_Init>:
>>>>>>> main
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
=======
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e040      	b.n	8005588 <HAL_UART_Init+0x94>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
=======
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
>>>>>>> main

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc fcc6 	bl	8001ad0 <HAL_UART_MspInit>
=======
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fcce 	bl	8001eb8 <HAL_UART_MspInit>
>>>>>>> main
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fc18 	bl	8005990 <UART_SetConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fe70 	bl	8005e58 <UART_AdvFeatureConfig>
=======
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fc18 	bl	8005d68 <UART_SetConfig>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e022      	b.n	8005588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe6e 	bl	800622c <UART_AdvFeatureConfig>
>>>>>>> main
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fef7 	bl	8005f9c <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_UART_Transmit>:
=======
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800555e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800556e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fef5 	bl	8006370 <UART_CheckIdleState>
 8005586:	4603      	mov	r3, r0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_UART_Transmit>:
>>>>>>> main
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80fb      	strh	r3, [r7, #6]
=======
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	80fb      	strh	r3, [r7, #6]
>>>>>>> main
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	f040 8081 	bne.w	80052d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_UART_Transmit+0x26>
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e079      	b.n	80052d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_UART_Transmit+0x38>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e072      	b.n	80052d6 <HAL_UART_Transmit+0x11e>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2221      	movs	r2, #33	; 0x21
 8005204:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005206:	f7fc fdbd 	bl	8001d84 <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d108      	bne.n	8005238 <HAL_UART_Transmit+0x80>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e003      	b.n	8005240 <HAL_UART_Transmit+0x88>
=======
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	f040 8081 	bne.w	80056ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_UART_Transmit+0x26>
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e079      	b.n	80056ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Transmit+0x38>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e072      	b.n	80056ae <HAL_UART_Transmit+0x11e>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2221      	movs	r2, #33	; 0x21
 80055dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055de:	f7fc fdbb 	bl	8002158 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fc:	d108      	bne.n	8005610 <HAL_UART_Transmit+0x80>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e003      	b.n	8005618 <HAL_UART_Transmit+0x88>
>>>>>>> main
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005248:	e02c      	b.n	80052a4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 feea 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e038      	b.n	80052d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	3302      	adds	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e007      	b.n	8005292 <HAL_UART_Transmit+0xda>
=======
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005620:	e02c      	b.n	800567c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2200      	movs	r2, #0
 800562a:	2180      	movs	r1, #128	; 0x80
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fee8 	bl	8006402 <UART_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e038      	b.n	80056ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	3302      	adds	r3, #2
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e007      	b.n	800566a <HAL_UART_Transmit+0xda>
>>>>>>> main
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1cc      	bne.n	800524a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 feb7 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e005      	b.n	80052d6 <HAL_UART_Transmit+0x11e>
=======
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	3301      	adds	r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1cc      	bne.n	8005622 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 feb5 	bl	8006402 <UART_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e005      	b.n	80056ae <HAL_UART_Transmit+0x11e>
>>>>>>> main
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <HAL_UART_Transmit+0x11e>
=======
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_UART_Transmit+0x11e>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_UART_Receive_IT>:
=======
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_UART_Receive_IT>:
>>>>>>> main
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80052de:	b580      	push	{r7, lr}
 80052e0:	b08a      	sub	sp, #40	; 0x28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d13d      	bne.n	8005370 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Receive_IT+0x22>
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e036      	b.n	8005372 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_UART_Receive_IT+0x34>
 800530e:	2302      	movs	r3, #2
 8005310:	e02f      	b.n	8005372 <HAL_UART_Receive_IT+0x94>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	617b      	str	r3, [r7, #20]
=======
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b08a      	sub	sp, #40	; 0x28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	4613      	mov	r3, r2
 80056c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d13d      	bne.n	8005748 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_UART_Receive_IT+0x22>
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e036      	b.n	800574a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Receive_IT+0x34>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e02f      	b.n	800574a <HAL_UART_Receive_IT+0x94>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d018      	beq.n	8005738 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	617b      	str	r3, [r7, #20]
>>>>>>> main
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	613b      	str	r3, [r7, #16]
   return(result);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	61fa      	str	r2, [r7, #28]
=======
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	613b      	str	r3, [r7, #16]
   return(result);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	61fa      	str	r2, [r7, #28]
>>>>>>> main
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8005350:	69f9      	ldr	r1, [r7, #28]
 8005352:	6a3a      	ldr	r2, [r7, #32]
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	61bb      	str	r3, [r7, #24]
   return(result);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e6      	bne.n	800532e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	461a      	mov	r2, r3
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 ff26 	bl	80061b8 <UART_Start_Receive_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	e000      	b.n	8005372 <HAL_UART_Receive_IT+0x94>
=======
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	61bb      	str	r3, [r7, #24]
   return(result);
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	461a      	mov	r2, r3
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 ff24 	bl	800658c <UART_Start_Receive_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	e000      	b.n	800574a <HAL_UART_Receive_IT+0x94>
>>>>>>> main
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3728      	adds	r7, #40	; 0x28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_UART_IRQHandler>:
=======
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <HAL_UART_IRQHandler>:
>>>>>>> main
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	; 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8005754:	b580      	push	{r7, lr}
 8005756:	b0ba      	sub	sp, #232	; 0xe8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> main

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 80053a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80053aa:	4013      	ands	r3, r2
 80053ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d115      	bne.n	80053e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00f      	beq.n	80053e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 82a4 	beq.w	8005922 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      }
      return;
 80053e2:	e29e      	b.n	8005922 <HAL_UART_IRQHandler+0x5a6>
=======
 800577a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800577e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005782:	4013      	ands	r3, r2
 8005784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d115      	bne.n	80057bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00f      	beq.n	80057bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 82a4 	beq.w	8005cfa <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
      }
      return;
 80057ba:	e29e      	b.n	8005cfa <HAL_UART_IRQHandler+0x5a6>
>>>>>>> main
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 80053e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8117 	beq.w	800561c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053fe:	4b85      	ldr	r3, [pc, #532]	; (8005614 <HAL_UART_IRQHandler+0x298>)
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 810a 	beq.w	800561c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0xbc>
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 80057bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8117 	beq.w	80059f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80057d6:	4b85      	ldr	r3, [pc, #532]	; (80059ec <HAL_UART_IRQHandler+0x298>)
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 810a 	beq.w	80059f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d011      	beq.n	8005810 <HAL_UART_IRQHandler+0xbc>
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2201      	movs	r2, #1
 80057fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005806:	f043 0201 	orr.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> main
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <HAL_UART_IRQHandler+0xec>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2202      	movs	r2, #2
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545e:	f043 0204 	orr.w	r2, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d011      	beq.n	8005840 <HAL_UART_IRQHandler+0xec>
 800581c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2202      	movs	r2, #2
 800582e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005836:	f043 0204 	orr.w	r2, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> main
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d011      	beq.n	8005498 <HAL_UART_IRQHandler+0x11c>
 8005474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2204      	movs	r2, #4
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d011      	beq.n	8005870 <HAL_UART_IRQHandler+0x11c>
 800584c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2204      	movs	r2, #4
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> main
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d017      	beq.n	80054d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ca:	f043 0208 	orr.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d017      	beq.n	80058ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800588c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2208      	movs	r2, #8
 800589a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a2:	f043 0208 	orr.w	r2, r3, #8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> main
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <HAL_UART_IRQHandler+0x18a>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <HAL_UART_IRQHandler+0x18a>
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058d4:	f043 0220 	orr.w	r2, r3, #32
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> main
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 820a 	beq.w	8005926 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
=======
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 820a 	beq.w	8005cfe <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
>>>>>>> main
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d005      	beq.n	800555e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005556:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04f      	beq.n	80055fe <HAL_UART_IRQHandler+0x282>
=======
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d005      	beq.n	8005936 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800592a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04f      	beq.n	80059d6 <HAL_UART_IRQHandler+0x282>
>>>>>>> main
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fef4 	bl	800634c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d141      	bne.n	80055f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1d9      	bne.n	8005572 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <HAL_UART_IRQHandler+0x272>
=======
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fef2 	bl	8006720 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d141      	bne.n	80059ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800597a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800598e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1d9      	bne.n	800594a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	2b00      	cmp	r3, #0
 800599c:	d013      	beq.n	80059c6 <HAL_UART_IRQHandler+0x272>
>>>>>>> main
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a13      	ldr	r2, [pc, #76]	; (8005618 <HAL_UART_IRQHandler+0x29c>)
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fd fbf5 	bl	8002dc2 <HAL_DMA_Abort_IT>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	e00f      	b.n	800560e <HAL_UART_IRQHandler+0x292>
=======
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <HAL_UART_IRQHandler+0x29c>)
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fd fbf3 	bl	8003196 <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d017      	beq.n	80059e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	e00f      	b.n	80059e6 <HAL_UART_IRQHandler+0x292>
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9ae 	bl	8005950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	e00b      	b.n	800560e <HAL_UART_IRQHandler+0x292>
=======
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f9ae 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	e00b      	b.n	80059e6 <HAL_UART_IRQHandler+0x292>
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9aa 	bl	8005950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	e007      	b.n	800560e <HAL_UART_IRQHandler+0x292>
=======
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f9aa 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	e007      	b.n	80059e6 <HAL_UART_IRQHandler+0x292>
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f9a6 	bl	8005950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800560c:	e18b      	b.n	8005926 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	bf00      	nop
    return;
 8005610:	e189      	b.n	8005926 <HAL_UART_IRQHandler+0x5aa>
 8005612:	bf00      	nop
 8005614:	04000120 	.word	0x04000120
 8005618:	08006413 	.word	0x08006413
=======
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9a6 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80059e4:	e18b      	b.n	8005cfe <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e6:	bf00      	nop
    return;
 80059e8:	e189      	b.n	8005cfe <HAL_UART_IRQHandler+0x5aa>
 80059ea:	bf00      	nop
 80059ec:	04000120 	.word	0x04000120
 80059f0:	080067e7 	.word	0x080067e7
>>>>>>> main

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	2b01      	cmp	r3, #1
 8005622:	f040 8144 	bne.w	80058ae <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 813d 	beq.w	80058ae <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8136 	beq.w	80058ae <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2210      	movs	r2, #16
 8005648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	f040 80b2 	bne.w	80057be <HAL_UART_IRQHandler+0x442>
=======
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	f040 8144 	bne.w	8005c86 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 813d 	beq.w	8005c86 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8136 	beq.w	8005c86 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	f040 80b2 	bne.w	8005b96 <HAL_UART_IRQHandler+0x442>
>>>>>>> main
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005666:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 815d 	beq.w	800592a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800567a:	429a      	cmp	r2, r3
 800567c:	f080 8155 	bcs.w	800592a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005694:	f000 8085 	beq.w	80057a2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1da      	bne.n	8005698 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005706:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800570a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800570e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e1      	bne.n	80056e2 <HAL_UART_IRQHandler+0x366>
=======
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 815d 	beq.w	8005d02 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a52:	429a      	cmp	r2, r3
 8005a54:	f080 8155 	bcs.w	8005d02 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6c:	f000 8085 	beq.w	8005b7a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1da      	bne.n	8005a70 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e1      	bne.n	8005aba <HAL_UART_IRQHandler+0x366>
>>>>>>> main

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005748:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e3      	bne.n	800571e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f023 0310 	bic.w	r3, r3, #16
 8005776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005784:	65bb      	str	r3, [r7, #88]	; 0x58
 8005786:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e4      	bne.n	8005762 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd faa0 	bl	8002ce2 <HAL_DMA_Abort>
=======
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e3      	bne.n	8005af6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4a:	f023 0310 	bic.w	r3, r3, #16
 8005b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e4      	bne.n	8005b3a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fd fa9e 	bl	80030b6 <HAL_DMA_Abort>
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8d4 	bl	8005964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057bc:	e0b5      	b.n	800592a <HAL_UART_IRQHandler+0x5ae>
=======
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8d4 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b94:	e0b5      	b.n	8005d02 <HAL_UART_IRQHandler+0x5ae>
>>>>>>> main
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80a7 	beq.w	800592e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80057e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a2 	beq.w	800592e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800580c:	647b      	str	r3, [r7, #68]	; 0x44
 800580e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e4      	bne.n	80057ea <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	623b      	str	r3, [r7, #32]
   return(result);
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005844:	633a      	str	r2, [r7, #48]	; 0x30
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800584a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e3      	bne.n	8005820 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60fb      	str	r3, [r7, #12]
   return(result);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e4      	bne.n	800586a <HAL_UART_IRQHandler+0x4ee>
=======
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80a7 	beq.w	8005d06 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80a2 	beq.w	8005d06 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
 8005be6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e4      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	623b      	str	r3, [r7, #32]
   return(result);
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c1c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e3      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0310 	bic.w	r3, r3, #16
 8005c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e4      	bne.n	8005c42 <HAL_UART_IRQHandler+0x4ee>
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 80058a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f85c 	bl	8005964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ac:	e03f      	b.n	800592e <HAL_UART_IRQHandler+0x5b2>
=======
 8005c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f85c 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c84:	e03f      	b.n	8005d06 <HAL_UART_IRQHandler+0x5b2>
>>>>>>> main
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <HAL_UART_IRQHandler+0x55c>
 80058ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058ce:	621a      	str	r2, [r3, #32]
=======
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x55c>
 8005c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ca6:	621a      	str	r2, [r3, #32]
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f853 	bl	800597c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d6:	e02d      	b.n	8005934 <HAL_UART_IRQHandler+0x5b8>
=======
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f853 	bl	8005d54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cae:	e02d      	b.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
>>>>>>> main
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    }
    return;
 8005900:	e017      	b.n	8005932 <HAL_UART_IRQHandler+0x5b6>
=======
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00e      	beq.n	8005cda <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01c      	beq.n	8005d0a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
    }
    return;
 8005cd8:	e017      	b.n	8005d0a <HAL_UART_IRQHandler+0x5b6>
>>>>>>> main
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d012      	beq.n	8005934 <HAL_UART_IRQHandler+0x5b8>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fd8f 	bl	800643e <UART_EndTransmit_IT>
    return;
 8005920:	e008      	b.n	8005934 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005922:	bf00      	nop
 8005924:	e006      	b.n	8005934 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <HAL_UART_IRQHandler+0x5b8>
      return;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <HAL_UART_IRQHandler+0x5b8>
      return;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005932:	bf00      	nop
  }

}
 8005934:	37e8      	adds	r7, #232	; 0xe8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <HAL_UART_TxCpltCallback>:
=======
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d012      	beq.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fd8d 	bl	8006812 <UART_EndTransmit_IT>
    return;
 8005cf8:	e008      	b.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005cfa:	bf00      	nop
 8005cfc:	e006      	b.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
    return;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <HAL_UART_IRQHandler+0x5b8>
    return;
 8005d0a:	bf00      	nop
  }

}
 8005d0c:	37e8      	adds	r7, #232	; 0xe8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop

08005d14 <HAL_UART_TxCpltCallback>:
>>>>>>> main
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
=======
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UART_ErrorCallback>:
=======
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_ErrorCallback>:
>>>>>>> main
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
=======
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UARTEx_RxEventCallback>:
=======
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_UARTEx_RxEventCallback>:
>>>>>>> main
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	807b      	strh	r3, [r7, #2]
=======
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
>>>>>>> main
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_UARTEx_WakeupCallback>:
=======
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_UARTEx_WakeupCallback>:
>>>>>>> main
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
=======
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <UART_SetConfig>:
=======
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <UART_SetConfig>:
>>>>>>> main
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
=======
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8005998:	2300      	movs	r3, #0
 800599a:	77bb      	strb	r3, [r7, #30]
=======
 8005d70:	2300      	movs	r3, #0
 8005d72:	77bb      	strb	r3, [r7, #30]
>>>>>>> main
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4ba6      	ldr	r3, [pc, #664]	; (8005c54 <UART_SetConfig+0x2c4>)
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	6979      	ldr	r1, [r7, #20]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6013      	str	r3, [r2, #0]
=======
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4ba7      	ldr	r3, [pc, #668]	; (8006030 <UART_SetConfig+0x2c8>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	6979      	ldr	r1, [r7, #20]
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	6013      	str	r3, [r2, #0]
>>>>>>> main

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
=======
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
>>>>>>> main
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	609a      	str	r2, [r3, #8]
=======
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]
>>>>>>> main


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a94      	ldr	r2, [pc, #592]	; (8005c58 <UART_SetConfig+0x2c8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d120      	bne.n	8005a4e <UART_SetConfig+0xbe>
 8005a0c:	4b93      	ldr	r3, [pc, #588]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d816      	bhi.n	8005a48 <UART_SetConfig+0xb8>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x90>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a37 	.word	0x08005a37
 8005a2c:	08005a43 	.word	0x08005a43
 8005a30:	2301      	movs	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e150      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005a36:	2302      	movs	r3, #2
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e14d      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e14a      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005a42:	2308      	movs	r3, #8
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e147      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e144      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a83      	ldr	r2, [pc, #524]	; (8005c60 <UART_SetConfig+0x2d0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d132      	bne.n	8005abe <UART_SetConfig+0x12e>
 8005a58:	4b80      	ldr	r3, [pc, #512]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d828      	bhi.n	8005ab8 <UART_SetConfig+0x128>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <UART_SetConfig+0xdc>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005ab9 	.word	0x08005ab9
 8005a74:	08005ab9 	.word	0x08005ab9
 8005a78:	08005ab9 	.word	0x08005ab9
 8005a7c:	08005aad 	.word	0x08005aad
 8005a80:	08005ab9 	.word	0x08005ab9
 8005a84:	08005ab9 	.word	0x08005ab9
 8005a88:	08005ab9 	.word	0x08005ab9
 8005a8c:	08005aa7 	.word	0x08005aa7
 8005a90:	08005ab9 	.word	0x08005ab9
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005ab3 	.word	0x08005ab3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e118      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e115      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005aac:	2304      	movs	r3, #4
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e112      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e10f      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e10c      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a68      	ldr	r2, [pc, #416]	; (8005c64 <UART_SetConfig+0x2d4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d120      	bne.n	8005b0a <UART_SetConfig+0x17a>
 8005ac8:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	d013      	beq.n	8005afe <UART_SetConfig+0x16e>
 8005ad6:	2b30      	cmp	r3, #48	; 0x30
 8005ad8:	d814      	bhi.n	8005b04 <UART_SetConfig+0x174>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d009      	beq.n	8005af2 <UART_SetConfig+0x162>
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d810      	bhi.n	8005b04 <UART_SetConfig+0x174>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <UART_SetConfig+0x15c>
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d006      	beq.n	8005af8 <UART_SetConfig+0x168>
 8005aea:	e00b      	b.n	8005b04 <UART_SetConfig+0x174>
 8005aec:	2300      	movs	r3, #0
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e0f2      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e0ef      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005af8:	2304      	movs	r3, #4
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e0ec      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005afe:	2308      	movs	r3, #8
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e0e9      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b04:	2310      	movs	r3, #16
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e0e6      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a56      	ldr	r2, [pc, #344]	; (8005c68 <UART_SetConfig+0x2d8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d120      	bne.n	8005b56 <UART_SetConfig+0x1c6>
 8005b14:	4b51      	ldr	r3, [pc, #324]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b20:	d013      	beq.n	8005b4a <UART_SetConfig+0x1ba>
 8005b22:	2bc0      	cmp	r3, #192	; 0xc0
 8005b24:	d814      	bhi.n	8005b50 <UART_SetConfig+0x1c0>
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d009      	beq.n	8005b3e <UART_SetConfig+0x1ae>
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d810      	bhi.n	8005b50 <UART_SetConfig+0x1c0>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <UART_SetConfig+0x1a8>
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d006      	beq.n	8005b44 <UART_SetConfig+0x1b4>
 8005b36:	e00b      	b.n	8005b50 <UART_SetConfig+0x1c0>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e0cc      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e0c9      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b44:	2304      	movs	r3, #4
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e0c6      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e0c3      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b50:	2310      	movs	r3, #16
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e0c0      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a44      	ldr	r2, [pc, #272]	; (8005c6c <UART_SetConfig+0x2dc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d125      	bne.n	8005bac <UART_SetConfig+0x21c>
 8005b60:	4b3e      	ldr	r3, [pc, #248]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b6e:	d017      	beq.n	8005ba0 <UART_SetConfig+0x210>
 8005b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b74:	d817      	bhi.n	8005ba6 <UART_SetConfig+0x216>
 8005b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7a:	d00b      	beq.n	8005b94 <UART_SetConfig+0x204>
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b80:	d811      	bhi.n	8005ba6 <UART_SetConfig+0x216>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <UART_SetConfig+0x1fe>
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8a:	d006      	beq.n	8005b9a <UART_SetConfig+0x20a>
 8005b8c:	e00b      	b.n	8005ba6 <UART_SetConfig+0x216>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e0a1      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b94:	2302      	movs	r3, #2
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e09e      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e09b      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e098      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005ba6:	2310      	movs	r3, #16
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e095      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2f      	ldr	r2, [pc, #188]	; (8005c70 <UART_SetConfig+0x2e0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d125      	bne.n	8005c02 <UART_SetConfig+0x272>
 8005bb6:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bc4:	d017      	beq.n	8005bf6 <UART_SetConfig+0x266>
 8005bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bca:	d817      	bhi.n	8005bfc <UART_SetConfig+0x26c>
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd0:	d00b      	beq.n	8005bea <UART_SetConfig+0x25a>
 8005bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd6:	d811      	bhi.n	8005bfc <UART_SetConfig+0x26c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <UART_SetConfig+0x254>
 8005bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be0:	d006      	beq.n	8005bf0 <UART_SetConfig+0x260>
 8005be2:	e00b      	b.n	8005bfc <UART_SetConfig+0x26c>
 8005be4:	2301      	movs	r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e076      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005bea:	2302      	movs	r3, #2
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e073      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e070      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e06d      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e06a      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <UART_SetConfig+0x2e4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d138      	bne.n	8005c7e <UART_SetConfig+0x2ee>
 8005c0c:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <UART_SetConfig+0x2cc>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c1a:	d017      	beq.n	8005c4c <UART_SetConfig+0x2bc>
 8005c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c20:	d82a      	bhi.n	8005c78 <UART_SetConfig+0x2e8>
 8005c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c26:	d00b      	beq.n	8005c40 <UART_SetConfig+0x2b0>
 8005c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2c:	d824      	bhi.n	8005c78 <UART_SetConfig+0x2e8>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <UART_SetConfig+0x2aa>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d006      	beq.n	8005c46 <UART_SetConfig+0x2b6>
 8005c38:	e01e      	b.n	8005c78 <UART_SetConfig+0x2e8>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e04b      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005c40:	2302      	movs	r3, #2
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e048      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005c46:	2304      	movs	r3, #4
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e045      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e042      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005c52:	bf00      	nop
 8005c54:	efff69f3 	.word	0xefff69f3
 8005c58:	40011000 	.word	0x40011000
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40004400 	.word	0x40004400
 8005c64:	40004800 	.word	0x40004800
 8005c68:	40004c00 	.word	0x40004c00
 8005c6c:	40005000 	.word	0x40005000
 8005c70:	40011400 	.word	0x40011400
 8005c74:	40007800 	.word	0x40007800
 8005c78:	2310      	movs	r3, #16
 8005c7a:	77fb      	strb	r3, [r7, #31]
 8005c7c:	e02c      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a72      	ldr	r2, [pc, #456]	; (8005e4c <UART_SetConfig+0x4bc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d125      	bne.n	8005cd4 <UART_SetConfig+0x344>
 8005c88:	4b71      	ldr	r3, [pc, #452]	; (8005e50 <UART_SetConfig+0x4c0>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c96:	d017      	beq.n	8005cc8 <UART_SetConfig+0x338>
 8005c98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c9c:	d817      	bhi.n	8005cce <UART_SetConfig+0x33e>
 8005c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca2:	d00b      	beq.n	8005cbc <UART_SetConfig+0x32c>
 8005ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca8:	d811      	bhi.n	8005cce <UART_SetConfig+0x33e>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <UART_SetConfig+0x326>
 8005cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb2:	d006      	beq.n	8005cc2 <UART_SetConfig+0x332>
 8005cb4:	e00b      	b.n	8005cce <UART_SetConfig+0x33e>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e00d      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	e00a      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e007      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e004      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005cce:	2310      	movs	r3, #16
 8005cd0:	77fb      	strb	r3, [r7, #31]
 8005cd2:	e001      	b.n	8005cd8 <UART_SetConfig+0x348>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce0:	d15b      	bne.n	8005d9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ce2:	7ffb      	ldrb	r3, [r7, #31]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d828      	bhi.n	8005d3a <UART_SetConfig+0x3aa>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x360>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d1d 	.word	0x08005d1d
 8005cf8:	08005d25 	.word	0x08005d25
 8005cfc:	08005d3b 	.word	0x08005d3b
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d3b 	.word	0x08005d3b
 8005d08:	08005d3b 	.word	0x08005d3b
 8005d0c:	08005d3b 	.word	0x08005d3b
 8005d10:	08005d33 	.word	0x08005d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fe f8c4 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8005d18:	61b8      	str	r0, [r7, #24]
        break;
 8005d1a:	e013      	b.n	8005d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d1c:	f7fe f8d4 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8005d20:	61b8      	str	r0, [r7, #24]
        break;
 8005d22:	e00f      	b.n	8005d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d24:	4b4b      	ldr	r3, [pc, #300]	; (8005e54 <UART_SetConfig+0x4c4>)
 8005d26:	61bb      	str	r3, [r7, #24]
        break;
 8005d28:	e00c      	b.n	8005d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2a:	f7fd ffa7 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8005d2e:	61b8      	str	r0, [r7, #24]
        break;
 8005d30:	e008      	b.n	8005d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d36:	61bb      	str	r3, [r7, #24]
        break;
 8005d38:	e004      	b.n	8005d44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	77bb      	strb	r3, [r7, #30]
        break;
 8005d42:	bf00      	nop
=======
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a95      	ldr	r2, [pc, #596]	; (8006034 <UART_SetConfig+0x2cc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d120      	bne.n	8005e26 <UART_SetConfig+0xbe>
 8005de4:	4b94      	ldr	r3, [pc, #592]	; (8006038 <UART_SetConfig+0x2d0>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d816      	bhi.n	8005e20 <UART_SetConfig+0xb8>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x90>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e15 	.word	0x08005e15
 8005e00:	08005e0f 	.word	0x08005e0f
 8005e04:	08005e1b 	.word	0x08005e1b
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e14f      	b.n	80060ae <UART_SetConfig+0x346>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e14c      	b.n	80060ae <UART_SetConfig+0x346>
 8005e14:	2304      	movs	r3, #4
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e149      	b.n	80060ae <UART_SetConfig+0x346>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e146      	b.n	80060ae <UART_SetConfig+0x346>
 8005e20:	2310      	movs	r3, #16
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e143      	b.n	80060ae <UART_SetConfig+0x346>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a84      	ldr	r2, [pc, #528]	; (800603c <UART_SetConfig+0x2d4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d132      	bne.n	8005e96 <UART_SetConfig+0x12e>
 8005e30:	4b81      	ldr	r3, [pc, #516]	; (8006038 <UART_SetConfig+0x2d0>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d828      	bhi.n	8005e90 <UART_SetConfig+0x128>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0xdc>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e85 	.word	0x08005e85
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005e91 	.word	0x08005e91
 8005e64:	08005e7f 	.word	0x08005e7f
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e8b 	.word	0x08005e8b
 8005e78:	2300      	movs	r3, #0
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e117      	b.n	80060ae <UART_SetConfig+0x346>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e114      	b.n	80060ae <UART_SetConfig+0x346>
 8005e84:	2304      	movs	r3, #4
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e111      	b.n	80060ae <UART_SetConfig+0x346>
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e10e      	b.n	80060ae <UART_SetConfig+0x346>
 8005e90:	2310      	movs	r3, #16
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e10b      	b.n	80060ae <UART_SetConfig+0x346>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a69      	ldr	r2, [pc, #420]	; (8006040 <UART_SetConfig+0x2d8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d120      	bne.n	8005ee2 <UART_SetConfig+0x17a>
 8005ea0:	4b65      	ldr	r3, [pc, #404]	; (8006038 <UART_SetConfig+0x2d0>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eaa:	2b30      	cmp	r3, #48	; 0x30
 8005eac:	d013      	beq.n	8005ed6 <UART_SetConfig+0x16e>
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d814      	bhi.n	8005edc <UART_SetConfig+0x174>
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d009      	beq.n	8005eca <UART_SetConfig+0x162>
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d810      	bhi.n	8005edc <UART_SetConfig+0x174>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <UART_SetConfig+0x15c>
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d006      	beq.n	8005ed0 <UART_SetConfig+0x168>
 8005ec2:	e00b      	b.n	8005edc <UART_SetConfig+0x174>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e0f1      	b.n	80060ae <UART_SetConfig+0x346>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e0ee      	b.n	80060ae <UART_SetConfig+0x346>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e0eb      	b.n	80060ae <UART_SetConfig+0x346>
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e0e8      	b.n	80060ae <UART_SetConfig+0x346>
 8005edc:	2310      	movs	r3, #16
 8005ede:	77fb      	strb	r3, [r7, #31]
 8005ee0:	e0e5      	b.n	80060ae <UART_SetConfig+0x346>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a57      	ldr	r2, [pc, #348]	; (8006044 <UART_SetConfig+0x2dc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d120      	bne.n	8005f2e <UART_SetConfig+0x1c6>
 8005eec:	4b52      	ldr	r3, [pc, #328]	; (8006038 <UART_SetConfig+0x2d0>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ef8:	d013      	beq.n	8005f22 <UART_SetConfig+0x1ba>
 8005efa:	2bc0      	cmp	r3, #192	; 0xc0
 8005efc:	d814      	bhi.n	8005f28 <UART_SetConfig+0x1c0>
 8005efe:	2b80      	cmp	r3, #128	; 0x80
 8005f00:	d009      	beq.n	8005f16 <UART_SetConfig+0x1ae>
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d810      	bhi.n	8005f28 <UART_SetConfig+0x1c0>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <UART_SetConfig+0x1a8>
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d006      	beq.n	8005f1c <UART_SetConfig+0x1b4>
 8005f0e:	e00b      	b.n	8005f28 <UART_SetConfig+0x1c0>
 8005f10:	2300      	movs	r3, #0
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e0cb      	b.n	80060ae <UART_SetConfig+0x346>
 8005f16:	2302      	movs	r3, #2
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e0c8      	b.n	80060ae <UART_SetConfig+0x346>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e0c5      	b.n	80060ae <UART_SetConfig+0x346>
 8005f22:	2308      	movs	r3, #8
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e0c2      	b.n	80060ae <UART_SetConfig+0x346>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e0bf      	b.n	80060ae <UART_SetConfig+0x346>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a45      	ldr	r2, [pc, #276]	; (8006048 <UART_SetConfig+0x2e0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d125      	bne.n	8005f84 <UART_SetConfig+0x21c>
 8005f38:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <UART_SetConfig+0x2d0>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f46:	d017      	beq.n	8005f78 <UART_SetConfig+0x210>
 8005f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f4c:	d817      	bhi.n	8005f7e <UART_SetConfig+0x216>
 8005f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f52:	d00b      	beq.n	8005f6c <UART_SetConfig+0x204>
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f58:	d811      	bhi.n	8005f7e <UART_SetConfig+0x216>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <UART_SetConfig+0x1fe>
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f62:	d006      	beq.n	8005f72 <UART_SetConfig+0x20a>
 8005f64:	e00b      	b.n	8005f7e <UART_SetConfig+0x216>
 8005f66:	2300      	movs	r3, #0
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e0a0      	b.n	80060ae <UART_SetConfig+0x346>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e09d      	b.n	80060ae <UART_SetConfig+0x346>
 8005f72:	2304      	movs	r3, #4
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e09a      	b.n	80060ae <UART_SetConfig+0x346>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e097      	b.n	80060ae <UART_SetConfig+0x346>
 8005f7e:	2310      	movs	r3, #16
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e094      	b.n	80060ae <UART_SetConfig+0x346>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a30      	ldr	r2, [pc, #192]	; (800604c <UART_SetConfig+0x2e4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d125      	bne.n	8005fda <UART_SetConfig+0x272>
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <UART_SetConfig+0x2d0>)
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f9c:	d017      	beq.n	8005fce <UART_SetConfig+0x266>
 8005f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fa2:	d817      	bhi.n	8005fd4 <UART_SetConfig+0x26c>
 8005fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa8:	d00b      	beq.n	8005fc2 <UART_SetConfig+0x25a>
 8005faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fae:	d811      	bhi.n	8005fd4 <UART_SetConfig+0x26c>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <UART_SetConfig+0x254>
 8005fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb8:	d006      	beq.n	8005fc8 <UART_SetConfig+0x260>
 8005fba:	e00b      	b.n	8005fd4 <UART_SetConfig+0x26c>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e075      	b.n	80060ae <UART_SetConfig+0x346>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e072      	b.n	80060ae <UART_SetConfig+0x346>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e06f      	b.n	80060ae <UART_SetConfig+0x346>
 8005fce:	2308      	movs	r3, #8
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e06c      	b.n	80060ae <UART_SetConfig+0x346>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e069      	b.n	80060ae <UART_SetConfig+0x346>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <UART_SetConfig+0x2e8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d137      	bne.n	8006054 <UART_SetConfig+0x2ec>
 8005fe4:	4b14      	ldr	r3, [pc, #80]	; (8006038 <UART_SetConfig+0x2d0>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ff2:	d017      	beq.n	8006024 <UART_SetConfig+0x2bc>
 8005ff4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ff8:	d817      	bhi.n	800602a <UART_SetConfig+0x2c2>
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	d00b      	beq.n	8006018 <UART_SetConfig+0x2b0>
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006004:	d811      	bhi.n	800602a <UART_SetConfig+0x2c2>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <UART_SetConfig+0x2aa>
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d006      	beq.n	800601e <UART_SetConfig+0x2b6>
 8006010:	e00b      	b.n	800602a <UART_SetConfig+0x2c2>
 8006012:	2300      	movs	r3, #0
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e04a      	b.n	80060ae <UART_SetConfig+0x346>
 8006018:	2302      	movs	r3, #2
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e047      	b.n	80060ae <UART_SetConfig+0x346>
 800601e:	2304      	movs	r3, #4
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e044      	b.n	80060ae <UART_SetConfig+0x346>
 8006024:	2308      	movs	r3, #8
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e041      	b.n	80060ae <UART_SetConfig+0x346>
 800602a:	2310      	movs	r3, #16
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e03e      	b.n	80060ae <UART_SetConfig+0x346>
 8006030:	efff69f3 	.word	0xefff69f3
 8006034:	40011000 	.word	0x40011000
 8006038:	40023800 	.word	0x40023800
 800603c:	40004400 	.word	0x40004400
 8006040:	40004800 	.word	0x40004800
 8006044:	40004c00 	.word	0x40004c00
 8006048:	40005000 	.word	0x40005000
 800604c:	40011400 	.word	0x40011400
 8006050:	40007800 	.word	0x40007800
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a71      	ldr	r2, [pc, #452]	; (8006220 <UART_SetConfig+0x4b8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d125      	bne.n	80060aa <UART_SetConfig+0x342>
 800605e:	4b71      	ldr	r3, [pc, #452]	; (8006224 <UART_SetConfig+0x4bc>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800606c:	d017      	beq.n	800609e <UART_SetConfig+0x336>
 800606e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006072:	d817      	bhi.n	80060a4 <UART_SetConfig+0x33c>
 8006074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006078:	d00b      	beq.n	8006092 <UART_SetConfig+0x32a>
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607e:	d811      	bhi.n	80060a4 <UART_SetConfig+0x33c>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <UART_SetConfig+0x324>
 8006084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006088:	d006      	beq.n	8006098 <UART_SetConfig+0x330>
 800608a:	e00b      	b.n	80060a4 <UART_SetConfig+0x33c>
 800608c:	2300      	movs	r3, #0
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e00d      	b.n	80060ae <UART_SetConfig+0x346>
 8006092:	2302      	movs	r3, #2
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e00a      	b.n	80060ae <UART_SetConfig+0x346>
 8006098:	2304      	movs	r3, #4
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e007      	b.n	80060ae <UART_SetConfig+0x346>
 800609e:	2308      	movs	r3, #8
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e004      	b.n	80060ae <UART_SetConfig+0x346>
 80060a4:	2310      	movs	r3, #16
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e001      	b.n	80060ae <UART_SetConfig+0x346>
 80060aa:	2310      	movs	r3, #16
 80060ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b6:	d15a      	bne.n	800616e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80060b8:	7ffb      	ldrb	r3, [r7, #31]
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d827      	bhi.n	800610e <UART_SetConfig+0x3a6>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x35c>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	0800610f 	.word	0x0800610f
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	0800610f 	.word	0x0800610f
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e8:	f7fe f8a0 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80060ec:	61b8      	str	r0, [r7, #24]
        break;
 80060ee:	e013      	b.n	8006118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fe f8b0 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 80060f4:	61b8      	str	r0, [r7, #24]
        break;
 80060f6:	e00f      	b.n	8006118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b4b      	ldr	r3, [pc, #300]	; (8006228 <UART_SetConfig+0x4c0>)
 80060fa:	61bb      	str	r3, [r7, #24]
        break;
 80060fc:	e00c      	b.n	8006118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7fd ffa7 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8006102:	61b8      	str	r0, [r7, #24]
        break;
 8006104:	e008      	b.n	8006118 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	61bb      	str	r3, [r7, #24]
        break;
 800610c:	e004      	b.n	8006118 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	77bb      	strb	r3, [r7, #30]
        break;
 8006116:	bf00      	nop
>>>>>>> main
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d074      	beq.n	8005e34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	005a      	lsls	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d916      	bls.n	8005d94 <UART_SetConfig+0x404>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d212      	bcs.n	8005d94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f023 030f 	bic.w	r3, r3, #15
 8005d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	89fb      	ldrh	r3, [r7, #14]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	89fa      	ldrh	r2, [r7, #14]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	e04f      	b.n	8005e34 <UART_SetConfig+0x4a4>
=======
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d074      	beq.n	8006208 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	005a      	lsls	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	441a      	add	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d916      	bls.n	8006168 <UART_SetConfig+0x400>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d212      	bcs.n	8006168 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f023 030f 	bic.w	r3, r3, #15
 800614a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	b29a      	uxth	r2, r3
 8006158:	89fb      	ldrh	r3, [r7, #14]
 800615a:	4313      	orrs	r3, r2
 800615c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	89fa      	ldrh	r2, [r7, #14]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	e04f      	b.n	8006208 <UART_SetConfig+0x4a0>
>>>>>>> main
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8005d94:	2301      	movs	r3, #1
 8005d96:	77bb      	strb	r3, [r7, #30]
 8005d98:	e04c      	b.n	8005e34 <UART_SetConfig+0x4a4>
=======
 8006168:	2301      	movs	r3, #1
 800616a:	77bb      	strb	r3, [r7, #30]
 800616c:	e04c      	b.n	8006208 <UART_SetConfig+0x4a0>
>>>>>>> main
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d828      	bhi.n	8005df2 <UART_SetConfig+0x462>
 8005da0:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0x418>)
 8005da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da6:	bf00      	nop
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005de3 	.word	0x08005de3
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005df3 	.word	0x08005df3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7fe f868 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8005dd0:	61b8      	str	r0, [r7, #24]
        break;
 8005dd2:	e013      	b.n	8005dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe f878 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	61b8      	str	r0, [r7, #24]
        break;
 8005dda:	e00f      	b.n	8005dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <UART_SetConfig+0x4c4>)
 8005dde:	61bb      	str	r3, [r7, #24]
        break;
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fd ff4b 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8005de6:	61b8      	str	r0, [r7, #24]
        break;
 8005de8:	e008      	b.n	8005dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	61bb      	str	r3, [r7, #24]
        break;
 8005df0:	e004      	b.n	8005dfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d018      	beq.n	8005e34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	085a      	lsrs	r2, r3, #1
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	441a      	add	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b0f      	cmp	r3, #15
 8005e1a:	d909      	bls.n	8005e30 <UART_SetConfig+0x4a0>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e22:	d205      	bcs.n	8005e30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	e001      	b.n	8005e34 <UART_SetConfig+0x4a4>
=======
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d828      	bhi.n	80061c6 <UART_SetConfig+0x45e>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <UART_SetConfig+0x414>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061c7 	.word	0x080061c7
 800618c:	080061b7 	.word	0x080061b7
 8006190:	080061c7 	.word	0x080061c7
 8006194:	080061c7 	.word	0x080061c7
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061bf 	.word	0x080061bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fe f844 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80061a4:	61b8      	str	r0, [r7, #24]
        break;
 80061a6:	e013      	b.n	80061d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a8:	f7fe f854 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 80061ac:	61b8      	str	r0, [r7, #24]
        break;
 80061ae:	e00f      	b.n	80061d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b0:	4b1d      	ldr	r3, [pc, #116]	; (8006228 <UART_SetConfig+0x4c0>)
 80061b2:	61bb      	str	r3, [r7, #24]
        break;
 80061b4:	e00c      	b.n	80061d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b6:	f7fd ff4b 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 80061ba:	61b8      	str	r0, [r7, #24]
        break;
 80061bc:	e008      	b.n	80061d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c2:	61bb      	str	r3, [r7, #24]
        break;
 80061c4:	e004      	b.n	80061d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	77bb      	strb	r3, [r7, #30]
        break;
 80061ce:	bf00      	nop
    }

    if (pclk != 0U)
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	085a      	lsrs	r2, r3, #1
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	441a      	add	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b0f      	cmp	r3, #15
 80061ee:	d909      	bls.n	8006204 <UART_SetConfig+0x49c>
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d205      	bcs.n	8006204 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e001      	b.n	8006208 <UART_SetConfig+0x4a0>
>>>>>>> main
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8005e30:	2301      	movs	r3, #1
 8005e32:	77bb      	strb	r3, [r7, #30]
=======
 8006204:	2301      	movs	r3, #1
 8006206:	77bb      	strb	r3, [r7, #30]
>>>>>>> main
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e40:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40007c00 	.word	0x40007c00
 8005e50:	40023800 	.word	0x40023800
 8005e54:	00f42400 	.word	0x00f42400

08005e58 <UART_AdvFeatureConfig>:
=======
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006214:	7fbb      	ldrb	r3, [r7, #30]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40007c00 	.word	0x40007c00
 8006224:	40023800 	.word	0x40023800
 8006228:	00f42400 	.word	0x00f42400

0800622c <UART_AdvFeatureConfig>:
>>>>>>> main
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
=======
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
=======
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
=======
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
=======
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
=======
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
>>>>>>> main
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	609a      	str	r2, [r3, #8]
=======
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]
=======
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x116>
=======
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01a      	beq.n	8006342 <UART_AdvFeatureConfig+0x116>
>>>>>>> main
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f56:	d10a      	bne.n	8005f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
=======
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632a:	d10a      	bne.n	8006342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
>>>>>>> main
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_CheckIdleState>:
=======
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	605a      	str	r2, [r3, #4]
  }
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <UART_CheckIdleState>:
>>>>>>> main
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
=======
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af02      	add	r7, sp, #8
 8006376:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fac:	f7fb feea 	bl	8001d84 <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d10e      	bne.n	8005fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f82d 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e023      	b.n	8006026 <UART_CheckIdleState+0x8a>
=======
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006380:	f7fb feea 	bl	8002158 <HAL_GetTick>
 8006384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b08      	cmp	r3, #8
 8006392:	d10e      	bne.n	80063b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f82d 	bl	8006402 <UART_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e023      	b.n	80063fa <UART_CheckIdleState+0x8a>
>>>>>>> main
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d10e      	bne.n	800600a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f817 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e00d      	b.n	8006026 <UART_CheckIdleState+0x8a>
=======
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d10e      	bne.n	80063de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f817 	bl	8006402 <UART_WaitOnFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e00d      	b.n	80063fa <UART_CheckIdleState+0x8a>
>>>>>>> main
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_WaitOnFlagUntilTimeout>:
=======
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> main
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800602e:	b580      	push	{r7, lr}
 8006030:	b09c      	sub	sp, #112	; 0x70
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603e:	e0a5      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	f000 80a1 	beq.w	800618c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fb fe9b 	bl	8001d84 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <UART_WaitOnFlagUntilTimeout+0x32>
 800605a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605c:	2b00      	cmp	r3, #0
 800605e:	d13e      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0xb0>
=======
 8006402:	b580      	push	{r7, lr}
 8006404:	b09c      	sub	sp, #112	; 0x70
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006412:	e0a5      	b.n	8006560 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	f000 80a1 	beq.w	8006560 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fb fe9b 	bl	8002158 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <UART_WaitOnFlagUntilTimeout+0x32>
 800642e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006430:	2b00      	cmp	r3, #0
 8006432:	d13e      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xb0>
>>>>>>> main
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800606e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006074:	667b      	str	r3, [r7, #100]	; 0x64
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006080:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800608c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e6      	bne.n	8006060 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	663b      	str	r3, [r7, #96]	; 0x60
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e5      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e067      	b.n	80061ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d04f      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fa:	d147      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006104:	621a      	str	r2, [r3, #32]
=======
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006448:	667b      	str	r3, [r7, #100]	; 0x64
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006454:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e6      	bne.n	8006434 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	663b      	str	r3, [r7, #96]	; 0x60
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3308      	adds	r3, #8
 8006484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006486:	64ba      	str	r2, [r7, #72]	; 0x48
 8006488:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800648c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e5      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e067      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d04f      	beq.n	8006560 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ce:	d147      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d8:	621a      	str	r2, [r3, #32]
>>>>>>> main

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800611a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
 8006126:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800612a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e6      	bne.n	8006106 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	613b      	str	r3, [r7, #16]
   return(result);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006158:	623a      	str	r2, [r7, #32]
 800615a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	6a3a      	ldr	r2, [r7, #32]
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	61bb      	str	r3, [r7, #24]
   return(result);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e5      	bne.n	8006138 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e010      	b.n	80061ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	f43f af4a 	beq.w	8006040 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
 80064fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e6      	bne.n	80064da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	613b      	str	r3, [r7, #16]
   return(result);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	66bb      	str	r3, [r7, #104]	; 0x68
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800652c:	623a      	str	r2, [r7, #32]
 800652e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	69f9      	ldr	r1, [r7, #28]
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	61bb      	str	r3, [r7, #24]
   return(result);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e010      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69da      	ldr	r2, [r3, #28]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4013      	ands	r3, r2
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	bf0c      	ite	eq
 8006570:	2301      	moveq	r3, #1
 8006572:	2300      	movne	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	429a      	cmp	r2, r3
 800657c:	f43f af4a 	beq.w	8006414 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> main
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3770      	adds	r7, #112	; 0x70
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <UART_Start_Receive_IT>:
=======
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3770      	adds	r7, #112	; 0x70
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <UART_Start_Receive_IT>:
>>>>>>> main
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80061b8:	b480      	push	{r7}
 80061ba:	b097      	sub	sp, #92	; 0x5c
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d10e      	bne.n	800620a <UART_Start_Receive_IT+0x52>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d105      	bne.n	8006200 <UART_Start_Receive_IT+0x48>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fe:	e02d      	b.n	800625c <UART_Start_Receive_IT+0xa4>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	22ff      	movs	r2, #255	; 0xff
 8006204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006208:	e028      	b.n	800625c <UART_Start_Receive_IT+0xa4>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10d      	bne.n	800622e <UART_Start_Receive_IT+0x76>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <UART_Start_Receive_IT+0x6c>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006222:	e01b      	b.n	800625c <UART_Start_Receive_IT+0xa4>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	227f      	movs	r2, #127	; 0x7f
 8006228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800622c:	e016      	b.n	800625c <UART_Start_Receive_IT+0xa4>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006236:	d10d      	bne.n	8006254 <UART_Start_Receive_IT+0x9c>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <UART_Start_Receive_IT+0x92>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	227f      	movs	r2, #127	; 0x7f
 8006244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006248:	e008      	b.n	800625c <UART_Start_Receive_IT+0xa4>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	223f      	movs	r2, #63	; 0x3f
 800624e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006252:	e003      	b.n	800625c <UART_Start_Receive_IT+0xa4>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2222      	movs	r2, #34	; 0x22
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	657b      	str	r3, [r7, #84]	; 0x54
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800628a:	64ba      	str	r2, [r7, #72]	; 0x48
 800628c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	d107      	bne.n	80062b8 <UART_Start_Receive_IT+0x100>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a24      	ldr	r2, [pc, #144]	; (8006344 <UART_Start_Receive_IT+0x18c>)
 80062b4:	665a      	str	r2, [r3, #100]	; 0x64
 80062b6:	e002      	b.n	80062be <UART_Start_Receive_IT+0x106>
=======
 800658c:	b480      	push	{r7}
 800658e:	b097      	sub	sp, #92	; 0x5c
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	d10e      	bne.n	80065de <UART_Start_Receive_IT+0x52>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <UART_Start_Receive_IT+0x48>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065d2:	e02d      	b.n	8006630 <UART_Start_Receive_IT+0xa4>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	22ff      	movs	r2, #255	; 0xff
 80065d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065dc:	e028      	b.n	8006630 <UART_Start_Receive_IT+0xa4>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <UART_Start_Receive_IT+0x76>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <UART_Start_Receive_IT+0x6c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	22ff      	movs	r2, #255	; 0xff
 80065f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065f6:	e01b      	b.n	8006630 <UART_Start_Receive_IT+0xa4>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	227f      	movs	r2, #127	; 0x7f
 80065fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006600:	e016      	b.n	8006630 <UART_Start_Receive_IT+0xa4>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800660a:	d10d      	bne.n	8006628 <UART_Start_Receive_IT+0x9c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <UART_Start_Receive_IT+0x92>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	227f      	movs	r2, #127	; 0x7f
 8006618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800661c:	e008      	b.n	8006630 <UART_Start_Receive_IT+0xa4>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	223f      	movs	r2, #63	; 0x3f
 8006622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006626:	e003      	b.n	8006630 <UART_Start_Receive_IT+0xa4>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2222      	movs	r2, #34	; 0x22
 800663c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	657b      	str	r3, [r7, #84]	; 0x54
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800665e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006660:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800666c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	d107      	bne.n	800668c <UART_Start_Receive_IT+0x100>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a24      	ldr	r2, [pc, #144]	; (8006718 <UART_Start_Receive_IT+0x18c>)
 8006688:	665a      	str	r2, [r3, #100]	; 0x64
 800668a:	e002      	b.n	8006692 <UART_Start_Receive_IT+0x106>
>>>>>>> main
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
<<<<<<< HEAD
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a23      	ldr	r2, [pc, #140]	; (8006348 <UART_Start_Receive_IT+0x190>)
 80062bc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d019      	beq.n	8006302 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
 80062ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e6      	bne.n	80062ce <UART_Start_Receive_IT+0x116>
 8006300:	e018      	b.n	8006334 <UART_Start_Receive_IT+0x17c>
=======
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a23      	ldr	r2, [pc, #140]	; (800671c <UART_Start_Receive_IT+0x190>)
 8006690:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d019      	beq.n	80066d6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
 80066c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e6      	bne.n	80066a2 <UART_Start_Receive_IT+0x116>
 80066d4:	e018      	b.n	8006708 <UART_Start_Receive_IT+0x17c>
>>>>>>> main
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
<<<<<<< HEAD
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	613b      	str	r3, [r7, #16]
   return(result);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f043 0320 	orr.w	r3, r3, #32
 8006316:	653b      	str	r3, [r7, #80]	; 0x50
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	61bb      	str	r3, [r7, #24]
   return(result);
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e6      	bne.n	8006302 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	375c      	adds	r7, #92	; 0x5c
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	080065ef 	.word	0x080065ef
 8006348:	08006493 	.word	0x08006493

0800634c <UART_EndRxTransfer>:
=======
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	613b      	str	r3, [r7, #16]
   return(result);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f043 0320 	orr.w	r3, r3, #32
 80066ea:	653b      	str	r3, [r7, #80]	; 0x50
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	69f9      	ldr	r1, [r7, #28]
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	61bb      	str	r3, [r7, #24]
   return(result);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	375c      	adds	r7, #92	; 0x5c
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	080069c3 	.word	0x080069c3
 800671c:	08006867 	.word	0x08006867

08006720 <UART_EndRxTransfer>:
>>>>>>> main
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800634c:	b480      	push	{r7}
 800634e:	b095      	sub	sp, #84	; 0x54
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006372:	643b      	str	r3, [r7, #64]	; 0x40
 8006374:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e6      	bne.n	8006354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	61fb      	str	r3, [r7, #28]
   return(result);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	64bb      	str	r3, [r7, #72]	; 0x48
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d118      	bne.n	80063f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f023 0310 	bic.w	r3, r3, #16
 80063d6:	647b      	str	r3, [r7, #68]	; 0x44
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6979      	ldr	r1, [r7, #20]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	613b      	str	r3, [r7, #16]
   return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_EndRxTransfer+0x76>
=======
 8006720:	b480      	push	{r7}
 8006722:	b095      	sub	sp, #84	; 0x54
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800673c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006746:	643b      	str	r3, [r7, #64]	; 0x40
 8006748:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800674c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e6      	bne.n	8006728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	61fb      	str	r3, [r7, #28]
   return(result);
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	64bb      	str	r3, [r7, #72]	; 0x48
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800677a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006792:	2b01      	cmp	r3, #1
 8006794:	d118      	bne.n	80067c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	613b      	str	r3, [r7, #16]
   return(result);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e6      	bne.n	8006796 <UART_EndRxTransfer+0x76>
>>>>>>> main
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006406:	bf00      	nop
 8006408:	3754      	adds	r7, #84	; 0x54
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <UART_DMAAbortOnError>:
=======
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067da:	bf00      	nop
 80067dc:	3754      	adds	r7, #84	; 0x54
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <UART_DMAAbortOnError>:
>>>>>>> main
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fa8d 	bl	8005950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <UART_EndTransmit_IT>:
=======
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fa8f 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <UART_EndTransmit_IT>:
>>>>>>> main
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800643e:	b580      	push	{r7, lr}
 8006440:	b088      	sub	sp, #32
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	60bb      	str	r3, [r7, #8]
   return(result);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6979      	ldr	r1, [r7, #20]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	613b      	str	r3, [r7, #16]
   return(result);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e6      	bne.n	8006446 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	669a      	str	r2, [r3, #104]	; 0x68
=======
 8006812:	b580      	push	{r7, lr}
 8006814:	b088      	sub	sp, #32
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60bb      	str	r3, [r7, #8]
   return(result);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	613b      	str	r3, [r7, #16]
   return(result);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fa59 	bl	800593c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648a:	bf00      	nop
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_RxISR_8BIT>:
=======
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fa5b 	bl	8005d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685e:	bf00      	nop
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <UART_RxISR_8BIT>:
>>>>>>> main
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006492:	b580      	push	{r7, lr}
 8006494:	b096      	sub	sp, #88	; 0x58
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
=======
 8006866:	b580      	push	{r7, lr}
 8006868:	b096      	sub	sp, #88	; 0x58
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006874:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> main
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a8:	2b22      	cmp	r3, #34	; 0x22
 80064aa:	f040 8094 	bne.w	80065d6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80064bc:	b2d9      	uxtb	r1, r3
 80064be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c8:	400a      	ands	r2, r1
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d177      	bne.n	80065e6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800650a:	653b      	str	r3, [r7, #80]	; 0x50
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006514:	647b      	str	r3, [r7, #68]	; 0x44
 8006516:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800651a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e6      	bne.n	80064f6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	623b      	str	r3, [r7, #32]
   return(result);
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006548:	633a      	str	r2, [r7, #48]	; 0x30
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800654e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e5      	bne.n	8006528 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800687c:	2b22      	cmp	r3, #34	; 0x22
 800687e:	f040 8094 	bne.w	80069aa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800688c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006890:	b2d9      	uxtb	r1, r3
 8006892:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006896:	b2da      	uxtb	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	400a      	ands	r2, r1
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d177      	bne.n	80069ba <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	623b      	str	r3, [r7, #32]
   return(result);
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800691c:	633a      	str	r2, [r7, #48]	; 0x30
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> main

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	2b01      	cmp	r3, #1
 800656e:	d12e      	bne.n	80065ce <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60fb      	str	r3, [r7, #12]
   return(result);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0310 	bic.w	r3, r3, #16
 800658a:	64bb      	str	r3, [r7, #72]	; 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69b9      	ldr	r1, [r7, #24]
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	617b      	str	r3, [r7, #20]
   return(result);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d103      	bne.n	80065be <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2210      	movs	r2, #16
 80065bc:	621a      	str	r2, [r3, #32]
=======
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006940:	2b01      	cmp	r3, #1
 8006942:	d12e      	bne.n	80069a2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	60fb      	str	r3, [r7, #12]
   return(result);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0310 	bic.w	r3, r3, #16
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	61fb      	str	r3, [r7, #28]
 800696a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	69b9      	ldr	r1, [r7, #24]
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	617b      	str	r3, [r7, #20]
   return(result);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e6      	bne.n	800694a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d103      	bne.n	8006992 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2210      	movs	r2, #16
 8006990:	621a      	str	r2, [r3, #32]
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff f9cc 	bl	8005964 <HAL_UARTEx_RxEventCallback>
=======
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff f9ce 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
>>>>>>> main
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80065cc:	e00b      	b.n	80065e6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fa ff58 	bl	8001484 <HAL_UART_RxCpltCallback>
}
 80065d4:	e007      	b.n	80065e6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0208 	orr.w	r2, r2, #8
 80065e4:	619a      	str	r2, [r3, #24]
}
 80065e6:	bf00      	nop
 80065e8:	3758      	adds	r7, #88	; 0x58
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <UART_RxISR_16BIT>:
=======
 80069a0:	e00b      	b.n	80069ba <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fa fec8 	bl	8001738 <HAL_UART_RxCpltCallback>
}
 80069a8:	e007      	b.n	80069ba <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0208 	orr.w	r2, r2, #8
 80069b8:	619a      	str	r2, [r3, #24]
}
 80069ba:	bf00      	nop
 80069bc:	3758      	adds	r7, #88	; 0x58
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_RxISR_16BIT>:
>>>>>>> main
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b096      	sub	sp, #88	; 0x58
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
=======
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b096      	sub	sp, #88	; 0x58
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> main
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006604:	2b22      	cmp	r3, #34	; 0x22
 8006606:	f040 8094 	bne.w	8006732 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800661a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800661e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006622:	4013      	ands	r3, r2
 8006624:	b29a      	uxth	r2, r3
 8006626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006628:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	1c9a      	adds	r2, r3, #2
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d177      	bne.n	8006742 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	643b      	str	r3, [r7, #64]	; 0x40
 8006672:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e6      	bne.n	8006652 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	61fb      	str	r3, [r7, #28]
   return(result);
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	64bb      	str	r3, [r7, #72]	; 0x48
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	665a      	str	r2, [r3, #100]	; 0x64
=======
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d8:	2b22      	cmp	r3, #34	; 0x22
 80069da:	f040 8094 	bne.w	8006b06 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80069ee:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80069f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069f6:	4013      	ands	r3, r2
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	1c9a      	adds	r2, r3, #2
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d177      	bne.n	8006b16 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
 8006a46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e5      	bne.n	8006a58 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> main

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d12e      	bne.n	800672a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 0310 	bic.w	r3, r3, #16
 80066e6:	647b      	str	r3, [r7, #68]	; 0x44
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	6979      	ldr	r1, [r7, #20]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	613b      	str	r3, [r7, #16]
   return(result);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e6      	bne.n	80066d2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b10      	cmp	r3, #16
 8006710:	d103      	bne.n	800671a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2210      	movs	r2, #16
 8006718:	621a      	str	r2, [r3, #32]
=======
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d12e      	bne.n	8006afe <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f023 0310 	bic.w	r3, r3, #16
 8006aba:	647b      	str	r3, [r7, #68]	; 0x44
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6979      	ldr	r1, [r7, #20]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d103      	bne.n	8006aee <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2210      	movs	r2, #16
 8006aec:	621a      	str	r2, [r3, #32]
>>>>>>> main
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff f91e 	bl	8005964 <HAL_UARTEx_RxEventCallback>
=======
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff f920 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
>>>>>>> main
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8006728:	e00b      	b.n	8006742 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fa feaa 	bl	8001484 <HAL_UART_RxCpltCallback>
}
 8006730:	e007      	b.n	8006742 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699a      	ldr	r2, [r3, #24]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0208 	orr.w	r2, r2, #8
 8006740:	619a      	str	r2, [r3, #24]
}
 8006742:	bf00      	nop
 8006744:	3758      	adds	r7, #88	; 0x58
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <USB_CoreInit>:
=======
 8006afc:	e00b      	b.n	8006b16 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fa fe1a 	bl	8001738 <HAL_UART_RxCpltCallback>
}
 8006b04:	e007      	b.n	8006b16 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0208 	orr.w	r2, r2, #8
 8006b14:	619a      	str	r2, [r3, #24]
}
 8006b16:	bf00      	nop
 8006b18:	3758      	adds	r7, #88	; 0x58
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <USB_CoreInit>:
>>>>>>> main
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800674c:	b084      	sub	sp, #16
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	f107 001c 	add.w	r0, r7, #28
 800675a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b01      	cmp	r3, #1
 8006762:	d120      	bne.n	80067a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <USB_CoreInit+0xac>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	60d3      	str	r3, [r2, #12]
=======
 8006b20:	b084      	sub	sp, #16
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	f107 001c 	add.w	r0, r7, #28
 8006b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d120      	bne.n	8006b7a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <USB_CoreInit+0xac>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	60d3      	str	r3, [r2, #12]
>>>>>>> main
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
<<<<<<< HEAD
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60da      	str	r2, [r3, #12]
=======
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d105      	bne.n	8006b6e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]
>>>>>>> main
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
<<<<<<< HEAD
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa92 	bl	8006cc4 <USB_CoreReset>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
 80067a4:	e010      	b.n	80067c8 <USB_CoreInit+0x7c>
=======
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa92 	bl	8007098 <USB_CoreReset>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
 8006b78:	e010      	b.n	8006b9c <USB_CoreInit+0x7c>
>>>>>>> main
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< HEAD
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa86 	bl	8006cc4 <USB_CoreReset>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10b      	bne.n	80067e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f043 0206 	orr.w	r2, r3, #6
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f2:	b004      	add	sp, #16
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	ffbdffbf 	.word	0xffbdffbf

080067fc <USB_DisableGlobalInt>:
=======
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa86 	bl	8007098 <USB_CoreReset>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10b      	bne.n	8006bba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f043 0206 	orr.w	r2, r3, #6
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc6:	b004      	add	sp, #16
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	ffbdffbf 	.word	0xffbdffbf

08006bd0 <USB_DisableGlobalInt>:
>>>>>>> main
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f023 0201 	bic.w	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_SetCurrentMode>:
=======
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 0201 	bic.w	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_SetCurrentMode>:
>>>>>>> main
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
<<<<<<< HEAD
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d115      	bne.n	800686c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]
=======
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d115      	bne.n	8006c40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60da      	str	r2, [r3, #12]
>>>>>>> main

    do
    {
      HAL_Delay(1U);
<<<<<<< HEAD
 800684c:	2001      	movs	r0, #1
 800684e:	f7fb faa5 	bl	8001d9c <HAL_Delay>
      ms++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa25 	bl	8006ca8 <USB_GetMode>
 800685e:	4603      	mov	r3, r0
 8006860:	2b01      	cmp	r3, #1
 8006862:	d01e      	beq.n	80068a2 <USB_SetCurrentMode+0x84>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b31      	cmp	r3, #49	; 0x31
 8006868:	d9f0      	bls.n	800684c <USB_SetCurrentMode+0x2e>
 800686a:	e01a      	b.n	80068a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d115      	bne.n	800689e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60da      	str	r2, [r3, #12]
=======
 8006c20:	2001      	movs	r0, #1
 8006c22:	f7fb faa5 	bl	8002170 <HAL_Delay>
      ms++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fa25 	bl	800707c <USB_GetMode>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d01e      	beq.n	8006c76 <USB_SetCurrentMode+0x84>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b31      	cmp	r3, #49	; 0x31
 8006c3c:	d9f0      	bls.n	8006c20 <USB_SetCurrentMode+0x2e>
 8006c3e:	e01a      	b.n	8006c76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d115      	bne.n	8006c72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]
>>>>>>> main

    do
    {
      HAL_Delay(1U);
<<<<<<< HEAD
 800687e:	2001      	movs	r0, #1
 8006880:	f7fb fa8c 	bl	8001d9c <HAL_Delay>
      ms++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa0c 	bl	8006ca8 <USB_GetMode>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <USB_SetCurrentMode+0x84>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b31      	cmp	r3, #49	; 0x31
 800689a:	d9f0      	bls.n	800687e <USB_SetCurrentMode+0x60>
 800689c:	e001      	b.n	80068a2 <USB_SetCurrentMode+0x84>
=======
 8006c52:	2001      	movs	r0, #1
 8006c54:	f7fb fa8c 	bl	8002170 <HAL_Delay>
      ms++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa0c 	bl	800707c <USB_GetMode>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <USB_SetCurrentMode+0x84>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b31      	cmp	r3, #49	; 0x31
 8006c6e:	d9f0      	bls.n	8006c52 <USB_SetCurrentMode+0x60>
 8006c70:	e001      	b.n	8006c76 <USB_SetCurrentMode+0x84>
>>>>>>> main
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800689e:	2301      	movs	r3, #1
 80068a0:	e005      	b.n	80068ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b32      	cmp	r3, #50	; 0x32
 80068a6:	d101      	bne.n	80068ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <USB_DevInit>:
=======
 8006c72:	2301      	movs	r3, #1
 8006c74:	e005      	b.n	8006c82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b32      	cmp	r3, #50	; 0x32
 8006c7a:	d101      	bne.n	8006c80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <USB_DevInit>:
>>>>>>> main
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 80068b8:	b084      	sub	sp, #16
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e009      	b.n	80068ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3340      	adds	r3, #64	; 0x40
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3301      	adds	r3, #1
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b0e      	cmp	r3, #14
 80068f0:	d9f2      	bls.n	80068d8 <USB_DevInit+0x20>
=======
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b086      	sub	sp, #24
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	e009      	b.n	8006cc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3340      	adds	r3, #64	; 0x40
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b0e      	cmp	r3, #14
 8006cc4:	d9f2      	bls.n	8006cac <USB_DevInit+0x20>
>>>>>>> main
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< HEAD
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11c      	bne.n	8006932 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006906:	f043 0302 	orr.w	r3, r3, #2
 800690a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e005      	b.n	800693e <USB_DevInit+0x86>
=======
 8006cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11c      	bne.n	8006d06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cda:	f043 0302 	orr.w	r3, r3, #2
 8006cde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	e005      	b.n	8006d12 <USB_DevInit+0x86>
>>>>>>> main
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
<<<<<<< HEAD
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> main
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< HEAD
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006950:	4619      	mov	r1, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006958:	461a      	mov	r2, r3
 800695a:	680b      	ldr	r3, [r1, #0]
 800695c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	2b01      	cmp	r3, #1
 8006962:	d10c      	bne.n	800697e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800696a:	2100      	movs	r1, #0
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f961 	bl	8006c34 <USB_SetDevSpeed>
 8006972:	e008      	b.n	8006986 <USB_DevInit+0xce>
=======
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	4619      	mov	r1, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	680b      	ldr	r3, [r1, #0]
 8006d30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10c      	bne.n	8006d52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d104      	bne.n	8006d48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f961 	bl	8007008 <USB_SetDevSpeed>
 8006d46:	e008      	b.n	8006d5a <USB_DevInit+0xce>
>>>>>>> main
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< HEAD
 8006974:	2101      	movs	r1, #1
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f95c 	bl	8006c34 <USB_SetDevSpeed>
 800697c:	e003      	b.n	8006986 <USB_DevInit+0xce>
=======
 8006d48:	2101      	movs	r1, #1
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f95c 	bl	8007008 <USB_SetDevSpeed>
 8006d50:	e003      	b.n	8006d5a <USB_DevInit+0xce>
>>>>>>> main
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
<<<<<<< HEAD
 800697e:	2103      	movs	r1, #3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f957 	bl	8006c34 <USB_SetDevSpeed>
=======
 8006d52:	2103      	movs	r1, #3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f957 	bl	8007008 <USB_SetDevSpeed>
>>>>>>> main
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
<<<<<<< HEAD
 8006986:	2110      	movs	r1, #16
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f8f3 	bl	8006b74 <USB_FlushTxFifo>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f91d 	bl	8006bd8 <USB_FlushRxFifo>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	75fb      	strb	r3, [r7, #23]
=======
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8f3 	bl	8006f48 <USB_FlushTxFifo>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f91d 	bl	8006fac <USB_FlushRxFifo>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
>>>>>>> main
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< HEAD
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	461a      	mov	r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	461a      	mov	r2, r3
 80069bc:	2300      	movs	r3, #0
 80069be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	461a      	mov	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	e043      	b.n	8006a5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069e8:	d118      	bne.n	8006a1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	461a      	mov	r2, r3
 80069fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	e013      	b.n	8006a2e <USB_DevInit+0x176>
=======
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2300      	movs	r3, #0
 8006d92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	e043      	b.n	8006e2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dbc:	d118      	bne.n	8006df0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	e013      	b.n	8006e02 <USB_DevInit+0x176>
>>>>>>> main
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< HEAD
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	461a      	mov	r2, r3
 8006a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e008      	b.n	8006a2e <USB_DevInit+0x176>
=======
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de6:	461a      	mov	r2, r3
 8006de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e008      	b.n	8006e02 <USB_DevInit+0x176>
>>>>>>> main
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< HEAD
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	3301      	adds	r3, #1
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d3b7      	bcc.n	80069d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a62:	2300      	movs	r3, #0
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	e043      	b.n	8006af0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a7e:	d118      	bne.n	8006ab2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	461a      	mov	r2, r3
 8006a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	e013      	b.n	8006ac4 <USB_DevInit+0x20c>
=======
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2300      	movs	r3, #0
 8006e12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	461a      	mov	r2, r3
 8006e22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3b7      	bcc.n	8006da6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	e043      	b.n	8006ec4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e52:	d118      	bne.n	8006e86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	461a      	mov	r2, r3
 8006e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e013      	b.n	8006e98 <USB_DevInit+0x20c>
>>>>>>> main
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< HEAD
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e008      	b.n	8006ac4 <USB_DevInit+0x20c>
=======
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e008      	b.n	8006e98 <USB_DevInit+0x20c>
>>>>>>> main
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< HEAD
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3301      	adds	r3, #1
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d3b7      	bcc.n	8006a68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f043 0210 	orr.w	r2, r3, #16
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	619a      	str	r2, [r3, #24]
=======
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d3b7      	bcc.n	8006e3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ede:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006eec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f043 0210 	orr.w	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	619a      	str	r2, [r3, #24]
>>>>>>> main
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
<<<<<<< HEAD
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <USB_DevInit+0x2b4>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6193      	str	r3, [r2, #24]
=======
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <USB_DevInit+0x2b4>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6193      	str	r3, [r2, #24]
>>>>>>> main
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< HEAD
 8006b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f043 0208 	orr.w	r2, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d105      	bne.n	8006b5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <USB_DevInit+0x2b8>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b68:	b004      	add	sp, #16
 8006b6a:	4770      	bx	lr
 8006b6c:	803c3800 	.word	0x803c3800
 8006b70:	40000004 	.word	0x40000004

08006b74 <USB_FlushTxFifo>:
=======
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f043 0208 	orr.w	r2, r3, #8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d105      	bne.n	8006f30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699a      	ldr	r2, [r3, #24]
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <USB_DevInit+0x2b8>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr
 8006f40:	803c3800 	.word	0x803c3800
 8006f44:	40000004 	.word	0x40000004

08006f48 <USB_FlushTxFifo>:
>>>>>>> main
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< HEAD
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
=======
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <USB_FlushTxFifo+0x60>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e01a      	b.n	8006bc8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	daf3      	bge.n	8006b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	611a      	str	r2, [r3, #16]
=======
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <USB_FlushTxFifo+0x60>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e01a      	b.n	8006f9c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	daf3      	bge.n	8006f56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	019b      	lsls	r3, r3, #6
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]
>>>>>>> main

  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <USB_FlushTxFifo+0x60>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e006      	b.n	8006bc8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d0f1      	beq.n	8006baa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	00030d40 	.word	0x00030d40

08006bd8 <USB_FlushRxFifo>:
=======
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	4a08      	ldr	r2, [pc, #32]	; (8006fa8 <USB_FlushTxFifo+0x60>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d901      	bls.n	8006f8e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e006      	b.n	8006f9c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d0f1      	beq.n	8006f7e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	00030d40 	.word	0x00030d40

08006fac <USB_FlushRxFifo>:
>>>>>>> main
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
=======
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	4a11      	ldr	r2, [pc, #68]	; (8006c30 <USB_FlushRxFifo+0x58>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d901      	bls.n	8006bf4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e017      	b.n	8006c24 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	daf3      	bge.n	8006be4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2210      	movs	r2, #16
 8006c04:	611a      	str	r2, [r3, #16]
=======
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	4a11      	ldr	r2, [pc, #68]	; (8007004 <USB_FlushRxFifo+0x58>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d901      	bls.n	8006fc8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e017      	b.n	8006ff8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	daf3      	bge.n	8006fb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	611a      	str	r2, [r3, #16]
>>>>>>> main

  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <USB_FlushRxFifo+0x58>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e006      	b.n	8006c24 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d0f1      	beq.n	8006c06 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	00030d40 	.word	0x00030d40

08006c34 <USB_SetDevSpeed>:
=======
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	4a08      	ldr	r2, [pc, #32]	; (8007004 <USB_FlushRxFifo+0x58>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e006      	b.n	8006ff8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d0f1      	beq.n	8006fda <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	00030d40 	.word	0x00030d40

08007008 <USB_SetDevSpeed>:
>>>>>>> main
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< HEAD
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c54:	4313      	orrs	r3, r2
 8006c56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <USB_DevDisconnect>:
=======
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USB_DevDisconnect>:
>>>>>>> main
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c80:	f023 0303 	bic.w	r3, r3, #3
 8006c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_GetMode>:
=======
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007054:	f023 0303 	bic.w	r3, r3, #3
 8007058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007068:	f043 0302 	orr.w	r3, r3, #2
 800706c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_GetMode>:
>>>>>>> main
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_CoreReset>:
=======
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0301 	and.w	r3, r3, #1
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_CoreReset>:
>>>>>>> main
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
=======
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
>>>>>>> main

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <USB_CoreReset+0x60>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d901      	bls.n	8006ce0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e01a      	b.n	8006d16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	daf3      	bge.n	8006cd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	611a      	str	r2, [r3, #16]
=======
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	4a13      	ldr	r2, [pc, #76]	; (80070f8 <USB_CoreReset+0x60>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e01a      	b.n	80070ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	daf3      	bge.n	80070a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f043 0201 	orr.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	611a      	str	r2, [r3, #16]
>>>>>>> main

  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <USB_CoreReset+0x60>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e006      	b.n	8006d16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d0f1      	beq.n	8006cf8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	00030d40 	.word	0x00030d40

08006d28 <atoi>:
 8006d28:	220a      	movs	r2, #10
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	f000 b8c8 	b.w	8006ec0 <strtol>

08006d30 <__errno>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <__errno+0x8>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000020 	.word	0x20000020

08006d3c <__libc_init_array>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4d0d      	ldr	r5, [pc, #52]	; (8006d74 <__libc_init_array+0x38>)
 8006d40:	4c0d      	ldr	r4, [pc, #52]	; (8006d78 <__libc_init_array+0x3c>)
 8006d42:	1b64      	subs	r4, r4, r5
 8006d44:	10a4      	asrs	r4, r4, #2
 8006d46:	2600      	movs	r6, #0
 8006d48:	42a6      	cmp	r6, r4
 8006d4a:	d109      	bne.n	8006d60 <__libc_init_array+0x24>
 8006d4c:	4d0b      	ldr	r5, [pc, #44]	; (8006d7c <__libc_init_array+0x40>)
 8006d4e:	4c0c      	ldr	r4, [pc, #48]	; (8006d80 <__libc_init_array+0x44>)
 8006d50:	f000 f8c0 	bl	8006ed4 <_init>
 8006d54:	1b64      	subs	r4, r4, r5
 8006d56:	10a4      	asrs	r4, r4, #2
 8006d58:	2600      	movs	r6, #0
 8006d5a:	42a6      	cmp	r6, r4
 8006d5c:	d105      	bne.n	8006d6a <__libc_init_array+0x2e>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d64:	4798      	blx	r3
 8006d66:	3601      	adds	r6, #1
 8006d68:	e7ee      	b.n	8006d48 <__libc_init_array+0xc>
 8006d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6e:	4798      	blx	r3
 8006d70:	3601      	adds	r6, #1
 8006d72:	e7f2      	b.n	8006d5a <__libc_init_array+0x1e>
 8006d74:	080070a8 	.word	0x080070a8
 8006d78:	080070a8 	.word	0x080070a8
 8006d7c:	080070a8 	.word	0x080070a8
 8006d80:	080070ac 	.word	0x080070ac

08006d84 <memset>:
 8006d84:	4402      	add	r2, r0
 8006d86:	4603      	mov	r3, r0
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d100      	bne.n	8006d8e <memset+0xa>
 8006d8c:	4770      	bx	lr
 8006d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d92:	e7f9      	b.n	8006d88 <memset+0x4>

08006d94 <strncmp>:
 8006d94:	b510      	push	{r4, lr}
 8006d96:	b17a      	cbz	r2, 8006db8 <strncmp+0x24>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	3901      	subs	r1, #1
 8006d9c:	1884      	adds	r4, r0, r2
 8006d9e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006da2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006da6:	4290      	cmp	r0, r2
 8006da8:	d101      	bne.n	8006dae <strncmp+0x1a>
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	d101      	bne.n	8006db2 <strncmp+0x1e>
 8006dae:	1a80      	subs	r0, r0, r2
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d1f3      	bne.n	8006d9e <strncmp+0xa>
 8006db6:	e7fa      	b.n	8006dae <strncmp+0x1a>
 8006db8:	4610      	mov	r0, r2
 8006dba:	e7f9      	b.n	8006db0 <strncmp+0x1c>

08006dbc <_strtol_l.constprop.0>:
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc2:	d001      	beq.n	8006dc8 <_strtol_l.constprop.0+0xc>
 8006dc4:	2b24      	cmp	r3, #36	; 0x24
 8006dc6:	d906      	bls.n	8006dd6 <_strtol_l.constprop.0+0x1a>
 8006dc8:	f7ff ffb2 	bl	8006d30 <__errno>
 8006dcc:	2316      	movs	r3, #22
 8006dce:	6003      	str	r3, [r0, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006ebc <_strtol_l.constprop.0+0x100>
 8006dda:	460d      	mov	r5, r1
 8006ddc:	462e      	mov	r6, r5
 8006dde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006de2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006de6:	f017 0708 	ands.w	r7, r7, #8
 8006dea:	d1f7      	bne.n	8006ddc <_strtol_l.constprop.0+0x20>
 8006dec:	2c2d      	cmp	r4, #45	; 0x2d
 8006dee:	d132      	bne.n	8006e56 <_strtol_l.constprop.0+0x9a>
 8006df0:	782c      	ldrb	r4, [r5, #0]
 8006df2:	2701      	movs	r7, #1
 8006df4:	1cb5      	adds	r5, r6, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d05b      	beq.n	8006eb2 <_strtol_l.constprop.0+0xf6>
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d109      	bne.n	8006e12 <_strtol_l.constprop.0+0x56>
 8006dfe:	2c30      	cmp	r4, #48	; 0x30
 8006e00:	d107      	bne.n	8006e12 <_strtol_l.constprop.0+0x56>
 8006e02:	782c      	ldrb	r4, [r5, #0]
 8006e04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e08:	2c58      	cmp	r4, #88	; 0x58
 8006e0a:	d14d      	bne.n	8006ea8 <_strtol_l.constprop.0+0xec>
 8006e0c:	786c      	ldrb	r4, [r5, #1]
 8006e0e:	2310      	movs	r3, #16
 8006e10:	3502      	adds	r5, #2
 8006e12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e1a:	f04f 0c00 	mov.w	ip, #0
 8006e1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e22:	4666      	mov	r6, ip
 8006e24:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e2c:	f1be 0f09 	cmp.w	lr, #9
 8006e30:	d816      	bhi.n	8006e60 <_strtol_l.constprop.0+0xa4>
 8006e32:	4674      	mov	r4, lr
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	dd24      	ble.n	8006e82 <_strtol_l.constprop.0+0xc6>
 8006e38:	f1bc 0f00 	cmp.w	ip, #0
 8006e3c:	db1e      	blt.n	8006e7c <_strtol_l.constprop.0+0xc0>
 8006e3e:	45b1      	cmp	r9, r6
 8006e40:	d31c      	bcc.n	8006e7c <_strtol_l.constprop.0+0xc0>
 8006e42:	d101      	bne.n	8006e48 <_strtol_l.constprop.0+0x8c>
 8006e44:	45a2      	cmp	sl, r4
 8006e46:	db19      	blt.n	8006e7c <_strtol_l.constprop.0+0xc0>
 8006e48:	fb06 4603 	mla	r6, r6, r3, r4
 8006e4c:	f04f 0c01 	mov.w	ip, #1
 8006e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e54:	e7e8      	b.n	8006e28 <_strtol_l.constprop.0+0x6c>
 8006e56:	2c2b      	cmp	r4, #43	; 0x2b
 8006e58:	bf04      	itt	eq
 8006e5a:	782c      	ldrbeq	r4, [r5, #0]
 8006e5c:	1cb5      	addeq	r5, r6, #2
 8006e5e:	e7ca      	b.n	8006df6 <_strtol_l.constprop.0+0x3a>
 8006e60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e64:	f1be 0f19 	cmp.w	lr, #25
 8006e68:	d801      	bhi.n	8006e6e <_strtol_l.constprop.0+0xb2>
 8006e6a:	3c37      	subs	r4, #55	; 0x37
 8006e6c:	e7e2      	b.n	8006e34 <_strtol_l.constprop.0+0x78>
 8006e6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e72:	f1be 0f19 	cmp.w	lr, #25
 8006e76:	d804      	bhi.n	8006e82 <_strtol_l.constprop.0+0xc6>
 8006e78:	3c57      	subs	r4, #87	; 0x57
 8006e7a:	e7db      	b.n	8006e34 <_strtol_l.constprop.0+0x78>
 8006e7c:	f04f 3cff 	mov.w	ip, #4294967295
 8006e80:	e7e6      	b.n	8006e50 <_strtol_l.constprop.0+0x94>
 8006e82:	f1bc 0f00 	cmp.w	ip, #0
 8006e86:	da05      	bge.n	8006e94 <_strtol_l.constprop.0+0xd8>
 8006e88:	2322      	movs	r3, #34	; 0x22
 8006e8a:	6003      	str	r3, [r0, #0]
 8006e8c:	4646      	mov	r6, r8
 8006e8e:	b942      	cbnz	r2, 8006ea2 <_strtol_l.constprop.0+0xe6>
 8006e90:	4630      	mov	r0, r6
 8006e92:	e79e      	b.n	8006dd2 <_strtol_l.constprop.0+0x16>
 8006e94:	b107      	cbz	r7, 8006e98 <_strtol_l.constprop.0+0xdc>
 8006e96:	4276      	negs	r6, r6
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	d0f9      	beq.n	8006e90 <_strtol_l.constprop.0+0xd4>
 8006e9c:	f1bc 0f00 	cmp.w	ip, #0
 8006ea0:	d000      	beq.n	8006ea4 <_strtol_l.constprop.0+0xe8>
 8006ea2:	1e69      	subs	r1, r5, #1
 8006ea4:	6011      	str	r1, [r2, #0]
 8006ea6:	e7f3      	b.n	8006e90 <_strtol_l.constprop.0+0xd4>
 8006ea8:	2430      	movs	r4, #48	; 0x30
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1b1      	bne.n	8006e12 <_strtol_l.constprop.0+0x56>
 8006eae:	2308      	movs	r3, #8
 8006eb0:	e7af      	b.n	8006e12 <_strtol_l.constprop.0+0x56>
 8006eb2:	2c30      	cmp	r4, #48	; 0x30
 8006eb4:	d0a5      	beq.n	8006e02 <_strtol_l.constprop.0+0x46>
 8006eb6:	230a      	movs	r3, #10
 8006eb8:	e7ab      	b.n	8006e12 <_strtol_l.constprop.0+0x56>
 8006eba:	bf00      	nop
 8006ebc:	08006f9d 	.word	0x08006f9d

08006ec0 <strtol>:
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	4802      	ldr	r0, [pc, #8]	; (8006ed0 <strtol+0x10>)
 8006ec8:	6800      	ldr	r0, [r0, #0]
 8006eca:	f7ff bf77 	b.w	8006dbc <_strtol_l.constprop.0>
 8006ece:	bf00      	nop
 8006ed0:	20000020 	.word	0x20000020

08006ed4 <_init>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	bf00      	nop
 8006ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	469e      	mov	lr, r3
 8006ede:	4770      	bx	lr

08006ee0 <_fini>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr
=======
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <USB_CoreReset+0x60>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d901      	bls.n	80070dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e006      	b.n	80070ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d0f1      	beq.n	80070cc <USB_CoreReset+0x34>

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	00030d40 	.word	0x00030d40

080070fc <atoi>:
 80070fc:	220a      	movs	r2, #10
 80070fe:	2100      	movs	r1, #0
 8007100:	f000 b8c8 	b.w	8007294 <strtol>

08007104 <__errno>:
 8007104:	4b01      	ldr	r3, [pc, #4]	; (800710c <__errno+0x8>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000024 	.word	0x20000024

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4d0d      	ldr	r5, [pc, #52]	; (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	; (800714c <__libc_init_array+0x3c>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2600      	movs	r6, #0
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4d0b      	ldr	r5, [pc, #44]	; (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	; (8007154 <__libc_init_array+0x44>)
 8007124:	f000 f8c0 	bl	80072a8 <_init>
 8007128:	1b64      	subs	r4, r4, r5
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2600      	movs	r6, #0
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	0800748c 	.word	0x0800748c
 800714c:	0800748c 	.word	0x0800748c
 8007150:	0800748c 	.word	0x0800748c
 8007154:	08007490 	.word	0x08007490

08007158 <memset>:
 8007158:	4402      	add	r2, r0
 800715a:	4603      	mov	r3, r0
 800715c:	4293      	cmp	r3, r2
 800715e:	d100      	bne.n	8007162 <memset+0xa>
 8007160:	4770      	bx	lr
 8007162:	f803 1b01 	strb.w	r1, [r3], #1
 8007166:	e7f9      	b.n	800715c <memset+0x4>

08007168 <strncmp>:
 8007168:	b510      	push	{r4, lr}
 800716a:	b16a      	cbz	r2, 8007188 <strncmp+0x20>
 800716c:	3901      	subs	r1, #1
 800716e:	1884      	adds	r4, r0, r2
 8007170:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007174:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007178:	4293      	cmp	r3, r2
 800717a:	d103      	bne.n	8007184 <strncmp+0x1c>
 800717c:	42a0      	cmp	r0, r4
 800717e:	d001      	beq.n	8007184 <strncmp+0x1c>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f5      	bne.n	8007170 <strncmp+0x8>
 8007184:	1a98      	subs	r0, r3, r2
 8007186:	bd10      	pop	{r4, pc}
 8007188:	4610      	mov	r0, r2
 800718a:	e7fc      	b.n	8007186 <strncmp+0x1e>

0800718c <_strtol_l.isra.0>:
 800718c:	2b01      	cmp	r3, #1
 800718e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007192:	d001      	beq.n	8007198 <_strtol_l.isra.0+0xc>
 8007194:	2b24      	cmp	r3, #36	; 0x24
 8007196:	d906      	bls.n	80071a6 <_strtol_l.isra.0+0x1a>
 8007198:	f7ff ffb4 	bl	8007104 <__errno>
 800719c:	2316      	movs	r3, #22
 800719e:	6003      	str	r3, [r0, #0]
 80071a0:	2000      	movs	r0, #0
 80071a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a6:	4f3a      	ldr	r7, [pc, #232]	; (8007290 <_strtol_l.isra.0+0x104>)
 80071a8:	468e      	mov	lr, r1
 80071aa:	4676      	mov	r6, lr
 80071ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80071b0:	5de5      	ldrb	r5, [r4, r7]
 80071b2:	f015 0508 	ands.w	r5, r5, #8
 80071b6:	d1f8      	bne.n	80071aa <_strtol_l.isra.0+0x1e>
 80071b8:	2c2d      	cmp	r4, #45	; 0x2d
 80071ba:	d134      	bne.n	8007226 <_strtol_l.isra.0+0x9a>
 80071bc:	f89e 4000 	ldrb.w	r4, [lr]
 80071c0:	f04f 0801 	mov.w	r8, #1
 80071c4:	f106 0e02 	add.w	lr, r6, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d05c      	beq.n	8007286 <_strtol_l.isra.0+0xfa>
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d10c      	bne.n	80071ea <_strtol_l.isra.0+0x5e>
 80071d0:	2c30      	cmp	r4, #48	; 0x30
 80071d2:	d10a      	bne.n	80071ea <_strtol_l.isra.0+0x5e>
 80071d4:	f89e 4000 	ldrb.w	r4, [lr]
 80071d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071dc:	2c58      	cmp	r4, #88	; 0x58
 80071de:	d14d      	bne.n	800727c <_strtol_l.isra.0+0xf0>
 80071e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80071e4:	2310      	movs	r3, #16
 80071e6:	f10e 0e02 	add.w	lr, lr, #2
 80071ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80071ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80071f2:	2600      	movs	r6, #0
 80071f4:	fbbc f9f3 	udiv	r9, ip, r3
 80071f8:	4635      	mov	r5, r6
 80071fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80071fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007202:	2f09      	cmp	r7, #9
 8007204:	d818      	bhi.n	8007238 <_strtol_l.isra.0+0xac>
 8007206:	463c      	mov	r4, r7
 8007208:	42a3      	cmp	r3, r4
 800720a:	dd24      	ble.n	8007256 <_strtol_l.isra.0+0xca>
 800720c:	2e00      	cmp	r6, #0
 800720e:	db1f      	blt.n	8007250 <_strtol_l.isra.0+0xc4>
 8007210:	45a9      	cmp	r9, r5
 8007212:	d31d      	bcc.n	8007250 <_strtol_l.isra.0+0xc4>
 8007214:	d101      	bne.n	800721a <_strtol_l.isra.0+0x8e>
 8007216:	45a2      	cmp	sl, r4
 8007218:	db1a      	blt.n	8007250 <_strtol_l.isra.0+0xc4>
 800721a:	fb05 4503 	mla	r5, r5, r3, r4
 800721e:	2601      	movs	r6, #1
 8007220:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007224:	e7eb      	b.n	80071fe <_strtol_l.isra.0+0x72>
 8007226:	2c2b      	cmp	r4, #43	; 0x2b
 8007228:	bf08      	it	eq
 800722a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800722e:	46a8      	mov	r8, r5
 8007230:	bf08      	it	eq
 8007232:	f106 0e02 	addeq.w	lr, r6, #2
 8007236:	e7c7      	b.n	80071c8 <_strtol_l.isra.0+0x3c>
 8007238:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800723c:	2f19      	cmp	r7, #25
 800723e:	d801      	bhi.n	8007244 <_strtol_l.isra.0+0xb8>
 8007240:	3c37      	subs	r4, #55	; 0x37
 8007242:	e7e1      	b.n	8007208 <_strtol_l.isra.0+0x7c>
 8007244:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007248:	2f19      	cmp	r7, #25
 800724a:	d804      	bhi.n	8007256 <_strtol_l.isra.0+0xca>
 800724c:	3c57      	subs	r4, #87	; 0x57
 800724e:	e7db      	b.n	8007208 <_strtol_l.isra.0+0x7c>
 8007250:	f04f 36ff 	mov.w	r6, #4294967295
 8007254:	e7e4      	b.n	8007220 <_strtol_l.isra.0+0x94>
 8007256:	2e00      	cmp	r6, #0
 8007258:	da05      	bge.n	8007266 <_strtol_l.isra.0+0xda>
 800725a:	2322      	movs	r3, #34	; 0x22
 800725c:	6003      	str	r3, [r0, #0]
 800725e:	4665      	mov	r5, ip
 8007260:	b942      	cbnz	r2, 8007274 <_strtol_l.isra.0+0xe8>
 8007262:	4628      	mov	r0, r5
 8007264:	e79d      	b.n	80071a2 <_strtol_l.isra.0+0x16>
 8007266:	f1b8 0f00 	cmp.w	r8, #0
 800726a:	d000      	beq.n	800726e <_strtol_l.isra.0+0xe2>
 800726c:	426d      	negs	r5, r5
 800726e:	2a00      	cmp	r2, #0
 8007270:	d0f7      	beq.n	8007262 <_strtol_l.isra.0+0xd6>
 8007272:	b10e      	cbz	r6, 8007278 <_strtol_l.isra.0+0xec>
 8007274:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007278:	6011      	str	r1, [r2, #0]
 800727a:	e7f2      	b.n	8007262 <_strtol_l.isra.0+0xd6>
 800727c:	2430      	movs	r4, #48	; 0x30
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1b3      	bne.n	80071ea <_strtol_l.isra.0+0x5e>
 8007282:	2308      	movs	r3, #8
 8007284:	e7b1      	b.n	80071ea <_strtol_l.isra.0+0x5e>
 8007286:	2c30      	cmp	r4, #48	; 0x30
 8007288:	d0a4      	beq.n	80071d4 <_strtol_l.isra.0+0x48>
 800728a:	230a      	movs	r3, #10
 800728c:	e7ad      	b.n	80071ea <_strtol_l.isra.0+0x5e>
 800728e:	bf00      	nop
 8007290:	08007381 	.word	0x08007381

08007294 <strtol>:
 8007294:	4613      	mov	r3, r2
 8007296:	460a      	mov	r2, r1
 8007298:	4601      	mov	r1, r0
 800729a:	4802      	ldr	r0, [pc, #8]	; (80072a4 <strtol+0x10>)
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f7ff bf75 	b.w	800718c <_strtol_l.isra.0>
 80072a2:	bf00      	nop
 80072a4:	20000024 	.word	0x20000024

080072a8 <_init>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	bf00      	nop
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr

080072b4 <_fini>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr
>>>>>>> main
