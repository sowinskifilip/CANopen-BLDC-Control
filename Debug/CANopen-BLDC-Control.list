
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a688  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800a888  0800a888  0001a888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad0c  0800ad0c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad14  0800ad14  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ad1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  200001f8  0800af14  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  0800af14  00020944  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd88  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003764  00000000  00000000  0003bfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003f718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  00040b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad2b  00000000  00000000  00041ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a404  00000000  00000000  0006cbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102625  00000000  00000000  00086fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001895f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006560  00000000  00000000  00189648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a870 	.word	0x0800a870

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800a870 	.word	0x0800a870

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_CAN1_Init+0x68>)
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <MX_CAN1_Init+0x6c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_CAN1_Init+0x68>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_CAN1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_CAN1_Init+0x68>)
 8000600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000604:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_CAN1_Init+0x68>)
 8000608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_CAN1_Init+0x68>)
 8000610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000614:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_CAN1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_CAN1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_CAN1_Init+0x68>)
 800063c:	f002 fa9c 	bl	8002b78 <HAL_CAN_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000646:	f001 fd27 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000022c 	.word	0x2000022c
 8000654:	40006400 	.word	0x40006400

08000658 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_CAN_MspInit+0x8c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d12f      	bne.n	80006da <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006aa:	2303      	movs	r3, #3
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ba:	2309      	movs	r3, #9
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <HAL_CAN_MspInit+0x94>)
 80006c6:	f003 fa69 	bl	8003b9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2014      	movs	r0, #20
 80006d0:	f003 f99b 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006d4:	2014      	movs	r0, #20
 80006d6:	f003 f9b4 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40006400 	.word	0x40006400
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a6b      	ldr	r2, [pc, #428]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a65      	ldr	r2, [pc, #404]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a5f      	ldr	r2, [pc, #380]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a53      	ldr	r2, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4d      	ldr	r2, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f244 0181 	movw	r1, #16513	; 0x4081
 800079c:	4847      	ldr	r0, [pc, #284]	; (80008bc <MX_GPIO_Init+0x1cc>)
 800079e:	f003 fba9 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	4846      	ldr	r0, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 80007a8:	f003 fba4 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4840      	ldr	r0, [pc, #256]	; (80008c4 <MX_GPIO_Init+0x1d4>)
 80007c4:	f003 f9ea 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007c8:	2332      	movs	r3, #50	; 0x32
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d8:	230b      	movs	r3, #11
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4838      	ldr	r0, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x1d4>)
 80007e4:	f003 f9da 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007e8:	2386      	movs	r3, #134	; 0x86
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x1d8>)
 8000804:	f003 f9ca 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000808:	f244 0381 	movw	r3, #16513	; 0x4081
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <MX_GPIO_Init+0x1cc>)
 8000822:	f003 f9bb 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000838:	230b      	movs	r3, #11
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481e      	ldr	r0, [pc, #120]	; (80008bc <MX_GPIO_Init+0x1cc>)
 8000844:	f003 f9aa 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 8000860:	f003 f99c 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 8000878:	f003 f990 	bl	8003b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800087c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 800089a:	f003 f97f 	bl	8003b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2028      	movs	r0, #40	; 0x28
 80008a4:	f003 f8b1 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a8:	2028      	movs	r0, #40	; 0x28
 80008aa:	f003 f8ca 	bl	8003a42 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000

080008cc <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008d6:	f003 fb0d 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008e0:	f003 fb08 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ea:	4802      	ldr	r0, [pc, #8]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008ec:	f003 fb02 	bl	8003ef4 <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020400 	.word	0x40020400

080008f8 <fnInit>:


//INIT FUNCTION
void fnInit(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	switch(iMachineStatus){
 80008fc:	4bc8      	ldr	r3, [pc, #800]	; (8000c20 <fnInit+0x328>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b50      	cmp	r3, #80	; 0x50
 8000902:	f200 8339 	bhi.w	8000f78 <fnInit+0x680>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <fnInit+0x14>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000a51 	.word	0x08000a51
 8000910:	08000f79 	.word	0x08000f79
 8000914:	08000f79 	.word	0x08000f79
 8000918:	08000f79 	.word	0x08000f79
 800091c:	08000f79 	.word	0x08000f79
 8000920:	08000a9d 	.word	0x08000a9d
 8000924:	08000f79 	.word	0x08000f79
 8000928:	08000f79 	.word	0x08000f79
 800092c:	08000f79 	.word	0x08000f79
 8000930:	08000f79 	.word	0x08000f79
 8000934:	08000ad9 	.word	0x08000ad9
 8000938:	08000f79 	.word	0x08000f79
 800093c:	08000f79 	.word	0x08000f79
 8000940:	08000f79 	.word	0x08000f79
 8000944:	08000f79 	.word	0x08000f79
 8000948:	08000f79 	.word	0x08000f79
 800094c:	08000f79 	.word	0x08000f79
 8000950:	08000f79 	.word	0x08000f79
 8000954:	08000f79 	.word	0x08000f79
 8000958:	08000f79 	.word	0x08000f79
 800095c:	08000b65 	.word	0x08000b65
 8000960:	08000f79 	.word	0x08000f79
 8000964:	08000f79 	.word	0x08000f79
 8000968:	08000f79 	.word	0x08000f79
 800096c:	08000f79 	.word	0x08000f79
 8000970:	08000bc7 	.word	0x08000bc7
 8000974:	08000f79 	.word	0x08000f79
 8000978:	08000f79 	.word	0x08000f79
 800097c:	08000f79 	.word	0x08000f79
 8000980:	08000f79 	.word	0x08000f79
 8000984:	08000c65 	.word	0x08000c65
 8000988:	08000f79 	.word	0x08000f79
 800098c:	08000f79 	.word	0x08000f79
 8000990:	08000f79 	.word	0x08000f79
 8000994:	08000f79 	.word	0x08000f79
 8000998:	08000f79 	.word	0x08000f79
 800099c:	08000f79 	.word	0x08000f79
 80009a0:	08000f79 	.word	0x08000f79
 80009a4:	08000f79 	.word	0x08000f79
 80009a8:	08000f79 	.word	0x08000f79
 80009ac:	08000cc7 	.word	0x08000cc7
 80009b0:	08000f79 	.word	0x08000f79
 80009b4:	08000f79 	.word	0x08000f79
 80009b8:	08000f79 	.word	0x08000f79
 80009bc:	08000f79 	.word	0x08000f79
 80009c0:	08000f79 	.word	0x08000f79
 80009c4:	08000f79 	.word	0x08000f79
 80009c8:	08000f79 	.word	0x08000f79
 80009cc:	08000f79 	.word	0x08000f79
 80009d0:	08000f79 	.word	0x08000f79
 80009d4:	08000d29 	.word	0x08000d29
 80009d8:	08000f79 	.word	0x08000f79
 80009dc:	08000f79 	.word	0x08000f79
 80009e0:	08000f79 	.word	0x08000f79
 80009e4:	08000f79 	.word	0x08000f79
 80009e8:	08000d8b 	.word	0x08000d8b
 80009ec:	08000f79 	.word	0x08000f79
 80009f0:	08000f79 	.word	0x08000f79
 80009f4:	08000f79 	.word	0x08000f79
 80009f8:	08000f79 	.word	0x08000f79
 80009fc:	08000dfb 	.word	0x08000dfb
 8000a00:	08000f79 	.word	0x08000f79
 8000a04:	08000f79 	.word	0x08000f79
 8000a08:	08000f79 	.word	0x08000f79
 8000a0c:	08000f79 	.word	0x08000f79
 8000a10:	08000f79 	.word	0x08000f79
 8000a14:	08000f79 	.word	0x08000f79
 8000a18:	08000f79 	.word	0x08000f79
 8000a1c:	08000f79 	.word	0x08000f79
 8000a20:	08000f79 	.word	0x08000f79
 8000a24:	08000e5d 	.word	0x08000e5d
 8000a28:	08000f79 	.word	0x08000f79
 8000a2c:	08000f79 	.word	0x08000f79
 8000a30:	08000f79 	.word	0x08000f79
 8000a34:	08000f79 	.word	0x08000f79
 8000a38:	08000f79 	.word	0x08000f79
 8000a3c:	08000f79 	.word	0x08000f79
 8000a40:	08000f79 	.word	0x08000f79
 8000a44:	08000f79 	.word	0x08000f79
 8000a48:	08000f79 	.word	0x08000f79
 8000a4c:	08000edb 	.word	0x08000edb

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000a50:	4b74      	ldr	r3, [pc, #464]	; (8000c24 <fnInit+0x32c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a56:	4b73      	ldr	r3, [pc, #460]	; (8000c24 <fnInit+0x32c>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000a5c:	4b72      	ldr	r3, [pc, #456]	; (8000c28 <fnInit+0x330>)
 8000a5e:	2282      	movs	r2, #130	; 0x82
 8000a60:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000a62:	4b71      	ldr	r3, [pc, #452]	; (8000c28 <fnInit+0x330>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a68:	4b70      	ldr	r3, [pc, #448]	; (8000c2c <fnInit+0x334>)
 8000a6a:	4a6f      	ldr	r2, [pc, #444]	; (8000c28 <fnInit+0x330>)
 8000a6c:	496d      	ldr	r1, [pc, #436]	; (8000c24 <fnInit+0x32c>)
 8000a6e:	4870      	ldr	r0, [pc, #448]	; (8000c30 <fnInit+0x338>)
 8000a70:	f002 faae 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d004      	beq.n	8000a84 <fnInit+0x18c>
			fnLEDsErrorState();
 8000a7a:	f7ff ff27 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000a7e:	f001 fb0b 	bl	8002098 <Error_Handler>
		else{
			iMachineStatus = 5;
			//SEND INFO THAT ENGINE IS INITIALIZING
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
		}
		break;
 8000a82:	e279      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 5;
 8000a84:	4b66      	ldr	r3, [pc, #408]	; (8000c20 <fnInit+0x328>)
 8000a86:	2205      	movs	r2, #5
 8000a88:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
 8000a8a:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <fnInit+0x33c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	4969      	ldr	r1, [pc, #420]	; (8000c38 <fnInit+0x340>)
 8000a94:	4869      	ldr	r0, [pc, #420]	; (8000c3c <fnInit+0x344>)
 8000a96:	f005 fa5b 	bl	8005f50 <HAL_UART_Transmit>
		break;
 8000a9a:	e26d      	b.n	8000f78 <fnInit+0x680>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000a9c:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <fnInit+0x32c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000aa2:	4b60      	ldr	r3, [pc, #384]	; (8000c24 <fnInit+0x32c>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 8000aa8:	4b5f      	ldr	r3, [pc, #380]	; (8000c28 <fnInit+0x330>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000aae:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <fnInit+0x330>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ab4:	4b5d      	ldr	r3, [pc, #372]	; (8000c2c <fnInit+0x334>)
 8000ab6:	4a5c      	ldr	r2, [pc, #368]	; (8000c28 <fnInit+0x330>)
 8000ab8:	495a      	ldr	r1, [pc, #360]	; (8000c24 <fnInit+0x32c>)
 8000aba:	485d      	ldr	r0, [pc, #372]	; (8000c30 <fnInit+0x338>)
 8000abc:	f002 fa88 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d004      	beq.n	8000ad0 <fnInit+0x1d8>
			fnLEDsErrorState();
 8000ac6:	f7ff ff01 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000aca:	f001 fae5 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
		}
		break;
 8000ace:	e253      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 10;
 8000ad0:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <fnInit+0x328>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	701a      	strb	r2, [r3, #0]
		break;
 8000ad6:	e24f      	b.n	8000f78 <fnInit+0x680>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <fnInit+0x32c>)
 8000ada:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ade:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ae0:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <fnInit+0x32c>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <fnInit+0x330>)
 8000ae8:	2222      	movs	r2, #34	; 0x22
 8000aea:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000aec:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <fnInit+0x330>)
 8000aee:	2240      	movs	r2, #64	; 0x40
 8000af0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000af2:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <fnInit+0x330>)
 8000af4:	2260      	movs	r2, #96	; 0x60
 8000af6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <fnInit+0x330>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000afe:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <fnInit+0x330>)
 8000b00:	2206      	movs	r2, #6
 8000b02:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b04:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <fnInit+0x330>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <fnInit+0x330>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b10:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <fnInit+0x330>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	71da      	strb	r2, [r3, #7]

		//RESET ALL VARIABLES TO INITIAL CONDITIONS
		iMode = 100;
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <fnInit+0x348>)
 8000b18:	2264      	movs	r2, #100	; 0x64
 8000b1a:	701a      	strb	r2, [r3, #0]
		iSelected_leg = 100;
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <fnInit+0x34c>)
 8000b1e:	2264      	movs	r2, #100	; 0x64
 8000b20:	701a      	strb	r2, [r3, #0]

		iSerialMachineStatus = 100;
 8000b22:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <fnInit+0x350>)
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	701a      	strb	r2, [r3, #0]
		iSerialRange = 0;
 8000b28:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <fnInit+0x354>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
		iSerialReps = 0;
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <fnInit+0x358>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

		iSingleMachineStatus = 100;
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <fnInit+0x35c>)
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	701a      	strb	r2, [r3, #0]
		iPosition = 0;
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <fnInit+0x360>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <fnInit+0x334>)
 8000b42:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <fnInit+0x330>)
 8000b44:	4937      	ldr	r1, [pc, #220]	; (8000c24 <fnInit+0x32c>)
 8000b46:	483a      	ldr	r0, [pc, #232]	; (8000c30 <fnInit+0x338>)
 8000b48:	f002 fa42 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d004      	beq.n	8000b5c <fnInit+0x264>
			fnLEDsErrorState();
 8000b52:	f7ff febb 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000b56:	f001 fa9f 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
		}
		break;
 8000b5a:	e20d      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 20;
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <fnInit+0x328>)
 8000b5e:	2214      	movs	r2, #20
 8000b60:	701a      	strb	r2, [r3, #0]
		break;
 8000b62:	e209      	b.n	8000f78 <fnInit+0x680>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <fnInit+0x32c>)
 8000b66:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b6a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <fnInit+0x32c>)
 8000b6e:	2208      	movs	r2, #8
 8000b70:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <fnInit+0x330>)
 8000b74:	2222      	movs	r2, #34	; 0x22
 8000b76:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <fnInit+0x330>)
 8000b7a:	2240      	movs	r2, #64	; 0x40
 8000b7c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <fnInit+0x330>)
 8000b80:	2260      	movs	r2, #96	; 0x60
 8000b82:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <fnInit+0x330>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <fnInit+0x330>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <fnInit+0x330>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <fnInit+0x330>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <fnInit+0x330>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <fnInit+0x334>)
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <fnInit+0x330>)
 8000ba6:	491f      	ldr	r1, [pc, #124]	; (8000c24 <fnInit+0x32c>)
 8000ba8:	4821      	ldr	r0, [pc, #132]	; (8000c30 <fnInit+0x338>)
 8000baa:	f002 fa11 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <fnInit+0x2c6>
			fnLEDsErrorState();
 8000bb4:	f7ff fe8a 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000bb8:	f001 fa6e 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
		}
		break;
 8000bbc:	e1dc      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 25;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <fnInit+0x328>)
 8000bc0:	2219      	movs	r2, #25
 8000bc2:	701a      	strb	r2, [r3, #0]
		break;
 8000bc4:	e1d8      	b.n	8000f78 <fnInit+0x680>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <fnInit+0x32c>)
 8000bc8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bcc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <fnInit+0x32c>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <fnInit+0x330>)
 8000bd6:	2222      	movs	r2, #34	; 0x22
 8000bd8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <fnInit+0x330>)
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <fnInit+0x330>)
 8000be2:	2260      	movs	r2, #96	; 0x60
 8000be4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <fnInit+0x330>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <fnInit+0x330>)
 8000bee:	220f      	movs	r2, #15
 8000bf0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <fnInit+0x330>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <fnInit+0x330>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <fnInit+0x330>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <fnInit+0x334>)
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <fnInit+0x330>)
 8000c08:	4906      	ldr	r1, [pc, #24]	; (8000c24 <fnInit+0x32c>)
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <fnInit+0x338>)
 8000c0c:	f002 f9e0 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d022      	beq.n	8000c5c <fnInit+0x364>
			fnLEDsErrorState();
 8000c16:	f7ff fe59 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000c1a:	f001 fa3d 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
		}
		break;
 8000c1e:	e1ab      	b.n	8000f78 <fnInit+0x680>
 8000c20:	20000006 	.word	0x20000006
 8000c24:	2000029c 	.word	0x2000029c
 8000c28:	2000025c 	.word	0x2000025c
 8000c2c:	20000264 	.word	0x20000264
 8000c30:	2000022c 	.word	0x2000022c
 8000c34:	20000000 	.word	0x20000000
 8000c38:	0800a8d4 	.word	0x0800a8d4
 8000c3c:	200004a8 	.word	0x200004a8
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000005 	.word	0x20000005
 8000c48:	20000009 	.word	0x20000009
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000258 	.word	0x20000258
			iMachineStatus = 30;
 8000c5c:	4bb3      	ldr	r3, [pc, #716]	; (8000f2c <fnInit+0x634>)
 8000c5e:	221e      	movs	r2, #30
 8000c60:	701a      	strb	r2, [r3, #0]
		break;
 8000c62:	e189      	b.n	8000f78 <fnInit+0x680>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000c64:	4bb2      	ldr	r3, [pc, #712]	; (8000f30 <fnInit+0x638>)
 8000c66:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c6a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c6c:	4bb0      	ldr	r3, [pc, #704]	; (8000f30 <fnInit+0x638>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c72:	4bb0      	ldr	r3, [pc, #704]	; (8000f34 <fnInit+0x63c>)
 8000c74:	2222      	movs	r2, #34	; 0x22
 8000c76:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000c78:	4bae      	ldr	r3, [pc, #696]	; (8000f34 <fnInit+0x63c>)
 8000c7a:	2260      	movs	r2, #96	; 0x60
 8000c7c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c7e:	4bad      	ldr	r3, [pc, #692]	; (8000f34 <fnInit+0x63c>)
 8000c80:	2260      	movs	r2, #96	; 0x60
 8000c82:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c84:	4bab      	ldr	r3, [pc, #684]	; (8000f34 <fnInit+0x63c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000c8a:	4baa      	ldr	r3, [pc, #680]	; (8000f34 <fnInit+0x63c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c90:	4ba8      	ldr	r3, [pc, #672]	; (8000f34 <fnInit+0x63c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c96:	4ba7      	ldr	r3, [pc, #668]	; (8000f34 <fnInit+0x63c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c9c:	4ba5      	ldr	r3, [pc, #660]	; (8000f34 <fnInit+0x63c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ca2:	4ba5      	ldr	r3, [pc, #660]	; (8000f38 <fnInit+0x640>)
 8000ca4:	4aa3      	ldr	r2, [pc, #652]	; (8000f34 <fnInit+0x63c>)
 8000ca6:	49a2      	ldr	r1, [pc, #648]	; (8000f30 <fnInit+0x638>)
 8000ca8:	48a4      	ldr	r0, [pc, #656]	; (8000f3c <fnInit+0x644>)
 8000caa:	f002 f991 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <fnInit+0x3c6>
			fnLEDsErrorState();
 8000cb4:	f7ff fe0a 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000cb8:	f001 f9ee 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
		}
		break;
 8000cbc:	e15c      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 40;
 8000cbe:	4b9b      	ldr	r3, [pc, #620]	; (8000f2c <fnInit+0x634>)
 8000cc0:	2228      	movs	r2, #40	; 0x28
 8000cc2:	701a      	strb	r2, [r3, #0]
		break;
 8000cc4:	e158      	b.n	8000f78 <fnInit+0x680>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000cc6:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <fnInit+0x638>)
 8000cc8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ccc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cce:	4b98      	ldr	r3, [pc, #608]	; (8000f30 <fnInit+0x638>)
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000cd4:	4b97      	ldr	r3, [pc, #604]	; (8000f34 <fnInit+0x63c>)
 8000cd6:	2222      	movs	r2, #34	; 0x22
 8000cd8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000cda:	4b96      	ldr	r3, [pc, #600]	; (8000f34 <fnInit+0x63c>)
 8000cdc:	227a      	movs	r2, #122	; 0x7a
 8000cde:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ce0:	4b94      	ldr	r3, [pc, #592]	; (8000f34 <fnInit+0x63c>)
 8000ce2:	2260      	movs	r2, #96	; 0x60
 8000ce4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ce6:	4b93      	ldr	r3, [pc, #588]	; (8000f34 <fnInit+0x63c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000cec:	4b91      	ldr	r3, [pc, #580]	; (8000f34 <fnInit+0x63c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cf2:	4b90      	ldr	r3, [pc, #576]	; (8000f34 <fnInit+0x63c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	; (8000f34 <fnInit+0x63c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cfe:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <fnInit+0x63c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d04:	4b8c      	ldr	r3, [pc, #560]	; (8000f38 <fnInit+0x640>)
 8000d06:	4a8b      	ldr	r2, [pc, #556]	; (8000f34 <fnInit+0x63c>)
 8000d08:	4989      	ldr	r1, [pc, #548]	; (8000f30 <fnInit+0x638>)
 8000d0a:	488c      	ldr	r0, [pc, #560]	; (8000f3c <fnInit+0x644>)
 8000d0c:	f002 f960 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <fnInit+0x428>
			fnLEDsErrorState();
 8000d16:	f7ff fdd9 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000d1a:	f001 f9bd 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
		}
		break;
 8000d1e:	e12b      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 50;
 8000d20:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <fnInit+0x634>)
 8000d22:	2232      	movs	r2, #50	; 0x32
 8000d24:	701a      	strb	r2, [r3, #0]
		break;
 8000d26:	e127      	b.n	8000f78 <fnInit+0x680>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000d28:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <fnInit+0x638>)
 8000d2a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d2e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d30:	4b7f      	ldr	r3, [pc, #508]	; (8000f30 <fnInit+0x638>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d36:	4b7f      	ldr	r3, [pc, #508]	; (8000f34 <fnInit+0x63c>)
 8000d38:	2222      	movs	r2, #34	; 0x22
 8000d3a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d3c:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <fnInit+0x63c>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d42:	4b7c      	ldr	r3, [pc, #496]	; (8000f34 <fnInit+0x63c>)
 8000d44:	2260      	movs	r2, #96	; 0x60
 8000d46:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d48:	4b7a      	ldr	r3, [pc, #488]	; (8000f34 <fnInit+0x63c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000d4e:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <fnInit+0x63c>)
 8000d50:	221f      	movs	r2, #31
 8000d52:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <fnInit+0x63c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d5a:	4b76      	ldr	r3, [pc, #472]	; (8000f34 <fnInit+0x63c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d60:	4b74      	ldr	r3, [pc, #464]	; (8000f34 <fnInit+0x63c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d66:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <fnInit+0x640>)
 8000d68:	4a72      	ldr	r2, [pc, #456]	; (8000f34 <fnInit+0x63c>)
 8000d6a:	4971      	ldr	r1, [pc, #452]	; (8000f30 <fnInit+0x638>)
 8000d6c:	4873      	ldr	r0, [pc, #460]	; (8000f3c <fnInit+0x644>)
 8000d6e:	f002 f92f 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <fnInit+0x48a>
			fnLEDsErrorState();
 8000d78:	f7ff fda8 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000d7c:	f001 f98c 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
		}
		break;
 8000d80:	e0fa      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 55;
 8000d82:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <fnInit+0x634>)
 8000d84:	2237      	movs	r2, #55	; 0x37
 8000d86:	701a      	strb	r2, [r3, #0]
		break;
 8000d88:	e0f6      	b.n	8000f78 <fnInit+0x680>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000d8a:	4b69      	ldr	r3, [pc, #420]	; (8000f30 <fnInit+0x638>)
 8000d8c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d90:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d92:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <fnInit+0x638>)
 8000d94:	2208      	movs	r2, #8
 8000d96:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d98:	4b66      	ldr	r3, [pc, #408]	; (8000f34 <fnInit+0x63c>)
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d9e:	4b65      	ldr	r3, [pc, #404]	; (8000f34 <fnInit+0x63c>)
 8000da0:	2241      	movs	r2, #65	; 0x41
 8000da2:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000da4:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <fnInit+0x63c>)
 8000da6:	2260      	movs	r2, #96	; 0x60
 8000da8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <fnInit+0x63c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000db0:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <fnInit+0x63c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000db6:	4b5f      	ldr	r3, [pc, #380]	; (8000f34 <fnInit+0x63c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <fnInit+0x63c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <fnInit+0x63c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000dc8:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <fnInit+0x640>)
 8000dca:	4a5a      	ldr	r2, [pc, #360]	; (8000f34 <fnInit+0x63c>)
 8000dcc:	4958      	ldr	r1, [pc, #352]	; (8000f30 <fnInit+0x638>)
 8000dce:	485b      	ldr	r0, [pc, #364]	; (8000f3c <fnInit+0x644>)
 8000dd0:	f002 f8fe 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d004      	beq.n	8000de4 <fnInit+0x4ec>
			fnLEDsErrorState();
 8000dda:	f7ff fd77 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000dde:	f001 f95b 	bl	8002098 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
		}
		break;
 8000de2:	e0c6      	b.n	8000f72 <fnInit+0x67a>
		else if (RxData[5] & 0b10000) {
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <fnInit+0x648>)
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80c0 	beq.w	8000f72 <fnInit+0x67a>
			iMachineStatus = 60;
 8000df2:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <fnInit+0x634>)
 8000df4:	223c      	movs	r2, #60	; 0x3c
 8000df6:	701a      	strb	r2, [r3, #0]
		break;
 8000df8:	e0bb      	b.n	8000f72 <fnInit+0x67a>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <fnInit+0x638>)
 8000dfc:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e00:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <fnInit+0x638>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000e08:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <fnInit+0x63c>)
 8000e0a:	2222      	movs	r2, #34	; 0x22
 8000e0c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000e0e:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <fnInit+0x63c>)
 8000e10:	2240      	movs	r2, #64	; 0x40
 8000e12:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e14:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <fnInit+0x63c>)
 8000e16:	2260      	movs	r2, #96	; 0x60
 8000e18:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <fnInit+0x63c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000e20:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <fnInit+0x63c>)
 8000e22:	220f      	movs	r2, #15
 8000e24:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <fnInit+0x63c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e2c:	4b41      	ldr	r3, [pc, #260]	; (8000f34 <fnInit+0x63c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <fnInit+0x63c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e38:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <fnInit+0x640>)
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <fnInit+0x63c>)
 8000e3c:	493c      	ldr	r1, [pc, #240]	; (8000f30 <fnInit+0x638>)
 8000e3e:	483f      	ldr	r0, [pc, #252]	; (8000f3c <fnInit+0x644>)
 8000e40:	f002 f8c6 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <fnInit+0x55c>
			fnLEDsErrorState();
 8000e4a:	f7ff fd3f 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000e4e:	f001 f923 	bl	8002098 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
		}
		break;
 8000e52:	e091      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 70;
 8000e54:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <fnInit+0x634>)
 8000e56:	2246      	movs	r2, #70	; 0x46
 8000e58:	701a      	strb	r2, [r3, #0]
		break;
 8000e5a:	e08d      	b.n	8000f78 <fnInit+0x680>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <fnInit+0x638>)
 8000e5e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e62:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <fnInit+0x638>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <fnInit+0x63c>)
 8000e6c:	2240      	movs	r2, #64	; 0x40
 8000e6e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <fnInit+0x63c>)
 8000e72:	2241      	movs	r2, #65	; 0x41
 8000e74:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <fnInit+0x63c>)
 8000e78:	2260      	movs	r2, #96	; 0x60
 8000e7a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <fnInit+0x63c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <fnInit+0x63c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <fnInit+0x63c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <fnInit+0x63c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <fnInit+0x63c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <fnInit+0x640>)
 8000e9c:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <fnInit+0x63c>)
 8000e9e:	4924      	ldr	r1, [pc, #144]	; (8000f30 <fnInit+0x638>)
 8000ea0:	4826      	ldr	r0, [pc, #152]	; (8000f3c <fnInit+0x644>)
 8000ea2:	f002 f895 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <fnInit+0x5be>
			fnLEDsErrorState();
 8000eac:	f7ff fd0e 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000eb0:	f001 f8f2 	bl	8002098 <Error_Handler>
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 8000eb4:	e05f      	b.n	8000f76 <fnInit+0x67e>
		else if (RxData[5] & 0b00100) {
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <fnInit+0x648>)
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d059      	beq.n	8000f76 <fnInit+0x67e>
			iMachineStatus = 80;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <fnInit+0x634>)
 8000ec4:	2250      	movs	r2, #80	; 0x50
 8000ec6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <fnInit+0x64c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	491d      	ldr	r1, [pc, #116]	; (8000f48 <fnInit+0x650>)
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <fnInit+0x654>)
 8000ed4:	f005 f83c 	bl	8005f50 <HAL_UART_Transmit>
		break;
 8000ed8:	e04d      	b.n	8000f76 <fnInit+0x67e>

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <fnInit+0x648>)
 8000edc:	791b      	ldrb	r3, [r3, #4]
 8000ede:	2b27      	cmp	r3, #39	; 0x27
 8000ee0:	d142      	bne.n	8000f68 <fnInit+0x670>
			iMachineStatus = 1;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <fnInit+0x634>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <fnInit+0x658>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000eee:	213c      	movs	r1, #60	; 0x3c
 8000ef0:	4818      	ldr	r0, [pc, #96]	; (8000f54 <fnInit+0x65c>)
 8000ef2:	f004 fc97 	bl	8005824 <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000ef6:	f000 f9cb 	bl	8001290 <fnEncCalibration>

			//SEND ENCODER VALUE AFTER INIT
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <fnInit+0x660>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f04:	ec53 2b17 	vmov	r2, r3, d7
 8000f08:	4914      	ldr	r1, [pc, #80]	; (8000f5c <fnInit+0x664>)
 8000f0a:	4815      	ldr	r0, [pc, #84]	; (8000f60 <fnInit+0x668>)
 8000f0c:	f007 fa4e 	bl	80083ac <siprintf>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <fnInit+0x66c>)
 8000f14:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <fnInit+0x66c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f20:	490f      	ldr	r1, [pc, #60]	; (8000f60 <fnInit+0x668>)
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <fnInit+0x654>)
 8000f24:	f005 f814 	bl	8005f50 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000f28:	e026      	b.n	8000f78 <fnInit+0x680>
 8000f2a:	bf00      	nop
 8000f2c:	20000006 	.word	0x20000006
 8000f30:	2000029c 	.word	0x2000029c
 8000f34:	2000025c 	.word	0x2000025c
 8000f38:	20000264 	.word	0x20000264
 8000f3c:	2000022c 	.word	0x2000022c
 8000f40:	20000268 	.word	0x20000268
 8000f44:	20000000 	.word	0x20000000
 8000f48:	0800a8e4 	.word	0x0800a8e4
 8000f4c:	200004a8 	.word	0x200004a8
 8000f50:	20000007 	.word	0x20000007
 8000f54:	2000032c 	.word	0x2000032c
 8000f58:	20000218 	.word	0x20000218
 8000f5c:	0800a888 	.word	0x0800a888
 8000f60:	200002d0 	.word	0x200002d0
 8000f64:	20000254 	.word	0x20000254
			fnLEDsErrorState();
 8000f68:	f7ff fcb0 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000f6c:	f001 f894 	bl	8002098 <Error_Handler>
		break;
 8000f70:	e002      	b.n	8000f78 <fnInit+0x680>
		break;
 8000f72:	bf00      	nop
 8000f74:	e000      	b.n	8000f78 <fnInit+0x680>
		break;
 8000f76:	bf00      	nop
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <fnReset>:

void fnReset(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000f80:	4b8b      	ldr	r3, [pc, #556]	; (80011b0 <fnReset+0x234>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b50      	cmp	r3, #80	; 0x50
 8000f86:	f000 80d7 	beq.w	8001138 <fnReset+0x1bc>
 8000f8a:	2b50      	cmp	r3, #80	; 0x50
 8000f8c:	f300 810d 	bgt.w	80011aa <fnReset+0x22e>
 8000f90:	2b46      	cmp	r3, #70	; 0x46
 8000f92:	f000 80a0 	beq.w	80010d6 <fnReset+0x15a>
 8000f96:	2b46      	cmp	r3, #70	; 0x46
 8000f98:	f300 8107 	bgt.w	80011aa <fnReset+0x22e>
 8000f9c:	2b19      	cmp	r3, #25
 8000f9e:	d069      	beq.n	8001074 <fnReset+0xf8>
 8000fa0:	2b19      	cmp	r3, #25
 8000fa2:	f300 8102 	bgt.w	80011aa <fnReset+0x22e>
 8000fa6:	2b0a      	cmp	r3, #10
 8000fa8:	d002      	beq.n	8000fb0 <fnReset+0x34>
 8000faa:	2b14      	cmp	r3, #20
 8000fac:	d031      	beq.n	8001012 <fnReset+0x96>
			Error_Handler();
		}

		break;
	}
}
 8000fae:	e0fc      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8000fb0:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <fnReset+0x238>)
 8000fb2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fb6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000fb8:	4b7e      	ldr	r3, [pc, #504]	; (80011b4 <fnReset+0x238>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000fbe:	4b7e      	ldr	r3, [pc, #504]	; (80011b8 <fnReset+0x23c>)
 8000fc0:	2222      	movs	r2, #34	; 0x22
 8000fc2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000fc4:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <fnReset+0x23c>)
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000fca:	4b7b      	ldr	r3, [pc, #492]	; (80011b8 <fnReset+0x23c>)
 8000fcc:	2260      	movs	r2, #96	; 0x60
 8000fce:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000fd0:	4b79      	ldr	r3, [pc, #484]	; (80011b8 <fnReset+0x23c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000fd6:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <fnReset+0x23c>)
 8000fd8:	2206      	movs	r2, #6
 8000fda:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <fnReset+0x23c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000fe2:	4b75      	ldr	r3, [pc, #468]	; (80011b8 <fnReset+0x23c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000fe8:	4b73      	ldr	r3, [pc, #460]	; (80011b8 <fnReset+0x23c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000fee:	4b73      	ldr	r3, [pc, #460]	; (80011bc <fnReset+0x240>)
 8000ff0:	4a71      	ldr	r2, [pc, #452]	; (80011b8 <fnReset+0x23c>)
 8000ff2:	4970      	ldr	r1, [pc, #448]	; (80011b4 <fnReset+0x238>)
 8000ff4:	4872      	ldr	r0, [pc, #456]	; (80011c0 <fnReset+0x244>)
 8000ff6:	f001 ffeb 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <fnReset+0x8e>
			fnLEDsErrorState();
 8001000:	f7ff fc64 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001004:	f001 f848 	bl	8002098 <Error_Handler>
		break;
 8001008:	e0cf      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 20;
 800100a:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <fnReset+0x234>)
 800100c:	2214      	movs	r2, #20
 800100e:	701a      	strb	r2, [r3, #0]
		break;
 8001010:	e0cb      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8001012:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <fnReset+0x238>)
 8001014:	f240 620a 	movw	r2, #1546	; 0x60a
 8001018:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <fnReset+0x238>)
 800101c:	2208      	movs	r2, #8
 800101e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001020:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <fnReset+0x23c>)
 8001022:	2222      	movs	r2, #34	; 0x22
 8001024:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001026:	4b64      	ldr	r3, [pc, #400]	; (80011b8 <fnReset+0x23c>)
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800102c:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <fnReset+0x23c>)
 800102e:	2260      	movs	r2, #96	; 0x60
 8001030:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001032:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <fnReset+0x23c>)
 8001034:	2200      	movs	r2, #0
 8001036:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8001038:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <fnReset+0x23c>)
 800103a:	2207      	movs	r2, #7
 800103c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <fnReset+0x23c>)
 8001040:	2200      	movs	r2, #0
 8001042:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001044:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <fnReset+0x23c>)
 8001046:	2200      	movs	r2, #0
 8001048:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <fnReset+0x23c>)
 800104c:	2200      	movs	r2, #0
 800104e:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001050:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <fnReset+0x240>)
 8001052:	4a59      	ldr	r2, [pc, #356]	; (80011b8 <fnReset+0x23c>)
 8001054:	4957      	ldr	r1, [pc, #348]	; (80011b4 <fnReset+0x238>)
 8001056:	485a      	ldr	r0, [pc, #360]	; (80011c0 <fnReset+0x244>)
 8001058:	f001 ffba 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <fnReset+0xf0>
			fnLEDsErrorState();
 8001062:	f7ff fc33 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001066:	f001 f817 	bl	8002098 <Error_Handler>
		break;
 800106a:	e09e      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 25;
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <fnReset+0x234>)
 800106e:	2219      	movs	r2, #25
 8001070:	701a      	strb	r2, [r3, #0]
		break;
 8001072:	e09a      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <fnReset+0x238>)
 8001076:	f240 620a 	movw	r2, #1546	; 0x60a
 800107a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <fnReset+0x238>)
 800107e:	2208      	movs	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001082:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <fnReset+0x23c>)
 8001084:	2222      	movs	r2, #34	; 0x22
 8001086:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001088:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <fnReset+0x23c>)
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <fnReset+0x23c>)
 8001090:	2260      	movs	r2, #96	; 0x60
 8001092:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <fnReset+0x23c>)
 8001096:	2200      	movs	r2, #0
 8001098:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <fnReset+0x23c>)
 800109c:	220f      	movs	r2, #15
 800109e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <fnReset+0x23c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010a6:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <fnReset+0x23c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010ac:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <fnReset+0x23c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <fnReset+0x240>)
 80010b4:	4a40      	ldr	r2, [pc, #256]	; (80011b8 <fnReset+0x23c>)
 80010b6:	493f      	ldr	r1, [pc, #252]	; (80011b4 <fnReset+0x238>)
 80010b8:	4841      	ldr	r0, [pc, #260]	; (80011c0 <fnReset+0x244>)
 80010ba:	f001 ff89 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <fnReset+0x152>
			fnLEDsErrorState();
 80010c4:	f7ff fc02 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80010c8:	f000 ffe6 	bl	8002098 <Error_Handler>
		break;
 80010cc:	e06d      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 70;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <fnReset+0x234>)
 80010d0:	2246      	movs	r2, #70	; 0x46
 80010d2:	701a      	strb	r2, [r3, #0]
		break;
 80010d4:	e069      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <fnReset+0x238>)
 80010d8:	f240 620a 	movw	r2, #1546	; 0x60a
 80010dc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <fnReset+0x238>)
 80010e0:	2208      	movs	r2, #8
 80010e2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <fnReset+0x23c>)
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <fnReset+0x23c>)
 80010ec:	2241      	movs	r2, #65	; 0x41
 80010ee:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <fnReset+0x23c>)
 80010f2:	2260      	movs	r2, #96	; 0x60
 80010f4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <fnReset+0x23c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <fnReset+0x23c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <fnReset+0x23c>)
 8001104:	2200      	movs	r2, #0
 8001106:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <fnReset+0x23c>)
 800110a:	2200      	movs	r2, #0
 800110c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <fnReset+0x23c>)
 8001110:	2200      	movs	r2, #0
 8001112:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <fnReset+0x240>)
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <fnReset+0x23c>)
 8001118:	4926      	ldr	r1, [pc, #152]	; (80011b4 <fnReset+0x238>)
 800111a:	4829      	ldr	r0, [pc, #164]	; (80011c0 <fnReset+0x244>)
 800111c:	f001 ff58 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <fnReset+0x1b4>
			fnLEDsErrorState();
 8001126:	f7ff fbd1 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800112a:	f000 ffb5 	bl	8002098 <Error_Handler>
		break;
 800112e:	e03c      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 80;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <fnReset+0x234>)
 8001132:	2250      	movs	r2, #80	; 0x50
 8001134:	701a      	strb	r2, [r3, #0]
		break;
 8001136:	e038      	b.n	80011aa <fnReset+0x22e>
		if (RxData[4] == 39) {
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <fnReset+0x248>)
 800113a:	791b      	ldrb	r3, [r3, #4]
 800113c:	2b27      	cmp	r3, #39	; 0x27
 800113e:	d12f      	bne.n	80011a0 <fnReset+0x224>
			iMachineStatus = 1;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <fnReset+0x234>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
			if (iMode == 0 && iSingleMachineStatus != 100) {
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <fnReset+0x24c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d107      	bne.n	8001160 <fnReset+0x1e4>
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <fnReset+0x250>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d003      	beq.n	8001160 <fnReset+0x1e4>
				iSingleMachineStatus = 10;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <fnReset+0x250>)
 800115a:	220a      	movs	r2, #10
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e015      	b.n	800118c <fnReset+0x210>
			else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <fnReset+0x24c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d110      	bne.n	800118c <fnReset+0x210>
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <fnReset+0x254>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d00c      	beq.n	800118c <fnReset+0x210>
				if (iSerialMachineStatus == 40) {
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <fnReset+0x254>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b28      	cmp	r3, #40	; 0x28
 8001178:	d105      	bne.n	8001186 <fnReset+0x20a>
					iSerialCounter--;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <fnReset+0x258>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <fnReset+0x258>)
 8001184:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <fnReset+0x254>)
 8001188:	220a      	movs	r2, #10
 800118a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <fnReset+0x25c>)
 8001194:	f002 feae 	bl	8003ef4 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim14);
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <fnReset+0x260>)
 800119a:	f004 fa6d 	bl	8005678 <HAL_TIM_Base_Stop_IT>
		break;
 800119e:	e003      	b.n	80011a8 <fnReset+0x22c>
			fnLEDsErrorState();
 80011a0:	f7ff fb94 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80011a4:	f000 ff78 	bl	8002098 <Error_Handler>
		break;
 80011a8:	bf00      	nop
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000006 	.word	0x20000006
 80011b4:	2000029c 	.word	0x2000029c
 80011b8:	2000025c 	.word	0x2000025c
 80011bc:	20000264 	.word	0x20000264
 80011c0:	2000022c 	.word	0x2000022c
 80011c4:	20000268 	.word	0x20000268
 80011c8:	20000004 	.word	0x20000004
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000009 	.word	0x20000009
 80011d4:	20000010 	.word	0x20000010
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000410 	.word	0x20000410

080011e0 <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <fnEncCounts2Angle+0x3c>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <fnEncCounts2Angle+0x40>)
 8001200:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <fnEncCounts2Angle+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c
 8001220:	2000021c 	.word	0x2000021c

08001224 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <fnEncReadCount+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <fnEncReadCount+0x60>)
 8001232:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <fnEncReadCount+0x60>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d208      	bcs.n	8001256 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8001244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <fnEncReadCount+0x60>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <fnEncReadCount+0x64>)
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	e003      	b.n	800125e <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <fnEncReadCount+0x60>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <fnEncReadCount+0x64>)
 800125c:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount)/2;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <fnEncReadCount+0x64>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffbc 	bl	80011e0 <fnEncCounts2Angle>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <fnEncReadCount+0x68>)
 8001276:	edc3 7a00 	vstr	s15, [r3]
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000032c 	.word	0x2000032c
 8001284:	20000214 	.word	0x20000214
 8001288:	20000216 	.word	0x20000216
 800128c:	20000218 	.word	0x20000218

08001290 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <fnEncCalibration+0x14>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 800129a:	f7ff ffc3 	bl	8001224 <fnEncReadCount>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400

080012a8 <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b5a      	cmp	r3, #90	; 0x5a
 80012b8:	d901      	bls.n	80012be <fnMoveAbsolute+0x16>
		iNumber = 90;
 80012ba:	235a      	movs	r3, #90	; 0x5a
 80012bc:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <fnMoveAbsolute+0xc4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d108      	bne.n	80012da <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e00e      	b.n	80012f8 <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <fnMoveAbsolute+0xc4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <fnMoveAbsolute+0xc8>)
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e001      	b.n	80012f8 <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d132      	bne.n	8001364 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <fnMoveAbsolute+0xcc>)
 8001300:	f240 620a 	movw	r2, #1546	; 0x60a
 8001304:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <fnMoveAbsolute+0xcc>)
 8001308:	2208      	movs	r2, #8
 800130a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <fnMoveAbsolute+0xd0>)
 800130e:	2222      	movs	r2, #34	; 0x22
 8001310:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001314:	227a      	movs	r2, #122	; 0x7a
 8001316:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <fnMoveAbsolute+0xd0>)
 800131a:	2260      	movs	r2, #96	; 0x60
 800131c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001320:	2200      	movs	r2, #0
 8001322:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <fnMoveAbsolute+0xd0>)
 800132a:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001334:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <fnMoveAbsolute+0xd0>)
 800133e:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0e1b      	lsrs	r3, r3, #24
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001348:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <fnMoveAbsolute+0xd4>)
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <fnMoveAbsolute+0xd0>)
 800134e:	4909      	ldr	r1, [pc, #36]	; (8001374 <fnMoveAbsolute+0xcc>)
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <fnMoveAbsolute+0xd8>)
 8001352:	f001 fe3d 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 800135c:	f7ff fab6 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001360:	f000 fe9a 	bl	8002098 <Error_Handler>
		}

	}
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000005 	.word	0x20000005
 8001370:	fffffc18 	.word	0xfffffc18
 8001374:	2000029c 	.word	0x2000029c
 8001378:	2000025c 	.word	0x2000025c
 800137c:	20000264 	.word	0x20000264
 8001380:	2000022c 	.word	0x2000022c

08001384 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	switch (iSingleMachineStatus){
 8001388:	4b97      	ldr	r3, [pc, #604]	; (80015e8 <fnSingleMotionAction+0x264>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b0a      	subs	r3, #10
 800138e:	2b19      	cmp	r3, #25
 8001390:	f200 8127 	bhi.w	80015e2 <fnSingleMotionAction+0x25e>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <fnSingleMotionAction+0x18>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	08001405 	.word	0x08001405
 80013a0:	080015e3 	.word	0x080015e3
 80013a4:	080015e3 	.word	0x080015e3
 80013a8:	080015e3 	.word	0x080015e3
 80013ac:	080015e3 	.word	0x080015e3
 80013b0:	080015e3 	.word	0x080015e3
 80013b4:	080015e3 	.word	0x080015e3
 80013b8:	080015e3 	.word	0x080015e3
 80013bc:	080015e3 	.word	0x080015e3
 80013c0:	080015e3 	.word	0x080015e3
 80013c4:	08001477 	.word	0x08001477
 80013c8:	080015e3 	.word	0x080015e3
 80013cc:	080015e3 	.word	0x080015e3
 80013d0:	080015e3 	.word	0x080015e3
 80013d4:	080015e3 	.word	0x080015e3
 80013d8:	08001489 	.word	0x08001489
 80013dc:	080015e3 	.word	0x080015e3
 80013e0:	080015e3 	.word	0x080015e3
 80013e4:	080015e3 	.word	0x080015e3
 80013e8:	080015e3 	.word	0x080015e3
 80013ec:	080014f7 	.word	0x080014f7
 80013f0:	080015e3 	.word	0x080015e3
 80013f4:	080015e3 	.word	0x080015e3
 80013f8:	080015e3 	.word	0x080015e3
 80013fc:	080015e3 	.word	0x080015e3
 8001400:	08001559 	.word	0x08001559
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001404:	4b79      	ldr	r3, [pc, #484]	; (80015ec <fnSingleMotionAction+0x268>)
 8001406:	f240 620a 	movw	r2, #1546	; 0x60a
 800140a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800140c:	4b77      	ldr	r3, [pc, #476]	; (80015ec <fnSingleMotionAction+0x268>)
 800140e:	2208      	movs	r2, #8
 8001410:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001412:	4b77      	ldr	r3, [pc, #476]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001414:	2222      	movs	r2, #34	; 0x22
 8001416:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001418:	4b75      	ldr	r3, [pc, #468]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800141a:	2240      	movs	r2, #64	; 0x40
 800141c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800141e:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001420:	2260      	movs	r2, #96	; 0x60
 8001422:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001424:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001426:	2200      	movs	r2, #0
 8001428:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800142a:	4b71      	ldr	r3, [pc, #452]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800142c:	221f      	movs	r2, #31
 800142e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001432:	2200      	movs	r2, #0
 8001434:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001436:	4b6e      	ldr	r3, [pc, #440]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001438:	2200      	movs	r2, #0
 800143a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800143c:	4b6c      	ldr	r3, [pc, #432]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800143e:	2200      	movs	r2, #0
 8001440:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <fnSingleMotionAction+0x270>)
 8001444:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001446:	4969      	ldr	r1, [pc, #420]	; (80015ec <fnSingleMotionAction+0x268>)
 8001448:	486b      	ldr	r0, [pc, #428]	; (80015f8 <fnSingleMotionAction+0x274>)
 800144a:	f001 fdc1 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <fnSingleMotionAction+0xda>
			fnLEDsErrorState();
 8001454:	f7ff fa3a 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001458:	f000 fe1e 	bl	8002098 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 20;
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
		}
		break;
 800145c:	e0c1      	b.n	80015e2 <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 20;
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <fnSingleMotionAction+0x264>)
 8001460:	2214      	movs	r2, #20
 8001462:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 8001464:	4b65      	ldr	r3, [pc, #404]	; (80015fc <fnSingleMotionAction+0x278>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29a      	uxth	r2, r3
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	4964      	ldr	r1, [pc, #400]	; (8001600 <fnSingleMotionAction+0x27c>)
 800146e:	4865      	ldr	r0, [pc, #404]	; (8001604 <fnSingleMotionAction+0x280>)
 8001470:	f004 fd6e 	bl	8005f50 <HAL_UART_Transmit>
		break;
 8001474:	e0b5      	b.n	80015e2 <fnSingleMotionAction+0x25e>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 8001476:	4b64      	ldr	r3, [pc, #400]	; (8001608 <fnSingleMotionAction+0x284>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff14 	bl	80012a8 <fnMoveAbsolute>
		iSingleMachineStatus = 25;
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <fnSingleMotionAction+0x264>)
 8001482:	2219      	movs	r2, #25
 8001484:	701a      	strb	r2, [r3, #0]
		break;
 8001486:	e0ac      	b.n	80015e2 <fnSingleMotionAction+0x25e>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001488:	4b58      	ldr	r3, [pc, #352]	; (80015ec <fnSingleMotionAction+0x268>)
 800148a:	f240 620a 	movw	r2, #1546	; 0x60a
 800148e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <fnSingleMotionAction+0x268>)
 8001492:	2208      	movs	r2, #8
 8001494:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001498:	2240      	movs	r2, #64	; 0x40
 800149a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800149c:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800149e:	2241      	movs	r2, #65	; 0x41
 80014a0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014a4:	2260      	movs	r2, #96	; 0x60
 80014a6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80014ae:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80014b4:	4b4e      	ldr	r3, [pc, #312]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80014ba:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80014c0:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014c6:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <fnSingleMotionAction+0x270>)
 80014c8:	4a49      	ldr	r2, [pc, #292]	; (80015f0 <fnSingleMotionAction+0x26c>)
 80014ca:	4948      	ldr	r1, [pc, #288]	; (80015ec <fnSingleMotionAction+0x268>)
 80014cc:	484a      	ldr	r0, [pc, #296]	; (80015f8 <fnSingleMotionAction+0x274>)
 80014ce:	f001 fd7f 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <fnSingleMotionAction+0x15e>
			fnLEDsErrorState();
 80014d8:	f7ff f9f8 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80014dc:	f000 fddc 	bl	8002098 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSingleMachineStatus = 30;
		}
		break;
 80014e0:	e07c      	b.n	80015dc <fnSingleMotionAction+0x258>
		else if (RxData[5] & 0b10000) {
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <fnSingleMotionAction+0x288>)
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d076      	beq.n	80015dc <fnSingleMotionAction+0x258>
			iSingleMachineStatus = 30;
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <fnSingleMotionAction+0x264>)
 80014f0:	221e      	movs	r2, #30
 80014f2:	701a      	strb	r2, [r3, #0]
		break;
 80014f4:	e072      	b.n	80015dc <fnSingleMotionAction+0x258>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <fnSingleMotionAction+0x268>)
 80014f8:	f240 620a 	movw	r2, #1546	; 0x60a
 80014fc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <fnSingleMotionAction+0x268>)
 8001500:	2208      	movs	r2, #8
 8001502:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001504:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001506:	2222      	movs	r2, #34	; 0x22
 8001508:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800150c:	2240      	movs	r2, #64	; 0x40
 800150e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001512:	2260      	movs	r2, #96	; 0x60
 8001514:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001516:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001518:	2200      	movs	r2, #0
 800151a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800151e:	220f      	movs	r2, #15
 8001520:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001524:	2200      	movs	r2, #0
 8001526:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800152a:	2200      	movs	r2, #0
 800152c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001530:	2200      	movs	r2, #0
 8001532:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <fnSingleMotionAction+0x270>)
 8001536:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001538:	492c      	ldr	r1, [pc, #176]	; (80015ec <fnSingleMotionAction+0x268>)
 800153a:	482f      	ldr	r0, [pc, #188]	; (80015f8 <fnSingleMotionAction+0x274>)
 800153c:	f001 fd48 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <fnSingleMotionAction+0x1cc>
			fnLEDsErrorState();
 8001546:	f7ff f9c1 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800154a:	f000 fda5 	bl	8002098 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 35;
		}
		break;
 800154e:	e048      	b.n	80015e2 <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 35;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <fnSingleMotionAction+0x264>)
 8001552:	2223      	movs	r2, #35	; 0x23
 8001554:	701a      	strb	r2, [r3, #0]
		break;
 8001556:	e044      	b.n	80015e2 <fnSingleMotionAction+0x25e>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <fnSingleMotionAction+0x268>)
 800155a:	f240 620a 	movw	r2, #1546	; 0x60a
 800155e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <fnSingleMotionAction+0x268>)
 8001562:	2208      	movs	r2, #8
 8001564:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001568:	2240      	movs	r2, #64	; 0x40
 800156a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800156e:	2241      	movs	r2, #65	; 0x41
 8001570:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001574:	2260      	movs	r2, #96	; 0x60
 8001576:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800157a:	2200      	movs	r2, #0
 800157c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001580:	2200      	movs	r2, #0
 8001582:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001586:	2200      	movs	r2, #0
 8001588:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800158c:	2200      	movs	r2, #0
 800158e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <fnSingleMotionAction+0x26c>)
 8001592:	2200      	movs	r2, #0
 8001594:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <fnSingleMotionAction+0x270>)
 8001598:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <fnSingleMotionAction+0x26c>)
 800159a:	4914      	ldr	r1, [pc, #80]	; (80015ec <fnSingleMotionAction+0x268>)
 800159c:	4816      	ldr	r0, [pc, #88]	; (80015f8 <fnSingleMotionAction+0x274>)
 800159e:	f001 fd17 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <fnSingleMotionAction+0x22e>
			fnLEDsErrorState();
 80015a8:	f7ff f990 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80015ac:	f000 fd74 	bl	8002098 <Error_Handler>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 80015b0:	e016      	b.n	80015e0 <fnSingleMotionAction+0x25c>
		else if (RxData[5] & 0b00100) {
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <fnSingleMotionAction+0x288>)
 80015b4:	795b      	ldrb	r3, [r3, #5]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <fnSingleMotionAction+0x25c>
			iSingleMachineStatus = 100;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <fnSingleMotionAction+0x264>)
 80015c0:	2264      	movs	r2, #100	; 0x64
 80015c2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <fnSingleMotionAction+0x28c>)
 80015c6:	f004 f857 	bl	8005678 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <fnSingleMotionAction+0x278>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	4910      	ldr	r1, [pc, #64]	; (8001614 <fnSingleMotionAction+0x290>)
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <fnSingleMotionAction+0x280>)
 80015d6:	f004 fcbb 	bl	8005f50 <HAL_UART_Transmit>
		break;
 80015da:	e001      	b.n	80015e0 <fnSingleMotionAction+0x25c>
		break;
 80015dc:	bf00      	nop
 80015de:	e000      	b.n	80015e2 <fnSingleMotionAction+0x25e>
		break;
 80015e0:	bf00      	nop
	}
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	2000029c 	.word	0x2000029c
 80015f0:	2000025c 	.word	0x2000025c
 80015f4:	20000264 	.word	0x20000264
 80015f8:	2000022c 	.word	0x2000022c
 80015fc:	20000000 	.word	0x20000000
 8001600:	0800a8dc 	.word	0x0800a8dc
 8001604:	200004a8 	.word	0x200004a8
 8001608:	20000258 	.word	0x20000258
 800160c:	20000268 	.word	0x20000268
 8001610:	2000045c 	.word	0x2000045c
 8001614:	0800a8e4 	.word	0x0800a8e4

08001618 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 800161c:	4bb3      	ldr	r3, [pc, #716]	; (80018ec <fnSerialMotionAction+0x2d4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	49b2      	ldr	r1, [pc, #712]	; (80018f0 <fnSerialMotionAction+0x2d8>)
 8001626:	48b3      	ldr	r0, [pc, #716]	; (80018f4 <fnSerialMotionAction+0x2dc>)
 8001628:	f004 fc92 	bl	8005f50 <HAL_UART_Transmit>

	switch (iSerialMachineStatus){
 800162c:	4bb2      	ldr	r3, [pc, #712]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	3b0a      	subs	r3, #10
 8001632:	2b1e      	cmp	r3, #30
 8001634:	f200 8158 	bhi.w	80018e8 <fnSerialMotionAction+0x2d0>
 8001638:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <fnSerialMotionAction+0x28>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	080016bd 	.word	0x080016bd
 8001644:	080018e9 	.word	0x080018e9
 8001648:	080018e9 	.word	0x080018e9
 800164c:	080018e9 	.word	0x080018e9
 8001650:	080018e9 	.word	0x080018e9
 8001654:	080018e9 	.word	0x080018e9
 8001658:	080018e9 	.word	0x080018e9
 800165c:	080018e9 	.word	0x080018e9
 8001660:	080018e9 	.word	0x080018e9
 8001664:	080018e9 	.word	0x080018e9
 8001668:	0800171f 	.word	0x0800171f
 800166c:	080018e9 	.word	0x080018e9
 8001670:	080018e9 	.word	0x080018e9
 8001674:	080018e9 	.word	0x080018e9
 8001678:	080018e9 	.word	0x080018e9
 800167c:	08001731 	.word	0x08001731
 8001680:	080018e9 	.word	0x080018e9
 8001684:	080018e9 	.word	0x080018e9
 8001688:	080018e9 	.word	0x080018e9
 800168c:	080018e9 	.word	0x080018e9
 8001690:	080017a1 	.word	0x080017a1
 8001694:	080018e9 	.word	0x080018e9
 8001698:	080018e9 	.word	0x080018e9
 800169c:	080018e9 	.word	0x080018e9
 80016a0:	080018e9 	.word	0x080018e9
 80016a4:	08001803 	.word	0x08001803
 80016a8:	080018e9 	.word	0x080018e9
 80016ac:	080018e9 	.word	0x080018e9
 80016b0:	080018e9 	.word	0x080018e9
 80016b4:	080018e9 	.word	0x080018e9
 80016b8:	0800187d 	.word	0x0800187d
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <fnSerialMotionAction+0x2e4>)
 80016be:	f240 620a 	movw	r2, #1546	; 0x60a
 80016c2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80016c4:	4b8d      	ldr	r3, [pc, #564]	; (80018fc <fnSerialMotionAction+0x2e4>)
 80016c6:	2208      	movs	r2, #8
 80016c8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80016ca:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016cc:	2222      	movs	r2, #34	; 0x22
 80016ce:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80016d0:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80016d6:	4b8a      	ldr	r3, [pc, #552]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016d8:	2260      	movs	r2, #96	; 0x60
 80016da:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80016e2:	4b87      	ldr	r3, [pc, #540]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016e4:	221f      	movs	r2, #31
 80016e6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80016e8:	4b85      	ldr	r3, [pc, #532]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80016ee:	4b84      	ldr	r3, [pc, #528]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80016f4:	4b82      	ldr	r3, [pc, #520]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <fnSerialMotionAction+0x2ec>)
 80016fc:	4a80      	ldr	r2, [pc, #512]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80016fe:	497f      	ldr	r1, [pc, #508]	; (80018fc <fnSerialMotionAction+0x2e4>)
 8001700:	4881      	ldr	r0, [pc, #516]	; (8001908 <fnSerialMotionAction+0x2f0>)
 8001702:	f001 fc65 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <fnSerialMotionAction+0xfe>
			fnLEDsErrorState();
 800170c:	f7ff f8de 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001710:	f000 fcc2 	bl	8002098 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 8001714:	e0e8      	b.n	80018e8 <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 20;
 8001716:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 8001718:	2214      	movs	r2, #20
 800171a:	701a      	strb	r2, [r3, #0]
		break;
 800171c:	e0e4      	b.n	80018e8 <fnSerialMotionAction+0x2d0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <fnSerialMotionAction+0x2f4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fdc0 	bl	80012a8 <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 800172a:	2219      	movs	r2, #25
 800172c:	701a      	strb	r2, [r3, #0]
		break;
 800172e:	e0db      	b.n	80018e8 <fnSerialMotionAction+0x2d0>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001730:	4b72      	ldr	r3, [pc, #456]	; (80018fc <fnSerialMotionAction+0x2e4>)
 8001732:	f240 620a 	movw	r2, #1546	; 0x60a
 8001736:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001738:	4b70      	ldr	r3, [pc, #448]	; (80018fc <fnSerialMotionAction+0x2e4>)
 800173a:	2208      	movs	r2, #8
 800173c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800173e:	4b70      	ldr	r3, [pc, #448]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001744:	4b6e      	ldr	r3, [pc, #440]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001746:	2241      	movs	r2, #65	; 0x41
 8001748:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800174a:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <fnSerialMotionAction+0x2e8>)
 800174c:	2260      	movs	r2, #96	; 0x60
 800174e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001752:	2200      	movs	r2, #0
 8001754:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001758:	2200      	movs	r2, #0
 800175a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800175c:	4b68      	ldr	r3, [pc, #416]	; (8001900 <fnSerialMotionAction+0x2e8>)
 800175e:	2200      	movs	r2, #0
 8001760:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001764:	2200      	movs	r2, #0
 8001766:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <fnSerialMotionAction+0x2e8>)
 800176a:	2200      	movs	r2, #0
 800176c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <fnSerialMotionAction+0x2ec>)
 8001770:	4a63      	ldr	r2, [pc, #396]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001772:	4962      	ldr	r1, [pc, #392]	; (80018fc <fnSerialMotionAction+0x2e4>)
 8001774:	4864      	ldr	r0, [pc, #400]	; (8001908 <fnSerialMotionAction+0x2f0>)
 8001776:	f001 fc2b 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <fnSerialMotionAction+0x172>
			fnLEDsErrorState();
 8001780:	f7ff f8a4 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001784:	f000 fc88 	bl	8002098 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 8001788:	e0ab      	b.n	80018e2 <fnSerialMotionAction+0x2ca>
		else if (RxData[5] & 0b10000) {
 800178a:	4b61      	ldr	r3, [pc, #388]	; (8001910 <fnSerialMotionAction+0x2f8>)
 800178c:	795b      	ldrb	r3, [r3, #5]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a5 	beq.w	80018e2 <fnSerialMotionAction+0x2ca>
			iSerialMachineStatus = 30;
 8001798:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 800179a:	221e      	movs	r2, #30
 800179c:	701a      	strb	r2, [r3, #0]
		break;
 800179e:	e0a0      	b.n	80018e2 <fnSerialMotionAction+0x2ca>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 80017a0:	4b56      	ldr	r3, [pc, #344]	; (80018fc <fnSerialMotionAction+0x2e4>)
 80017a2:	f240 620a 	movw	r2, #1546	; 0x60a
 80017a6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80017a8:	4b54      	ldr	r3, [pc, #336]	; (80018fc <fnSerialMotionAction+0x2e4>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017b0:	2222      	movs	r2, #34	; 0x22
 80017b2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80017b4:	4b52      	ldr	r3, [pc, #328]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80017ba:	4b51      	ldr	r3, [pc, #324]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017bc:	2260      	movs	r2, #96	; 0x60
 80017be:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80017c0:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017c8:	220f      	movs	r2, #15
 80017ca:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80017d2:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80017d8:	4b49      	ldr	r3, [pc, #292]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <fnSerialMotionAction+0x2ec>)
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <fnSerialMotionAction+0x2e8>)
 80017e2:	4946      	ldr	r1, [pc, #280]	; (80018fc <fnSerialMotionAction+0x2e4>)
 80017e4:	4848      	ldr	r0, [pc, #288]	; (8001908 <fnSerialMotionAction+0x2f0>)
 80017e6:	f001 fbf3 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <fnSerialMotionAction+0x1e2>
			fnLEDsErrorState();
 80017f0:	f7ff f86c 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80017f4:	f000 fc50 	bl	8002098 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 80017f8:	e076      	b.n	80018e8 <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 35;
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 80017fc:	2223      	movs	r2, #35	; 0x23
 80017fe:	701a      	strb	r2, [r3, #0]
		break;
 8001800:	e072      	b.n	80018e8 <fnSerialMotionAction+0x2d0>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <fnSerialMotionAction+0x2e4>)
 8001804:	f240 620a 	movw	r2, #1546	; 0x60a
 8001808:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <fnSerialMotionAction+0x2e4>)
 800180c:	2208      	movs	r2, #8
 800180e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001810:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001818:	2241      	movs	r2, #65	; 0x41
 800181a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800181c:	4b38      	ldr	r3, [pc, #224]	; (8001900 <fnSerialMotionAction+0x2e8>)
 800181e:	2260      	movs	r2, #96	; 0x60
 8001820:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001824:	2200      	movs	r2, #0
 8001826:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <fnSerialMotionAction+0x2e8>)
 800182a:	2200      	movs	r2, #0
 800182c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001830:	2200      	movs	r2, #0
 8001832:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001836:	2200      	movs	r2, #0
 8001838:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <fnSerialMotionAction+0x2e8>)
 800183c:	2200      	movs	r2, #0
 800183e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <fnSerialMotionAction+0x2ec>)
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <fnSerialMotionAction+0x2e8>)
 8001844:	492d      	ldr	r1, [pc, #180]	; (80018fc <fnSerialMotionAction+0x2e4>)
 8001846:	4830      	ldr	r0, [pc, #192]	; (8001908 <fnSerialMotionAction+0x2f0>)
 8001848:	f001 fbc2 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <fnSerialMotionAction+0x244>
			fnLEDsErrorState();
 8001852:	f7ff f83b 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001856:	f000 fc1f 	bl	8002098 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 800185a:	e044      	b.n	80018e6 <fnSerialMotionAction+0x2ce>
		else if (RxData[5] & 0b00100) {
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <fnSerialMotionAction+0x2f8>)
 800185e:	795b      	ldrb	r3, [r3, #5]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03e      	beq.n	80018e6 <fnSerialMotionAction+0x2ce>
			iSerialCounter++;
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <fnSerialMotionAction+0x2fc>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <fnSerialMotionAction+0x2fc>)
 8001872:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 8001876:	2228      	movs	r2, #40	; 0x28
 8001878:	701a      	strb	r2, [r3, #0]
		break;
 800187a:	e034      	b.n	80018e6 <fnSerialMotionAction+0x2ce>

	case 40:
		//REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <fnSerialMotionAction+0x2fc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <fnSerialMotionAction+0x300>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d114      	bne.n	80018b6 <fnSerialMotionAction+0x29e>
			iSerialMachineStatus = 100;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 800188e:	2264      	movs	r2, #100	; 0x64
 8001890:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <fnSerialMotionAction+0x304>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <fnSerialMotionAction+0x300>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 800189e:	4820      	ldr	r0, [pc, #128]	; (8001920 <fnSerialMotionAction+0x308>)
 80018a0:	f003 fe4b 	bl	800553a <HAL_TIM_Base_Stop>
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <fnSerialMotionAction+0x2d4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	491d      	ldr	r1, [pc, #116]	; (8001924 <fnSerialMotionAction+0x30c>)
 80018ae:	4811      	ldr	r0, [pc, #68]	; (80018f4 <fnSerialMotionAction+0x2dc>)
 80018b0:	f004 fb4e 	bl	8005f50 <HAL_UART_Transmit>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 80018b4:	e018      	b.n	80018e8 <fnSerialMotionAction+0x2d0>
		else if (iSerialCounter % 2 == 0) {
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <fnSerialMotionAction+0x2fc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <fnSerialMotionAction+0x2bc>
			iPosition = iSerialRange;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <fnSerialMotionAction+0x304>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <fnSerialMotionAction+0x2f4>)
 80018ca:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 80018ce:	220a      	movs	r2, #10
 80018d0:	701a      	strb	r2, [r3, #0]
		break;
 80018d2:	e009      	b.n	80018e8 <fnSerialMotionAction+0x2d0>
			iPosition = 0;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <fnSerialMotionAction+0x2f4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <fnSerialMotionAction+0x2e0>)
 80018dc:	220a      	movs	r2, #10
 80018de:	701a      	strb	r2, [r3, #0]
		break;
 80018e0:	e002      	b.n	80018e8 <fnSerialMotionAction+0x2d0>
		break;
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <fnSerialMotionAction+0x2d0>
		break;
 80018e6:	bf00      	nop
	}
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	0800a8dc 	.word	0x0800a8dc
 80018f4:	200004a8 	.word	0x200004a8
 80018f8:	20000009 	.word	0x20000009
 80018fc:	2000029c 	.word	0x2000029c
 8001900:	2000025c 	.word	0x2000025c
 8001904:	20000264 	.word	0x20000264
 8001908:	2000022c 	.word	0x2000022c
 800190c:	20000258 	.word	0x20000258
 8001910:	20000268 	.word	0x20000268
 8001914:	20000010 	.word	0x20000010
 8001918:	20000018 	.word	0x20000018
 800191c:	20000014 	.word	0x20000014
 8001920:	200002e0 	.word	0x200002e0
 8001924:	0800a8e4 	.word	0x0800a8e4

08001928 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a3f      	ldr	r2, [pc, #252]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d112      	bne.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d006      	beq.n	8001950 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 8001942:	f7fe ffd9 	bl	80008f8 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001946:	2101      	movs	r1, #1
 8001948:	483c      	ldr	r0, [pc, #240]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800194a:	f002 faec 	bl	8003f26 <HAL_GPIO_TogglePin>
	else if(htim -> Instance == TIM14){
		fnReset();
	}


}
 800194e:	e06d      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2101      	movs	r1, #1
 8001954:	4839      	ldr	r0, [pc, #228]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001956:	f002 facd 	bl	8003ef4 <HAL_GPIO_WritePin>
			fnEncReadCount();
 800195a:	f7ff fc63 	bl	8001224 <fnEncReadCount>
}
 800195e:	e065      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM7){
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d106      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 800196a:	f7ff fd0b 	bl	8001384 <fnSingleMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	4832      	ldr	r0, [pc, #200]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001972:	f002 fad8 	bl	8003f26 <HAL_GPIO_TogglePin>
}
 8001976:	e059      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM10){
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d106      	bne.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x68>
		fnSerialMotionAction();
 8001982:	f7ff fe49 	bl	8001618 <fnSerialMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	482c      	ldr	r0, [pc, #176]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800198a:	f002 facc 	bl	8003f26 <HAL_GPIO_TogglePin>
}
 800198e:	e04d      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM11){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d141      	bne.n	8001a1e <HAL_TIM_PeriodElapsedCallback+0xf6>
		if (iMode == 0 && iSingleMachineStatus != 100) {
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <HAL_TIM_PeriodElapsedCallback+0xb4>
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d017      	beq.n	80019dc <HAL_TIM_PeriodElapsedCallback+0xb4>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019b6:	ec53 2b17 	vmov	r2, r3, d7
 80019ba:	4927      	ldr	r1, [pc, #156]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019bc:	4827      	ldr	r0, [pc, #156]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019be:	f006 fcf5 	bl	80083ac <siprintf>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a26      	ldr	r2, [pc, #152]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019c6:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d2:	4922      	ldr	r1, [pc, #136]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019d4:	4823      	ldr	r0, [pc, #140]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80019d6:	f004 fabb 	bl	8005f50 <HAL_UART_Transmit>
}
 80019da:	e027      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
		else if (iMode == 1 && iSerialMachineStatus != 100) {
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d122      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d01e      	beq.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f8:	ec53 2b17 	vmov	r2, r3, d7
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019fe:	4817      	ldr	r0, [pc, #92]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a00:	f006 fcd4 	bl	80083ac <siprintf>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a08:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	4911      	ldr	r1, [pc, #68]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a18:	f004 fa9a 	bl	8005f50 <HAL_UART_Transmit>
}
 8001a1c:	e006      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM14){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x104>
		fnReset();
 8001a28:	f7ff faa8 	bl	8000f7c <fnReset>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40001000 	.word	0x40001000
 8001a38:	20000007 	.word	0x20000007
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40001400 	.word	0x40001400
 8001a44:	40014400 	.word	0x40014400
 8001a48:	40014800 	.word	0x40014800
 8001a4c:	20000004 	.word	0x20000004
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000218 	.word	0x20000218
 8001a58:	0800a888 	.word	0x0800a888
 8001a5c:	200002d0 	.word	0x200002d0
 8001a60:	20000254 	.word	0x20000254
 8001a64:	200004a8 	.word	0x200004a8
 8001a68:	20000009 	.word	0x20000009
 8001a6c:	40002000 	.word	0x40002000

08001a70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a80:	d129      	bne.n	8001ad6 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a84:	f240 620a 	movw	r2, #1546	; 0x60a
 8001a88:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a98:	2241      	movs	r2, #65	; 0x41
 8001a9a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a9e:	2260      	movs	r2, #96	; 0x60
 8001aa0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ac4:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_GPIO_EXTI_Callback+0x7c>)
 8001ac8:	f001 fa82 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8001ad2:	f000 fae1 	bl	8002098 <Error_Handler>

		}
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000029c 	.word	0x2000029c
 8001ae4:	2000025c 	.word	0x2000025c
 8001ae8:	20000264 	.word	0x20000264
 8001aec:	2000022c 	.word	0x2000022c

08001af0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001af4:	f000 ffb6 	bl	8002a64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001af8:	f000 f874 	bl	8001be4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001afc:	f7fe fdf8 	bl	80006f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001b00:	f000 fe80 	bl	8002804 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001b04:	f000 fefa 	bl	80028fc <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001b08:	f7fe fd6e 	bl	80005e8 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001b0c:	f000 fc9e 	bl	800244c <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b10:	f000 fc46 	bl	80023a0 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001b14:	f000 fcd2 	bl	80024bc <MX_TIM7_Init>
	MX_TIM10_Init();
 8001b18:	f000 fd08 	bl	800252c <MX_TIM10_Init>
	MX_TIM11_Init();
 8001b1c:	f000 fd2a 	bl	8002574 <MX_TIM11_Init>
	MX_TIM14_Init();
 8001b20:	f000 fd4c 	bl	80025bc <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b24:	f7fe fde4 	bl	80006f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001b28:	f000 fe6c 	bl	8002804 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001b2c:	f000 fee6 	bl	80028fc <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001b30:	f7fe fd5a 	bl	80005e8 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001b34:	f000 fc8a 	bl	800244c <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b38:	f000 fc32 	bl	80023a0 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001b3c:	f000 fcbe 	bl	80024bc <MX_TIM7_Init>
	MX_TIM10_Init();
 8001b40:	f000 fcf4 	bl	800252c <MX_TIM10_Init>
	MX_TIM14_Init();
 8001b44:	f000 fd3a 	bl	80025bc <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <main+0xe0>)
 8001b4c:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <main+0xe4>)
 8001b4e:	f004 fa92 	bl	8006076 <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8001b52:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <main+0xe8>)
 8001b54:	f001 f9f8 	bl	8002f48 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <main+0xec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <main+0xec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <main+0xec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <main+0xec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <main+0xec>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <main+0xec>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <main+0xf0>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <main+0xf0>)
 8001b84:	2212      	movs	r2, #18
 8001b86:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <main+0xf0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <main+0xf0>)
 8001b90:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001b94:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <main+0xf0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <main+0xf0>)
 8001b9e:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001ba2:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <main+0xf0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <main+0xf0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <main+0xf0>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <main+0xf0>)
 8001bb8:	2214      	movs	r2, #20
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001bbc:	4908      	ldr	r1, [pc, #32]	; (8001be0 <main+0xf0>)
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <main+0xe8>)
 8001bc0:	f001 f8d6 	bl	8002d70 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <main+0xe8>)
 8001bc8:	f001 fbef 	bl	80033aa <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001bcc:	e7fe      	b.n	8001bcc <main+0xdc>
 8001bce:	bf00      	nop
 8001bd0:	20000270 	.word	0x20000270
 8001bd4:	200004a8 	.word	0x200004a8
 8001bd8:	2000022c 	.word	0x2000022c
 8001bdc:	2000029c 	.word	0x2000029c
 8001be0:	20000274 	.word	0x20000274

08001be4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0b8      	sub	sp, #224	; 0xe0
 8001be8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bee:	2234      	movs	r2, #52	; 0x34
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 ff90 	bl	8007b18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2290      	movs	r2, #144	; 0x90
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 ff81 	bl	8007b18 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c16:	f002 fb01 	bl	800421c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <SystemClock_Config+0x128>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <SystemClock_Config+0x128>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <SystemClock_Config+0x128>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <SystemClock_Config+0x12c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c3a:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <SystemClock_Config+0x12c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <SystemClock_Config+0x12c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001c70:	2360      	movs	r3, #96	; 0x60
 8001c72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fb25 	bl	80042dc <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001c98:	f000 f9fe 	bl	8002098 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c9c:	f002 face 	bl	800423c <HAL_PWREx_EnableOverDrive>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001ca6:	f000 f9f7 	bl	8002098 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001caa:	230f      	movs	r3, #15
 8001cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 fdb1 	bl	8004838 <HAL_RCC_ClockConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001cdc:	f000 f9dc 	bl	8002098 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <SystemClock_Config+0x130>)
 8001ce2:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 ffa2 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8001cfe:	f000 f9cb 	bl	8002098 <Error_Handler>
	}
}
 8001d02:	bf00      	nop
 8001d04:	37e0      	adds	r7, #224	; 0xe0
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000
 8001d14:	00200100 	.word	0x00200100

08001d18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4ab1      	ldr	r2, [pc, #708]	; (8001fec <HAL_UART_RxCpltCallback+0x2d4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f040 8151 	bne.w	8001fce <HAL_UART_RxCpltCallback+0x2b6>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	49b0      	ldr	r1, [pc, #704]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d30:	48b0      	ldr	r0, [pc, #704]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d32:	f006 fb5b 	bl	80083ec <strncmp>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 8001d3c:	4bae      	ldr	r3, [pc, #696]	; (8001ff8 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8001d42:	4bae      	ldr	r3, [pc, #696]	; (8001ffc <HAL_UART_RxCpltCallback+0x2e4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001d48:	48ad      	ldr	r0, [pc, #692]	; (8002000 <HAL_UART_RxCpltCallback+0x2e8>)
 8001d4a:	f003 fc1d 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8001d4e:	e144      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 8001d50:	2204      	movs	r2, #4
 8001d52:	49ac      	ldr	r1, [pc, #688]	; (8002004 <HAL_UART_RxCpltCallback+0x2ec>)
 8001d54:	48a7      	ldr	r0, [pc, #668]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d56:	f006 fb49 	bl	80083ec <strncmp>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 8001d60:	4ba9      	ldr	r3, [pc, #676]	; (8002008 <HAL_UART_RxCpltCallback+0x2f0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001d66:	2101      	movs	r1, #1
 8001d68:	48a8      	ldr	r0, [pc, #672]	; (800200c <HAL_UART_RxCpltCallback+0x2f4>)
 8001d6a:	f002 f8dc 	bl	8003f26 <HAL_GPIO_TogglePin>
 8001d6e:	e134      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 8001d70:	2204      	movs	r2, #4
 8001d72:	49a7      	ldr	r1, [pc, #668]	; (8002010 <HAL_UART_RxCpltCallback+0x2f8>)
 8001d74:	489f      	ldr	r0, [pc, #636]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d76:	f006 fb39 	bl	80083ec <strncmp>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 8001d80:	4ba1      	ldr	r3, [pc, #644]	; (8002008 <HAL_UART_RxCpltCallback+0x2f0>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	48a0      	ldr	r0, [pc, #640]	; (800200c <HAL_UART_RxCpltCallback+0x2f4>)
 8001d8a:	f002 f8cc 	bl	8003f26 <HAL_GPIO_TogglePin>
 8001d8e:	e124      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 8001d90:	2204      	movs	r2, #4
 8001d92:	49a0      	ldr	r1, [pc, #640]	; (8002014 <HAL_UART_RxCpltCallback+0x2fc>)
 8001d94:	4897      	ldr	r0, [pc, #604]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d96:	f006 fb29 	bl	80083ec <strncmp>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <HAL_UART_RxCpltCallback+0x96>
			iSelected_leg = 0;
 8001da0:	4b9d      	ldr	r3, [pc, #628]	; (8002018 <HAL_UART_RxCpltCallback+0x300>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001da6:	489d      	ldr	r0, [pc, #628]	; (800201c <HAL_UART_RxCpltCallback+0x304>)
 8001da8:	f003 fbee 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8001dac:	e115      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001dae:	2204      	movs	r2, #4
 8001db0:	499b      	ldr	r1, [pc, #620]	; (8002020 <HAL_UART_RxCpltCallback+0x308>)
 8001db2:	4890      	ldr	r0, [pc, #576]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001db4:	f006 fb1a 	bl	80083ec <strncmp>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0xb4>
			iSelected_leg = 1;
 8001dbe:	4b96      	ldr	r3, [pc, #600]	; (8002018 <HAL_UART_RxCpltCallback+0x300>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001dc4:	4895      	ldr	r0, [pc, #596]	; (800201c <HAL_UART_RxCpltCallback+0x304>)
 8001dc6:	f003 fbdf 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8001dca:	e106      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001dcc:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001dce:	78db      	ldrb	r3, [r3, #3]
 8001dd0:	2b50      	cmp	r3, #80	; 0x50
 8001dd2:	d113      	bne.n	8001dfc <HAL_UART_RxCpltCallback+0xe4>

			if(iMode == 0){
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_UART_RxCpltCallback+0x2f0>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80fd 	bne.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001de0:	4884      	ldr	r0, [pc, #528]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001de2:	f005 fe6b 	bl	8007abc <atoi>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <HAL_UART_RxCpltCallback+0x30c>)
 8001dec:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_UART_RxCpltCallback+0x310>)
 8001df0:	220a      	movs	r2, #10
 8001df2:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001df4:	488d      	ldr	r0, [pc, #564]	; (800202c <HAL_UART_RxCpltCallback+0x314>)
 8001df6:	f003 fbc7 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8001dfa:	e0ee      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	498c      	ldr	r1, [pc, #560]	; (8002030 <HAL_UART_RxCpltCallback+0x318>)
 8001e00:	487c      	ldr	r0, [pc, #496]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e02:	f006 faf3 	bl	80083ec <strncmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11f      	bne.n	8001e4c <HAL_UART_RxCpltCallback+0x134>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 8001e0c:	4b7e      	ldr	r3, [pc, #504]	; (8002008 <HAL_UART_RxCpltCallback+0x2f0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	f040 80e1 	bne.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
 8001e18:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_UART_RxCpltCallback+0x300>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	f000 80db 	beq.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
 8001e24:	4b83      	ldr	r3, [pc, #524]	; (8002034 <HAL_UART_RxCpltCallback+0x31c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80d6 	beq.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
 8001e2e:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_UART_RxCpltCallback+0x320>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80d1 	beq.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
				iSerialCounter = 0;
 8001e38:	4b80      	ldr	r3, [pc, #512]	; (800203c <HAL_UART_RxCpltCallback+0x324>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001e3e:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_UART_RxCpltCallback+0x328>)
 8001e40:	220a      	movs	r2, #10
 8001e42:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8001e44:	487f      	ldr	r0, [pc, #508]	; (8002044 <HAL_UART_RxCpltCallback+0x32c>)
 8001e46:	f003 fb9f 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8001e4a:	e0c6      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 8001e4c:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e4e:	78db      	ldrb	r3, [r3, #3]
 8001e50:	2b4e      	cmp	r3, #78	; 0x4e
 8001e52:	d10d      	bne.n	8001e70 <HAL_UART_RxCpltCallback+0x158>
			if(iMode == 1){
 8001e54:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <HAL_UART_RxCpltCallback+0x2f0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f040 80bd 	bne.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 8001e60:	4864      	ldr	r0, [pc, #400]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e62:	f005 fe2b 	bl	8007abc <atoi>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_UART_RxCpltCallback+0x31c>)
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e0b4      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 8001e70:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	2b52      	cmp	r3, #82	; 0x52
 8001e76:	d111      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0x184>
			if(iMode == 1){
 8001e78:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_UART_RxCpltCallback+0x2f0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f040 80ab 	bne.w	8001fda <HAL_UART_RxCpltCallback+0x2c2>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 8001e84:	485b      	ldr	r0, [pc, #364]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e86:	f005 fe19 	bl	8007abc <atoi>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_UART_RxCpltCallback+0x320>)
 8001e90:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 8001e92:	4b69      	ldr	r3, [pc, #420]	; (8002038 <HAL_UART_RxCpltCallback+0x320>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_UART_RxCpltCallback+0x30c>)
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e09e      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	496a      	ldr	r1, [pc, #424]	; (8002048 <HAL_UART_RxCpltCallback+0x330>)
 8001ea0:	4854      	ldr	r0, [pc, #336]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001ea2:	f006 faa3 	bl	80083ec <strncmp>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d166      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x262>

			//QUICK STOP
			TxHeader.StdId = 0x60A;
 8001eac:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_UART_RxCpltCallback+0x334>)
 8001eae:	f240 620a 	movw	r2, #1546	; 0x60a
 8001eb2:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001eb4:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_UART_RxCpltCallback+0x334>)
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001eba:	4b65      	ldr	r3, [pc, #404]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ebc:	2222      	movs	r2, #34	; 0x22
 8001ebe:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001ec0:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001ec6:	4b62      	ldr	r3, [pc, #392]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ec8:	2260      	movs	r2, #96	; 0x60
 8001eca:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001ecc:	4b60      	ldr	r3, [pc, #384]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001ede:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <HAL_UART_RxCpltCallback+0x33c>)
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_UART_RxCpltCallback+0x334>)
 8001ef0:	4859      	ldr	r0, [pc, #356]	; (8002058 <HAL_UART_RxCpltCallback+0x340>)
 8001ef2:	f001 f86d 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_UART_RxCpltCallback+0x1ee>
				fnLEDsErrorState();
 8001efc:	f7fe fce6 	bl	80008cc <fnLEDsErrorState>
				Error_Handler();
 8001f00:	f000 f8ca 	bl	8002098 <Error_Handler>
 8001f04:	e069      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
			}
			else{
				//DISBALE VOLTAGE
				TxHeader.StdId = 0x60A;
 8001f06:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_UART_RxCpltCallback+0x334>)
 8001f08:	f240 620a 	movw	r2, #1546	; 0x60a
 8001f0c:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 8;
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	; (800204c <HAL_UART_RxCpltCallback+0x334>)
 8001f10:	2208      	movs	r2, #8
 8001f12:	611a      	str	r2, [r3, #16]
				TxData[0] = 0x22;
 8001f14:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f16:	2222      	movs	r2, #34	; 0x22
 8001f18:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x40;
 8001f1a:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x60;
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f22:	2260      	movs	r2, #96	; 0x60
 8001f24:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0x00;
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0x00;
 8001f2c:	4b48      	ldr	r3, [pc, #288]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	711a      	strb	r2, [r3, #4]
				TxData[5] = 0x00;
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	715a      	strb	r2, [r3, #5]
				TxData[6] = 0x00;
 8001f38:	4b45      	ldr	r3, [pc, #276]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	719a      	strb	r2, [r3, #6]
				TxData[7] = 0x00;
 8001f3e:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	71da      	strb	r2, [r3, #7]

				if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_UART_RxCpltCallback+0x33c>)
 8001f46:	4a42      	ldr	r2, [pc, #264]	; (8002050 <HAL_UART_RxCpltCallback+0x338>)
 8001f48:	4940      	ldr	r1, [pc, #256]	; (800204c <HAL_UART_RxCpltCallback+0x334>)
 8001f4a:	4843      	ldr	r0, [pc, #268]	; (8002058 <HAL_UART_RxCpltCallback+0x340>)
 8001f4c:	f001 f840 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_UART_RxCpltCallback+0x248>
					fnLEDsErrorState();
 8001f56:	f7fe fcb9 	bl	80008cc <fnLEDsErrorState>
					Error_Handler();
 8001f5a:	f000 f89d 	bl	8002098 <Error_Handler>
 8001f5e:	e03c      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
				}
				else {
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f66:	4829      	ldr	r0, [pc, #164]	; (800200c <HAL_UART_RxCpltCallback+0x2f4>)
 8001f68:	f001 ffc4 	bl	8003ef4 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart3, "STOP", 4, 100);
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	2204      	movs	r2, #4
 8001f70:	493a      	ldr	r1, [pc, #232]	; (800205c <HAL_UART_RxCpltCallback+0x344>)
 8001f72:	483b      	ldr	r0, [pc, #236]	; (8002060 <HAL_UART_RxCpltCallback+0x348>)
 8001f74:	f003 ffec 	bl	8005f50 <HAL_UART_Transmit>
 8001f78:	e02f      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
				}
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4939      	ldr	r1, [pc, #228]	; (8002064 <HAL_UART_RxCpltCallback+0x34c>)
 8001f7e:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001f80:	f006 fa34 	bl	80083ec <strncmp>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d112      	bne.n	8001fb0 <HAL_UART_RxCpltCallback+0x298>
			iMachineStatus = 10;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_UART_RxCpltCallback+0x2e0>)
 8001f8c:	220a      	movs	r2, #10
 8001f8e:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 100;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_UART_RxCpltCallback+0x2e4>)
 8001f92:	2264      	movs	r2, #100	; 0x64
 8001f94:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim7);
 8001f96:	4825      	ldr	r0, [pc, #148]	; (800202c <HAL_UART_RxCpltCallback+0x314>)
 8001f98:	f003 fb6e 	bl	8005678 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim10);
 8001f9c:	4829      	ldr	r0, [pc, #164]	; (8002044 <HAL_UART_RxCpltCallback+0x32c>)
 8001f9e:	f003 fb6b 	bl	8005678 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa8:	4818      	ldr	r0, [pc, #96]	; (800200c <HAL_UART_RxCpltCallback+0x2f4>)
 8001faa:	f001 ffa3 	bl	8003ef4 <HAL_GPIO_WritePin>
 8001fae:	e014      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}

		//CONTINUE COMMAND [CONT]
		else if(strncmp(sUserMessage, sContinue, 4) == 0){
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	492d      	ldr	r1, [pc, #180]	; (8002068 <HAL_UART_RxCpltCallback+0x350>)
 8001fb4:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001fb6:	f006 fa19 	bl	80083ec <strncmp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
			iMachineStatus=10;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_UART_RxCpltCallback+0x2e0>)
 8001fc2:	220a      	movs	r2, #10
 8001fc4:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim14);
 8001fc6:	4829      	ldr	r0, [pc, #164]	; (800206c <HAL_UART_RxCpltCallback+0x354>)
 8001fc8:	f003 fade 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8001fcc:	e005      	b.n	8001fda <HAL_UART_RxCpltCallback+0x2c2>
		}


	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8001fce:	2364      	movs	r3, #100	; 0x64
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <HAL_UART_RxCpltCallback+0x358>)
 8001fd4:	4822      	ldr	r0, [pc, #136]	; (8002060 <HAL_UART_RxCpltCallback+0x348>)
 8001fd6:	f003 ffbb 	bl	8005f50 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4905      	ldr	r1, [pc, #20]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001fde:	4820      	ldr	r0, [pc, #128]	; (8002060 <HAL_UART_RxCpltCallback+0x348>)
 8001fe0:	f004 f849 	bl	8006076 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40004800 	.word	0x40004800
 8001ff0:	0800a89c 	.word	0x0800a89c
 8001ff4:	20000270 	.word	0x20000270
 8001ff8:	20000006 	.word	0x20000006
 8001ffc:	20000007 	.word	0x20000007
 8002000:	200003c4 	.word	0x200003c4
 8002004:	0800a8ec 	.word	0x0800a8ec
 8002008:	20000004 	.word	0x20000004
 800200c:	40020400 	.word	0x40020400
 8002010:	0800a8f4 	.word	0x0800a8f4
 8002014:	0800a904 	.word	0x0800a904
 8002018:	20000005 	.word	0x20000005
 800201c:	20000378 	.word	0x20000378
 8002020:	0800a8fc 	.word	0x0800a8fc
 8002024:	20000258 	.word	0x20000258
 8002028:	20000008 	.word	0x20000008
 800202c:	2000045c 	.word	0x2000045c
 8002030:	0800a8b4 	.word	0x0800a8b4
 8002034:	20000018 	.word	0x20000018
 8002038:	20000014 	.word	0x20000014
 800203c:	20000010 	.word	0x20000010
 8002040:	20000009 	.word	0x20000009
 8002044:	200002e0 	.word	0x200002e0
 8002048:	0800a8bc 	.word	0x0800a8bc
 800204c:	2000029c 	.word	0x2000029c
 8002050:	2000025c 	.word	0x2000025c
 8002054:	20000264 	.word	0x20000264
 8002058:	2000022c 	.word	0x2000022c
 800205c:	0800a894 	.word	0x0800a894
 8002060:	200004a8 	.word	0x200004a8
 8002064:	0800a8c4 	.word	0x0800a8c4
 8002068:	0800a8cc 	.word	0x0800a8cc
 800206c:	20000410 	.word	0x20000410
 8002070:	0800a8a4 	.word	0x0800a8a4

08002074 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002080:	2100      	movs	r1, #0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f001 f87f 	bl	8003186 <HAL_CAN_GetRxMessage>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000268 	.word	0x20000268
 8002094:	200002b4 	.word	0x200002b4

08002098 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209c:	b672      	cpsid	i
}
 800209e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020a0:	e7fe      	b.n	80020a0 <Error_Handler+0x8>
	...

080020a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_MspInit+0x44>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_MspInit+0x44>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_MspInit+0x44>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_MspInit+0x44>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_MspInit+0x44>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_MspInit+0x44>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <NMI_Handler+0x4>

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler+0x4>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <UsageFault_Handler+0x4>

0800210a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f000 fcda 	bl	8002af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <CAN1_RX0_IRQHandler+0x10>)
 8002146:	f001 f956 	bl	80033f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000022c 	.word	0x2000022c

08002154 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800215a:	f003 fbf1 	bl	8005940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200002e0 	.word	0x200002e0

08002168 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800216e:	f003 fbe7 	bl	8005940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000378 	.word	0x20000378

0800217c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM3_IRQHandler+0x10>)
 8002182:	f003 fbdd 	bl	8005940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000032c 	.word	0x2000032c

08002190 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <USART3_IRQHandler+0x10>)
 8002196:	f003 ffbd 	bl	8006114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200004a8 	.word	0x200004a8

080021a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021ac:	f001 fed6 	bl	8003f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80021ba:	f003 fbc1 	bl	8005940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000410 	.word	0x20000410

080021c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <TIM6_DAC_IRQHandler+0x10>)
 80021ce:	f003 fbb7 	bl	8005940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200003c4 	.word	0x200003c4

080021dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <TIM7_IRQHandler+0x10>)
 80021e2:	f003 fbad 	bl	8005940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000045c 	.word	0x2000045c

080021f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	return 1;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_kill>:

int _kill(int pid, int sig)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800220a:	f005 fc5b 	bl	8007ac4 <__errno>
 800220e:	4603      	mov	r3, r0
 8002210:	2216      	movs	r2, #22
 8002212:	601a      	str	r2, [r3, #0]
	return -1;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_exit>:

void _exit (int status)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffe7 	bl	8002200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002232:	e7fe      	b.n	8002232 <_exit+0x12>

08002234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e00a      	b.n	800225c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002246:	f3af 8000 	nop.w
 800224a:	4601      	mov	r1, r0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	60ba      	str	r2, [r7, #8]
 8002252:	b2ca      	uxtb	r2, r1
 8002254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf0      	blt.n	8002246 <_read+0x12>
	}

return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e009      	b.n	8002294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbf1      	blt.n	8002280 <_write+0x12>
	}
	return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_close>:

int _close(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ce:	605a      	str	r2, [r3, #4]
	return 0;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_isatty>:

int _isatty(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	return 1;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f005 fbc0 	bl	8007ac4 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20080000 	.word	0x20080000
 8002370:	00000400 	.word	0x00000400
 8002374:	20000220 	.word	0x20000220
 8002378:	20000948 	.word	0x20000948

0800237c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <SystemInit+0x20>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <SystemInit+0x20>)
 8002388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fbb2 	bl	8007b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <MX_TIM3_Init+0xa4>)
 80023c0:	4a21      	ldr	r2, [pc, #132]	; (8002448 <MX_TIM3_Init+0xa8>)
 80023c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <MX_TIM3_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <MX_TIM3_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <MX_TIM3_Init+0xa4>)
 80023d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_TIM3_Init+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <MX_TIM3_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023e4:	2301      	movs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023ec:	2301      	movs	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023fc:	2301      	movs	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <MX_TIM3_Init+0xa4>)
 8002410:	f003 f962 	bl	80056d8 <HAL_TIM_Encoder_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800241a:	f7ff fe3d 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002426:	463b      	mov	r3, r7
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_TIM3_Init+0xa4>)
 800242c:	f003 fc96 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002436:	f7ff fe2f 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3730      	adds	r7, #48	; 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000032c 	.word	0x2000032c
 8002448:	40000400 	.word	0x40000400

0800244c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_TIM6_Init+0x68>)
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <MX_TIM6_Init+0x6c>)
 8002460:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_TIM6_Init+0x68>)
 8002464:	f242 527f 	movw	r2, #9599	; 0x257f
 8002468:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_TIM6_Init+0x68>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <MX_TIM6_Init+0x68>)
 8002472:	f241 3287 	movw	r2, #4999	; 0x1387
 8002476:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_TIM6_Init+0x68>)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_TIM6_Init+0x68>)
 8002480:	f003 f804 	bl	800548c <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800248a:	f7ff fe05 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <MX_TIM6_Init+0x68>)
 800249c:	f003 fc5e 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80024a6:	f7ff fdf7 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003c4 	.word	0x200003c4
 80024b8:	40001000 	.word	0x40001000

080024bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <MX_TIM7_Init+0x68>)
 80024ce:	4a16      	ldr	r2, [pc, #88]	; (8002528 <MX_TIM7_Init+0x6c>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <MX_TIM7_Init+0x68>)
 80024d4:	f242 527f 	movw	r2, #9599	; 0x257f
 80024d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_TIM7_Init+0x68>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <MX_TIM7_Init+0x68>)
 80024e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80024e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_TIM7_Init+0x68>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024ee:	480d      	ldr	r0, [pc, #52]	; (8002524 <MX_TIM7_Init+0x68>)
 80024f0:	f002 ffcc 	bl	800548c <HAL_TIM_Base_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80024fa:	f7ff fdcd 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <MX_TIM7_Init+0x68>)
 800250c:	f003 fc26 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002516:	f7ff fdbf 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000045c 	.word	0x2000045c
 8002528:	40001400 	.word	0x40001400

0800252c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_TIM10_Init+0x40>)
 8002532:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <MX_TIM10_Init+0x44>)
 8002534:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_TIM10_Init+0x40>)
 8002538:	f242 527f 	movw	r2, #9599	; 0x257f
 800253c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_TIM10_Init+0x40>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_TIM10_Init+0x40>)
 8002546:	f241 3287 	movw	r2, #4999	; 0x1387
 800254a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_TIM10_Init+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_TIM10_Init+0x40>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_TIM10_Init+0x40>)
 800255a:	f002 ff97 	bl	800548c <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002564:	f7ff fd98 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200002e0 	.word	0x200002e0
 8002570:	40014400 	.word	0x40014400

08002574 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <MX_TIM11_Init+0x40>)
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <MX_TIM11_Init+0x44>)
 800257c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9600-1;
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <MX_TIM11_Init+0x40>)
 8002580:	f242 527f 	movw	r2, #9599	; 0x257f
 8002584:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <MX_TIM11_Init+0x40>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <MX_TIM11_Init+0x40>)
 800258e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002592:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <MX_TIM11_Init+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <MX_TIM11_Init+0x40>)
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025a0:	4804      	ldr	r0, [pc, #16]	; (80025b4 <MX_TIM11_Init+0x40>)
 80025a2:	f002 ff73 	bl	800548c <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80025ac:	f7ff fd74 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000378 	.word	0x20000378
 80025b8:	40014800 	.word	0x40014800

080025bc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_TIM14_Init+0x40>)
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <MX_TIM14_Init+0x44>)
 80025c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9599;
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <MX_TIM14_Init+0x40>)
 80025c8:	f242 527f 	movw	r2, #9599	; 0x257f
 80025cc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_TIM14_Init+0x40>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_TIM14_Init+0x40>)
 80025d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80025da:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <MX_TIM14_Init+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_TIM14_Init+0x40>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <MX_TIM14_Init+0x40>)
 80025ea:	f002 ff4f 	bl	800548c <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80025f4:	f7ff fd50 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000410 	.word	0x20000410
 8002600:	40002000 	.word	0x40002000

08002604 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d14b      	bne.n	80026be <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a28      	ldr	r2, [pc, #160]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800266e:	2340      	movs	r3, #64	; 0x40
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267e:	2302      	movs	r3, #2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800268a:	f001 fa87 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800269e:	2302      	movs	r3, #2
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	480a      	ldr	r0, [pc, #40]	; (80026d4 <HAL_TIM_Encoder_MspInit+0xd0>)
 80026aa:	f001 fa77 	bl	8003b9c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	201d      	movs	r0, #29
 80026b4:	f001 f9a9 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026b8:	201d      	movs	r0, #29
 80026ba:	f001 f9c2 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020800 	.word	0x40020800

080026d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a41      	ldr	r2, [pc, #260]	; (80027ec <HAL_TIM_Base_MspInit+0x114>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d114      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	2036      	movs	r0, #54	; 0x36
 8002708:	f001 f97f 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800270c:	2036      	movs	r0, #54	; 0x36
 800270e:	f001 f998 	bl	8003a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002712:	e066      	b.n	80027e2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM7)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <HAL_TIM_Base_MspInit+0x11c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d114      	bne.n	8002748 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800271e:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002724:	f043 0320 	orr.w	r3, r3, #32
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2037      	movs	r0, #55	; 0x37
 800273c:	f001 f965 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002740:	2037      	movs	r0, #55	; 0x37
 8002742:	f001 f97e 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 8002746:	e04c      	b.n	80027e2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM10)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <HAL_TIM_Base_MspInit+0x120>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d114      	bne.n	800277c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2019      	movs	r0, #25
 8002770:	f001 f94b 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002774:	2019      	movs	r0, #25
 8002776:	f001 f964 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 800277a:	e032      	b.n	80027e2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM11)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_TIM_Base_MspInit+0x124>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d114      	bne.n	80027b0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	201a      	movs	r0, #26
 80027a4:	f001 f931 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027a8:	201a      	movs	r0, #26
 80027aa:	f001 f94a 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 80027ae:	e018      	b.n	80027e2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM14)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_TIM_Base_MspInit+0x128>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d113      	bne.n	80027e2 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_TIM_Base_MspInit+0x118>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	202d      	movs	r0, #45	; 0x2d
 80027d8:	f001 f917 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80027dc:	202d      	movs	r0, #45	; 0x2d
 80027de:	f001 f930 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40001000 	.word	0x40001000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40001400 	.word	0x40001400
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40014800 	.word	0x40014800
 8002800:	40002000 	.word	0x40002000

08002804 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_USART3_UART_Init+0x58>)
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <MX_USART3_UART_Init+0x5c>)
 800280c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_USART3_UART_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_USART3_UART_Init+0x58>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_USART3_UART_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_USART3_UART_Init+0x58>)
 8002848:	f003 fb34 	bl	8005eb4 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002852:	f7ff fc21 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200004a8 	.word	0x200004a8
 8002860:	40004800 	.word	0x40004800

08002864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_UART_MspInit+0x8c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d130      	bne.n	80028e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_UART_MspInit+0x90>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_UART_MspInit+0x90>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_UART_MspInit+0x90>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_UART_MspInit+0x90>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_UART_MspInit+0x90>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_UART_MspInit+0x90>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028c8:	2307      	movs	r3, #7
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	4809      	ldr	r0, [pc, #36]	; (80028f8 <HAL_UART_MspInit+0x94>)
 80028d4:	f001 f962 	bl	8003b9c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	2027      	movs	r0, #39	; 0x27
 80028de:	f001 f894 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028e2:	2027      	movs	r0, #39	; 0x27
 80028e4:	f001 f8ad 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40004800 	.word	0x40004800
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020c00 	.word	0x40020c00

080028fc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002902:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002906:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800290a:	2206      	movs	r2, #6
 800290c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002910:	2202      	movs	r2, #2
 8002912:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800291c:	2202      	movs	r2, #2
 800291e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002922:	2201      	movs	r2, #1
 8002924:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002928:	2200      	movs	r2, #0
 800292a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800292e:	2200      	movs	r2, #0
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002934:	2201      	movs	r2, #1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002940:	f001 fb24 	bl	8003f8c <HAL_PCD_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800294a:	f7ff fba5 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000052c 	.word	0x2000052c

08002958 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002978:	d141      	bne.n	80029fe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002992:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029a4:	230a      	movs	r3, #10
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4817      	ldr	r0, [pc, #92]	; (8002a0c <HAL_PCD_MspInit+0xb4>)
 80029b0:	f001 f8f4 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4810      	ldr	r0, [pc, #64]	; (8002a0c <HAL_PCD_MspInit+0xb4>)
 80029ca:	f001 f8e7 	bl	8003b9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 80029d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d8:	6353      	str	r3, [r2, #52]	; 0x34
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_PCD_MspInit+0xb0>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	; 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a16:	490e      	ldr	r1, [pc, #56]	; (8002a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a1c:	e002      	b.n	8002a24 <LoopCopyDataInit>

08002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a22:	3304      	adds	r3, #4

08002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a28:	d3f9      	bcc.n	8002a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a2c:	4c0b      	ldr	r4, [pc, #44]	; (8002a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a30:	e001      	b.n	8002a36 <LoopFillZerobss>

08002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a34:	3204      	adds	r2, #4

08002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a38:	d3fb      	bcc.n	8002a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a3a:	f7ff fc9f 	bl	800237c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f005 f847 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7ff f855 	bl	8001af0 <main>
  bx  lr    
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a48:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002a54:	0800ad1c 	.word	0x0800ad1c
  ldr r2, =_sbss
 8002a58:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002a5c:	20000944 	.word	0x20000944

08002a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002a68:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_Init+0x28>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_Init+0x28>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a74:	2003      	movs	r0, #3
 8002a76:	f000 ffbd 	bl	80039f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f000 f808 	bl	8002a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a80:	f7ff fb10 	bl	80020a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00

08002a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x54>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x58>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ffd5 	bl	8003a5e <HAL_SYSTICK_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00e      	b.n	8002adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d80a      	bhi.n	8002ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f000 ff9d 	bl	8003a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad0:	4a06      	ldr	r2, [pc, #24]	; (8002aec <HAL_InitTick+0x5c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2000001c 	.word	0x2000001c
 8002ae8:	20000024 	.word	0x20000024
 8002aec:	20000020 	.word	0x20000020

08002af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_IncTick+0x20>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x24>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_IncTick+0x24>)
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000024 	.word	0x20000024
 8002b14:	20000930 	.word	0x20000930

08002b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_GetTick+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000930 	.word	0x20000930

08002b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff ffee 	bl	8002b18 <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d005      	beq.n	8002b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_Delay+0x44>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b56:	bf00      	nop
 8002b58:	f7ff ffde 	bl	8002b18 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d8f7      	bhi.n	8002b58 <HAL_Delay+0x28>
  {
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000024 	.word	0x20000024

08002b78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0ed      	b.n	8002d66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fd5e 	bl	8000658 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bac:	f7ff ffb4 	bl	8002b18 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bb2:	e012      	b.n	8002bda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bb4:	f7ff ffb0 	bl	8002b18 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b0a      	cmp	r3, #10
 8002bc0:	d90b      	bls.n	8002bda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0c5      	b.n	8002d66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0e5      	beq.n	8002bb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0202 	bic.w	r2, r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf8:	f7ff ff8e 	bl	8002b18 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bfe:	e012      	b.n	8002c26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c00:	f7ff ff8a 	bl	8002b18 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b0a      	cmp	r3, #10
 8002c0c:	d90b      	bls.n	8002c26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e09f      	b.n	8002d66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7e5b      	ldrb	r3, [r3, #25]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d108      	bne.n	8002c78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7e9b      	ldrb	r3, [r3, #26]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d108      	bne.n	8002ca2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e007      	b.n	8002cb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0220 	bic.w	r2, r2, #32
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7edb      	ldrb	r3, [r3, #27]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d108      	bne.n	8002ccc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0210 	bic.w	r2, r2, #16
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e007      	b.n	8002cdc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0210 	orr.w	r2, r2, #16
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7f1b      	ldrb	r3, [r3, #28]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e007      	b.n	8002d06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0208 	bic.w	r2, r2, #8
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7f5b      	ldrb	r3, [r3, #29]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0204 	orr.w	r2, r2, #4
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e007      	b.n	8002d30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0204 	bic.w	r2, r2, #4
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d86:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d003      	beq.n	8002d96 <HAL_CAN_ConfigFilter+0x26>
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	f040 80c7 	bne.w	8002f24 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <HAL_CAN_ConfigFilter+0x1d0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d001      	beq.n	8002da4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_CAN_ConfigFilter+0x1d4>)
 8002da2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4a63      	ldr	r2, [pc, #396]	; (8002f44 <HAL_CAN_ConfigFilter+0x1d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dc2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d123      	bne.n	8002e52 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	401a      	ands	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3248      	adds	r2, #72	; 0x48
 8002e32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e48:	6979      	ldr	r1, [r7, #20]
 8002e4a:	3348      	adds	r3, #72	; 0x48
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d122      	bne.n	8002ea0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3248      	adds	r2, #72	; 0x48
 8002e80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e96:	6979      	ldr	r1, [r7, #20]
 8002e98:	3348      	adds	r3, #72	; 0x48
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002eba:	e007      	b.n	8002ecc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ee6:	e007      	b.n	8002ef8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e006      	b.n	8002f32 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40003400 	.word	0x40003400
 8002f44:	40006400 	.word	0x40006400

08002f48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d12e      	bne.n	8002fba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f74:	f7ff fdd0 	bl	8002b18 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f7a:	e012      	b.n	8002fa2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f7c:	f7ff fdcc 	bl	8002b18 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b0a      	cmp	r3, #10
 8002f88:	d90b      	bls.n	8002fa2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2205      	movs	r2, #5
 8002f9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e012      	b.n	8002fc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e006      	b.n	8002fc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d003      	beq.n	8002ffc <HAL_CAN_AddTxMessage+0x2c>
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	f040 80b8 	bne.w	800316c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a0 	beq.w	800315c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	0e1b      	lsrs	r3, r3, #24
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d907      	bls.n	800303c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e09e      	b.n	800317a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800303c:	2201      	movs	r2, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	409a      	lsls	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10d      	bne.n	800306a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	431a      	orrs	r2, r3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3318      	adds	r3, #24
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	440b      	add	r3, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e00f      	b.n	800308a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003074:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800307e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3318      	adds	r3, #24
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	440b      	add	r3, r1
 8003088:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3318      	adds	r3, #24
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	440b      	add	r3, r1
 800309a:	3304      	adds	r3, #4
 800309c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	7d1b      	ldrb	r3, [r3, #20]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d111      	bne.n	80030ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3318      	adds	r3, #24
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	6811      	ldr	r1, [r2, #0]
 80030ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3318      	adds	r3, #24
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	440b      	add	r3, r1
 80030c6:	3304      	adds	r3, #4
 80030c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3307      	adds	r3, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	061a      	lsls	r2, r3, #24
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3306      	adds	r3, #6
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3305      	adds	r3, #5
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	4313      	orrs	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	3204      	adds	r2, #4
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	4610      	mov	r0, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	ea43 0200 	orr.w	r2, r3, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	440b      	add	r3, r1
 80030fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003100:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3303      	adds	r3, #3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	061a      	lsls	r2, r3, #24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3302      	adds	r3, #2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3301      	adds	r3, #1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4313      	orrs	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	4610      	mov	r0, r2
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	6811      	ldr	r1, [r2, #0]
 8003128:	ea43 0200 	orr.w	r2, r3, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	440b      	add	r3, r1
 8003132:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003136:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3318      	adds	r3, #24
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	4413      	add	r3, r2
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	6811      	ldr	r1, [r2, #0]
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3318      	adds	r3, #24
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	440b      	add	r3, r1
 8003156:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e00e      	b.n	800317a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e006      	b.n	800317a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d003      	beq.n	80031aa <HAL_CAN_GetRxMessage+0x24>
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f040 80f3 	bne.w	8003390 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10e      	bne.n	80031ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0e7      	b.n	800339e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d8      	b.n	800339e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	331b      	adds	r3, #27
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	4413      	add	r3, r2
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0204 	and.w	r2, r3, #4
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	331b      	adds	r3, #27
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	4413      	add	r3, r2
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0d5b      	lsrs	r3, r3, #21
 800321a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e00b      	b.n	800323c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	331b      	adds	r3, #27
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	331b      	adds	r3, #27
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4413      	add	r3, r2
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0202 	and.w	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	331b      	adds	r3, #27
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	331b      	adds	r3, #27
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4413      	add	r3, r2
 8003276:	3304      	adds	r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	b2da      	uxtb	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	331b      	adds	r3, #27
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0a1a      	lsrs	r2, r3, #8
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0c1a      	lsrs	r2, r3, #16
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	3302      	adds	r3, #2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e1a      	lsrs	r2, r3, #24
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	3303      	adds	r3, #3
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	4413      	add	r3, r2
 8003308:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	4413      	add	r3, r2
 8003320:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0a1a      	lsrs	r2, r3, #8
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	3305      	adds	r3, #5
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4413      	add	r3, r2
 800333a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0c1a      	lsrs	r2, r3, #16
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3306      	adds	r3, #6
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e1a      	lsrs	r2, r3, #24
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	3307      	adds	r3, #7
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0220 	orr.w	r2, r2, #32
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e007      	b.n	800338c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0220 	orr.w	r2, r2, #32
 800338a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e006      	b.n	800339e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d002      	beq.n	80033c8 <HAL_CAN_ActivateNotification+0x1e>
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d109      	bne.n	80033dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6959      	ldr	r1, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e006      	b.n	80033ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b08a      	sub	sp, #40	; 0x28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d07c      	beq.n	8003536 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d023      	beq.n	800348e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f983 	bl	8003764 <HAL_CAN_TxMailbox0CompleteCallback>
 800345e:	e016      	b.n	800348e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	e00c      	b.n	800348e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	e002      	b.n	800348e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f989 	bl	80037a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d024      	beq.n	80034e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f963 	bl	8003778 <HAL_CAN_TxMailbox1CompleteCallback>
 80034b2:	e016      	b.n	80034e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	e00c      	b.n	80034e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	e002      	b.n	80034e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f969 	bl	80037b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d024      	beq.n	8003536 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f943 	bl	800378c <HAL_CAN_TxMailbox2CompleteCallback>
 8003506:	e016      	b.n	8003536 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
 800351a:	e00c      	b.n	8003536 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	e002      	b.n	8003536 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f949 	bl	80037c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00c      	beq.n	800355a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003550:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2210      	movs	r2, #16
 8003558:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2208      	movs	r2, #8
 8003574:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f930 	bl	80037dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fe fd6d 	bl	8002074 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2210      	movs	r2, #16
 80035bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2208      	movs	r2, #8
 80035d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f912 	bl	8003804 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8f9 	bl	80037f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8fc 	bl	8003818 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2208      	movs	r2, #8
 800363a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8f5 	bl	800382c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d07b      	beq.n	8003744 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d072      	beq.n	800373c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d043      	beq.n	800373c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03e      	beq.n	800373c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036c4:	2b60      	cmp	r3, #96	; 0x60
 80036c6:	d02b      	beq.n	8003720 <HAL_CAN_IRQHandler+0x32a>
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d82e      	bhi.n	800372a <HAL_CAN_IRQHandler+0x334>
 80036cc:	2b50      	cmp	r3, #80	; 0x50
 80036ce:	d022      	beq.n	8003716 <HAL_CAN_IRQHandler+0x320>
 80036d0:	2b50      	cmp	r3, #80	; 0x50
 80036d2:	d82a      	bhi.n	800372a <HAL_CAN_IRQHandler+0x334>
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d019      	beq.n	800370c <HAL_CAN_IRQHandler+0x316>
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d826      	bhi.n	800372a <HAL_CAN_IRQHandler+0x334>
 80036dc:	2b30      	cmp	r3, #48	; 0x30
 80036de:	d010      	beq.n	8003702 <HAL_CAN_IRQHandler+0x30c>
 80036e0:	2b30      	cmp	r3, #48	; 0x30
 80036e2:	d822      	bhi.n	800372a <HAL_CAN_IRQHandler+0x334>
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d002      	beq.n	80036ee <HAL_CAN_IRQHandler+0x2f8>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d005      	beq.n	80036f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036ec:	e01d      	b.n	800372a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f6:	e019      	b.n	800372c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f043 0310 	orr.w	r3, r3, #16
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003700:	e014      	b.n	800372c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f043 0320 	orr.w	r3, r3, #32
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800370a:	e00f      	b.n	800372c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003714:	e00a      	b.n	800372c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800371e:	e005      	b.n	800372c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003728:	e000      	b.n	800372c <HAL_CAN_IRQHandler+0x336>
            break;
 800372a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800373a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2204      	movs	r2, #4
 8003742:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f872 	bl	8003840 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800375c:	bf00      	nop
 800375e:	3728      	adds	r7, #40	; 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <__NVIC_SetPriorityGrouping+0x40>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	4313      	orrs	r3, r2
 8003880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <__NVIC_SetPriorityGrouping+0x40>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60d3      	str	r3, [r2, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00
 8003898:	05fa0000 	.word	0x05fa0000

0800389c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	; (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f7ff ff8e 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff29 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1c:	f7ff ff3e 	bl	800389c <__NVIC_GetPriorityGrouping>
 8003a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff8e 	bl	8003948 <NVIC_EncodePriority>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5d 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff31 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffa2 	bl	80039b0 <SysTick_Config>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7ff f848 	bl	8002b18 <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d008      	beq.n	8003aa8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e052      	b.n	8003b4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0216 	bic.w	r2, r2, #22
 8003ab6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <HAL_DMA_Abort+0x62>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af8:	e013      	b.n	8003b22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afa:	f7ff f80d 	bl	8002b18 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d90c      	bls.n	8003b22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e015      	b.n	8003b4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e4      	bne.n	8003afa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	223f      	movs	r2, #63	; 0x3f
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d004      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e00c      	b.n	8003b8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2205      	movs	r2, #5
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	e175      	b.n	8003ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	f040 8164 	bne.w	8003ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d005      	beq.n	8003bf2 <HAL_GPIO_Init+0x56>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d130      	bne.n	8003c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 0201 	and.w	r2, r3, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d017      	beq.n	8003c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d123      	bne.n	8003ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	08da      	lsrs	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3208      	adds	r2, #8
 8003ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	08da      	lsrs	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3208      	adds	r2, #8
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0203 	and.w	r2, r3, #3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80be 	beq.w	8003ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <HAL_GPIO_Init+0x324>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	4a65      	ldr	r2, [pc, #404]	; (8003ec0 <HAL_GPIO_Init+0x324>)
 8003d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d30:	6453      	str	r3, [r2, #68]	; 0x44
 8003d32:	4b63      	ldr	r3, [pc, #396]	; (8003ec0 <HAL_GPIO_Init+0x324>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d3e:	4a61      	ldr	r2, [pc, #388]	; (8003ec4 <HAL_GPIO_Init+0x328>)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	3302      	adds	r3, #2
 8003d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_GPIO_Init+0x32c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d037      	beq.n	8003dda <HAL_GPIO_Init+0x23e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <HAL_GPIO_Init+0x330>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_GPIO_Init+0x23a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <HAL_GPIO_Init+0x334>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <HAL_GPIO_Init+0x236>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a55      	ldr	r2, [pc, #340]	; (8003ed4 <HAL_GPIO_Init+0x338>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d025      	beq.n	8003dce <HAL_GPIO_Init+0x232>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a54      	ldr	r2, [pc, #336]	; (8003ed8 <HAL_GPIO_Init+0x33c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01f      	beq.n	8003dca <HAL_GPIO_Init+0x22e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a53      	ldr	r2, [pc, #332]	; (8003edc <HAL_GPIO_Init+0x340>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d019      	beq.n	8003dc6 <HAL_GPIO_Init+0x22a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_GPIO_Init+0x344>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_GPIO_Init+0x226>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_GPIO_Init+0x348>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00d      	beq.n	8003dbe <HAL_GPIO_Init+0x222>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a50      	ldr	r2, [pc, #320]	; (8003ee8 <HAL_GPIO_Init+0x34c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <HAL_GPIO_Init+0x21e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4f      	ldr	r2, [pc, #316]	; (8003eec <HAL_GPIO_Init+0x350>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d101      	bne.n	8003db6 <HAL_GPIO_Init+0x21a>
 8003db2:	2309      	movs	r3, #9
 8003db4:	e012      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003db6:	230a      	movs	r3, #10
 8003db8:	e010      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	e00e      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	e00c      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	e00a      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_Init+0x240>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	f002 0203 	and.w	r2, r2, #3
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4093      	lsls	r3, r2
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dec:	4935      	ldr	r1, [pc, #212]	; (8003ec4 <HAL_GPIO_Init+0x328>)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3302      	adds	r3, #2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e1e:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e72:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <HAL_GPIO_Init+0x354>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	f67f ae86 	bls.w	8003bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40020800 	.word	0x40020800
 8003ed4:	40020c00 	.word	0x40020c00
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40021400 	.word	0x40021400
 8003ee0:	40021800 	.word	0x40021800
 8003ee4:	40021c00 	.word	0x40021c00
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40022400 	.word	0x40022400
 8003ef0:	40013c00 	.word	0x40013c00

08003ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f10:	e003      	b.n	8003f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f38:	887a      	ldrh	r2, [r7, #2]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	041a      	lsls	r2, r3, #16
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43d9      	mvns	r1, r3
 8003f44:	887b      	ldrh	r3, [r7, #2]
 8003f46:	400b      	ands	r3, r1
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	619a      	str	r2, [r3, #24]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fd78 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40013c00 	.word	0x40013c00

08003f8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8e:	b08f      	sub	sp, #60	; 0x3c
 8003f90:	af0a      	add	r7, sp, #40	; 0x28
 8003f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e116      	b.n	80041cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fe fccd 	bl	8002958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 fad7 	bl	8007590 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	687e      	ldr	r6, [r7, #4]
 8003fea:	466d      	mov	r5, sp
 8003fec:	f106 0410 	add.w	r4, r6, #16
 8003ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004000:	1d33      	adds	r3, r6, #4
 8004002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004004:	6838      	ldr	r0, [r7, #0]
 8004006:	f003 fa6b 	bl	80074e0 <USB_CoreInit>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0d7      	b.n	80041cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fac5 	bl	80075b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e04a      	b.n	80040c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	333d      	adds	r3, #61	; 0x3d
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	333c      	adds	r3, #60	; 0x3c
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	b298      	uxth	r0, r3
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	3342      	adds	r3, #66	; 0x42
 800406a:	4602      	mov	r2, r0
 800406c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	333f      	adds	r3, #63	; 0x3f
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3344      	adds	r3, #68	; 0x44
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3348      	adds	r3, #72	; 0x48
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3350      	adds	r3, #80	; 0x50
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	3301      	adds	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3af      	bcc.n	800402e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e044      	b.n	800415e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004116:	7bfa      	ldrb	r2, [r7, #15]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004142:	7bfa      	ldrb	r2, [r7, #15]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	3301      	adds	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d3b5      	bcc.n	80040d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	687e      	ldr	r6, [r7, #4]
 8004170:	466d      	mov	r5, sp
 8004172:	f106 0410 	add.w	r4, r6, #16
 8004176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004182:	e885 0003 	stmia.w	r5, {r0, r1}
 8004186:	1d33      	adds	r3, r6, #4
 8004188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800418a:	6838      	ldr	r0, [r7, #0]
 800418c:	f003 fa5e 	bl	800764c <USB_DevInit>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e014      	b.n	80041cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d102      	bne.n	80041c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f80a 	bl	80041d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 fc18 	bl	80079fa <USB_DevDisconnect>

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_PCDEx_ActivateLPM+0x44>)
 8004204:	4313      	orrs	r3, r2
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	10000003 	.word	0x10000003

0800421c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40007000 	.word	0x40007000

0800423c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800426a:	f7fe fc55 	bl	8002b18 <HAL_GetTick>
 800426e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004270:	e009      	b.n	8004286 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004272:	f7fe fc51 	bl	8002b18 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004280:	d901      	bls.n	8004286 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e022      	b.n	80042cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d1ee      	bne.n	8004272 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0f      	ldr	r2, [pc, #60]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a0:	f7fe fc3a 	bl	8002b18 <HAL_GetTick>
 80042a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042a6:	e009      	b.n	80042bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042a8:	f7fe fc36 	bl	8002b18 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b6:	d901      	bls.n	80042bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e007      	b.n	80042cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c8:	d1ee      	bne.n	80042a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000

080042dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e29b      	b.n	800482a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8087 	beq.w	800440e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004300:	4b96      	ldr	r3, [pc, #600]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b04      	cmp	r3, #4
 800430a:	d00c      	beq.n	8004326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430c:	4b93      	ldr	r3, [pc, #588]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d112      	bne.n	800433e <HAL_RCC_OscConfig+0x62>
 8004318:	4b90      	ldr	r3, [pc, #576]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004324:	d10b      	bne.n	800433e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004326:	4b8d      	ldr	r3, [pc, #564]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d06c      	beq.n	800440c <HAL_RCC_OscConfig+0x130>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d168      	bne.n	800440c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e275      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x7a>
 8004348:	4b84      	ldr	r3, [pc, #528]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a83      	ldr	r2, [pc, #524]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800434e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e02e      	b.n	80043b4 <HAL_RCC_OscConfig+0xd8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x9c>
 800435e:	4b7f      	ldr	r3, [pc, #508]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7e      	ldr	r2, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b7c      	ldr	r3, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7b      	ldr	r2, [pc, #492]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e01d      	b.n	80043b4 <HAL_RCC_OscConfig+0xd8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0xc0>
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a75      	ldr	r2, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a72      	ldr	r2, [pc, #456]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e00b      	b.n	80043b4 <HAL_RCC_OscConfig+0xd8>
 800439c:	4b6f      	ldr	r3, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6e      	ldr	r2, [pc, #440]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6b      	ldr	r2, [pc, #428]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80043ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fbac 	bl	8002b18 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fe fba8 	bl	8002b18 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	; 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e229      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	4b61      	ldr	r3, [pc, #388]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0xe8>
 80043e2:	e014      	b.n	800440e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fe fb98 	bl	8002b18 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fe fb94 	bl	8002b18 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e215      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x110>
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d069      	beq.n	80044ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800441a:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004426:	4b4d      	ldr	r3, [pc, #308]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b08      	cmp	r3, #8
 8004430:	d11c      	bne.n	800446c <HAL_RCC_OscConfig+0x190>
 8004432:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d116      	bne.n	800446c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_RCC_OscConfig+0x17a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1e9      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	493d      	ldr	r1, [pc, #244]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	e040      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a38      	ldr	r2, [pc, #224]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fe fb4a 	bl	8002b18 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7fe fb46 	bl	8002b18 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1c7      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b2d      	ldr	r3, [pc, #180]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4929      	ldr	r1, [pc, #164]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
 80044ba:	e018      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a26      	ldr	r2, [pc, #152]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fe fb26 	bl	8002b18 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d0:	f7fe fb22 	bl	8002b18 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1a3      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d038      	beq.n	800456c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d019      	beq.n	8004536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450e:	f7fe fb03 	bl	8002b18 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004516:	f7fe faff 	bl	8002b18 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e180      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x23a>
 8004534:	e01a      	b.n	800456c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_OscConfig+0x280>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <HAL_RCC_OscConfig+0x280>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fe fae9 	bl	8002b18 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454a:	f7fe fae5 	bl	8002b18 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d903      	bls.n	8004560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e166      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
 800455c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b92      	ldr	r3, [pc, #584]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ee      	bne.n	800454a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a4 	beq.w	80046c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b8c      	ldr	r3, [pc, #560]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4b89      	ldr	r3, [pc, #548]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a88      	ldr	r2, [pc, #544]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b86      	ldr	r3, [pc, #536]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a2:	4b83      	ldr	r3, [pc, #524]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045ae:	4b80      	ldr	r3, [pc, #512]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7f      	ldr	r2, [pc, #508]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fe faad 	bl	8002b18 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fe faa9 	bl	8002b18 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	; 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e12a      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d4:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x31a>
 80045e8:	4b70      	ldr	r3, [pc, #448]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4a6f      	ldr	r2, [pc, #444]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	; 0x70
 80045f4:	e02d      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x33c>
 80045fe:	4b6b      	ldr	r3, [pc, #428]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a6a      	ldr	r2, [pc, #424]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
 800460a:	4b68      	ldr	r3, [pc, #416]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	4a67      	ldr	r2, [pc, #412]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	6713      	str	r3, [r2, #112]	; 0x70
 8004616:	e01c      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d10c      	bne.n	800463a <HAL_RCC_OscConfig+0x35e>
 8004620:	4b62      	ldr	r3, [pc, #392]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a61      	ldr	r2, [pc, #388]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	4b5f      	ldr	r3, [pc, #380]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a5e      	ldr	r2, [pc, #376]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	e00b      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
 800463a:	4b5c      	ldr	r3, [pc, #368]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a5b      	ldr	r2, [pc, #364]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	4b59      	ldr	r3, [pc, #356]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a58      	ldr	r2, [pc, #352]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fe fa5d 	bl	8002b18 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fe fa59 	bl	8002b18 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0d8      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCC_OscConfig+0x386>
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fe fa47 	bl	8002b18 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe fa43 	bl	8002b18 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0c2      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b3d      	ldr	r3, [pc, #244]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a3c      	ldr	r2, [pc, #240]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80ae 	beq.w	8004828 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4b37      	ldr	r3, [pc, #220]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d06d      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d14b      	bne.n	8004778 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b32      	ldr	r3, [pc, #200]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a31      	ldr	r2, [pc, #196]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fe fa14 	bl	8002b18 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fe fa10 	bl	8002b18 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e091      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	071b      	lsls	r3, r3, #28
 800473e:	491b      	ldr	r1, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fe f9e2 	bl	8002b18 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe f9de 	bl	8002b18 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e05f      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x47c>
 8004776:	e057      	b.n	8004828 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe f9c8 	bl	8002b18 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe f9c4 	bl	8002b18 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e045      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b03      	ldr	r3, [pc, #12]	; (80047ac <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x4b0>
 80047aa:	e03d      	b.n	8004828 <HAL_RCC_OscConfig+0x54c>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047b4:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <HAL_RCC_OscConfig+0x558>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d030      	beq.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d129      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d122      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d119      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d10f      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800

08004838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0d0      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d910      	bls.n	8004880 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b67      	ldr	r3, [pc, #412]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 020f 	bic.w	r2, r3, #15
 8004866:	4965      	ldr	r1, [pc, #404]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b63      	ldr	r3, [pc, #396]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b8      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800489e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a52      	ldr	r2, [pc, #328]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494d      	ldr	r1, [pc, #308]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d040      	beq.n	800495c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b47      	ldr	r3, [pc, #284]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d115      	bne.n	800491a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fa:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e073      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490a:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06b      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4936      	ldr	r1, [pc, #216]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fe f8f4 	bl	8002b18 <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fe f8f0 	bl	8002b18 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e053      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b27      	ldr	r3, [pc, #156]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d210      	bcs.n	800498c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	4922      	ldr	r1, [pc, #136]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4916      	ldr	r1, [pc, #88]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490e      	ldr	r1, [pc, #56]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f821 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490a      	ldr	r1, [pc, #40]	; (8004a04 <HAL_RCC_ClockConfig+0x1cc>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <HAL_RCC_ClockConfig+0x1d0>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1d4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe f850 	bl	8002a90 <HAL_InitTick>

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023c00 	.word	0x40023c00
 8004a00:	40023800 	.word	0x40023800
 8004a04:	0800a90c 	.word	0x0800a90c
 8004a08:	2000001c 	.word	0x2000001c
 8004a0c:	20000020 	.word	0x20000020

08004a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	607b      	str	r3, [r7, #4]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	2300      	movs	r3, #0
 8004a22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a28:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x40>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	f200 80bd 	bhi.w	8004bb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a42:	e0b7      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a46:	60bb      	str	r3, [r7, #8]
      break;
 8004a48:	e0b7      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a4c:	60bb      	str	r3, [r7, #8]
      break;
 8004a4e:	e0b4      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a50:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04d      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	ea02 0800 	and.w	r8, r2, r0
 8004a7e:	ea03 0901 	and.w	r9, r3, r1
 8004a82:	4640      	mov	r0, r8
 8004a84:	4649      	mov	r1, r9
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	014b      	lsls	r3, r1, #5
 8004a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a94:	0142      	lsls	r2, r0, #5
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	ebb0 0008 	subs.w	r0, r0, r8
 8004a9e:	eb61 0109 	sbc.w	r1, r1, r9
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	018b      	lsls	r3, r1, #6
 8004aac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ab0:	0182      	lsls	r2, r0, #6
 8004ab2:	1a12      	subs	r2, r2, r0
 8004ab4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	00d9      	lsls	r1, r3, #3
 8004ac2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac6:	00d0      	lsls	r0, r2, #3
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	eb12 0208 	adds.w	r2, r2, r8
 8004ad0:	eb43 0309 	adc.w	r3, r3, r9
 8004ad4:	f04f 0000 	mov.w	r0, #0
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	0259      	lsls	r1, r3, #9
 8004ade:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ae2:	0250      	lsls	r0, r2, #9
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	f7fb fbfc 	bl	80002f0 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e04a      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	ea02 0400 	and.w	r4, r2, r0
 8004b1a:	ea03 0501 	and.w	r5, r3, r1
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	014b      	lsls	r3, r1, #5
 8004b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b30:	0142      	lsls	r2, r0, #5
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	1b00      	subs	r0, r0, r4
 8004b38:	eb61 0105 	sbc.w	r1, r1, r5
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	018b      	lsls	r3, r1, #6
 8004b46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b4a:	0182      	lsls	r2, r0, #6
 8004b4c:	1a12      	subs	r2, r2, r0
 8004b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	00d9      	lsls	r1, r3, #3
 8004b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b60:	00d0      	lsls	r0, r2, #3
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	1912      	adds	r2, r2, r4
 8004b68:	eb45 0303 	adc.w	r3, r5, r3
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	0299      	lsls	r1, r3, #10
 8004b76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b7a:	0290      	lsls	r0, r2, #10
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	f7fb fbb0 	bl	80002f0 <__aeabi_uldivmod>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4613      	mov	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bb6:	60bb      	str	r3, [r7, #8]
      break;
 8004bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bba:	68bb      	ldr	r3, [r7, #8]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	007a1200 	.word	0x007a1200

08004bd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	2000001c 	.word	0x2000001c

08004bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf0:	f7ff fff0 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	0a9b      	lsrs	r3, r3, #10
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4903      	ldr	r1, [pc, #12]	; (8004c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	0800a91c 	.word	0x0800a91c

08004c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c18:	f7ff ffdc 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0b5b      	lsrs	r3, r3, #13
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	0800a91c 	.word	0x0800a91c

08004c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b69      	ldr	r3, [pc, #420]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a68      	ldr	r2, [pc, #416]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	4b66      	ldr	r3, [pc, #408]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	4964      	ldr	r1, [pc, #400]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d017      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c96:	4b5d      	ldr	r3, [pc, #372]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	4959      	ldr	r1, [pc, #356]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d017      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cd2:	4b4e      	ldr	r3, [pc, #312]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	494a      	ldr	r1, [pc, #296]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 808b 	beq.w	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d20:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2c:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d38:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fd fee8 	bl	8002b18 <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4c:	f7fd fee4 	bl	8002b18 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e38f      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d6a:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d035      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d02e      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db0:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d114      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd feac 	bl	8002b18 <HAL_GetTick>
 8004dc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fd fea8 	bl	8002b18 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e351      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ee      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df2:	d111      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e02:	400b      	ands	r3, r1
 8004e04:	4901      	ldr	r1, [pc, #4]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40007000 	.word	0x40007000
 8004e14:	0ffffcff 	.word	0x0ffffcff
 8004e18:	4bb3      	ldr	r3, [pc, #716]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4ab2      	ldr	r2, [pc, #712]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e22:	6093      	str	r3, [r2, #8]
 8004e24:	4bb0      	ldr	r3, [pc, #704]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	49ad      	ldr	r1, [pc, #692]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e42:	4ba9      	ldr	r3, [pc, #676]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	4aa7      	ldr	r2, [pc, #668]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e52:	4ba5      	ldr	r3, [pc, #660]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	49a2      	ldr	r1, [pc, #648]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e70:	4b9d      	ldr	r3, [pc, #628]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7e:	499a      	ldr	r1, [pc, #616]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e92:	4b95      	ldr	r3, [pc, #596]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea0:	4991      	ldr	r1, [pc, #580]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eb4:	4b8c      	ldr	r3, [pc, #560]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec2:	4989      	ldr	r1, [pc, #548]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ed6:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4980      	ldr	r1, [pc, #512]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef8:	4b7b      	ldr	r3, [pc, #492]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4978      	ldr	r1, [pc, #480]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f1a:	4b73      	ldr	r3, [pc, #460]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f023 020c 	bic.w	r2, r3, #12
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	496f      	ldr	r1, [pc, #444]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f3c:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4a:	4967      	ldr	r1, [pc, #412]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f5e:	4b62      	ldr	r3, [pc, #392]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	495e      	ldr	r1, [pc, #376]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f80:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	4956      	ldr	r1, [pc, #344]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fa2:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	494d      	ldr	r1, [pc, #308]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fc4:	4b48      	ldr	r3, [pc, #288]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	4945      	ldr	r1, [pc, #276]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fe6:	4b40      	ldr	r3, [pc, #256]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	493c      	ldr	r1, [pc, #240]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005008:	4b37      	ldr	r3, [pc, #220]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005016:	4934      	ldr	r1, [pc, #208]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d011      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005038:	492b      	ldr	r1, [pc, #172]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005048:	d101      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800504a:	2301      	movs	r3, #1
 800504c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506a:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	491b      	ldr	r1, [pc, #108]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800508c:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509c:	4912      	ldr	r1, [pc, #72]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c0:	4909      	ldr	r1, [pc, #36]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00f      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050d4:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	e002      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	4986      	ldr	r1, [pc, #536]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005100:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005106:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005110:	497d      	ldr	r1, [pc, #500]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d006      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80d6 	beq.w	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800512c:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a75      	ldr	r2, [pc, #468]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fd fcee 	bl	8002b18 <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005140:	f7fd fcea 	bl	8002b18 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e195      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005152:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11d      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005180:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005186:	0e1b      	lsrs	r3, r3, #24
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	019a      	lsls	r2, r3, #6
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	4958      	ldr	r1, [pc, #352]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02e      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d8:	d129      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051da:	4b4b      	ldr	r3, [pc, #300]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e8:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ee:	0f1b      	lsrs	r3, r3, #28
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	019a      	lsls	r2, r3, #6
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	493e      	ldr	r1, [pc, #248]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005216:	4b3c      	ldr	r3, [pc, #240]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	f023 021f 	bic.w	r2, r3, #31
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	3b01      	subs	r3, #1
 8005226:	4938      	ldr	r1, [pc, #224]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01d      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800523a:	4b33      	ldr	r3, [pc, #204]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005240:	0e1b      	lsrs	r3, r3, #24
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005248:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	0f1b      	lsrs	r3, r3, #28
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	019a      	lsls	r2, r3, #6
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	061b      	lsls	r3, r3, #24
 8005268:	431a      	orrs	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	4926      	ldr	r1, [pc, #152]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d011      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	071b      	lsls	r3, r3, #28
 800529e:	491a      	ldr	r1, [pc, #104]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fd fc31 	bl	8002b18 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052ba:	f7fd fc2d 	bl	8002b18 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b64      	cmp	r3, #100	; 0x64
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e0d8      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	f040 80ce 	bne.w	800547c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a08      	ldr	r2, [pc, #32]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ec:	f7fd fc14 	bl	8002b18 <HAL_GetTick>
 80052f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052f2:	e00b      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052f4:	f7fd fc10 	bl	8002b18 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d904      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0bb      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800530c:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005318:	d0ec      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02e      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d12a      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005342:	4b51      	ldr	r3, [pc, #324]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005350:	4b4d      	ldr	r3, [pc, #308]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	0f1b      	lsrs	r3, r3, #28
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	019a      	lsls	r2, r3, #6
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	071b      	lsls	r3, r3, #28
 8005376:	4944      	ldr	r1, [pc, #272]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005384:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	493d      	ldr	r1, [pc, #244]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d022      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ac:	d11d      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ae:	4b36      	ldr	r3, [pc, #216]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053bc:	4b32      	ldr	r3, [pc, #200]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	0f1b      	lsrs	r3, r3, #28
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	019a      	lsls	r2, r3, #6
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	431a      	orrs	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	071b      	lsls	r3, r3, #28
 80053e2:	4929      	ldr	r1, [pc, #164]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d028      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005404:	4b20      	ldr	r3, [pc, #128]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	019a      	lsls	r2, r3, #6
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	4917      	ldr	r1, [pc, #92]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4911      	ldr	r1, [pc, #68]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005448:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0e      	ldr	r2, [pc, #56]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fd fb60 	bl	8002b18 <HAL_GetTick>
 8005458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800545c:	f7fd fb5c 	bl	8002b18 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e007      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547a:	d1ef      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800

0800548c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e049      	b.n	8005532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fd f910 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f000 fb80 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	f241 1311 	movw	r3, #4369	; 0x1111
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <HAL_TIM_Base_Stop+0x38>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	f240 4344 	movw	r3, #1092	; 0x444
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <HAL_TIM_Base_Stop+0x38>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d001      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e054      	b.n	800564a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a26      	ldr	r2, [pc, #152]	; (8005658 <HAL_TIM_Base_Start_IT+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d022      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d01d      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a22      	ldr	r2, [pc, #136]	; (800565c <HAL_TIM_Base_Start_IT+0xd4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d018      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a21      	ldr	r2, [pc, #132]	; (8005660 <HAL_TIM_Base_Start_IT+0xd8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1f      	ldr	r2, [pc, #124]	; (8005664 <HAL_TIM_Base_Start_IT+0xdc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00e      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <HAL_TIM_Base_Start_IT+0xe0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1c      	ldr	r2, [pc, #112]	; (800566c <HAL_TIM_Base_Start_IT+0xe4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <HAL_TIM_Base_Start_IT+0xe8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d115      	bne.n	8005634 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_TIM_Base_Start_IT+0xec>)
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b06      	cmp	r3, #6
 8005618:	d015      	beq.n	8005646 <HAL_TIM_Base_Start_IT+0xbe>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	d011      	beq.n	8005646 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	e008      	b.n	8005646 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e000      	b.n	8005648 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40010400 	.word	0x40010400
 800566c:	40014000 	.word	0x40014000
 8005670:	40001800 	.word	0x40001800
 8005674:	00010007 	.word	0x00010007

08005678 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	f241 1311 	movw	r3, #4369	; 0x1111
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10f      	bne.n	80056c0 <HAL_TIM_Base_Stop_IT+0x48>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a1a      	ldr	r2, [r3, #32]
 80056a6:	f240 4344 	movw	r3, #1092	; 0x444
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_Base_Stop_IT+0x48>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e08f      	b.n	800580c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fc ff7f 	bl	8002604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <HAL_TIM_Encoder_Init+0x13c>)
 800571a:	400b      	ands	r3, r1
 800571c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f000 fa51 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4b31      	ldr	r3, [pc, #196]	; (8005818 <HAL_TIM_Encoder_Init+0x140>)
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	4313      	orrs	r3, r2
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_TIM_Encoder_Init+0x144>)
 800576e:	4013      	ands	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <HAL_TIM_Encoder_Init+0x148>)
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	4313      	orrs	r3, r2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	031b      	lsls	r3, r3, #12
 8005798:	4313      	orrs	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	4313      	orrs	r3, r2
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	fffebff8 	.word	0xfffebff8
 8005818:	fffffcfc 	.word	0xfffffcfc
 800581c:	fffff3f3 	.word	0xfffff3f3
 8005820:	ffff0f0f 	.word	0xffff0f0f

08005824 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005834:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800583c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005844:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d110      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d102      	bne.n	8005860 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800585a:	7b7b      	ldrb	r3, [r7, #13]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d001      	beq.n	8005864 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e069      	b.n	8005938 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005874:	e031      	b.n	80058da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b04      	cmp	r3, #4
 800587a:	d110      	bne.n	800589e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800587c:	7bbb      	ldrb	r3, [r7, #14]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d102      	bne.n	8005888 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005882:	7b3b      	ldrb	r3, [r7, #12]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d001      	beq.n	800588c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e055      	b.n	8005938 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800589c:	e01d      	b.n	80058da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d108      	bne.n	80058b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058aa:	7b7b      	ldrb	r3, [r7, #13]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d102      	bne.n	80058b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b0:	7b3b      	ldrb	r3, [r7, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e03e      	b.n	8005938 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_TIM_Encoder_Start+0xc4>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d008      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0xd4>
 80058e6:	e00f      	b.n	8005908 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2201      	movs	r2, #1
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fa0d 	bl	8005d10 <TIM_CCxChannelCmd>
      break;
 80058f6:	e016      	b.n	8005926 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2201      	movs	r2, #1
 80058fe:	2104      	movs	r1, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fa05 	bl	8005d10 <TIM_CCxChannelCmd>
      break;
 8005906:	e00e      	b.n	8005926 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2201      	movs	r2, #1
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f9fd 	bl	8005d10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2201      	movs	r2, #1
 800591c:	2104      	movs	r1, #4
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f9f6 	bl	8005d10 <TIM_CCxChannelCmd>
      break;
 8005924:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0201 	orr.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b02      	cmp	r3, #2
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0202 	mvn.w	r2, #2
 800596c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f905 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8f7 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f908 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0204 	mvn.w	r2, #4
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8db 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8cd 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f8de 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0208 	mvn.w	r2, #8
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2204      	movs	r2, #4
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8b1 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8a3 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8b4 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0210 	mvn.w	r2, #16
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f887 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f879 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f88a 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d107      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0201 	mvn.w	r2, #1
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb ff32 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d10e      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005adc:	2b80      	cmp	r3, #128	; 0x80
 8005ade:	d107      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9ce 	bl	8005e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afe:	d10e      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d107      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f9c1 	bl	8005ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d10e      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d107      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f838 	bl	8005bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d10e      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d107      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0220 	mvn.w	r2, #32
 8005b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f981 	bl	8005e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a40      	ldr	r2, [pc, #256]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d013      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3d      	ldr	r2, [pc, #244]	; (8005ce8 <TIM_Base_SetConfig+0x118>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3c      	ldr	r2, [pc, #240]	; (8005cec <TIM_Base_SetConfig+0x11c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3b      	ldr	r2, [pc, #236]	; (8005cf0 <TIM_Base_SetConfig+0x120>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3a      	ldr	r2, [pc, #232]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d027      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <TIM_Base_SetConfig+0x118>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d023      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <TIM_Base_SetConfig+0x11c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01f      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <TIM_Base_SetConfig+0x120>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d017      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <TIM_Base_SetConfig+0x128>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <TIM_Base_SetConfig+0x12c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a26      	ldr	r2, [pc, #152]	; (8005d00 <TIM_Base_SetConfig+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_Base_SetConfig+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <TIM_Base_SetConfig+0x138>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <TIM_Base_SetConfig+0x13c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d108      	bne.n	8005c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0xf8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d103      	bne.n	8005cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40010400 	.word	0x40010400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800
 8005d04:	40001800 	.word	0x40001800
 8005d08:	40001c00 	.word	0x40001c00
 8005d0c:	40002000 	.word	0x40002000

08005d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2201      	movs	r2, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1a      	ldr	r2, [r3, #32]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	401a      	ands	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e06d      	b.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a30      	ldr	r2, [pc, #192]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d108      	bne.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d01d      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1a      	ldr	r2, [pc, #104]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d10c      	bne.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40001800 	.word	0x40001800

08005e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e040      	b.n	8005f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc fcc4 	bl	8002864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	; 0x24
 8005ee0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fc18 	bl	8006728 <UART_SetConfig>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e022      	b.n	8005f48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fe6e 	bl	8006bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fef5 	bl	8006d30 <UART_CheckIdleState>
 8005f46:	4603      	mov	r3, r0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	f040 8081 	bne.w	800606c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_Transmit+0x26>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e079      	b.n	800606e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Transmit+0x38>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e072      	b.n	800606e <HAL_UART_Transmit+0x11e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2221      	movs	r2, #33	; 0x21
 8005f9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc fdbb 	bl	8002b18 <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d108      	bne.n	8005fd0 <HAL_UART_Transmit+0x80>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e003      	b.n	8005fd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fe0:	e02c      	b.n	800603c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fee8 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e038      	b.n	800606e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	3302      	adds	r3, #2
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e007      	b.n	800602a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1cc      	bne.n	8005fe2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 feb5 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e005      	b.n	800606e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b08a      	sub	sp, #40	; 0x28
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	4613      	mov	r3, r2
 8006082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006088:	2b20      	cmp	r3, #32
 800608a:	d13d      	bne.n	8006108 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_UART_Receive_IT+0x22>
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e036      	b.n	800610a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Receive_IT+0x34>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e02f      	b.n	800610a <HAL_UART_Receive_IT+0x94>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	613b      	str	r3, [r7, #16]
   return(result);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 ff24 	bl	8006f4c <UART_Start_Receive_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	e000      	b.n	800610a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b0ba      	sub	sp, #232	; 0xe8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800613a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800613e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006142:	4013      	ands	r3, r2
 8006144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d115      	bne.n	800617c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 82a4 	beq.w	80066ba <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
      }
      return;
 800617a:	e29e      	b.n	80066ba <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800617c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8117 	beq.w	80063b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006192:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006196:	4b85      	ldr	r3, [pc, #532]	; (80063ac <HAL_UART_IRQHandler+0x298>)
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 810a 	beq.w	80063b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d011      	beq.n	80061d0 <HAL_UART_IRQHandler+0xbc>
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c6:	f043 0201 	orr.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d011      	beq.n	8006200 <HAL_UART_IRQHandler+0xec>
 80061dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2202      	movs	r2, #2
 80061ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d011      	beq.n	8006230 <HAL_UART_IRQHandler+0x11c>
 800620c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2204      	movs	r2, #4
 800621e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006226:	f043 0202 	orr.w	r2, r3, #2
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d017      	beq.n	800626c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2208      	movs	r2, #8
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006262:	f043 0208 	orr.w	r2, r3, #8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800626c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006274:	2b00      	cmp	r3, #0
 8006276:	d012      	beq.n	800629e <HAL_UART_IRQHandler+0x18a>
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00c      	beq.n	800629e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800628c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 820a 	beq.w	80066be <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d005      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d04f      	beq.n	8006396 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fef2 	bl	80070e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d141      	bne.n	800638e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006336:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800633a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800634e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1d9      	bne.n	800630a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <HAL_UART_IRQHandler+0x29c>)
 8006364:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fbf3 	bl	8003b56 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d017      	beq.n	80063a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e00f      	b.n	80063a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9ae 	bl	80066e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e00b      	b.n	80063a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9aa 	bl	80066e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e007      	b.n	80063a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9a6 	bl	80066e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063a4:	e18b      	b.n	80066be <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a6:	bf00      	nop
    return;
 80063a8:	e189      	b.n	80066be <HAL_UART_IRQHandler+0x5aa>
 80063aa:	bf00      	nop
 80063ac:	04000120 	.word	0x04000120
 80063b0:	080071a7 	.word	0x080071a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f040 8144 	bne.w	8006646 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 813d 	beq.w	8006646 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8136 	beq.w	8006646 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2210      	movs	r2, #16
 80063e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	f040 80b2 	bne.w	8006556 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 815d 	beq.w	80066c2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800640e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006412:	429a      	cmp	r2, r3
 8006414:	f080 8155 	bcs.w	80066c2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642c:	f000 8085 	beq.w	800653a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800644c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800645a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800645e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006466:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1da      	bne.n	8006430 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3308      	adds	r3, #8
 8006480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800648a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800649e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e1      	bne.n	800647a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800651c:	65bb      	str	r3, [r7, #88]	; 0x58
 800651e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006522:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e4      	bne.n	80064fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	4618      	mov	r0, r3
 8006536:	f7fd fa9e 	bl	8003a76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006546:	b29b      	uxth	r3, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8d4 	bl	80066fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006554:	e0b5      	b.n	80066c2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006562:	b29b      	uxth	r3, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80a7 	beq.w	80066c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80a2 	beq.w	80066c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
 80065a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e4      	bne.n	8006582 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	623b      	str	r3, [r7, #32]
   return(result);
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065dc:	633a      	str	r2, [r7, #48]	; 0x30
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e3      	bne.n	80065b8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0310 	bic.w	r3, r3, #16
 8006616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	69b9      	ldr	r1, [r7, #24]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	617b      	str	r3, [r7, #20]
   return(result);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e4      	bne.n	8006602 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f85c 	bl	80066fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006644:	e03f      	b.n	80066c6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <HAL_UART_IRQHandler+0x55c>
 8006652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006666:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f853 	bl	8006714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800666e:	e02d      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00e      	beq.n	800669a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01c      	beq.n	80066ca <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
    }
    return;
 8006698:	e017      	b.n	80066ca <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d012      	beq.n	80066cc <HAL_UART_IRQHandler+0x5b8>
 80066a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fd8d 	bl	80071d2 <UART_EndTransmit_IT>
    return;
 80066b8:	e008      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80066ba:	bf00      	nop
 80066bc:	e006      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80066be:	bf00      	nop
 80066c0:	e004      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80066ca:	bf00      	nop
  }

}
 80066cc:	37e8      	adds	r7, #232	; 0xe8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop

080066d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4ba7      	ldr	r3, [pc, #668]	; (80069f0 <UART_SetConfig+0x2c8>)
 8006754:	4013      	ands	r3, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	430b      	orrs	r3, r1
 800675e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a95      	ldr	r2, [pc, #596]	; (80069f4 <UART_SetConfig+0x2cc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d120      	bne.n	80067e6 <UART_SetConfig+0xbe>
 80067a4:	4b94      	ldr	r3, [pc, #592]	; (80069f8 <UART_SetConfig+0x2d0>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d816      	bhi.n	80067e0 <UART_SetConfig+0xb8>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <UART_SetConfig+0x90>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067d5 	.word	0x080067d5
 80067c0:	080067cf 	.word	0x080067cf
 80067c4:	080067db 	.word	0x080067db
 80067c8:	2301      	movs	r3, #1
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e14f      	b.n	8006a6e <UART_SetConfig+0x346>
 80067ce:	2302      	movs	r3, #2
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e14c      	b.n	8006a6e <UART_SetConfig+0x346>
 80067d4:	2304      	movs	r3, #4
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e149      	b.n	8006a6e <UART_SetConfig+0x346>
 80067da:	2308      	movs	r3, #8
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e146      	b.n	8006a6e <UART_SetConfig+0x346>
 80067e0:	2310      	movs	r3, #16
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e143      	b.n	8006a6e <UART_SetConfig+0x346>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a84      	ldr	r2, [pc, #528]	; (80069fc <UART_SetConfig+0x2d4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d132      	bne.n	8006856 <UART_SetConfig+0x12e>
 80067f0:	4b81      	ldr	r3, [pc, #516]	; (80069f8 <UART_SetConfig+0x2d0>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d828      	bhi.n	8006850 <UART_SetConfig+0x128>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <UART_SetConfig+0xdc>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006839 	.word	0x08006839
 8006808:	08006851 	.word	0x08006851
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	08006845 	.word	0x08006845
 8006818:	08006851 	.word	0x08006851
 800681c:	08006851 	.word	0x08006851
 8006820:	08006851 	.word	0x08006851
 8006824:	0800683f 	.word	0x0800683f
 8006828:	08006851 	.word	0x08006851
 800682c:	08006851 	.word	0x08006851
 8006830:	08006851 	.word	0x08006851
 8006834:	0800684b 	.word	0x0800684b
 8006838:	2300      	movs	r3, #0
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e117      	b.n	8006a6e <UART_SetConfig+0x346>
 800683e:	2302      	movs	r3, #2
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e114      	b.n	8006a6e <UART_SetConfig+0x346>
 8006844:	2304      	movs	r3, #4
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e111      	b.n	8006a6e <UART_SetConfig+0x346>
 800684a:	2308      	movs	r3, #8
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e10e      	b.n	8006a6e <UART_SetConfig+0x346>
 8006850:	2310      	movs	r3, #16
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e10b      	b.n	8006a6e <UART_SetConfig+0x346>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a69      	ldr	r2, [pc, #420]	; (8006a00 <UART_SetConfig+0x2d8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d120      	bne.n	80068a2 <UART_SetConfig+0x17a>
 8006860:	4b65      	ldr	r3, [pc, #404]	; (80069f8 <UART_SetConfig+0x2d0>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800686a:	2b30      	cmp	r3, #48	; 0x30
 800686c:	d013      	beq.n	8006896 <UART_SetConfig+0x16e>
 800686e:	2b30      	cmp	r3, #48	; 0x30
 8006870:	d814      	bhi.n	800689c <UART_SetConfig+0x174>
 8006872:	2b20      	cmp	r3, #32
 8006874:	d009      	beq.n	800688a <UART_SetConfig+0x162>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d810      	bhi.n	800689c <UART_SetConfig+0x174>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <UART_SetConfig+0x15c>
 800687e:	2b10      	cmp	r3, #16
 8006880:	d006      	beq.n	8006890 <UART_SetConfig+0x168>
 8006882:	e00b      	b.n	800689c <UART_SetConfig+0x174>
 8006884:	2300      	movs	r3, #0
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e0f1      	b.n	8006a6e <UART_SetConfig+0x346>
 800688a:	2302      	movs	r3, #2
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0ee      	b.n	8006a6e <UART_SetConfig+0x346>
 8006890:	2304      	movs	r3, #4
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e0eb      	b.n	8006a6e <UART_SetConfig+0x346>
 8006896:	2308      	movs	r3, #8
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e0e8      	b.n	8006a6e <UART_SetConfig+0x346>
 800689c:	2310      	movs	r3, #16
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e0e5      	b.n	8006a6e <UART_SetConfig+0x346>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a57      	ldr	r2, [pc, #348]	; (8006a04 <UART_SetConfig+0x2dc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d120      	bne.n	80068ee <UART_SetConfig+0x1c6>
 80068ac:	4b52      	ldr	r3, [pc, #328]	; (80069f8 <UART_SetConfig+0x2d0>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068b6:	2bc0      	cmp	r3, #192	; 0xc0
 80068b8:	d013      	beq.n	80068e2 <UART_SetConfig+0x1ba>
 80068ba:	2bc0      	cmp	r3, #192	; 0xc0
 80068bc:	d814      	bhi.n	80068e8 <UART_SetConfig+0x1c0>
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d009      	beq.n	80068d6 <UART_SetConfig+0x1ae>
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d810      	bhi.n	80068e8 <UART_SetConfig+0x1c0>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <UART_SetConfig+0x1a8>
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d006      	beq.n	80068dc <UART_SetConfig+0x1b4>
 80068ce:	e00b      	b.n	80068e8 <UART_SetConfig+0x1c0>
 80068d0:	2300      	movs	r3, #0
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e0cb      	b.n	8006a6e <UART_SetConfig+0x346>
 80068d6:	2302      	movs	r3, #2
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	e0c8      	b.n	8006a6e <UART_SetConfig+0x346>
 80068dc:	2304      	movs	r3, #4
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e0c5      	b.n	8006a6e <UART_SetConfig+0x346>
 80068e2:	2308      	movs	r3, #8
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e0c2      	b.n	8006a6e <UART_SetConfig+0x346>
 80068e8:	2310      	movs	r3, #16
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e0bf      	b.n	8006a6e <UART_SetConfig+0x346>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a45      	ldr	r2, [pc, #276]	; (8006a08 <UART_SetConfig+0x2e0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d125      	bne.n	8006944 <UART_SetConfig+0x21c>
 80068f8:	4b3f      	ldr	r3, [pc, #252]	; (80069f8 <UART_SetConfig+0x2d0>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006906:	d017      	beq.n	8006938 <UART_SetConfig+0x210>
 8006908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690c:	d817      	bhi.n	800693e <UART_SetConfig+0x216>
 800690e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006912:	d00b      	beq.n	800692c <UART_SetConfig+0x204>
 8006914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006918:	d811      	bhi.n	800693e <UART_SetConfig+0x216>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <UART_SetConfig+0x1fe>
 800691e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006922:	d006      	beq.n	8006932 <UART_SetConfig+0x20a>
 8006924:	e00b      	b.n	800693e <UART_SetConfig+0x216>
 8006926:	2300      	movs	r3, #0
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e0a0      	b.n	8006a6e <UART_SetConfig+0x346>
 800692c:	2302      	movs	r3, #2
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e09d      	b.n	8006a6e <UART_SetConfig+0x346>
 8006932:	2304      	movs	r3, #4
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e09a      	b.n	8006a6e <UART_SetConfig+0x346>
 8006938:	2308      	movs	r3, #8
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e097      	b.n	8006a6e <UART_SetConfig+0x346>
 800693e:	2310      	movs	r3, #16
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e094      	b.n	8006a6e <UART_SetConfig+0x346>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a30      	ldr	r2, [pc, #192]	; (8006a0c <UART_SetConfig+0x2e4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d125      	bne.n	800699a <UART_SetConfig+0x272>
 800694e:	4b2a      	ldr	r3, [pc, #168]	; (80069f8 <UART_SetConfig+0x2d0>)
 8006950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006954:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800695c:	d017      	beq.n	800698e <UART_SetConfig+0x266>
 800695e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006962:	d817      	bhi.n	8006994 <UART_SetConfig+0x26c>
 8006964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006968:	d00b      	beq.n	8006982 <UART_SetConfig+0x25a>
 800696a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696e:	d811      	bhi.n	8006994 <UART_SetConfig+0x26c>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <UART_SetConfig+0x254>
 8006974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006978:	d006      	beq.n	8006988 <UART_SetConfig+0x260>
 800697a:	e00b      	b.n	8006994 <UART_SetConfig+0x26c>
 800697c:	2301      	movs	r3, #1
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e075      	b.n	8006a6e <UART_SetConfig+0x346>
 8006982:	2302      	movs	r3, #2
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e072      	b.n	8006a6e <UART_SetConfig+0x346>
 8006988:	2304      	movs	r3, #4
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e06f      	b.n	8006a6e <UART_SetConfig+0x346>
 800698e:	2308      	movs	r3, #8
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e06c      	b.n	8006a6e <UART_SetConfig+0x346>
 8006994:	2310      	movs	r3, #16
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e069      	b.n	8006a6e <UART_SetConfig+0x346>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <UART_SetConfig+0x2e8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d137      	bne.n	8006a14 <UART_SetConfig+0x2ec>
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <UART_SetConfig+0x2d0>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b2:	d017      	beq.n	80069e4 <UART_SetConfig+0x2bc>
 80069b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b8:	d817      	bhi.n	80069ea <UART_SetConfig+0x2c2>
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069be:	d00b      	beq.n	80069d8 <UART_SetConfig+0x2b0>
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c4:	d811      	bhi.n	80069ea <UART_SetConfig+0x2c2>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <UART_SetConfig+0x2aa>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ce:	d006      	beq.n	80069de <UART_SetConfig+0x2b6>
 80069d0:	e00b      	b.n	80069ea <UART_SetConfig+0x2c2>
 80069d2:	2300      	movs	r3, #0
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e04a      	b.n	8006a6e <UART_SetConfig+0x346>
 80069d8:	2302      	movs	r3, #2
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e047      	b.n	8006a6e <UART_SetConfig+0x346>
 80069de:	2304      	movs	r3, #4
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e044      	b.n	8006a6e <UART_SetConfig+0x346>
 80069e4:	2308      	movs	r3, #8
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e041      	b.n	8006a6e <UART_SetConfig+0x346>
 80069ea:	2310      	movs	r3, #16
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e03e      	b.n	8006a6e <UART_SetConfig+0x346>
 80069f0:	efff69f3 	.word	0xefff69f3
 80069f4:	40011000 	.word	0x40011000
 80069f8:	40023800 	.word	0x40023800
 80069fc:	40004400 	.word	0x40004400
 8006a00:	40004800 	.word	0x40004800
 8006a04:	40004c00 	.word	0x40004c00
 8006a08:	40005000 	.word	0x40005000
 8006a0c:	40011400 	.word	0x40011400
 8006a10:	40007800 	.word	0x40007800
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a71      	ldr	r2, [pc, #452]	; (8006be0 <UART_SetConfig+0x4b8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d125      	bne.n	8006a6a <UART_SetConfig+0x342>
 8006a1e:	4b71      	ldr	r3, [pc, #452]	; (8006be4 <UART_SetConfig+0x4bc>)
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a2c:	d017      	beq.n	8006a5e <UART_SetConfig+0x336>
 8006a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a32:	d817      	bhi.n	8006a64 <UART_SetConfig+0x33c>
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	d00b      	beq.n	8006a52 <UART_SetConfig+0x32a>
 8006a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a3e:	d811      	bhi.n	8006a64 <UART_SetConfig+0x33c>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <UART_SetConfig+0x324>
 8006a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a48:	d006      	beq.n	8006a58 <UART_SetConfig+0x330>
 8006a4a:	e00b      	b.n	8006a64 <UART_SetConfig+0x33c>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e00d      	b.n	8006a6e <UART_SetConfig+0x346>
 8006a52:	2302      	movs	r3, #2
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e00a      	b.n	8006a6e <UART_SetConfig+0x346>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e007      	b.n	8006a6e <UART_SetConfig+0x346>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e004      	b.n	8006a6e <UART_SetConfig+0x346>
 8006a64:	2310      	movs	r3, #16
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e001      	b.n	8006a6e <UART_SetConfig+0x346>
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d15a      	bne.n	8006b2e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d827      	bhi.n	8006ace <UART_SetConfig+0x3a6>
 8006a7e:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x35c>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006acf 	.word	0x08006acf
 8006a94:	08006abf 	.word	0x08006abf
 8006a98:	08006acf 	.word	0x08006acf
 8006a9c:	08006acf 	.word	0x08006acf
 8006aa0:	08006acf 	.word	0x08006acf
 8006aa4:	08006ac7 	.word	0x08006ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa8:	f7fe f8a0 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8006aac:	61b8      	str	r0, [r7, #24]
        break;
 8006aae:	e013      	b.n	8006ad8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab0:	f7fe f8b0 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8006ab4:	61b8      	str	r0, [r7, #24]
        break;
 8006ab6:	e00f      	b.n	8006ad8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab8:	4b4b      	ldr	r3, [pc, #300]	; (8006be8 <UART_SetConfig+0x4c0>)
 8006aba:	61bb      	str	r3, [r7, #24]
        break;
 8006abc:	e00c      	b.n	8006ad8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fd ffa7 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 8006ac2:	61b8      	str	r0, [r7, #24]
        break;
 8006ac4:	e008      	b.n	8006ad8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aca:	61bb      	str	r3, [r7, #24]
        break;
 8006acc:	e004      	b.n	8006ad8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ad6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d074      	beq.n	8006bc8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	005a      	lsls	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	441a      	add	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d916      	bls.n	8006b28 <UART_SetConfig+0x400>
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b00:	d212      	bcs.n	8006b28 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f023 030f 	bic.w	r3, r3, #15
 8006b0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	085b      	lsrs	r3, r3, #1
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	89fb      	ldrh	r3, [r7, #14]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	89fa      	ldrh	r2, [r7, #14]
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	e04f      	b.n	8006bc8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	77bb      	strb	r3, [r7, #30]
 8006b2c:	e04c      	b.n	8006bc8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b2e:	7ffb      	ldrb	r3, [r7, #31]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d828      	bhi.n	8006b86 <UART_SetConfig+0x45e>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x414>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	08006b87 	.word	0x08006b87
 8006b4c:	08006b77 	.word	0x08006b77
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006b87 	.word	0x08006b87
 8006b58:	08006b87 	.word	0x08006b87
 8006b5c:	08006b7f 	.word	0x08006b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fe f844 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8006b64:	61b8      	str	r0, [r7, #24]
        break;
 8006b66:	e013      	b.n	8006b90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b68:	f7fe f854 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8006b6c:	61b8      	str	r0, [r7, #24]
        break;
 8006b6e:	e00f      	b.n	8006b90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <UART_SetConfig+0x4c0>)
 8006b72:	61bb      	str	r3, [r7, #24]
        break;
 8006b74:	e00c      	b.n	8006b90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b76:	f7fd ff4b 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 8006b7a:	61b8      	str	r0, [r7, #24]
        break;
 8006b7c:	e008      	b.n	8006b90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b82:	61bb      	str	r3, [r7, #24]
        break;
 8006b84:	e004      	b.n	8006b90 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	085a      	lsrs	r2, r3, #1
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	441a      	add	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b0f      	cmp	r3, #15
 8006bae:	d909      	bls.n	8006bc4 <UART_SetConfig+0x49c>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb6:	d205      	bcs.n	8006bc4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60da      	str	r2, [r3, #12]
 8006bc2:	e001      	b.n	8006bc8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3720      	adds	r7, #32
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40007c00 	.word	0x40007c00
 8006be4:	40023800 	.word	0x40023800
 8006be8:	00f42400 	.word	0x00f42400

08006bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cea:	d10a      	bne.n	8006d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d40:	f7fb feea 	bl	8002b18 <HAL_GetTick>
 8006d44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d10e      	bne.n	8006d72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f82d 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e023      	b.n	8006dba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d10e      	bne.n	8006d9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f817 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e00d      	b.n	8006dba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b09c      	sub	sp, #112	; 0x70
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd2:	e0a5      	b.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	f000 80a1 	beq.w	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fb fe9b 	bl	8002b18 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d13e      	bne.n	8006e72 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e08:	667b      	str	r3, [r7, #100]	; 0x64
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e067      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d04f      	beq.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e8e:	d147      	bne.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	613b      	str	r3, [r7, #16]
   return(result);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eec:	623a      	str	r2, [r7, #32]
 8006eee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e010      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f43f af4a 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3770      	adds	r7, #112	; 0x70
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b097      	sub	sp, #92	; 0x5c
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	d10e      	bne.n	8006f9e <UART_Start_Receive_IT+0x52>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <UART_Start_Receive_IT+0x48>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f92:	e02d      	b.n	8006ff0 <UART_Start_Receive_IT+0xa4>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	22ff      	movs	r2, #255	; 0xff
 8006f98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f9c:	e028      	b.n	8006ff0 <UART_Start_Receive_IT+0xa4>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10d      	bne.n	8006fc2 <UART_Start_Receive_IT+0x76>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <UART_Start_Receive_IT+0x6c>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	22ff      	movs	r2, #255	; 0xff
 8006fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fb6:	e01b      	b.n	8006ff0 <UART_Start_Receive_IT+0xa4>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	227f      	movs	r2, #127	; 0x7f
 8006fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fc0:	e016      	b.n	8006ff0 <UART_Start_Receive_IT+0xa4>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fca:	d10d      	bne.n	8006fe8 <UART_Start_Receive_IT+0x9c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <UART_Start_Receive_IT+0x92>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	227f      	movs	r2, #127	; 0x7f
 8006fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fdc:	e008      	b.n	8006ff0 <UART_Start_Receive_IT+0xa4>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	223f      	movs	r2, #63	; 0x3f
 8006fe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fe6:	e003      	b.n	8006ff0 <UART_Start_Receive_IT+0xa4>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2222      	movs	r2, #34	; 0x22
 8006ffc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	657b      	str	r3, [r7, #84]	; 0x54
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800701e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800702c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d107      	bne.n	800704c <UART_Start_Receive_IT+0x100>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <UART_Start_Receive_IT+0x18c>)
 8007048:	665a      	str	r2, [r3, #100]	; 0x64
 800704a:	e002      	b.n	8007052 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4a23      	ldr	r2, [pc, #140]	; (80070dc <UART_Start_Receive_IT+0x190>)
 8007050:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d019      	beq.n	8007096 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_Start_Receive_IT+0x116>
 8007094:	e018      	b.n	80070c8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	613b      	str	r3, [r7, #16]
   return(result);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f043 0320 	orr.w	r3, r3, #32
 80070aa:	653b      	str	r3, [r7, #80]	; 0x50
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b4:	623b      	str	r3, [r7, #32]
 80070b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e6      	bne.n	8007096 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	375c      	adds	r7, #92	; 0x5c
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	08007383 	.word	0x08007383
 80070dc:	08007227 	.word	0x08007227

080070e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b095      	sub	sp, #84	; 0x54
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007106:	643b      	str	r3, [r7, #64]	; 0x40
 8007108:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800710c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e6      	bne.n	80070e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	61fb      	str	r3, [r7, #28]
   return(result);
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	64bb      	str	r3, [r7, #72]	; 0x48
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800713a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e5      	bne.n	800711a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007152:	2b01      	cmp	r3, #1
 8007154:	d118      	bne.n	8007188 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	60bb      	str	r3, [r7, #8]
   return(result);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	647b      	str	r3, [r7, #68]	; 0x44
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6979      	ldr	r1, [r7, #20]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	613b      	str	r3, [r7, #16]
   return(result);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e6      	bne.n	8007156 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	665a      	str	r2, [r3, #100]	; 0x64
}
 800719a:	bf00      	nop
 800719c:	3754      	adds	r7, #84	; 0x54
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fa8f 	bl	80066e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b088      	sub	sp, #32
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	613b      	str	r3, [r7, #16]
   return(result);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e6      	bne.n	80071da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff fa5b 	bl	80066d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800721e:	bf00      	nop
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b096      	sub	sp, #88	; 0x58
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007234:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723c:	2b22      	cmp	r3, #34	; 0x22
 800723e:	f040 8094 	bne.w	800736a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800724c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007250:	b2d9      	uxtb	r1, r3
 8007252:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	400a      	ands	r2, r1
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d177      	bne.n	800737a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800729e:	653b      	str	r3, [r7, #80]	; 0x50
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
 80072aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	623b      	str	r3, [r7, #32]
   return(result);
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072dc:	633a      	str	r2, [r7, #48]	; 0x30
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e5      	bne.n	80072bc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007300:	2b01      	cmp	r3, #1
 8007302:	d12e      	bne.n	8007362 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	60fb      	str	r3, [r7, #12]
   return(result);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0310 	bic.w	r3, r3, #16
 800731e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	69b9      	ldr	r1, [r7, #24]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	617b      	str	r3, [r7, #20]
   return(result);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e6      	bne.n	800730a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	2b10      	cmp	r3, #16
 8007348:	d103      	bne.n	8007352 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2210      	movs	r2, #16
 8007350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff f9ce 	bl	80066fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007360:	e00b      	b.n	800737a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fa fcd8 	bl	8001d18 <HAL_UART_RxCpltCallback>
}
 8007368:	e007      	b.n	800737a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0208 	orr.w	r2, r2, #8
 8007378:	619a      	str	r2, [r3, #24]
}
 800737a:	bf00      	nop
 800737c:	3758      	adds	r7, #88	; 0x58
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b096      	sub	sp, #88	; 0x58
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007390:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	2b22      	cmp	r3, #34	; 0x22
 800739a:	f040 8094 	bne.w	80074c6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073b6:	4013      	ands	r3, r2
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d177      	bne.n	80074d6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
 8007406:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800740a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	61fb      	str	r3, [r7, #28]
   return(result);
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007438:	62fa      	str	r2, [r7, #44]	; 0x2c
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800743e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745c:	2b01      	cmp	r3, #1
 800745e:	d12e      	bne.n	80074be <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60bb      	str	r3, [r7, #8]
   return(result);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d103      	bne.n	80074ae <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2210      	movs	r2, #16
 80074ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff f920 	bl	80066fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074bc:	e00b      	b.n	80074d6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fa fc2a 	bl	8001d18 <HAL_UART_RxCpltCallback>
}
 80074c4:	e007      	b.n	80074d6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0208 	orr.w	r2, r2, #8
 80074d4:	619a      	str	r2, [r3, #24]
}
 80074d6:	bf00      	nop
 80074d8:	3758      	adds	r7, #88	; 0x58
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074e0:	b084      	sub	sp, #16
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	f107 001c 	add.w	r0, r7, #28
 80074ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d120      	bne.n	800753a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	4b20      	ldr	r3, [pc, #128]	; (800758c <USB_CoreInit+0xac>)
 800750a:	4013      	ands	r3, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800751c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d105      	bne.n	800752e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa92 	bl	8007a58 <USB_CoreReset>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
 8007538:	e010      	b.n	800755c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa86 	bl	8007a58 <USB_CoreReset>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10b      	bne.n	800757a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f043 0206 	orr.w	r2, r3, #6
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f043 0220 	orr.w	r2, r3, #32
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007586:	b004      	add	sp, #16
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	ffbdffbf 	.word	0xffbdffbf

08007590 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f023 0201 	bic.w	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d115      	bne.n	8007600 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075e0:	2001      	movs	r0, #1
 80075e2:	f7fb faa5 	bl	8002b30 <HAL_Delay>
      ms++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fa25 	bl	8007a3c <USB_GetMode>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d01e      	beq.n	8007636 <USB_SetCurrentMode+0x84>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b31      	cmp	r3, #49	; 0x31
 80075fc:	d9f0      	bls.n	80075e0 <USB_SetCurrentMode+0x2e>
 80075fe:	e01a      	b.n	8007636 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d115      	bne.n	8007632 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007612:	2001      	movs	r0, #1
 8007614:	f7fb fa8c 	bl	8002b30 <HAL_Delay>
      ms++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa0c 	bl	8007a3c <USB_GetMode>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <USB_SetCurrentMode+0x84>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b31      	cmp	r3, #49	; 0x31
 800762e:	d9f0      	bls.n	8007612 <USB_SetCurrentMode+0x60>
 8007630:	e001      	b.n	8007636 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e005      	b.n	8007642 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b32      	cmp	r3, #50	; 0x32
 800763a:	d101      	bne.n	8007640 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800764c:	b084      	sub	sp, #16
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800765a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007666:	2300      	movs	r3, #0
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	e009      	b.n	8007680 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3340      	adds	r3, #64	; 0x40
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	2200      	movs	r2, #0
 8007678:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3301      	adds	r3, #1
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b0e      	cmp	r3, #14
 8007684:	d9f2      	bls.n	800766c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11c      	bne.n	80076c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800769a:	f043 0302 	orr.w	r3, r3, #2
 800769e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e005      	b.n	80076d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076d8:	461a      	mov	r2, r3
 80076da:	2300      	movs	r3, #0
 80076dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	4619      	mov	r1, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	461a      	mov	r2, r3
 80076ee:	680b      	ldr	r3, [r1, #0]
 80076f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d10c      	bne.n	8007712 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f961 	bl	80079c8 <USB_SetDevSpeed>
 8007706:	e008      	b.n	800771a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007708:	2101      	movs	r1, #1
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f95c 	bl	80079c8 <USB_SetDevSpeed>
 8007710:	e003      	b.n	800771a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007712:	2103      	movs	r1, #3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f957 	bl	80079c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800771a:	2110      	movs	r1, #16
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8f3 	bl	8007908 <USB_FlushTxFifo>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f91d 	bl	800796c <USB_FlushRxFifo>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	461a      	mov	r2, r3
 8007744:	2300      	movs	r3, #0
 8007746:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	461a      	mov	r2, r3
 8007750:	2300      	movs	r3, #0
 8007752:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	461a      	mov	r2, r3
 800775c:	2300      	movs	r3, #0
 800775e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	e043      	b.n	80077ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800777c:	d118      	bne.n	80077b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	461a      	mov	r2, r3
 8007792:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	e013      	b.n	80077c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	461a      	mov	r2, r3
 80077a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	e008      	b.n	80077c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	461a      	mov	r2, r3
 80077be:	2300      	movs	r3, #0
 80077c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ce:	461a      	mov	r2, r3
 80077d0:	2300      	movs	r3, #0
 80077d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	461a      	mov	r2, r3
 80077e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	3301      	adds	r3, #1
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d3b7      	bcc.n	8007766 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	e043      	b.n	8007884 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007812:	d118      	bne.n	8007846 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	461a      	mov	r2, r3
 8007828:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	e013      	b.n	8007858 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783c:	461a      	mov	r2, r3
 800783e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	e008      	b.n	8007858 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	461a      	mov	r2, r3
 8007854:	2300      	movs	r3, #0
 8007856:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	461a      	mov	r2, r3
 8007866:	2300      	movs	r3, #0
 8007868:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007876:	461a      	mov	r2, r3
 8007878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800787c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3301      	adds	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d3b7      	bcc.n	80077fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800789a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f043 0210 	orr.w	r2, r3, #16
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <USB_DevInit+0x2b4>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	f043 0208 	orr.w	r2, r3, #8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d105      	bne.n	80078f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <USB_DevInit+0x2b8>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078fc:	b004      	add	sp, #16
 80078fe:	4770      	bx	lr
 8007900:	803c3800 	.word	0x803c3800
 8007904:	40000004 	.word	0x40000004

08007908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	4a12      	ldr	r2, [pc, #72]	; (8007968 <USB_FlushTxFifo+0x60>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d901      	bls.n	8007926 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e01a      	b.n	800795c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	daf3      	bge.n	8007916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	019b      	lsls	r3, r3, #6
 8007936:	f043 0220 	orr.w	r2, r3, #32
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	4a08      	ldr	r2, [pc, #32]	; (8007968 <USB_FlushTxFifo+0x60>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e006      	b.n	800795c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b20      	cmp	r3, #32
 8007958:	d0f1      	beq.n	800793e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	00030d40 	.word	0x00030d40

0800796c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	4a11      	ldr	r2, [pc, #68]	; (80079c4 <USB_FlushRxFifo+0x58>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e017      	b.n	80079b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	daf3      	bge.n	8007978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2210      	movs	r2, #16
 8007998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	4a08      	ldr	r2, [pc, #32]	; (80079c4 <USB_FlushRxFifo+0x58>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d901      	bls.n	80079aa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e006      	b.n	80079b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d0f1      	beq.n	800799a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	00030d40 	.word	0x00030d40

080079c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079e8:	4313      	orrs	r3, r2
 80079ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a14:	f023 0303 	bic.w	r3, r3, #3
 8007a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a28:	f043 0302 	orr.w	r3, r3, #2
 8007a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	f003 0301 	and.w	r3, r3, #1
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	4a13      	ldr	r2, [pc, #76]	; (8007ab8 <USB_CoreReset+0x60>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d901      	bls.n	8007a74 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e01a      	b.n	8007aaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	daf3      	bge.n	8007a64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	f043 0201 	orr.w	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	4a09      	ldr	r2, [pc, #36]	; (8007ab8 <USB_CoreReset+0x60>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d901      	bls.n	8007a9c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e006      	b.n	8007aaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d0f1      	beq.n	8007a8c <USB_CoreReset+0x34>

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	00030d40 	.word	0x00030d40

08007abc <atoi>:
 8007abc:	220a      	movs	r2, #10
 8007abe:	2100      	movs	r1, #0
 8007ac0:	f000 bd2a 	b.w	8008518 <strtol>

08007ac4 <__errno>:
 8007ac4:	4b01      	ldr	r3, [pc, #4]	; (8007acc <__errno+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000028 	.word	0x20000028

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4d0d      	ldr	r5, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2600      	movs	r6, #0
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4d0b      	ldr	r5, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f002 fec4 	bl	800a870 <_init>
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2600      	movs	r6, #0
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	0800ad14 	.word	0x0800ad14
 8007b0c:	0800ad14 	.word	0x0800ad14
 8007b10:	0800ad14 	.word	0x0800ad14
 8007b14:	0800ad18 	.word	0x0800ad18

08007b18 <memset>:
 8007b18:	4402      	add	r2, r0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <__cvt>:
 8007b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b2a:	ed2d 8b02 	vpush	{d8}
 8007b2e:	eeb0 8b40 	vmov.f64	d8, d0
 8007b32:	b085      	sub	sp, #20
 8007b34:	4617      	mov	r7, r2
 8007b36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b3a:	ee18 2a90 	vmov	r2, s17
 8007b3e:	f025 0520 	bic.w	r5, r5, #32
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	bfb6      	itet	lt
 8007b46:	222d      	movlt	r2, #45	; 0x2d
 8007b48:	2200      	movge	r2, #0
 8007b4a:	eeb1 8b40 	vneglt.f64	d8, d0
 8007b4e:	2d46      	cmp	r5, #70	; 0x46
 8007b50:	460c      	mov	r4, r1
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	d004      	beq.n	8007b60 <__cvt+0x38>
 8007b56:	2d45      	cmp	r5, #69	; 0x45
 8007b58:	d100      	bne.n	8007b5c <__cvt+0x34>
 8007b5a:	3401      	adds	r4, #1
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	e000      	b.n	8007b62 <__cvt+0x3a>
 8007b60:	2103      	movs	r1, #3
 8007b62:	ab03      	add	r3, sp, #12
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	ab02      	add	r3, sp, #8
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	4633      	mov	r3, r6
 8007b6e:	eeb0 0b48 	vmov.f64	d0, d8
 8007b72:	f000 fd69 	bl	8008648 <_dtoa_r>
 8007b76:	2d47      	cmp	r5, #71	; 0x47
 8007b78:	d109      	bne.n	8007b8e <__cvt+0x66>
 8007b7a:	07fb      	lsls	r3, r7, #31
 8007b7c:	d407      	bmi.n	8007b8e <__cvt+0x66>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b82:	1a1b      	subs	r3, r3, r0
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	b005      	add	sp, #20
 8007b88:	ecbd 8b02 	vpop	{d8}
 8007b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b8e:	2d46      	cmp	r5, #70	; 0x46
 8007b90:	eb00 0204 	add.w	r2, r0, r4
 8007b94:	d10c      	bne.n	8007bb0 <__cvt+0x88>
 8007b96:	7803      	ldrb	r3, [r0, #0]
 8007b98:	2b30      	cmp	r3, #48	; 0x30
 8007b9a:	d107      	bne.n	8007bac <__cvt+0x84>
 8007b9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba4:	bf1c      	itt	ne
 8007ba6:	f1c4 0401 	rsbne	r4, r4, #1
 8007baa:	6034      	strne	r4, [r6, #0]
 8007bac:	6833      	ldr	r3, [r6, #0]
 8007bae:	441a      	add	r2, r3
 8007bb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb8:	bf08      	it	eq
 8007bba:	9203      	streq	r2, [sp, #12]
 8007bbc:	2130      	movs	r1, #48	; 0x30
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d2dc      	bcs.n	8007b7e <__cvt+0x56>
 8007bc4:	1c5c      	adds	r4, r3, #1
 8007bc6:	9403      	str	r4, [sp, #12]
 8007bc8:	7019      	strb	r1, [r3, #0]
 8007bca:	e7f8      	b.n	8007bbe <__cvt+0x96>

08007bcc <__exponent>:
 8007bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	bfb8      	it	lt
 8007bd4:	4249      	neglt	r1, r1
 8007bd6:	f803 2b02 	strb.w	r2, [r3], #2
 8007bda:	bfb4      	ite	lt
 8007bdc:	222d      	movlt	r2, #45	; 0x2d
 8007bde:	222b      	movge	r2, #43	; 0x2b
 8007be0:	2909      	cmp	r1, #9
 8007be2:	7042      	strb	r2, [r0, #1]
 8007be4:	dd2a      	ble.n	8007c3c <__exponent+0x70>
 8007be6:	f10d 0407 	add.w	r4, sp, #7
 8007bea:	46a4      	mov	ip, r4
 8007bec:	270a      	movs	r7, #10
 8007bee:	46a6      	mov	lr, r4
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bf6:	fb07 1516 	mls	r5, r7, r6, r1
 8007bfa:	3530      	adds	r5, #48	; 0x30
 8007bfc:	2a63      	cmp	r2, #99	; 0x63
 8007bfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c06:	4631      	mov	r1, r6
 8007c08:	dcf1      	bgt.n	8007bee <__exponent+0x22>
 8007c0a:	3130      	adds	r1, #48	; 0x30
 8007c0c:	f1ae 0502 	sub.w	r5, lr, #2
 8007c10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c14:	1c44      	adds	r4, r0, #1
 8007c16:	4629      	mov	r1, r5
 8007c18:	4561      	cmp	r1, ip
 8007c1a:	d30a      	bcc.n	8007c32 <__exponent+0x66>
 8007c1c:	f10d 0209 	add.w	r2, sp, #9
 8007c20:	eba2 020e 	sub.w	r2, r2, lr
 8007c24:	4565      	cmp	r5, ip
 8007c26:	bf88      	it	hi
 8007c28:	2200      	movhi	r2, #0
 8007c2a:	4413      	add	r3, r2
 8007c2c:	1a18      	subs	r0, r3, r0
 8007c2e:	b003      	add	sp, #12
 8007c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c3a:	e7ed      	b.n	8007c18 <__exponent+0x4c>
 8007c3c:	2330      	movs	r3, #48	; 0x30
 8007c3e:	3130      	adds	r1, #48	; 0x30
 8007c40:	7083      	strb	r3, [r0, #2]
 8007c42:	70c1      	strb	r1, [r0, #3]
 8007c44:	1d03      	adds	r3, r0, #4
 8007c46:	e7f1      	b.n	8007c2c <__exponent+0x60>

08007c48 <_printf_float>:
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	b08b      	sub	sp, #44	; 0x2c
 8007c4e:	460c      	mov	r4, r1
 8007c50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007c54:	4616      	mov	r6, r2
 8007c56:	461f      	mov	r7, r3
 8007c58:	4605      	mov	r5, r0
 8007c5a:	f001 fa77 	bl	800914c <_localeconv_r>
 8007c5e:	f8d0 b000 	ldr.w	fp, [r0]
 8007c62:	4658      	mov	r0, fp
 8007c64:	f7f8 faec 	bl	8000240 <strlen>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9308      	str	r3, [sp, #32]
 8007c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	f103 0108 	add.w	r1, r3, #8
 8007c80:	f8c8 1000 	str.w	r1, [r8]
 8007c84:	4682      	mov	sl, r0
 8007c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007c8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007ef0 <_printf_float+0x2a8>
 8007c92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007c96:	eeb0 6bc0 	vabs.f64	d6, d0
 8007c9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca2:	dd24      	ble.n	8007cee <_printf_float+0xa6>
 8007ca4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	d502      	bpl.n	8007cb4 <_printf_float+0x6c>
 8007cae:	232d      	movs	r3, #45	; 0x2d
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	4b90      	ldr	r3, [pc, #576]	; (8007ef8 <_printf_float+0x2b0>)
 8007cb6:	4891      	ldr	r0, [pc, #580]	; (8007efc <_printf_float+0x2b4>)
 8007cb8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007cbc:	bf94      	ite	ls
 8007cbe:	4698      	movls	r8, r3
 8007cc0:	4680      	movhi	r8, r0
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	f022 0204 	bic.w	r2, r2, #4
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6022      	str	r2, [r4, #0]
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	9700      	str	r7, [sp, #0]
 8007cd2:	4633      	mov	r3, r6
 8007cd4:	aa09      	add	r2, sp, #36	; 0x24
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f9d3 	bl	8008084 <_printf_common>
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f040 808a 	bne.w	8007df8 <_printf_float+0x1b0>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	b00b      	add	sp, #44	; 0x2c
 8007cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	eeb4 0b40 	vcmp.f64	d0, d0
 8007cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf6:	d709      	bvc.n	8007d0c <_printf_float+0xc4>
 8007cf8:	ee10 3a90 	vmov	r3, s1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfbc      	itt	lt
 8007d00:	232d      	movlt	r3, #45	; 0x2d
 8007d02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d06:	487e      	ldr	r0, [pc, #504]	; (8007f00 <_printf_float+0x2b8>)
 8007d08:	4b7e      	ldr	r3, [pc, #504]	; (8007f04 <_printf_float+0x2bc>)
 8007d0a:	e7d5      	b.n	8007cb8 <_printf_float+0x70>
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d12:	9104      	str	r1, [sp, #16]
 8007d14:	1c59      	adds	r1, r3, #1
 8007d16:	d13c      	bne.n	8007d92 <_printf_float+0x14a>
 8007d18:	2306      	movs	r3, #6
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	ab08      	add	r3, sp, #32
 8007d22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007d26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d2a:	ab07      	add	r3, sp, #28
 8007d2c:	6861      	ldr	r1, [r4, #4]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	6022      	str	r2, [r4, #0]
 8007d32:	f10d 031b 	add.w	r3, sp, #27
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7ff fef6 	bl	8007b28 <__cvt>
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	9907      	ldr	r1, [sp, #28]
 8007d40:	2b47      	cmp	r3, #71	; 0x47
 8007d42:	4680      	mov	r8, r0
 8007d44:	d108      	bne.n	8007d58 <_printf_float+0x110>
 8007d46:	1cc8      	adds	r0, r1, #3
 8007d48:	db02      	blt.n	8007d50 <_printf_float+0x108>
 8007d4a:	6863      	ldr	r3, [r4, #4]
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	dd41      	ble.n	8007dd4 <_printf_float+0x18c>
 8007d50:	f1a9 0902 	sub.w	r9, r9, #2
 8007d54:	fa5f f989 	uxtb.w	r9, r9
 8007d58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d5c:	d820      	bhi.n	8007da0 <_printf_float+0x158>
 8007d5e:	3901      	subs	r1, #1
 8007d60:	464a      	mov	r2, r9
 8007d62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d66:	9107      	str	r1, [sp, #28]
 8007d68:	f7ff ff30 	bl	8007bcc <__exponent>
 8007d6c:	9a08      	ldr	r2, [sp, #32]
 8007d6e:	9004      	str	r0, [sp, #16]
 8007d70:	1813      	adds	r3, r2, r0
 8007d72:	2a01      	cmp	r2, #1
 8007d74:	6123      	str	r3, [r4, #16]
 8007d76:	dc02      	bgt.n	8007d7e <_printf_float+0x136>
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	07d2      	lsls	r2, r2, #31
 8007d7c:	d501      	bpl.n	8007d82 <_printf_float+0x13a>
 8007d7e:	3301      	adds	r3, #1
 8007d80:	6123      	str	r3, [r4, #16]
 8007d82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0a2      	beq.n	8007cd0 <_printf_float+0x88>
 8007d8a:	232d      	movs	r3, #45	; 0x2d
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d90:	e79e      	b.n	8007cd0 <_printf_float+0x88>
 8007d92:	9904      	ldr	r1, [sp, #16]
 8007d94:	2947      	cmp	r1, #71	; 0x47
 8007d96:	d1c1      	bne.n	8007d1c <_printf_float+0xd4>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1bf      	bne.n	8007d1c <_printf_float+0xd4>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e7bc      	b.n	8007d1a <_printf_float+0xd2>
 8007da0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007da4:	d118      	bne.n	8007dd8 <_printf_float+0x190>
 8007da6:	2900      	cmp	r1, #0
 8007da8:	6863      	ldr	r3, [r4, #4]
 8007daa:	dd0b      	ble.n	8007dc4 <_printf_float+0x17c>
 8007dac:	6121      	str	r1, [r4, #16]
 8007dae:	b913      	cbnz	r3, 8007db6 <_printf_float+0x16e>
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	07d0      	lsls	r0, r2, #31
 8007db4:	d502      	bpl.n	8007dbc <_printf_float+0x174>
 8007db6:	3301      	adds	r3, #1
 8007db8:	440b      	add	r3, r1
 8007dba:	6123      	str	r3, [r4, #16]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	e7de      	b.n	8007d82 <_printf_float+0x13a>
 8007dc4:	b913      	cbnz	r3, 8007dcc <_printf_float+0x184>
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	07d2      	lsls	r2, r2, #31
 8007dca:	d501      	bpl.n	8007dd0 <_printf_float+0x188>
 8007dcc:	3302      	adds	r3, #2
 8007dce:	e7f4      	b.n	8007dba <_printf_float+0x172>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e7f2      	b.n	8007dba <_printf_float+0x172>
 8007dd4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	db05      	blt.n	8007dea <_printf_float+0x1a2>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	6121      	str	r1, [r4, #16]
 8007de2:	07d8      	lsls	r0, r3, #31
 8007de4:	d5ea      	bpl.n	8007dbc <_printf_float+0x174>
 8007de6:	1c4b      	adds	r3, r1, #1
 8007de8:	e7e7      	b.n	8007dba <_printf_float+0x172>
 8007dea:	2900      	cmp	r1, #0
 8007dec:	bfd4      	ite	le
 8007dee:	f1c1 0202 	rsble	r2, r1, #2
 8007df2:	2201      	movgt	r2, #1
 8007df4:	4413      	add	r3, r2
 8007df6:	e7e0      	b.n	8007dba <_printf_float+0x172>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	055a      	lsls	r2, r3, #21
 8007dfc:	d407      	bmi.n	8007e0e <_printf_float+0x1c6>
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	4642      	mov	r2, r8
 8007e02:	4631      	mov	r1, r6
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d12a      	bne.n	8007e62 <_printf_float+0x21a>
 8007e0c:	e76a      	b.n	8007ce4 <_printf_float+0x9c>
 8007e0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e12:	f240 80e2 	bls.w	8007fda <_printf_float+0x392>
 8007e16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e22:	d133      	bne.n	8007e8c <_printf_float+0x244>
 8007e24:	4a38      	ldr	r2, [pc, #224]	; (8007f08 <_printf_float+0x2c0>)
 8007e26:	2301      	movs	r3, #1
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f af58 	beq.w	8007ce4 <_printf_float+0x9c>
 8007e34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	db02      	blt.n	8007e42 <_printf_float+0x1fa>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07d8      	lsls	r0, r3, #31
 8007e40:	d50f      	bpl.n	8007e62 <_printf_float+0x21a>
 8007e42:	4653      	mov	r3, sl
 8007e44:	465a      	mov	r2, fp
 8007e46:	4631      	mov	r1, r6
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b8      	blx	r7
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f43f af49 	beq.w	8007ce4 <_printf_float+0x9c>
 8007e52:	f04f 0800 	mov.w	r8, #0
 8007e56:	f104 091a 	add.w	r9, r4, #26
 8007e5a:	9b08      	ldr	r3, [sp, #32]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4543      	cmp	r3, r8
 8007e60:	dc09      	bgt.n	8007e76 <_printf_float+0x22e>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	079b      	lsls	r3, r3, #30
 8007e66:	f100 8108 	bmi.w	800807a <_printf_float+0x432>
 8007e6a:	68e0      	ldr	r0, [r4, #12]
 8007e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6e:	4298      	cmp	r0, r3
 8007e70:	bfb8      	it	lt
 8007e72:	4618      	movlt	r0, r3
 8007e74:	e738      	b.n	8007ce8 <_printf_float+0xa0>
 8007e76:	2301      	movs	r3, #1
 8007e78:	464a      	mov	r2, r9
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	f43f af2f 	beq.w	8007ce4 <_printf_float+0x9c>
 8007e86:	f108 0801 	add.w	r8, r8, #1
 8007e8a:	e7e6      	b.n	8007e5a <_printf_float+0x212>
 8007e8c:	9b07      	ldr	r3, [sp, #28]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dc3c      	bgt.n	8007f0c <_printf_float+0x2c4>
 8007e92:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <_printf_float+0x2c0>)
 8007e94:	2301      	movs	r3, #1
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f43f af21 	beq.w	8007ce4 <_printf_float+0x9c>
 8007ea2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d102      	bne.n	8007eb0 <_printf_float+0x268>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	07d9      	lsls	r1, r3, #31
 8007eae:	d5d8      	bpl.n	8007e62 <_printf_float+0x21a>
 8007eb0:	4653      	mov	r3, sl
 8007eb2:	465a      	mov	r2, fp
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f af12 	beq.w	8007ce4 <_printf_float+0x9c>
 8007ec0:	f04f 0900 	mov.w	r9, #0
 8007ec4:	f104 0a1a 	add.w	sl, r4, #26
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	425b      	negs	r3, r3
 8007ecc:	454b      	cmp	r3, r9
 8007ece:	dc01      	bgt.n	8007ed4 <_printf_float+0x28c>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	e795      	b.n	8007e00 <_printf_float+0x1b8>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4628      	mov	r0, r5
 8007edc:	47b8      	blx	r7
 8007ede:	3001      	adds	r0, #1
 8007ee0:	f43f af00 	beq.w	8007ce4 <_printf_float+0x9c>
 8007ee4:	f109 0901 	add.w	r9, r9, #1
 8007ee8:	e7ee      	b.n	8007ec8 <_printf_float+0x280>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	ffffffff 	.word	0xffffffff
 8007ef4:	7fefffff 	.word	0x7fefffff
 8007ef8:	0800a928 	.word	0x0800a928
 8007efc:	0800a92c 	.word	0x0800a92c
 8007f00:	0800a934 	.word	0x0800a934
 8007f04:	0800a930 	.word	0x0800a930
 8007f08:	0800a938 	.word	0x0800a938
 8007f0c:	9a08      	ldr	r2, [sp, #32]
 8007f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f10:	429a      	cmp	r2, r3
 8007f12:	bfa8      	it	ge
 8007f14:	461a      	movge	r2, r3
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	4691      	mov	r9, r2
 8007f1a:	dc38      	bgt.n	8007f8e <_printf_float+0x346>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9305      	str	r3, [sp, #20]
 8007f20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f24:	f104 021a 	add.w	r2, r4, #26
 8007f28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f2a:	9905      	ldr	r1, [sp, #20]
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	eba3 0309 	sub.w	r3, r3, r9
 8007f32:	428b      	cmp	r3, r1
 8007f34:	dc33      	bgt.n	8007f9e <_printf_float+0x356>
 8007f36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	db3c      	blt.n	8007fb8 <_printf_float+0x370>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	07da      	lsls	r2, r3, #31
 8007f42:	d439      	bmi.n	8007fb8 <_printf_float+0x370>
 8007f44:	9a08      	ldr	r2, [sp, #32]
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	9907      	ldr	r1, [sp, #28]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	eba2 0901 	sub.w	r9, r2, r1
 8007f50:	4599      	cmp	r9, r3
 8007f52:	bfa8      	it	ge
 8007f54:	4699      	movge	r9, r3
 8007f56:	f1b9 0f00 	cmp.w	r9, #0
 8007f5a:	dc35      	bgt.n	8007fc8 <_printf_float+0x380>
 8007f5c:	f04f 0800 	mov.w	r8, #0
 8007f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f64:	f104 0a1a 	add.w	sl, r4, #26
 8007f68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	eba3 0309 	sub.w	r3, r3, r9
 8007f72:	4543      	cmp	r3, r8
 8007f74:	f77f af75 	ble.w	8007e62 <_printf_float+0x21a>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	f43f aeae 	beq.w	8007ce4 <_printf_float+0x9c>
 8007f88:	f108 0801 	add.w	r8, r8, #1
 8007f8c:	e7ec      	b.n	8007f68 <_printf_float+0x320>
 8007f8e:	4613      	mov	r3, r2
 8007f90:	4631      	mov	r1, r6
 8007f92:	4642      	mov	r2, r8
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d1bf      	bne.n	8007f1c <_printf_float+0x2d4>
 8007f9c:	e6a2      	b.n	8007ce4 <_printf_float+0x9c>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	9204      	str	r2, [sp, #16]
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	f43f ae9b 	beq.w	8007ce4 <_printf_float+0x9c>
 8007fae:	9b05      	ldr	r3, [sp, #20]
 8007fb0:	9a04      	ldr	r2, [sp, #16]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	e7b7      	b.n	8007f28 <_printf_float+0x2e0>
 8007fb8:	4653      	mov	r3, sl
 8007fba:	465a      	mov	r2, fp
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d1be      	bne.n	8007f44 <_printf_float+0x2fc>
 8007fc6:	e68d      	b.n	8007ce4 <_printf_float+0x9c>
 8007fc8:	9a04      	ldr	r2, [sp, #16]
 8007fca:	464b      	mov	r3, r9
 8007fcc:	4442      	add	r2, r8
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b8      	blx	r7
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d1c1      	bne.n	8007f5c <_printf_float+0x314>
 8007fd8:	e684      	b.n	8007ce4 <_printf_float+0x9c>
 8007fda:	9a08      	ldr	r2, [sp, #32]
 8007fdc:	2a01      	cmp	r2, #1
 8007fde:	dc01      	bgt.n	8007fe4 <_printf_float+0x39c>
 8007fe0:	07db      	lsls	r3, r3, #31
 8007fe2:	d537      	bpl.n	8008054 <_printf_float+0x40c>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4642      	mov	r2, r8
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f ae78 	beq.w	8007ce4 <_printf_float+0x9c>
 8007ff4:	4653      	mov	r3, sl
 8007ff6:	465a      	mov	r2, fp
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f ae70 	beq.w	8007ce4 <_printf_float+0x9c>
 8008004:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008008:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800800c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008010:	d01b      	beq.n	800804a <_printf_float+0x402>
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	f108 0201 	add.w	r2, r8, #1
 8008018:	3b01      	subs	r3, #1
 800801a:	4631      	mov	r1, r6
 800801c:	4628      	mov	r0, r5
 800801e:	47b8      	blx	r7
 8008020:	3001      	adds	r0, #1
 8008022:	d10e      	bne.n	8008042 <_printf_float+0x3fa>
 8008024:	e65e      	b.n	8007ce4 <_printf_float+0x9c>
 8008026:	2301      	movs	r3, #1
 8008028:	464a      	mov	r2, r9
 800802a:	4631      	mov	r1, r6
 800802c:	4628      	mov	r0, r5
 800802e:	47b8      	blx	r7
 8008030:	3001      	adds	r0, #1
 8008032:	f43f ae57 	beq.w	8007ce4 <_printf_float+0x9c>
 8008036:	f108 0801 	add.w	r8, r8, #1
 800803a:	9b08      	ldr	r3, [sp, #32]
 800803c:	3b01      	subs	r3, #1
 800803e:	4543      	cmp	r3, r8
 8008040:	dcf1      	bgt.n	8008026 <_printf_float+0x3de>
 8008042:	9b04      	ldr	r3, [sp, #16]
 8008044:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008048:	e6db      	b.n	8007e02 <_printf_float+0x1ba>
 800804a:	f04f 0800 	mov.w	r8, #0
 800804e:	f104 091a 	add.w	r9, r4, #26
 8008052:	e7f2      	b.n	800803a <_printf_float+0x3f2>
 8008054:	2301      	movs	r3, #1
 8008056:	4642      	mov	r2, r8
 8008058:	e7df      	b.n	800801a <_printf_float+0x3d2>
 800805a:	2301      	movs	r3, #1
 800805c:	464a      	mov	r2, r9
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	47b8      	blx	r7
 8008064:	3001      	adds	r0, #1
 8008066:	f43f ae3d 	beq.w	8007ce4 <_printf_float+0x9c>
 800806a:	f108 0801 	add.w	r8, r8, #1
 800806e:	68e3      	ldr	r3, [r4, #12]
 8008070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008072:	1a5b      	subs	r3, r3, r1
 8008074:	4543      	cmp	r3, r8
 8008076:	dcf0      	bgt.n	800805a <_printf_float+0x412>
 8008078:	e6f7      	b.n	8007e6a <_printf_float+0x222>
 800807a:	f04f 0800 	mov.w	r8, #0
 800807e:	f104 0919 	add.w	r9, r4, #25
 8008082:	e7f4      	b.n	800806e <_printf_float+0x426>

08008084 <_printf_common>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	4616      	mov	r6, r2
 800808a:	4699      	mov	r9, r3
 800808c:	688a      	ldr	r2, [r1, #8]
 800808e:	690b      	ldr	r3, [r1, #16]
 8008090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008094:	4293      	cmp	r3, r2
 8008096:	bfb8      	it	lt
 8008098:	4613      	movlt	r3, r2
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a0:	4607      	mov	r7, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	b10a      	cbz	r2, 80080aa <_printf_common+0x26>
 80080a6:	3301      	adds	r3, #1
 80080a8:	6033      	str	r3, [r6, #0]
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	0699      	lsls	r1, r3, #26
 80080ae:	bf42      	ittt	mi
 80080b0:	6833      	ldrmi	r3, [r6, #0]
 80080b2:	3302      	addmi	r3, #2
 80080b4:	6033      	strmi	r3, [r6, #0]
 80080b6:	6825      	ldr	r5, [r4, #0]
 80080b8:	f015 0506 	ands.w	r5, r5, #6
 80080bc:	d106      	bne.n	80080cc <_printf_common+0x48>
 80080be:	f104 0a19 	add.w	sl, r4, #25
 80080c2:	68e3      	ldr	r3, [r4, #12]
 80080c4:	6832      	ldr	r2, [r6, #0]
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	dc26      	bgt.n	800811a <_printf_common+0x96>
 80080cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080d0:	1e13      	subs	r3, r2, #0
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	bf18      	it	ne
 80080d6:	2301      	movne	r3, #1
 80080d8:	0692      	lsls	r2, r2, #26
 80080da:	d42b      	bmi.n	8008134 <_printf_common+0xb0>
 80080dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080e0:	4649      	mov	r1, r9
 80080e2:	4638      	mov	r0, r7
 80080e4:	47c0      	blx	r8
 80080e6:	3001      	adds	r0, #1
 80080e8:	d01e      	beq.n	8008128 <_printf_common+0xa4>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	68e5      	ldr	r5, [r4, #12]
 80080ee:	6832      	ldr	r2, [r6, #0]
 80080f0:	f003 0306 	and.w	r3, r3, #6
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	bf08      	it	eq
 80080f8:	1aad      	subeq	r5, r5, r2
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	6922      	ldr	r2, [r4, #16]
 80080fe:	bf0c      	ite	eq
 8008100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008104:	2500      	movne	r5, #0
 8008106:	4293      	cmp	r3, r2
 8008108:	bfc4      	itt	gt
 800810a:	1a9b      	subgt	r3, r3, r2
 800810c:	18ed      	addgt	r5, r5, r3
 800810e:	2600      	movs	r6, #0
 8008110:	341a      	adds	r4, #26
 8008112:	42b5      	cmp	r5, r6
 8008114:	d11a      	bne.n	800814c <_printf_common+0xc8>
 8008116:	2000      	movs	r0, #0
 8008118:	e008      	b.n	800812c <_printf_common+0xa8>
 800811a:	2301      	movs	r3, #1
 800811c:	4652      	mov	r2, sl
 800811e:	4649      	mov	r1, r9
 8008120:	4638      	mov	r0, r7
 8008122:	47c0      	blx	r8
 8008124:	3001      	adds	r0, #1
 8008126:	d103      	bne.n	8008130 <_printf_common+0xac>
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008130:	3501      	adds	r5, #1
 8008132:	e7c6      	b.n	80080c2 <_printf_common+0x3e>
 8008134:	18e1      	adds	r1, r4, r3
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	2030      	movs	r0, #48	; 0x30
 800813a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800813e:	4422      	add	r2, r4
 8008140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008148:	3302      	adds	r3, #2
 800814a:	e7c7      	b.n	80080dc <_printf_common+0x58>
 800814c:	2301      	movs	r3, #1
 800814e:	4622      	mov	r2, r4
 8008150:	4649      	mov	r1, r9
 8008152:	4638      	mov	r0, r7
 8008154:	47c0      	blx	r8
 8008156:	3001      	adds	r0, #1
 8008158:	d0e6      	beq.n	8008128 <_printf_common+0xa4>
 800815a:	3601      	adds	r6, #1
 800815c:	e7d9      	b.n	8008112 <_printf_common+0x8e>
	...

08008160 <_printf_i>:
 8008160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	4691      	mov	r9, r2
 8008168:	7e27      	ldrb	r7, [r4, #24]
 800816a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800816c:	2f78      	cmp	r7, #120	; 0x78
 800816e:	4680      	mov	r8, r0
 8008170:	469a      	mov	sl, r3
 8008172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008176:	d807      	bhi.n	8008188 <_printf_i+0x28>
 8008178:	2f62      	cmp	r7, #98	; 0x62
 800817a:	d80a      	bhi.n	8008192 <_printf_i+0x32>
 800817c:	2f00      	cmp	r7, #0
 800817e:	f000 80d8 	beq.w	8008332 <_printf_i+0x1d2>
 8008182:	2f58      	cmp	r7, #88	; 0x58
 8008184:	f000 80a3 	beq.w	80082ce <_printf_i+0x16e>
 8008188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800818c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008190:	e03a      	b.n	8008208 <_printf_i+0xa8>
 8008192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008196:	2b15      	cmp	r3, #21
 8008198:	d8f6      	bhi.n	8008188 <_printf_i+0x28>
 800819a:	a001      	add	r0, pc, #4	; (adr r0, 80081a0 <_printf_i+0x40>)
 800819c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081a0:	080081f9 	.word	0x080081f9
 80081a4:	0800820d 	.word	0x0800820d
 80081a8:	08008189 	.word	0x08008189
 80081ac:	08008189 	.word	0x08008189
 80081b0:	08008189 	.word	0x08008189
 80081b4:	08008189 	.word	0x08008189
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	08008189 	.word	0x08008189
 80081c0:	08008189 	.word	0x08008189
 80081c4:	08008189 	.word	0x08008189
 80081c8:	08008189 	.word	0x08008189
 80081cc:	08008319 	.word	0x08008319
 80081d0:	0800823d 	.word	0x0800823d
 80081d4:	080082fb 	.word	0x080082fb
 80081d8:	08008189 	.word	0x08008189
 80081dc:	08008189 	.word	0x08008189
 80081e0:	0800833b 	.word	0x0800833b
 80081e4:	08008189 	.word	0x08008189
 80081e8:	0800823d 	.word	0x0800823d
 80081ec:	08008189 	.word	0x08008189
 80081f0:	08008189 	.word	0x08008189
 80081f4:	08008303 	.word	0x08008303
 80081f8:	680b      	ldr	r3, [r1, #0]
 80081fa:	1d1a      	adds	r2, r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	600a      	str	r2, [r1, #0]
 8008200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008208:	2301      	movs	r3, #1
 800820a:	e0a3      	b.n	8008354 <_printf_i+0x1f4>
 800820c:	6825      	ldr	r5, [r4, #0]
 800820e:	6808      	ldr	r0, [r1, #0]
 8008210:	062e      	lsls	r6, r5, #24
 8008212:	f100 0304 	add.w	r3, r0, #4
 8008216:	d50a      	bpl.n	800822e <_printf_i+0xce>
 8008218:	6805      	ldr	r5, [r0, #0]
 800821a:	600b      	str	r3, [r1, #0]
 800821c:	2d00      	cmp	r5, #0
 800821e:	da03      	bge.n	8008228 <_printf_i+0xc8>
 8008220:	232d      	movs	r3, #45	; 0x2d
 8008222:	426d      	negs	r5, r5
 8008224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008228:	485e      	ldr	r0, [pc, #376]	; (80083a4 <_printf_i+0x244>)
 800822a:	230a      	movs	r3, #10
 800822c:	e019      	b.n	8008262 <_printf_i+0x102>
 800822e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008232:	6805      	ldr	r5, [r0, #0]
 8008234:	600b      	str	r3, [r1, #0]
 8008236:	bf18      	it	ne
 8008238:	b22d      	sxthne	r5, r5
 800823a:	e7ef      	b.n	800821c <_printf_i+0xbc>
 800823c:	680b      	ldr	r3, [r1, #0]
 800823e:	6825      	ldr	r5, [r4, #0]
 8008240:	1d18      	adds	r0, r3, #4
 8008242:	6008      	str	r0, [r1, #0]
 8008244:	0628      	lsls	r0, r5, #24
 8008246:	d501      	bpl.n	800824c <_printf_i+0xec>
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	e002      	b.n	8008252 <_printf_i+0xf2>
 800824c:	0669      	lsls	r1, r5, #25
 800824e:	d5fb      	bpl.n	8008248 <_printf_i+0xe8>
 8008250:	881d      	ldrh	r5, [r3, #0]
 8008252:	4854      	ldr	r0, [pc, #336]	; (80083a4 <_printf_i+0x244>)
 8008254:	2f6f      	cmp	r7, #111	; 0x6f
 8008256:	bf0c      	ite	eq
 8008258:	2308      	moveq	r3, #8
 800825a:	230a      	movne	r3, #10
 800825c:	2100      	movs	r1, #0
 800825e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008262:	6866      	ldr	r6, [r4, #4]
 8008264:	60a6      	str	r6, [r4, #8]
 8008266:	2e00      	cmp	r6, #0
 8008268:	bfa2      	ittt	ge
 800826a:	6821      	ldrge	r1, [r4, #0]
 800826c:	f021 0104 	bicge.w	r1, r1, #4
 8008270:	6021      	strge	r1, [r4, #0]
 8008272:	b90d      	cbnz	r5, 8008278 <_printf_i+0x118>
 8008274:	2e00      	cmp	r6, #0
 8008276:	d04d      	beq.n	8008314 <_printf_i+0x1b4>
 8008278:	4616      	mov	r6, r2
 800827a:	fbb5 f1f3 	udiv	r1, r5, r3
 800827e:	fb03 5711 	mls	r7, r3, r1, r5
 8008282:	5dc7      	ldrb	r7, [r0, r7]
 8008284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008288:	462f      	mov	r7, r5
 800828a:	42bb      	cmp	r3, r7
 800828c:	460d      	mov	r5, r1
 800828e:	d9f4      	bls.n	800827a <_printf_i+0x11a>
 8008290:	2b08      	cmp	r3, #8
 8008292:	d10b      	bne.n	80082ac <_printf_i+0x14c>
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	07df      	lsls	r7, r3, #31
 8008298:	d508      	bpl.n	80082ac <_printf_i+0x14c>
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	6861      	ldr	r1, [r4, #4]
 800829e:	4299      	cmp	r1, r3
 80082a0:	bfde      	ittt	le
 80082a2:	2330      	movle	r3, #48	; 0x30
 80082a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082ac:	1b92      	subs	r2, r2, r6
 80082ae:	6122      	str	r2, [r4, #16]
 80082b0:	f8cd a000 	str.w	sl, [sp]
 80082b4:	464b      	mov	r3, r9
 80082b6:	aa03      	add	r2, sp, #12
 80082b8:	4621      	mov	r1, r4
 80082ba:	4640      	mov	r0, r8
 80082bc:	f7ff fee2 	bl	8008084 <_printf_common>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d14c      	bne.n	800835e <_printf_i+0x1fe>
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	b004      	add	sp, #16
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	4835      	ldr	r0, [pc, #212]	; (80083a4 <_printf_i+0x244>)
 80082d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	680e      	ldr	r6, [r1, #0]
 80082d8:	061f      	lsls	r7, r3, #24
 80082da:	f856 5b04 	ldr.w	r5, [r6], #4
 80082de:	600e      	str	r6, [r1, #0]
 80082e0:	d514      	bpl.n	800830c <_printf_i+0x1ac>
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	bf44      	itt	mi
 80082e6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ea:	6023      	strmi	r3, [r4, #0]
 80082ec:	b91d      	cbnz	r5, 80082f6 <_printf_i+0x196>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f023 0320 	bic.w	r3, r3, #32
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	2310      	movs	r3, #16
 80082f8:	e7b0      	b.n	800825c <_printf_i+0xfc>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	f043 0320 	orr.w	r3, r3, #32
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	2378      	movs	r3, #120	; 0x78
 8008304:	4828      	ldr	r0, [pc, #160]	; (80083a8 <_printf_i+0x248>)
 8008306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800830a:	e7e3      	b.n	80082d4 <_printf_i+0x174>
 800830c:	065e      	lsls	r6, r3, #25
 800830e:	bf48      	it	mi
 8008310:	b2ad      	uxthmi	r5, r5
 8008312:	e7e6      	b.n	80082e2 <_printf_i+0x182>
 8008314:	4616      	mov	r6, r2
 8008316:	e7bb      	b.n	8008290 <_printf_i+0x130>
 8008318:	680b      	ldr	r3, [r1, #0]
 800831a:	6826      	ldr	r6, [r4, #0]
 800831c:	6960      	ldr	r0, [r4, #20]
 800831e:	1d1d      	adds	r5, r3, #4
 8008320:	600d      	str	r5, [r1, #0]
 8008322:	0635      	lsls	r5, r6, #24
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	d501      	bpl.n	800832c <_printf_i+0x1cc>
 8008328:	6018      	str	r0, [r3, #0]
 800832a:	e002      	b.n	8008332 <_printf_i+0x1d2>
 800832c:	0671      	lsls	r1, r6, #25
 800832e:	d5fb      	bpl.n	8008328 <_printf_i+0x1c8>
 8008330:	8018      	strh	r0, [r3, #0]
 8008332:	2300      	movs	r3, #0
 8008334:	6123      	str	r3, [r4, #16]
 8008336:	4616      	mov	r6, r2
 8008338:	e7ba      	b.n	80082b0 <_printf_i+0x150>
 800833a:	680b      	ldr	r3, [r1, #0]
 800833c:	1d1a      	adds	r2, r3, #4
 800833e:	600a      	str	r2, [r1, #0]
 8008340:	681e      	ldr	r6, [r3, #0]
 8008342:	6862      	ldr	r2, [r4, #4]
 8008344:	2100      	movs	r1, #0
 8008346:	4630      	mov	r0, r6
 8008348:	f7f7 ff82 	bl	8000250 <memchr>
 800834c:	b108      	cbz	r0, 8008352 <_printf_i+0x1f2>
 800834e:	1b80      	subs	r0, r0, r6
 8008350:	6060      	str	r0, [r4, #4]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	2300      	movs	r3, #0
 8008358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835c:	e7a8      	b.n	80082b0 <_printf_i+0x150>
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	4632      	mov	r2, r6
 8008362:	4649      	mov	r1, r9
 8008364:	4640      	mov	r0, r8
 8008366:	47d0      	blx	sl
 8008368:	3001      	adds	r0, #1
 800836a:	d0ab      	beq.n	80082c4 <_printf_i+0x164>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	079b      	lsls	r3, r3, #30
 8008370:	d413      	bmi.n	800839a <_printf_i+0x23a>
 8008372:	68e0      	ldr	r0, [r4, #12]
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	4298      	cmp	r0, r3
 8008378:	bfb8      	it	lt
 800837a:	4618      	movlt	r0, r3
 800837c:	e7a4      	b.n	80082c8 <_printf_i+0x168>
 800837e:	2301      	movs	r3, #1
 8008380:	4632      	mov	r2, r6
 8008382:	4649      	mov	r1, r9
 8008384:	4640      	mov	r0, r8
 8008386:	47d0      	blx	sl
 8008388:	3001      	adds	r0, #1
 800838a:	d09b      	beq.n	80082c4 <_printf_i+0x164>
 800838c:	3501      	adds	r5, #1
 800838e:	68e3      	ldr	r3, [r4, #12]
 8008390:	9903      	ldr	r1, [sp, #12]
 8008392:	1a5b      	subs	r3, r3, r1
 8008394:	42ab      	cmp	r3, r5
 8008396:	dcf2      	bgt.n	800837e <_printf_i+0x21e>
 8008398:	e7eb      	b.n	8008372 <_printf_i+0x212>
 800839a:	2500      	movs	r5, #0
 800839c:	f104 0619 	add.w	r6, r4, #25
 80083a0:	e7f5      	b.n	800838e <_printf_i+0x22e>
 80083a2:	bf00      	nop
 80083a4:	0800a93a 	.word	0x0800a93a
 80083a8:	0800a94b 	.word	0x0800a94b

080083ac <siprintf>:
 80083ac:	b40e      	push	{r1, r2, r3}
 80083ae:	b500      	push	{lr}
 80083b0:	b09c      	sub	sp, #112	; 0x70
 80083b2:	ab1d      	add	r3, sp, #116	; 0x74
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	9006      	str	r0, [sp, #24]
 80083b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083bc:	4809      	ldr	r0, [pc, #36]	; (80083e4 <siprintf+0x38>)
 80083be:	9107      	str	r1, [sp, #28]
 80083c0:	9104      	str	r1, [sp, #16]
 80083c2:	4909      	ldr	r1, [pc, #36]	; (80083e8 <siprintf+0x3c>)
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	a902      	add	r1, sp, #8
 80083d0:	f001 fb6a 	bl	8009aa8 <_svfiprintf_r>
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	b01c      	add	sp, #112	; 0x70
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	20000028 	.word	0x20000028
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <strncmp>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	b16a      	cbz	r2, 800840c <strncmp+0x20>
 80083f0:	3901      	subs	r1, #1
 80083f2:	1884      	adds	r4, r0, r2
 80083f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80083f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d103      	bne.n	8008408 <strncmp+0x1c>
 8008400:	42a0      	cmp	r0, r4
 8008402:	d001      	beq.n	8008408 <strncmp+0x1c>
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1f5      	bne.n	80083f4 <strncmp+0x8>
 8008408:	1a98      	subs	r0, r3, r2
 800840a:	bd10      	pop	{r4, pc}
 800840c:	4610      	mov	r0, r2
 800840e:	e7fc      	b.n	800840a <strncmp+0x1e>

08008410 <_strtol_l.isra.0>:
 8008410:	2b01      	cmp	r3, #1
 8008412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008416:	d001      	beq.n	800841c <_strtol_l.isra.0+0xc>
 8008418:	2b24      	cmp	r3, #36	; 0x24
 800841a:	d906      	bls.n	800842a <_strtol_l.isra.0+0x1a>
 800841c:	f7ff fb52 	bl	8007ac4 <__errno>
 8008420:	2316      	movs	r3, #22
 8008422:	6003      	str	r3, [r0, #0]
 8008424:	2000      	movs	r0, #0
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	4f3a      	ldr	r7, [pc, #232]	; (8008514 <_strtol_l.isra.0+0x104>)
 800842c:	468e      	mov	lr, r1
 800842e:	4676      	mov	r6, lr
 8008430:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008434:	5de5      	ldrb	r5, [r4, r7]
 8008436:	f015 0508 	ands.w	r5, r5, #8
 800843a:	d1f8      	bne.n	800842e <_strtol_l.isra.0+0x1e>
 800843c:	2c2d      	cmp	r4, #45	; 0x2d
 800843e:	d134      	bne.n	80084aa <_strtol_l.isra.0+0x9a>
 8008440:	f89e 4000 	ldrb.w	r4, [lr]
 8008444:	f04f 0801 	mov.w	r8, #1
 8008448:	f106 0e02 	add.w	lr, r6, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d05c      	beq.n	800850a <_strtol_l.isra.0+0xfa>
 8008450:	2b10      	cmp	r3, #16
 8008452:	d10c      	bne.n	800846e <_strtol_l.isra.0+0x5e>
 8008454:	2c30      	cmp	r4, #48	; 0x30
 8008456:	d10a      	bne.n	800846e <_strtol_l.isra.0+0x5e>
 8008458:	f89e 4000 	ldrb.w	r4, [lr]
 800845c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008460:	2c58      	cmp	r4, #88	; 0x58
 8008462:	d14d      	bne.n	8008500 <_strtol_l.isra.0+0xf0>
 8008464:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008468:	2310      	movs	r3, #16
 800846a:	f10e 0e02 	add.w	lr, lr, #2
 800846e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008472:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008476:	2600      	movs	r6, #0
 8008478:	fbbc f9f3 	udiv	r9, ip, r3
 800847c:	4635      	mov	r5, r6
 800847e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008482:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008486:	2f09      	cmp	r7, #9
 8008488:	d818      	bhi.n	80084bc <_strtol_l.isra.0+0xac>
 800848a:	463c      	mov	r4, r7
 800848c:	42a3      	cmp	r3, r4
 800848e:	dd24      	ble.n	80084da <_strtol_l.isra.0+0xca>
 8008490:	2e00      	cmp	r6, #0
 8008492:	db1f      	blt.n	80084d4 <_strtol_l.isra.0+0xc4>
 8008494:	45a9      	cmp	r9, r5
 8008496:	d31d      	bcc.n	80084d4 <_strtol_l.isra.0+0xc4>
 8008498:	d101      	bne.n	800849e <_strtol_l.isra.0+0x8e>
 800849a:	45a2      	cmp	sl, r4
 800849c:	db1a      	blt.n	80084d4 <_strtol_l.isra.0+0xc4>
 800849e:	fb05 4503 	mla	r5, r5, r3, r4
 80084a2:	2601      	movs	r6, #1
 80084a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084a8:	e7eb      	b.n	8008482 <_strtol_l.isra.0+0x72>
 80084aa:	2c2b      	cmp	r4, #43	; 0x2b
 80084ac:	bf08      	it	eq
 80084ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80084b2:	46a8      	mov	r8, r5
 80084b4:	bf08      	it	eq
 80084b6:	f106 0e02 	addeq.w	lr, r6, #2
 80084ba:	e7c7      	b.n	800844c <_strtol_l.isra.0+0x3c>
 80084bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80084c0:	2f19      	cmp	r7, #25
 80084c2:	d801      	bhi.n	80084c8 <_strtol_l.isra.0+0xb8>
 80084c4:	3c37      	subs	r4, #55	; 0x37
 80084c6:	e7e1      	b.n	800848c <_strtol_l.isra.0+0x7c>
 80084c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80084cc:	2f19      	cmp	r7, #25
 80084ce:	d804      	bhi.n	80084da <_strtol_l.isra.0+0xca>
 80084d0:	3c57      	subs	r4, #87	; 0x57
 80084d2:	e7db      	b.n	800848c <_strtol_l.isra.0+0x7c>
 80084d4:	f04f 36ff 	mov.w	r6, #4294967295
 80084d8:	e7e4      	b.n	80084a4 <_strtol_l.isra.0+0x94>
 80084da:	2e00      	cmp	r6, #0
 80084dc:	da05      	bge.n	80084ea <_strtol_l.isra.0+0xda>
 80084de:	2322      	movs	r3, #34	; 0x22
 80084e0:	6003      	str	r3, [r0, #0]
 80084e2:	4665      	mov	r5, ip
 80084e4:	b942      	cbnz	r2, 80084f8 <_strtol_l.isra.0+0xe8>
 80084e6:	4628      	mov	r0, r5
 80084e8:	e79d      	b.n	8008426 <_strtol_l.isra.0+0x16>
 80084ea:	f1b8 0f00 	cmp.w	r8, #0
 80084ee:	d000      	beq.n	80084f2 <_strtol_l.isra.0+0xe2>
 80084f0:	426d      	negs	r5, r5
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	d0f7      	beq.n	80084e6 <_strtol_l.isra.0+0xd6>
 80084f6:	b10e      	cbz	r6, 80084fc <_strtol_l.isra.0+0xec>
 80084f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	e7f2      	b.n	80084e6 <_strtol_l.isra.0+0xd6>
 8008500:	2430      	movs	r4, #48	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1b3      	bne.n	800846e <_strtol_l.isra.0+0x5e>
 8008506:	2308      	movs	r3, #8
 8008508:	e7b1      	b.n	800846e <_strtol_l.isra.0+0x5e>
 800850a:	2c30      	cmp	r4, #48	; 0x30
 800850c:	d0a4      	beq.n	8008458 <_strtol_l.isra.0+0x48>
 800850e:	230a      	movs	r3, #10
 8008510:	e7ad      	b.n	800846e <_strtol_l.isra.0+0x5e>
 8008512:	bf00      	nop
 8008514:	0800a95d 	.word	0x0800a95d

08008518 <strtol>:
 8008518:	4613      	mov	r3, r2
 800851a:	460a      	mov	r2, r1
 800851c:	4601      	mov	r1, r0
 800851e:	4802      	ldr	r0, [pc, #8]	; (8008528 <strtol+0x10>)
 8008520:	6800      	ldr	r0, [r0, #0]
 8008522:	f7ff bf75 	b.w	8008410 <_strtol_l.isra.0>
 8008526:	bf00      	nop
 8008528:	20000028 	.word	0x20000028

0800852c <quorem>:
 800852c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	6903      	ldr	r3, [r0, #16]
 8008532:	690c      	ldr	r4, [r1, #16]
 8008534:	42a3      	cmp	r3, r4
 8008536:	4607      	mov	r7, r0
 8008538:	f2c0 8081 	blt.w	800863e <quorem+0x112>
 800853c:	3c01      	subs	r4, #1
 800853e:	f101 0814 	add.w	r8, r1, #20
 8008542:	f100 0514 	add.w	r5, r0, #20
 8008546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008554:	3301      	adds	r3, #1
 8008556:	429a      	cmp	r2, r3
 8008558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800855c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008560:	fbb2 f6f3 	udiv	r6, r2, r3
 8008564:	d331      	bcc.n	80085ca <quorem+0x9e>
 8008566:	f04f 0e00 	mov.w	lr, #0
 800856a:	4640      	mov	r0, r8
 800856c:	46ac      	mov	ip, r5
 800856e:	46f2      	mov	sl, lr
 8008570:	f850 2b04 	ldr.w	r2, [r0], #4
 8008574:	b293      	uxth	r3, r2
 8008576:	fb06 e303 	mla	r3, r6, r3, lr
 800857a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800857e:	b29b      	uxth	r3, r3
 8008580:	ebaa 0303 	sub.w	r3, sl, r3
 8008584:	0c12      	lsrs	r2, r2, #16
 8008586:	f8dc a000 	ldr.w	sl, [ip]
 800858a:	fb06 e202 	mla	r2, r6, r2, lr
 800858e:	fa13 f38a 	uxtah	r3, r3, sl
 8008592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008596:	fa1f fa82 	uxth.w	sl, r2
 800859a:	f8dc 2000 	ldr.w	r2, [ip]
 800859e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80085a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ac:	4581      	cmp	r9, r0
 80085ae:	f84c 3b04 	str.w	r3, [ip], #4
 80085b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085b6:	d2db      	bcs.n	8008570 <quorem+0x44>
 80085b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80085bc:	b92b      	cbnz	r3, 80085ca <quorem+0x9e>
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	3b04      	subs	r3, #4
 80085c2:	429d      	cmp	r5, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	d32e      	bcc.n	8008626 <quorem+0xfa>
 80085c8:	613c      	str	r4, [r7, #16]
 80085ca:	4638      	mov	r0, r7
 80085cc:	f001 f856 	bl	800967c <__mcmp>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	db24      	blt.n	800861e <quorem+0xf2>
 80085d4:	3601      	adds	r6, #1
 80085d6:	4628      	mov	r0, r5
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80085e0:	f8d0 e000 	ldr.w	lr, [r0]
 80085e4:	b293      	uxth	r3, r2
 80085e6:	ebac 0303 	sub.w	r3, ip, r3
 80085ea:	0c12      	lsrs	r2, r2, #16
 80085ec:	fa13 f38e 	uxtah	r3, r3, lr
 80085f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085fe:	45c1      	cmp	r9, r8
 8008600:	f840 3b04 	str.w	r3, [r0], #4
 8008604:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008608:	d2e8      	bcs.n	80085dc <quorem+0xb0>
 800860a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800860e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008612:	b922      	cbnz	r2, 800861e <quorem+0xf2>
 8008614:	3b04      	subs	r3, #4
 8008616:	429d      	cmp	r5, r3
 8008618:	461a      	mov	r2, r3
 800861a:	d30a      	bcc.n	8008632 <quorem+0x106>
 800861c:	613c      	str	r4, [r7, #16]
 800861e:	4630      	mov	r0, r6
 8008620:	b003      	add	sp, #12
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	6812      	ldr	r2, [r2, #0]
 8008628:	3b04      	subs	r3, #4
 800862a:	2a00      	cmp	r2, #0
 800862c:	d1cc      	bne.n	80085c8 <quorem+0x9c>
 800862e:	3c01      	subs	r4, #1
 8008630:	e7c7      	b.n	80085c2 <quorem+0x96>
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	3b04      	subs	r3, #4
 8008636:	2a00      	cmp	r2, #0
 8008638:	d1f0      	bne.n	800861c <quorem+0xf0>
 800863a:	3c01      	subs	r4, #1
 800863c:	e7eb      	b.n	8008616 <quorem+0xea>
 800863e:	2000      	movs	r0, #0
 8008640:	e7ee      	b.n	8008620 <quorem+0xf4>
 8008642:	0000      	movs	r0, r0
 8008644:	0000      	movs	r0, r0
	...

08008648 <_dtoa_r>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	ec59 8b10 	vmov	r8, r9, d0
 8008650:	b095      	sub	sp, #84	; 0x54
 8008652:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008654:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008656:	9107      	str	r1, [sp, #28]
 8008658:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800865c:	4606      	mov	r6, r0
 800865e:	9209      	str	r2, [sp, #36]	; 0x24
 8008660:	9310      	str	r3, [sp, #64]	; 0x40
 8008662:	b975      	cbnz	r5, 8008682 <_dtoa_r+0x3a>
 8008664:	2010      	movs	r0, #16
 8008666:	f000 fd75 	bl	8009154 <malloc>
 800866a:	4602      	mov	r2, r0
 800866c:	6270      	str	r0, [r6, #36]	; 0x24
 800866e:	b920      	cbnz	r0, 800867a <_dtoa_r+0x32>
 8008670:	4bab      	ldr	r3, [pc, #684]	; (8008920 <_dtoa_r+0x2d8>)
 8008672:	21ea      	movs	r1, #234	; 0xea
 8008674:	48ab      	ldr	r0, [pc, #684]	; (8008924 <_dtoa_r+0x2dc>)
 8008676:	f001 fb27 	bl	8009cc8 <__assert_func>
 800867a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800867e:	6005      	str	r5, [r0, #0]
 8008680:	60c5      	str	r5, [r0, #12]
 8008682:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008684:	6819      	ldr	r1, [r3, #0]
 8008686:	b151      	cbz	r1, 800869e <_dtoa_r+0x56>
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	604a      	str	r2, [r1, #4]
 800868c:	2301      	movs	r3, #1
 800868e:	4093      	lsls	r3, r2
 8008690:	608b      	str	r3, [r1, #8]
 8008692:	4630      	mov	r0, r6
 8008694:	f000 fdb4 	bl	8009200 <_Bfree>
 8008698:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	f1b9 0300 	subs.w	r3, r9, #0
 80086a2:	bfbb      	ittet	lt
 80086a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086a8:	9303      	strlt	r3, [sp, #12]
 80086aa:	2300      	movge	r3, #0
 80086ac:	2201      	movlt	r2, #1
 80086ae:	bfac      	ite	ge
 80086b0:	6023      	strge	r3, [r4, #0]
 80086b2:	6022      	strlt	r2, [r4, #0]
 80086b4:	4b9c      	ldr	r3, [pc, #624]	; (8008928 <_dtoa_r+0x2e0>)
 80086b6:	9c03      	ldr	r4, [sp, #12]
 80086b8:	43a3      	bics	r3, r4
 80086ba:	d11a      	bne.n	80086f2 <_dtoa_r+0xaa>
 80086bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086be:	f242 730f 	movw	r3, #9999	; 0x270f
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80086c8:	ea53 0308 	orrs.w	r3, r3, r8
 80086cc:	f000 8512 	beq.w	80090f4 <_dtoa_r+0xaac>
 80086d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086d2:	b953      	cbnz	r3, 80086ea <_dtoa_r+0xa2>
 80086d4:	4b95      	ldr	r3, [pc, #596]	; (800892c <_dtoa_r+0x2e4>)
 80086d6:	e01f      	b.n	8008718 <_dtoa_r+0xd0>
 80086d8:	4b95      	ldr	r3, [pc, #596]	; (8008930 <_dtoa_r+0x2e8>)
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	3308      	adds	r3, #8
 80086de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	9800      	ldr	r0, [sp, #0]
 80086e4:	b015      	add	sp, #84	; 0x54
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	4b90      	ldr	r3, [pc, #576]	; (800892c <_dtoa_r+0x2e4>)
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	3303      	adds	r3, #3
 80086f0:	e7f5      	b.n	80086de <_dtoa_r+0x96>
 80086f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008702:	d10b      	bne.n	800871c <_dtoa_r+0xd4>
 8008704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008706:	2301      	movs	r3, #1
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 84ee 	beq.w	80090ee <_dtoa_r+0xaa6>
 8008712:	4888      	ldr	r0, [pc, #544]	; (8008934 <_dtoa_r+0x2ec>)
 8008714:	6018      	str	r0, [r3, #0]
 8008716:	1e43      	subs	r3, r0, #1
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	e7e2      	b.n	80086e2 <_dtoa_r+0x9a>
 800871c:	a913      	add	r1, sp, #76	; 0x4c
 800871e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008722:	aa12      	add	r2, sp, #72	; 0x48
 8008724:	4630      	mov	r0, r6
 8008726:	f001 f84d 	bl	80097c4 <__d2b>
 800872a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800872e:	4605      	mov	r5, r0
 8008730:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008732:	2900      	cmp	r1, #0
 8008734:	d047      	beq.n	80087c6 <_dtoa_r+0x17e>
 8008736:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008738:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800873c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008740:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008744:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008748:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800874c:	2400      	movs	r4, #0
 800874e:	ec43 2b16 	vmov	d6, r2, r3
 8008752:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008756:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008908 <_dtoa_r+0x2c0>
 800875a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800875e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008910 <_dtoa_r+0x2c8>
 8008762:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008766:	eeb0 7b46 	vmov.f64	d7, d6
 800876a:	ee06 1a90 	vmov	s13, r1
 800876e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008772:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008918 <_dtoa_r+0x2d0>
 8008776:	eea5 7b06 	vfma.f64	d7, d5, d6
 800877a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800877e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008786:	ee16 ba90 	vmov	fp, s13
 800878a:	9411      	str	r4, [sp, #68]	; 0x44
 800878c:	d508      	bpl.n	80087a0 <_dtoa_r+0x158>
 800878e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008792:	eeb4 6b47 	vcmp.f64	d6, d7
 8008796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879a:	bf18      	it	ne
 800879c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80087a0:	f1bb 0f16 	cmp.w	fp, #22
 80087a4:	d832      	bhi.n	800880c <_dtoa_r+0x1c4>
 80087a6:	4b64      	ldr	r3, [pc, #400]	; (8008938 <_dtoa_r+0x2f0>)
 80087a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087ac:	ed93 7b00 	vldr	d7, [r3]
 80087b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80087b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087bc:	d501      	bpl.n	80087c2 <_dtoa_r+0x17a>
 80087be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087c2:	2300      	movs	r3, #0
 80087c4:	e023      	b.n	800880e <_dtoa_r+0x1c6>
 80087c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087c8:	4401      	add	r1, r0
 80087ca:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	bfc3      	ittte	gt
 80087d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087d6:	fa04 f303 	lslgt.w	r3, r4, r3
 80087da:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80087de:	f1c3 0320 	rsble	r3, r3, #32
 80087e2:	bfc6      	itte	gt
 80087e4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80087e8:	ea43 0308 	orrgt.w	r3, r3, r8
 80087ec:	fa08 f303 	lslle.w	r3, r8, r3
 80087f0:	ee07 3a90 	vmov	s15, r3
 80087f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80087f8:	3901      	subs	r1, #1
 80087fa:	ed8d 7b00 	vstr	d7, [sp]
 80087fe:	9c01      	ldr	r4, [sp, #4]
 8008800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008804:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008808:	2401      	movs	r4, #1
 800880a:	e7a0      	b.n	800874e <_dtoa_r+0x106>
 800880c:	2301      	movs	r3, #1
 800880e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008810:	1a43      	subs	r3, r0, r1
 8008812:	1e5a      	subs	r2, r3, #1
 8008814:	bf45      	ittet	mi
 8008816:	f1c3 0301 	rsbmi	r3, r3, #1
 800881a:	9305      	strmi	r3, [sp, #20]
 800881c:	2300      	movpl	r3, #0
 800881e:	2300      	movmi	r3, #0
 8008820:	9206      	str	r2, [sp, #24]
 8008822:	bf54      	ite	pl
 8008824:	9305      	strpl	r3, [sp, #20]
 8008826:	9306      	strmi	r3, [sp, #24]
 8008828:	f1bb 0f00 	cmp.w	fp, #0
 800882c:	db18      	blt.n	8008860 <_dtoa_r+0x218>
 800882e:	9b06      	ldr	r3, [sp, #24]
 8008830:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008834:	445b      	add	r3, fp
 8008836:	9306      	str	r3, [sp, #24]
 8008838:	2300      	movs	r3, #0
 800883a:	9a07      	ldr	r2, [sp, #28]
 800883c:	2a09      	cmp	r2, #9
 800883e:	d849      	bhi.n	80088d4 <_dtoa_r+0x28c>
 8008840:	2a05      	cmp	r2, #5
 8008842:	bfc4      	itt	gt
 8008844:	3a04      	subgt	r2, #4
 8008846:	9207      	strgt	r2, [sp, #28]
 8008848:	9a07      	ldr	r2, [sp, #28]
 800884a:	f1a2 0202 	sub.w	r2, r2, #2
 800884e:	bfcc      	ite	gt
 8008850:	2400      	movgt	r4, #0
 8008852:	2401      	movle	r4, #1
 8008854:	2a03      	cmp	r2, #3
 8008856:	d848      	bhi.n	80088ea <_dtoa_r+0x2a2>
 8008858:	e8df f002 	tbb	[pc, r2]
 800885c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	2200      	movs	r2, #0
 8008864:	eba3 030b 	sub.w	r3, r3, fp
 8008868:	9305      	str	r3, [sp, #20]
 800886a:	920e      	str	r2, [sp, #56]	; 0x38
 800886c:	f1cb 0300 	rsb	r3, fp, #0
 8008870:	e7e3      	b.n	800883a <_dtoa_r+0x1f2>
 8008872:	2200      	movs	r2, #0
 8008874:	9208      	str	r2, [sp, #32]
 8008876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008878:	2a00      	cmp	r2, #0
 800887a:	dc39      	bgt.n	80088f0 <_dtoa_r+0x2a8>
 800887c:	f04f 0a01 	mov.w	sl, #1
 8008880:	46d1      	mov	r9, sl
 8008882:	4652      	mov	r2, sl
 8008884:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008888:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800888a:	2100      	movs	r1, #0
 800888c:	6079      	str	r1, [r7, #4]
 800888e:	2004      	movs	r0, #4
 8008890:	f100 0c14 	add.w	ip, r0, #20
 8008894:	4594      	cmp	ip, r2
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	d92f      	bls.n	80088fa <_dtoa_r+0x2b2>
 800889a:	4630      	mov	r0, r6
 800889c:	930c      	str	r3, [sp, #48]	; 0x30
 800889e:	f000 fc6f 	bl	8009180 <_Balloc>
 80088a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088a4:	9000      	str	r0, [sp, #0]
 80088a6:	4602      	mov	r2, r0
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d149      	bne.n	8008940 <_dtoa_r+0x2f8>
 80088ac:	4b23      	ldr	r3, [pc, #140]	; (800893c <_dtoa_r+0x2f4>)
 80088ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088b2:	e6df      	b.n	8008674 <_dtoa_r+0x2c>
 80088b4:	2201      	movs	r2, #1
 80088b6:	e7dd      	b.n	8008874 <_dtoa_r+0x22c>
 80088b8:	2200      	movs	r2, #0
 80088ba:	9208      	str	r2, [sp, #32]
 80088bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088be:	eb0b 0a02 	add.w	sl, fp, r2
 80088c2:	f10a 0901 	add.w	r9, sl, #1
 80088c6:	464a      	mov	r2, r9
 80088c8:	2a01      	cmp	r2, #1
 80088ca:	bfb8      	it	lt
 80088cc:	2201      	movlt	r2, #1
 80088ce:	e7db      	b.n	8008888 <_dtoa_r+0x240>
 80088d0:	2201      	movs	r2, #1
 80088d2:	e7f2      	b.n	80088ba <_dtoa_r+0x272>
 80088d4:	2401      	movs	r4, #1
 80088d6:	2200      	movs	r2, #0
 80088d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80088dc:	f04f 3aff 	mov.w	sl, #4294967295
 80088e0:	2100      	movs	r1, #0
 80088e2:	46d1      	mov	r9, sl
 80088e4:	2212      	movs	r2, #18
 80088e6:	9109      	str	r1, [sp, #36]	; 0x24
 80088e8:	e7ce      	b.n	8008888 <_dtoa_r+0x240>
 80088ea:	2201      	movs	r2, #1
 80088ec:	9208      	str	r2, [sp, #32]
 80088ee:	e7f5      	b.n	80088dc <_dtoa_r+0x294>
 80088f0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80088f4:	46d1      	mov	r9, sl
 80088f6:	4652      	mov	r2, sl
 80088f8:	e7c6      	b.n	8008888 <_dtoa_r+0x240>
 80088fa:	3101      	adds	r1, #1
 80088fc:	6079      	str	r1, [r7, #4]
 80088fe:	0040      	lsls	r0, r0, #1
 8008900:	e7c6      	b.n	8008890 <_dtoa_r+0x248>
 8008902:	bf00      	nop
 8008904:	f3af 8000 	nop.w
 8008908:	636f4361 	.word	0x636f4361
 800890c:	3fd287a7 	.word	0x3fd287a7
 8008910:	8b60c8b3 	.word	0x8b60c8b3
 8008914:	3fc68a28 	.word	0x3fc68a28
 8008918:	509f79fb 	.word	0x509f79fb
 800891c:	3fd34413 	.word	0x3fd34413
 8008920:	0800aa6a 	.word	0x0800aa6a
 8008924:	0800aa81 	.word	0x0800aa81
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	0800aa66 	.word	0x0800aa66
 8008930:	0800aa5d 	.word	0x0800aa5d
 8008934:	0800a939 	.word	0x0800a939
 8008938:	0800ab80 	.word	0x0800ab80
 800893c:	0800aae0 	.word	0x0800aae0
 8008940:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008942:	9900      	ldr	r1, [sp, #0]
 8008944:	6011      	str	r1, [r2, #0]
 8008946:	f1b9 0f0e 	cmp.w	r9, #14
 800894a:	d872      	bhi.n	8008a32 <_dtoa_r+0x3ea>
 800894c:	2c00      	cmp	r4, #0
 800894e:	d070      	beq.n	8008a32 <_dtoa_r+0x3ea>
 8008950:	f1bb 0f00 	cmp.w	fp, #0
 8008954:	f340 80a6 	ble.w	8008aa4 <_dtoa_r+0x45c>
 8008958:	49ca      	ldr	r1, [pc, #808]	; (8008c84 <_dtoa_r+0x63c>)
 800895a:	f00b 020f 	and.w	r2, fp, #15
 800895e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008962:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008966:	ed92 7b00 	vldr	d7, [r2]
 800896a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800896e:	f000 808d 	beq.w	8008a8c <_dtoa_r+0x444>
 8008972:	4ac5      	ldr	r2, [pc, #788]	; (8008c88 <_dtoa_r+0x640>)
 8008974:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008978:	ed92 6b08 	vldr	d6, [r2, #32]
 800897c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008980:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008984:	f001 010f 	and.w	r1, r1, #15
 8008988:	2203      	movs	r2, #3
 800898a:	48bf      	ldr	r0, [pc, #764]	; (8008c88 <_dtoa_r+0x640>)
 800898c:	2900      	cmp	r1, #0
 800898e:	d17f      	bne.n	8008a90 <_dtoa_r+0x448>
 8008990:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008994:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008998:	ed8d 7b02 	vstr	d7, [sp, #8]
 800899c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800899e:	2900      	cmp	r1, #0
 80089a0:	f000 80b2 	beq.w	8008b08 <_dtoa_r+0x4c0>
 80089a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80089a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80089b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b4:	f140 80a8 	bpl.w	8008b08 <_dtoa_r+0x4c0>
 80089b8:	f1b9 0f00 	cmp.w	r9, #0
 80089bc:	f000 80a4 	beq.w	8008b08 <_dtoa_r+0x4c0>
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	dd31      	ble.n	8008a2a <_dtoa_r+0x3e2>
 80089c6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80089ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089d6:	3201      	adds	r2, #1
 80089d8:	4650      	mov	r0, sl
 80089da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80089de:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80089e2:	ee07 2a90 	vmov	s15, r2
 80089e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80089ee:	ed8d 5b02 	vstr	d5, [sp, #8]
 80089f2:	9c03      	ldr	r4, [sp, #12]
 80089f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80089f8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f040 8086 	bne.w	8008b0e <_dtoa_r+0x4c6>
 8008a02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008a0a:	ec42 1b17 	vmov	d7, r1, r2
 8008a0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a16:	f300 8272 	bgt.w	8008efe <_dtoa_r+0x8b6>
 8008a1a:	eeb1 7b47 	vneg.f64	d7, d7
 8008a1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a26:	f100 8267 	bmi.w	8008ef8 <_dtoa_r+0x8b0>
 8008a2a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008a2e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	f2c0 8129 	blt.w	8008c8c <_dtoa_r+0x644>
 8008a3a:	f1bb 0f0e 	cmp.w	fp, #14
 8008a3e:	f300 8125 	bgt.w	8008c8c <_dtoa_r+0x644>
 8008a42:	4b90      	ldr	r3, [pc, #576]	; (8008c84 <_dtoa_r+0x63c>)
 8008a44:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a48:	ed93 6b00 	vldr	d6, [r3]
 8008a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f280 80c3 	bge.w	8008bda <_dtoa_r+0x592>
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	f300 80bf 	bgt.w	8008bda <_dtoa_r+0x592>
 8008a5c:	f040 824c 	bne.w	8008ef8 <_dtoa_r+0x8b0>
 8008a60:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008a68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a74:	464c      	mov	r4, r9
 8008a76:	464f      	mov	r7, r9
 8008a78:	f280 8222 	bge.w	8008ec0 <_dtoa_r+0x878>
 8008a7c:	f8dd 8000 	ldr.w	r8, [sp]
 8008a80:	2331      	movs	r3, #49	; 0x31
 8008a82:	f808 3b01 	strb.w	r3, [r8], #1
 8008a86:	f10b 0b01 	add.w	fp, fp, #1
 8008a8a:	e21e      	b.n	8008eca <_dtoa_r+0x882>
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	e77c      	b.n	800898a <_dtoa_r+0x342>
 8008a90:	07cc      	lsls	r4, r1, #31
 8008a92:	d504      	bpl.n	8008a9e <_dtoa_r+0x456>
 8008a94:	ed90 6b00 	vldr	d6, [r0]
 8008a98:	3201      	adds	r2, #1
 8008a9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a9e:	1049      	asrs	r1, r1, #1
 8008aa0:	3008      	adds	r0, #8
 8008aa2:	e773      	b.n	800898c <_dtoa_r+0x344>
 8008aa4:	d02e      	beq.n	8008b04 <_dtoa_r+0x4bc>
 8008aa6:	f1cb 0100 	rsb	r1, fp, #0
 8008aaa:	4a76      	ldr	r2, [pc, #472]	; (8008c84 <_dtoa_r+0x63c>)
 8008aac:	f001 000f 	and.w	r0, r1, #15
 8008ab0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008ab4:	ed92 7b00 	vldr	d7, [r2]
 8008ab8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008abc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008ac0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008ac4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008ac8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008acc:	486e      	ldr	r0, [pc, #440]	; (8008c88 <_dtoa_r+0x640>)
 8008ace:	1109      	asrs	r1, r1, #4
 8008ad0:	2400      	movs	r4, #0
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	b939      	cbnz	r1, 8008ae6 <_dtoa_r+0x49e>
 8008ad6:	2c00      	cmp	r4, #0
 8008ad8:	f43f af60 	beq.w	800899c <_dtoa_r+0x354>
 8008adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae4:	e75a      	b.n	800899c <_dtoa_r+0x354>
 8008ae6:	07cf      	lsls	r7, r1, #31
 8008ae8:	d509      	bpl.n	8008afe <_dtoa_r+0x4b6>
 8008aea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008aee:	ed90 7b00 	vldr	d7, [r0]
 8008af2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008af6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008afa:	3201      	adds	r2, #1
 8008afc:	2401      	movs	r4, #1
 8008afe:	1049      	asrs	r1, r1, #1
 8008b00:	3008      	adds	r0, #8
 8008b02:	e7e7      	b.n	8008ad4 <_dtoa_r+0x48c>
 8008b04:	2202      	movs	r2, #2
 8008b06:	e749      	b.n	800899c <_dtoa_r+0x354>
 8008b08:	465f      	mov	r7, fp
 8008b0a:	4648      	mov	r0, r9
 8008b0c:	e765      	b.n	80089da <_dtoa_r+0x392>
 8008b0e:	ec42 1b17 	vmov	d7, r1, r2
 8008b12:	4a5c      	ldr	r2, [pc, #368]	; (8008c84 <_dtoa_r+0x63c>)
 8008b14:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b18:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008b1c:	9a00      	ldr	r2, [sp, #0]
 8008b1e:	1814      	adds	r4, r2, r0
 8008b20:	9a08      	ldr	r2, [sp, #32]
 8008b22:	b352      	cbz	r2, 8008b7a <_dtoa_r+0x532>
 8008b24:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008b28:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008b2c:	f8dd 8000 	ldr.w	r8, [sp]
 8008b30:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008b34:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b38:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008b3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b40:	ee14 2a90 	vmov	r2, s9
 8008b44:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008b48:	3230      	adds	r2, #48	; 0x30
 8008b4a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008b4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b56:	f808 2b01 	strb.w	r2, [r8], #1
 8008b5a:	d439      	bmi.n	8008bd0 <_dtoa_r+0x588>
 8008b5c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008b60:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b68:	d472      	bmi.n	8008c50 <_dtoa_r+0x608>
 8008b6a:	45a0      	cmp	r8, r4
 8008b6c:	f43f af5d 	beq.w	8008a2a <_dtoa_r+0x3e2>
 8008b70:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008b74:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008b78:	e7e0      	b.n	8008b3c <_dtoa_r+0x4f4>
 8008b7a:	f8dd 8000 	ldr.w	r8, [sp]
 8008b7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008b82:	4621      	mov	r1, r4
 8008b84:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b8c:	ee14 2a90 	vmov	r2, s9
 8008b90:	3230      	adds	r2, #48	; 0x30
 8008b92:	f808 2b01 	strb.w	r2, [r8], #1
 8008b96:	45a0      	cmp	r8, r4
 8008b98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008b9c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ba0:	d118      	bne.n	8008bd4 <_dtoa_r+0x58c>
 8008ba2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008ba6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008baa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb2:	dc4d      	bgt.n	8008c50 <_dtoa_r+0x608>
 8008bb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008bb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc0:	f57f af33 	bpl.w	8008a2a <_dtoa_r+0x3e2>
 8008bc4:	4688      	mov	r8, r1
 8008bc6:	3901      	subs	r1, #1
 8008bc8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008bcc:	2b30      	cmp	r3, #48	; 0x30
 8008bce:	d0f9      	beq.n	8008bc4 <_dtoa_r+0x57c>
 8008bd0:	46bb      	mov	fp, r7
 8008bd2:	e02a      	b.n	8008c2a <_dtoa_r+0x5e2>
 8008bd4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008bd8:	e7d6      	b.n	8008b88 <_dtoa_r+0x540>
 8008bda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bde:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008be2:	f8dd 8000 	ldr.w	r8, [sp]
 8008be6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008bea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008bee:	ee15 3a10 	vmov	r3, s10
 8008bf2:	3330      	adds	r3, #48	; 0x30
 8008bf4:	f808 3b01 	strb.w	r3, [r8], #1
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	eba8 0303 	sub.w	r3, r8, r3
 8008bfe:	4599      	cmp	r9, r3
 8008c00:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008c04:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008c08:	d133      	bne.n	8008c72 <_dtoa_r+0x62a>
 8008c0a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008c0e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c16:	dc1a      	bgt.n	8008c4e <_dtoa_r+0x606>
 8008c18:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c20:	d103      	bne.n	8008c2a <_dtoa_r+0x5e2>
 8008c22:	ee15 3a10 	vmov	r3, s10
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d411      	bmi.n	8008c4e <_dtoa_r+0x606>
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 fae7 	bl	8009200 <_Bfree>
 8008c32:	2300      	movs	r3, #0
 8008c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c36:	f888 3000 	strb.w	r3, [r8]
 8008c3a:	f10b 0301 	add.w	r3, fp, #1
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f43f ad4d 	beq.w	80086e2 <_dtoa_r+0x9a>
 8008c48:	f8c3 8000 	str.w	r8, [r3]
 8008c4c:	e549      	b.n	80086e2 <_dtoa_r+0x9a>
 8008c4e:	465f      	mov	r7, fp
 8008c50:	4643      	mov	r3, r8
 8008c52:	4698      	mov	r8, r3
 8008c54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c58:	2a39      	cmp	r2, #57	; 0x39
 8008c5a:	d106      	bne.n	8008c6a <_dtoa_r+0x622>
 8008c5c:	9a00      	ldr	r2, [sp, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d1f7      	bne.n	8008c52 <_dtoa_r+0x60a>
 8008c62:	9900      	ldr	r1, [sp, #0]
 8008c64:	2230      	movs	r2, #48	; 0x30
 8008c66:	3701      	adds	r7, #1
 8008c68:	700a      	strb	r2, [r1, #0]
 8008c6a:	781a      	ldrb	r2, [r3, #0]
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e7ae      	b.n	8008bd0 <_dtoa_r+0x588>
 8008c72:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008c76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	d1b2      	bne.n	8008be6 <_dtoa_r+0x59e>
 8008c80:	e7d3      	b.n	8008c2a <_dtoa_r+0x5e2>
 8008c82:	bf00      	nop
 8008c84:	0800ab80 	.word	0x0800ab80
 8008c88:	0800ab58 	.word	0x0800ab58
 8008c8c:	9908      	ldr	r1, [sp, #32]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	f000 80d1 	beq.w	8008e36 <_dtoa_r+0x7ee>
 8008c94:	9907      	ldr	r1, [sp, #28]
 8008c96:	2901      	cmp	r1, #1
 8008c98:	f300 80b4 	bgt.w	8008e04 <_dtoa_r+0x7bc>
 8008c9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c9e:	2900      	cmp	r1, #0
 8008ca0:	f000 80ac 	beq.w	8008dfc <_dtoa_r+0x7b4>
 8008ca4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ca8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008cac:	461c      	mov	r4, r3
 8008cae:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb0:	9b05      	ldr	r3, [sp, #20]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	9b06      	ldr	r3, [sp, #24]
 8008cb8:	2101      	movs	r1, #1
 8008cba:	4413      	add	r3, r2
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	9306      	str	r3, [sp, #24]
 8008cc0:	f000 fb5a 	bl	8009378 <__i2b>
 8008cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	dd0d      	ble.n	8008cea <_dtoa_r+0x6a2>
 8008cce:	9a06      	ldr	r2, [sp, #24]
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	dd0a      	ble.n	8008cea <_dtoa_r+0x6a2>
 8008cd4:	4542      	cmp	r2, r8
 8008cd6:	9905      	ldr	r1, [sp, #20]
 8008cd8:	bfa8      	it	ge
 8008cda:	4642      	movge	r2, r8
 8008cdc:	1a89      	subs	r1, r1, r2
 8008cde:	9105      	str	r1, [sp, #20]
 8008ce0:	9906      	ldr	r1, [sp, #24]
 8008ce2:	eba8 0802 	sub.w	r8, r8, r2
 8008ce6:	1a8a      	subs	r2, r1, r2
 8008ce8:	9206      	str	r2, [sp, #24]
 8008cea:	b303      	cbz	r3, 8008d2e <_dtoa_r+0x6e6>
 8008cec:	9a08      	ldr	r2, [sp, #32]
 8008cee:	2a00      	cmp	r2, #0
 8008cf0:	f000 80a6 	beq.w	8008e40 <_dtoa_r+0x7f8>
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	dd13      	ble.n	8008d20 <_dtoa_r+0x6d8>
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8008d00:	f000 fbf6 	bl	80094f0 <__pow5mult>
 8008d04:	462a      	mov	r2, r5
 8008d06:	4601      	mov	r1, r0
 8008d08:	4607      	mov	r7, r0
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f000 fb4a 	bl	80093a4 <__multiply>
 8008d10:	4629      	mov	r1, r5
 8008d12:	900a      	str	r0, [sp, #40]	; 0x28
 8008d14:	4630      	mov	r0, r6
 8008d16:	f000 fa73 	bl	8009200 <_Bfree>
 8008d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d1e:	4615      	mov	r5, r2
 8008d20:	1b1a      	subs	r2, r3, r4
 8008d22:	d004      	beq.n	8008d2e <_dtoa_r+0x6e6>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 fbe2 	bl	80094f0 <__pow5mult>
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	2101      	movs	r1, #1
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 fb21 	bl	8009378 <__i2b>
 8008d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	f340 8082 	ble.w	8008e44 <_dtoa_r+0x7fc>
 8008d40:	461a      	mov	r2, r3
 8008d42:	4601      	mov	r1, r0
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 fbd3 	bl	80094f0 <__pow5mult>
 8008d4a:	9b07      	ldr	r3, [sp, #28]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	4604      	mov	r4, r0
 8008d50:	dd7b      	ble.n	8008e4a <_dtoa_r+0x802>
 8008d52:	2300      	movs	r3, #0
 8008d54:	930a      	str	r3, [sp, #40]	; 0x28
 8008d56:	6922      	ldr	r2, [r4, #16]
 8008d58:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d5c:	6910      	ldr	r0, [r2, #16]
 8008d5e:	f000 fabb 	bl	80092d8 <__hi0bits>
 8008d62:	f1c0 0020 	rsb	r0, r0, #32
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	4418      	add	r0, r3
 8008d6a:	f010 001f 	ands.w	r0, r0, #31
 8008d6e:	f000 808d 	beq.w	8008e8c <_dtoa_r+0x844>
 8008d72:	f1c0 0220 	rsb	r2, r0, #32
 8008d76:	2a04      	cmp	r2, #4
 8008d78:	f340 8086 	ble.w	8008e88 <_dtoa_r+0x840>
 8008d7c:	f1c0 001c 	rsb	r0, r0, #28
 8008d80:	9b05      	ldr	r3, [sp, #20]
 8008d82:	4403      	add	r3, r0
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	4403      	add	r3, r0
 8008d8a:	4480      	add	r8, r0
 8008d8c:	9306      	str	r3, [sp, #24]
 8008d8e:	9b05      	ldr	r3, [sp, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd05      	ble.n	8008da0 <_dtoa_r+0x758>
 8008d94:	4629      	mov	r1, r5
 8008d96:	461a      	mov	r2, r3
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f000 fc03 	bl	80095a4 <__lshift>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	9b06      	ldr	r3, [sp, #24]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd05      	ble.n	8008db2 <_dtoa_r+0x76a>
 8008da6:	4621      	mov	r1, r4
 8008da8:	461a      	mov	r2, r3
 8008daa:	4630      	mov	r0, r6
 8008dac:	f000 fbfa 	bl	80095a4 <__lshift>
 8008db0:	4604      	mov	r4, r0
 8008db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d06b      	beq.n	8008e90 <_dtoa_r+0x848>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f000 fc5e 	bl	800967c <__mcmp>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	da65      	bge.n	8008e90 <_dtoa_r+0x848>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f000 fa3a 	bl	8009244 <__multadd>
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 8192 	beq.w	8009102 <_dtoa_r+0xaba>
 8008dde:	4639      	mov	r1, r7
 8008de0:	2300      	movs	r3, #0
 8008de2:	220a      	movs	r2, #10
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 fa2d 	bl	8009244 <__multadd>
 8008dea:	f1ba 0f00 	cmp.w	sl, #0
 8008dee:	4607      	mov	r7, r0
 8008df0:	f300 808e 	bgt.w	8008f10 <_dtoa_r+0x8c8>
 8008df4:	9b07      	ldr	r3, [sp, #28]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	dc51      	bgt.n	8008e9e <_dtoa_r+0x856>
 8008dfa:	e089      	b.n	8008f10 <_dtoa_r+0x8c8>
 8008dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e02:	e751      	b.n	8008ca8 <_dtoa_r+0x660>
 8008e04:	f109 34ff 	add.w	r4, r9, #4294967295
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	bfbf      	itttt	lt
 8008e0c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008e0e:	1ae3      	sublt	r3, r4, r3
 8008e10:	18d2      	addlt	r2, r2, r3
 8008e12:	4613      	movlt	r3, r2
 8008e14:	bfb7      	itett	lt
 8008e16:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e18:	1b1c      	subge	r4, r3, r4
 8008e1a:	4623      	movlt	r3, r4
 8008e1c:	2400      	movlt	r4, #0
 8008e1e:	f1b9 0f00 	cmp.w	r9, #0
 8008e22:	bfb5      	itete	lt
 8008e24:	9a05      	ldrlt	r2, [sp, #20]
 8008e26:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008e2a:	eba2 0809 	sublt.w	r8, r2, r9
 8008e2e:	464a      	movge	r2, r9
 8008e30:	bfb8      	it	lt
 8008e32:	2200      	movlt	r2, #0
 8008e34:	e73b      	b.n	8008cae <_dtoa_r+0x666>
 8008e36:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008e3a:	9f08      	ldr	r7, [sp, #32]
 8008e3c:	461c      	mov	r4, r3
 8008e3e:	e743      	b.n	8008cc8 <_dtoa_r+0x680>
 8008e40:	461a      	mov	r2, r3
 8008e42:	e76f      	b.n	8008d24 <_dtoa_r+0x6dc>
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	dc18      	bgt.n	8008e7c <_dtoa_r+0x834>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	b9b3      	cbnz	r3, 8008e7c <_dtoa_r+0x834>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008e54:	b9a2      	cbnz	r2, 8008e80 <_dtoa_r+0x838>
 8008e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e5a:	0d12      	lsrs	r2, r2, #20
 8008e5c:	0512      	lsls	r2, r2, #20
 8008e5e:	b18a      	cbz	r2, 8008e84 <_dtoa_r+0x83c>
 8008e60:	9b05      	ldr	r3, [sp, #20]
 8008e62:	3301      	adds	r3, #1
 8008e64:	9305      	str	r3, [sp, #20]
 8008e66:	9b06      	ldr	r3, [sp, #24]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	9306      	str	r3, [sp, #24]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f47f af6f 	bne.w	8008d56 <_dtoa_r+0x70e>
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e774      	b.n	8008d66 <_dtoa_r+0x71e>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	e7f6      	b.n	8008e6e <_dtoa_r+0x826>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	e7f4      	b.n	8008e6e <_dtoa_r+0x826>
 8008e84:	920a      	str	r2, [sp, #40]	; 0x28
 8008e86:	e7f3      	b.n	8008e70 <_dtoa_r+0x828>
 8008e88:	d081      	beq.n	8008d8e <_dtoa_r+0x746>
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	301c      	adds	r0, #28
 8008e8e:	e777      	b.n	8008d80 <_dtoa_r+0x738>
 8008e90:	f1b9 0f00 	cmp.w	r9, #0
 8008e94:	dc37      	bgt.n	8008f06 <_dtoa_r+0x8be>
 8008e96:	9b07      	ldr	r3, [sp, #28]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	dd34      	ble.n	8008f06 <_dtoa_r+0x8be>
 8008e9c:	46ca      	mov	sl, r9
 8008e9e:	f1ba 0f00 	cmp.w	sl, #0
 8008ea2:	d10d      	bne.n	8008ec0 <_dtoa_r+0x878>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4653      	mov	r3, sl
 8008ea8:	2205      	movs	r2, #5
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f9ca 	bl	8009244 <__multadd>
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	f000 fbe1 	bl	800967c <__mcmp>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f73f adde 	bgt.w	8008a7c <_dtoa_r+0x434>
 8008ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec2:	f8dd 8000 	ldr.w	r8, [sp]
 8008ec6:	ea6f 0b03 	mvn.w	fp, r3
 8008eca:	f04f 0900 	mov.w	r9, #0
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f995 	bl	8009200 <_Bfree>
 8008ed6:	2f00      	cmp	r7, #0
 8008ed8:	f43f aea7 	beq.w	8008c2a <_dtoa_r+0x5e2>
 8008edc:	f1b9 0f00 	cmp.w	r9, #0
 8008ee0:	d005      	beq.n	8008eee <_dtoa_r+0x8a6>
 8008ee2:	45b9      	cmp	r9, r7
 8008ee4:	d003      	beq.n	8008eee <_dtoa_r+0x8a6>
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f000 f989 	bl	8009200 <_Bfree>
 8008eee:	4639      	mov	r1, r7
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f985 	bl	8009200 <_Bfree>
 8008ef6:	e698      	b.n	8008c2a <_dtoa_r+0x5e2>
 8008ef8:	2400      	movs	r4, #0
 8008efa:	4627      	mov	r7, r4
 8008efc:	e7e0      	b.n	8008ec0 <_dtoa_r+0x878>
 8008efe:	46bb      	mov	fp, r7
 8008f00:	4604      	mov	r4, r0
 8008f02:	4607      	mov	r7, r0
 8008f04:	e5ba      	b.n	8008a7c <_dtoa_r+0x434>
 8008f06:	9b08      	ldr	r3, [sp, #32]
 8008f08:	46ca      	mov	sl, r9
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8100 	beq.w	8009110 <_dtoa_r+0xac8>
 8008f10:	f1b8 0f00 	cmp.w	r8, #0
 8008f14:	dd05      	ble.n	8008f22 <_dtoa_r+0x8da>
 8008f16:	4639      	mov	r1, r7
 8008f18:	4642      	mov	r2, r8
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f000 fb42 	bl	80095a4 <__lshift>
 8008f20:	4607      	mov	r7, r0
 8008f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d05d      	beq.n	8008fe4 <_dtoa_r+0x99c>
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f000 f928 	bl	8009180 <_Balloc>
 8008f30:	4680      	mov	r8, r0
 8008f32:	b928      	cbnz	r0, 8008f40 <_dtoa_r+0x8f8>
 8008f34:	4b82      	ldr	r3, [pc, #520]	; (8009140 <_dtoa_r+0xaf8>)
 8008f36:	4602      	mov	r2, r0
 8008f38:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f3c:	f7ff bb9a 	b.w	8008674 <_dtoa_r+0x2c>
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	3202      	adds	r2, #2
 8008f44:	0092      	lsls	r2, r2, #2
 8008f46:	f107 010c 	add.w	r1, r7, #12
 8008f4a:	300c      	adds	r0, #12
 8008f4c:	f000 f90a 	bl	8009164 <memcpy>
 8008f50:	2201      	movs	r2, #1
 8008f52:	4641      	mov	r1, r8
 8008f54:	4630      	mov	r0, r6
 8008f56:	f000 fb25 	bl	80095a4 <__lshift>
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	9b00      	ldr	r3, [sp, #0]
 8008f62:	4453      	add	r3, sl
 8008f64:	9309      	str	r3, [sp, #36]	; 0x24
 8008f66:	9b02      	ldr	r3, [sp, #8]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	46b9      	mov	r9, r7
 8008f6e:	9308      	str	r3, [sp, #32]
 8008f70:	4607      	mov	r7, r0
 8008f72:	9b05      	ldr	r3, [sp, #20]
 8008f74:	4621      	mov	r1, r4
 8008f76:	3b01      	subs	r3, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	9302      	str	r3, [sp, #8]
 8008f7c:	f7ff fad6 	bl	800852c <quorem>
 8008f80:	4603      	mov	r3, r0
 8008f82:	3330      	adds	r3, #48	; 0x30
 8008f84:	9006      	str	r0, [sp, #24]
 8008f86:	4649      	mov	r1, r9
 8008f88:	4628      	mov	r0, r5
 8008f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f8c:	f000 fb76 	bl	800967c <__mcmp>
 8008f90:	463a      	mov	r2, r7
 8008f92:	4682      	mov	sl, r0
 8008f94:	4621      	mov	r1, r4
 8008f96:	4630      	mov	r0, r6
 8008f98:	f000 fb8c 	bl	80096b4 <__mdiff>
 8008f9c:	68c2      	ldr	r2, [r0, #12]
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	bb0a      	cbnz	r2, 8008fe8 <_dtoa_r+0x9a0>
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f000 fb68 	bl	800967c <__mcmp>
 8008fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fae:	4602      	mov	r2, r0
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	920e      	str	r2, [sp, #56]	; 0x38
 8008fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb8:	f000 f922 	bl	8009200 <_Bfree>
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008fc4:	ea43 0102 	orr.w	r1, r3, r2
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fce:	d10d      	bne.n	8008fec <_dtoa_r+0x9a4>
 8008fd0:	2b39      	cmp	r3, #57	; 0x39
 8008fd2:	d029      	beq.n	8009028 <_dtoa_r+0x9e0>
 8008fd4:	f1ba 0f00 	cmp.w	sl, #0
 8008fd8:	dd01      	ble.n	8008fde <_dtoa_r+0x996>
 8008fda:	9b06      	ldr	r3, [sp, #24]
 8008fdc:	3331      	adds	r3, #49	; 0x31
 8008fde:	9a02      	ldr	r2, [sp, #8]
 8008fe0:	7013      	strb	r3, [r2, #0]
 8008fe2:	e774      	b.n	8008ece <_dtoa_r+0x886>
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	e7b8      	b.n	8008f5a <_dtoa_r+0x912>
 8008fe8:	2201      	movs	r2, #1
 8008fea:	e7e1      	b.n	8008fb0 <_dtoa_r+0x968>
 8008fec:	f1ba 0f00 	cmp.w	sl, #0
 8008ff0:	db06      	blt.n	8009000 <_dtoa_r+0x9b8>
 8008ff2:	9907      	ldr	r1, [sp, #28]
 8008ff4:	ea41 0a0a 	orr.w	sl, r1, sl
 8008ff8:	9908      	ldr	r1, [sp, #32]
 8008ffa:	ea5a 0101 	orrs.w	r1, sl, r1
 8008ffe:	d120      	bne.n	8009042 <_dtoa_r+0x9fa>
 8009000:	2a00      	cmp	r2, #0
 8009002:	ddec      	ble.n	8008fde <_dtoa_r+0x996>
 8009004:	4629      	mov	r1, r5
 8009006:	2201      	movs	r2, #1
 8009008:	4630      	mov	r0, r6
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	f000 faca 	bl	80095a4 <__lshift>
 8009010:	4621      	mov	r1, r4
 8009012:	4605      	mov	r5, r0
 8009014:	f000 fb32 	bl	800967c <__mcmp>
 8009018:	2800      	cmp	r0, #0
 800901a:	9b05      	ldr	r3, [sp, #20]
 800901c:	dc02      	bgt.n	8009024 <_dtoa_r+0x9dc>
 800901e:	d1de      	bne.n	8008fde <_dtoa_r+0x996>
 8009020:	07da      	lsls	r2, r3, #31
 8009022:	d5dc      	bpl.n	8008fde <_dtoa_r+0x996>
 8009024:	2b39      	cmp	r3, #57	; 0x39
 8009026:	d1d8      	bne.n	8008fda <_dtoa_r+0x992>
 8009028:	9a02      	ldr	r2, [sp, #8]
 800902a:	2339      	movs	r3, #57	; 0x39
 800902c:	7013      	strb	r3, [r2, #0]
 800902e:	4643      	mov	r3, r8
 8009030:	4698      	mov	r8, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009038:	2a39      	cmp	r2, #57	; 0x39
 800903a:	d051      	beq.n	80090e0 <_dtoa_r+0xa98>
 800903c:	3201      	adds	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	e745      	b.n	8008ece <_dtoa_r+0x886>
 8009042:	2a00      	cmp	r2, #0
 8009044:	dd03      	ble.n	800904e <_dtoa_r+0xa06>
 8009046:	2b39      	cmp	r3, #57	; 0x39
 8009048:	d0ee      	beq.n	8009028 <_dtoa_r+0x9e0>
 800904a:	3301      	adds	r3, #1
 800904c:	e7c7      	b.n	8008fde <_dtoa_r+0x996>
 800904e:	9a05      	ldr	r2, [sp, #20]
 8009050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009052:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009056:	428a      	cmp	r2, r1
 8009058:	d02b      	beq.n	80090b2 <_dtoa_r+0xa6a>
 800905a:	4629      	mov	r1, r5
 800905c:	2300      	movs	r3, #0
 800905e:	220a      	movs	r2, #10
 8009060:	4630      	mov	r0, r6
 8009062:	f000 f8ef 	bl	8009244 <__multadd>
 8009066:	45b9      	cmp	r9, r7
 8009068:	4605      	mov	r5, r0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	f04f 020a 	mov.w	r2, #10
 8009072:	4649      	mov	r1, r9
 8009074:	4630      	mov	r0, r6
 8009076:	d107      	bne.n	8009088 <_dtoa_r+0xa40>
 8009078:	f000 f8e4 	bl	8009244 <__multadd>
 800907c:	4681      	mov	r9, r0
 800907e:	4607      	mov	r7, r0
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	3301      	adds	r3, #1
 8009084:	9305      	str	r3, [sp, #20]
 8009086:	e774      	b.n	8008f72 <_dtoa_r+0x92a>
 8009088:	f000 f8dc 	bl	8009244 <__multadd>
 800908c:	4639      	mov	r1, r7
 800908e:	4681      	mov	r9, r0
 8009090:	2300      	movs	r3, #0
 8009092:	220a      	movs	r2, #10
 8009094:	4630      	mov	r0, r6
 8009096:	f000 f8d5 	bl	8009244 <__multadd>
 800909a:	4607      	mov	r7, r0
 800909c:	e7f0      	b.n	8009080 <_dtoa_r+0xa38>
 800909e:	f1ba 0f00 	cmp.w	sl, #0
 80090a2:	9a00      	ldr	r2, [sp, #0]
 80090a4:	bfcc      	ite	gt
 80090a6:	46d0      	movgt	r8, sl
 80090a8:	f04f 0801 	movle.w	r8, #1
 80090ac:	4490      	add	r8, r2
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	4629      	mov	r1, r5
 80090b4:	2201      	movs	r2, #1
 80090b6:	4630      	mov	r0, r6
 80090b8:	9302      	str	r3, [sp, #8]
 80090ba:	f000 fa73 	bl	80095a4 <__lshift>
 80090be:	4621      	mov	r1, r4
 80090c0:	4605      	mov	r5, r0
 80090c2:	f000 fadb 	bl	800967c <__mcmp>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	dcb1      	bgt.n	800902e <_dtoa_r+0x9e6>
 80090ca:	d102      	bne.n	80090d2 <_dtoa_r+0xa8a>
 80090cc:	9b02      	ldr	r3, [sp, #8]
 80090ce:	07db      	lsls	r3, r3, #31
 80090d0:	d4ad      	bmi.n	800902e <_dtoa_r+0x9e6>
 80090d2:	4643      	mov	r3, r8
 80090d4:	4698      	mov	r8, r3
 80090d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090da:	2a30      	cmp	r2, #48	; 0x30
 80090dc:	d0fa      	beq.n	80090d4 <_dtoa_r+0xa8c>
 80090de:	e6f6      	b.n	8008ece <_dtoa_r+0x886>
 80090e0:	9a00      	ldr	r2, [sp, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d1a4      	bne.n	8009030 <_dtoa_r+0x9e8>
 80090e6:	f10b 0b01 	add.w	fp, fp, #1
 80090ea:	2331      	movs	r3, #49	; 0x31
 80090ec:	e778      	b.n	8008fe0 <_dtoa_r+0x998>
 80090ee:	4b15      	ldr	r3, [pc, #84]	; (8009144 <_dtoa_r+0xafc>)
 80090f0:	f7ff bb12 	b.w	8008718 <_dtoa_r+0xd0>
 80090f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f47f aaee 	bne.w	80086d8 <_dtoa_r+0x90>
 80090fc:	4b12      	ldr	r3, [pc, #72]	; (8009148 <_dtoa_r+0xb00>)
 80090fe:	f7ff bb0b 	b.w	8008718 <_dtoa_r+0xd0>
 8009102:	f1ba 0f00 	cmp.w	sl, #0
 8009106:	dc03      	bgt.n	8009110 <_dtoa_r+0xac8>
 8009108:	9b07      	ldr	r3, [sp, #28]
 800910a:	2b02      	cmp	r3, #2
 800910c:	f73f aec7 	bgt.w	8008e9e <_dtoa_r+0x856>
 8009110:	f8dd 8000 	ldr.w	r8, [sp]
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f7ff fa08 	bl	800852c <quorem>
 800911c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009120:	f808 3b01 	strb.w	r3, [r8], #1
 8009124:	9a00      	ldr	r2, [sp, #0]
 8009126:	eba8 0202 	sub.w	r2, r8, r2
 800912a:	4592      	cmp	sl, r2
 800912c:	ddb7      	ble.n	800909e <_dtoa_r+0xa56>
 800912e:	4629      	mov	r1, r5
 8009130:	2300      	movs	r3, #0
 8009132:	220a      	movs	r2, #10
 8009134:	4630      	mov	r0, r6
 8009136:	f000 f885 	bl	8009244 <__multadd>
 800913a:	4605      	mov	r5, r0
 800913c:	e7ea      	b.n	8009114 <_dtoa_r+0xacc>
 800913e:	bf00      	nop
 8009140:	0800aae0 	.word	0x0800aae0
 8009144:	0800a938 	.word	0x0800a938
 8009148:	0800aa5d 	.word	0x0800aa5d

0800914c <_localeconv_r>:
 800914c:	4800      	ldr	r0, [pc, #0]	; (8009150 <_localeconv_r+0x4>)
 800914e:	4770      	bx	lr
 8009150:	2000017c 	.word	0x2000017c

08009154 <malloc>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <malloc+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f000 bbef 	b.w	800993c <_malloc_r>
 800915e:	bf00      	nop
 8009160:	20000028 	.word	0x20000028

08009164 <memcpy>:
 8009164:	440a      	add	r2, r1
 8009166:	4291      	cmp	r1, r2
 8009168:	f100 33ff 	add.w	r3, r0, #4294967295
 800916c:	d100      	bne.n	8009170 <memcpy+0xc>
 800916e:	4770      	bx	lr
 8009170:	b510      	push	{r4, lr}
 8009172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800917a:	4291      	cmp	r1, r2
 800917c:	d1f9      	bne.n	8009172 <memcpy+0xe>
 800917e:	bd10      	pop	{r4, pc}

08009180 <_Balloc>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	b976      	cbnz	r6, 80091a8 <_Balloc+0x28>
 800918a:	2010      	movs	r0, #16
 800918c:	f7ff ffe2 	bl	8009154 <malloc>
 8009190:	4602      	mov	r2, r0
 8009192:	6260      	str	r0, [r4, #36]	; 0x24
 8009194:	b920      	cbnz	r0, 80091a0 <_Balloc+0x20>
 8009196:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <_Balloc+0x78>)
 8009198:	4818      	ldr	r0, [pc, #96]	; (80091fc <_Balloc+0x7c>)
 800919a:	2166      	movs	r1, #102	; 0x66
 800919c:	f000 fd94 	bl	8009cc8 <__assert_func>
 80091a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091a4:	6006      	str	r6, [r0, #0]
 80091a6:	60c6      	str	r6, [r0, #12]
 80091a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091aa:	68f3      	ldr	r3, [r6, #12]
 80091ac:	b183      	cbz	r3, 80091d0 <_Balloc+0x50>
 80091ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091b6:	b9b8      	cbnz	r0, 80091e8 <_Balloc+0x68>
 80091b8:	2101      	movs	r1, #1
 80091ba:	fa01 f605 	lsl.w	r6, r1, r5
 80091be:	1d72      	adds	r2, r6, #5
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fb5a 	bl	800987c <_calloc_r>
 80091c8:	b160      	cbz	r0, 80091e4 <_Balloc+0x64>
 80091ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091ce:	e00e      	b.n	80091ee <_Balloc+0x6e>
 80091d0:	2221      	movs	r2, #33	; 0x21
 80091d2:	2104      	movs	r1, #4
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fb51 	bl	800987c <_calloc_r>
 80091da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091dc:	60f0      	str	r0, [r6, #12]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e4      	bne.n	80091ae <_Balloc+0x2e>
 80091e4:	2000      	movs	r0, #0
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	6802      	ldr	r2, [r0, #0]
 80091ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ee:	2300      	movs	r3, #0
 80091f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091f4:	e7f7      	b.n	80091e6 <_Balloc+0x66>
 80091f6:	bf00      	nop
 80091f8:	0800aa6a 	.word	0x0800aa6a
 80091fc:	0800aaf1 	.word	0x0800aaf1

08009200 <_Bfree>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009204:	4605      	mov	r5, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b976      	cbnz	r6, 8009228 <_Bfree+0x28>
 800920a:	2010      	movs	r0, #16
 800920c:	f7ff ffa2 	bl	8009154 <malloc>
 8009210:	4602      	mov	r2, r0
 8009212:	6268      	str	r0, [r5, #36]	; 0x24
 8009214:	b920      	cbnz	r0, 8009220 <_Bfree+0x20>
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <_Bfree+0x3c>)
 8009218:	4809      	ldr	r0, [pc, #36]	; (8009240 <_Bfree+0x40>)
 800921a:	218a      	movs	r1, #138	; 0x8a
 800921c:	f000 fd54 	bl	8009cc8 <__assert_func>
 8009220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009224:	6006      	str	r6, [r0, #0]
 8009226:	60c6      	str	r6, [r0, #12]
 8009228:	b13c      	cbz	r4, 800923a <_Bfree+0x3a>
 800922a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800922c:	6862      	ldr	r2, [r4, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009234:	6021      	str	r1, [r4, #0]
 8009236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	0800aa6a 	.word	0x0800aa6a
 8009240:	0800aaf1 	.word	0x0800aaf1

08009244 <__multadd>:
 8009244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009248:	690e      	ldr	r6, [r1, #16]
 800924a:	4607      	mov	r7, r0
 800924c:	4698      	mov	r8, r3
 800924e:	460c      	mov	r4, r1
 8009250:	f101 0014 	add.w	r0, r1, #20
 8009254:	2300      	movs	r3, #0
 8009256:	6805      	ldr	r5, [r0, #0]
 8009258:	b2a9      	uxth	r1, r5
 800925a:	fb02 8101 	mla	r1, r2, r1, r8
 800925e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009262:	0c2d      	lsrs	r5, r5, #16
 8009264:	fb02 c505 	mla	r5, r2, r5, ip
 8009268:	b289      	uxth	r1, r1
 800926a:	3301      	adds	r3, #1
 800926c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009270:	429e      	cmp	r6, r3
 8009272:	f840 1b04 	str.w	r1, [r0], #4
 8009276:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800927a:	dcec      	bgt.n	8009256 <__multadd+0x12>
 800927c:	f1b8 0f00 	cmp.w	r8, #0
 8009280:	d022      	beq.n	80092c8 <__multadd+0x84>
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	42b3      	cmp	r3, r6
 8009286:	dc19      	bgt.n	80092bc <__multadd+0x78>
 8009288:	6861      	ldr	r1, [r4, #4]
 800928a:	4638      	mov	r0, r7
 800928c:	3101      	adds	r1, #1
 800928e:	f7ff ff77 	bl	8009180 <_Balloc>
 8009292:	4605      	mov	r5, r0
 8009294:	b928      	cbnz	r0, 80092a2 <__multadd+0x5e>
 8009296:	4602      	mov	r2, r0
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <__multadd+0x8c>)
 800929a:	480e      	ldr	r0, [pc, #56]	; (80092d4 <__multadd+0x90>)
 800929c:	21b5      	movs	r1, #181	; 0xb5
 800929e:	f000 fd13 	bl	8009cc8 <__assert_func>
 80092a2:	6922      	ldr	r2, [r4, #16]
 80092a4:	3202      	adds	r2, #2
 80092a6:	f104 010c 	add.w	r1, r4, #12
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	300c      	adds	r0, #12
 80092ae:	f7ff ff59 	bl	8009164 <memcpy>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4638      	mov	r0, r7
 80092b6:	f7ff ffa3 	bl	8009200 <_Bfree>
 80092ba:	462c      	mov	r4, r5
 80092bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80092c0:	3601      	adds	r6, #1
 80092c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80092c6:	6126      	str	r6, [r4, #16]
 80092c8:	4620      	mov	r0, r4
 80092ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ce:	bf00      	nop
 80092d0:	0800aae0 	.word	0x0800aae0
 80092d4:	0800aaf1 	.word	0x0800aaf1

080092d8 <__hi0bits>:
 80092d8:	0c03      	lsrs	r3, r0, #16
 80092da:	041b      	lsls	r3, r3, #16
 80092dc:	b9d3      	cbnz	r3, 8009314 <__hi0bits+0x3c>
 80092de:	0400      	lsls	r0, r0, #16
 80092e0:	2310      	movs	r3, #16
 80092e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092e6:	bf04      	itt	eq
 80092e8:	0200      	lsleq	r0, r0, #8
 80092ea:	3308      	addeq	r3, #8
 80092ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092f0:	bf04      	itt	eq
 80092f2:	0100      	lsleq	r0, r0, #4
 80092f4:	3304      	addeq	r3, #4
 80092f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092fa:	bf04      	itt	eq
 80092fc:	0080      	lsleq	r0, r0, #2
 80092fe:	3302      	addeq	r3, #2
 8009300:	2800      	cmp	r0, #0
 8009302:	db05      	blt.n	8009310 <__hi0bits+0x38>
 8009304:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009308:	f103 0301 	add.w	r3, r3, #1
 800930c:	bf08      	it	eq
 800930e:	2320      	moveq	r3, #32
 8009310:	4618      	mov	r0, r3
 8009312:	4770      	bx	lr
 8009314:	2300      	movs	r3, #0
 8009316:	e7e4      	b.n	80092e2 <__hi0bits+0xa>

08009318 <__lo0bits>:
 8009318:	6803      	ldr	r3, [r0, #0]
 800931a:	f013 0207 	ands.w	r2, r3, #7
 800931e:	4601      	mov	r1, r0
 8009320:	d00b      	beq.n	800933a <__lo0bits+0x22>
 8009322:	07da      	lsls	r2, r3, #31
 8009324:	d424      	bmi.n	8009370 <__lo0bits+0x58>
 8009326:	0798      	lsls	r0, r3, #30
 8009328:	bf49      	itett	mi
 800932a:	085b      	lsrmi	r3, r3, #1
 800932c:	089b      	lsrpl	r3, r3, #2
 800932e:	2001      	movmi	r0, #1
 8009330:	600b      	strmi	r3, [r1, #0]
 8009332:	bf5c      	itt	pl
 8009334:	600b      	strpl	r3, [r1, #0]
 8009336:	2002      	movpl	r0, #2
 8009338:	4770      	bx	lr
 800933a:	b298      	uxth	r0, r3
 800933c:	b9b0      	cbnz	r0, 800936c <__lo0bits+0x54>
 800933e:	0c1b      	lsrs	r3, r3, #16
 8009340:	2010      	movs	r0, #16
 8009342:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009346:	bf04      	itt	eq
 8009348:	0a1b      	lsreq	r3, r3, #8
 800934a:	3008      	addeq	r0, #8
 800934c:	071a      	lsls	r2, r3, #28
 800934e:	bf04      	itt	eq
 8009350:	091b      	lsreq	r3, r3, #4
 8009352:	3004      	addeq	r0, #4
 8009354:	079a      	lsls	r2, r3, #30
 8009356:	bf04      	itt	eq
 8009358:	089b      	lsreq	r3, r3, #2
 800935a:	3002      	addeq	r0, #2
 800935c:	07da      	lsls	r2, r3, #31
 800935e:	d403      	bmi.n	8009368 <__lo0bits+0x50>
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	f100 0001 	add.w	r0, r0, #1
 8009366:	d005      	beq.n	8009374 <__lo0bits+0x5c>
 8009368:	600b      	str	r3, [r1, #0]
 800936a:	4770      	bx	lr
 800936c:	4610      	mov	r0, r2
 800936e:	e7e8      	b.n	8009342 <__lo0bits+0x2a>
 8009370:	2000      	movs	r0, #0
 8009372:	4770      	bx	lr
 8009374:	2020      	movs	r0, #32
 8009376:	4770      	bx	lr

08009378 <__i2b>:
 8009378:	b510      	push	{r4, lr}
 800937a:	460c      	mov	r4, r1
 800937c:	2101      	movs	r1, #1
 800937e:	f7ff feff 	bl	8009180 <_Balloc>
 8009382:	4602      	mov	r2, r0
 8009384:	b928      	cbnz	r0, 8009392 <__i2b+0x1a>
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <__i2b+0x24>)
 8009388:	4805      	ldr	r0, [pc, #20]	; (80093a0 <__i2b+0x28>)
 800938a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800938e:	f000 fc9b 	bl	8009cc8 <__assert_func>
 8009392:	2301      	movs	r3, #1
 8009394:	6144      	str	r4, [r0, #20]
 8009396:	6103      	str	r3, [r0, #16]
 8009398:	bd10      	pop	{r4, pc}
 800939a:	bf00      	nop
 800939c:	0800aae0 	.word	0x0800aae0
 80093a0:	0800aaf1 	.word	0x0800aaf1

080093a4 <__multiply>:
 80093a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	4614      	mov	r4, r2
 80093aa:	690a      	ldr	r2, [r1, #16]
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	bfb8      	it	lt
 80093b2:	460b      	movlt	r3, r1
 80093b4:	460d      	mov	r5, r1
 80093b6:	bfbc      	itt	lt
 80093b8:	4625      	movlt	r5, r4
 80093ba:	461c      	movlt	r4, r3
 80093bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80093c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80093c4:	68ab      	ldr	r3, [r5, #8]
 80093c6:	6869      	ldr	r1, [r5, #4]
 80093c8:	eb0a 0709 	add.w	r7, sl, r9
 80093cc:	42bb      	cmp	r3, r7
 80093ce:	b085      	sub	sp, #20
 80093d0:	bfb8      	it	lt
 80093d2:	3101      	addlt	r1, #1
 80093d4:	f7ff fed4 	bl	8009180 <_Balloc>
 80093d8:	b930      	cbnz	r0, 80093e8 <__multiply+0x44>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b42      	ldr	r3, [pc, #264]	; (80094e8 <__multiply+0x144>)
 80093de:	4843      	ldr	r0, [pc, #268]	; (80094ec <__multiply+0x148>)
 80093e0:	f240 115d 	movw	r1, #349	; 0x15d
 80093e4:	f000 fc70 	bl	8009cc8 <__assert_func>
 80093e8:	f100 0614 	add.w	r6, r0, #20
 80093ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80093f0:	4633      	mov	r3, r6
 80093f2:	2200      	movs	r2, #0
 80093f4:	4543      	cmp	r3, r8
 80093f6:	d31e      	bcc.n	8009436 <__multiply+0x92>
 80093f8:	f105 0c14 	add.w	ip, r5, #20
 80093fc:	f104 0314 	add.w	r3, r4, #20
 8009400:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009404:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009408:	9202      	str	r2, [sp, #8]
 800940a:	ebac 0205 	sub.w	r2, ip, r5
 800940e:	3a15      	subs	r2, #21
 8009410:	f022 0203 	bic.w	r2, r2, #3
 8009414:	3204      	adds	r2, #4
 8009416:	f105 0115 	add.w	r1, r5, #21
 800941a:	458c      	cmp	ip, r1
 800941c:	bf38      	it	cc
 800941e:	2204      	movcc	r2, #4
 8009420:	9201      	str	r2, [sp, #4]
 8009422:	9a02      	ldr	r2, [sp, #8]
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d808      	bhi.n	800943c <__multiply+0x98>
 800942a:	2f00      	cmp	r7, #0
 800942c:	dc55      	bgt.n	80094da <__multiply+0x136>
 800942e:	6107      	str	r7, [r0, #16]
 8009430:	b005      	add	sp, #20
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	f843 2b04 	str.w	r2, [r3], #4
 800943a:	e7db      	b.n	80093f4 <__multiply+0x50>
 800943c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009440:	f1ba 0f00 	cmp.w	sl, #0
 8009444:	d020      	beq.n	8009488 <__multiply+0xe4>
 8009446:	f105 0e14 	add.w	lr, r5, #20
 800944a:	46b1      	mov	r9, r6
 800944c:	2200      	movs	r2, #0
 800944e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009452:	f8d9 b000 	ldr.w	fp, [r9]
 8009456:	b2a1      	uxth	r1, r4
 8009458:	fa1f fb8b 	uxth.w	fp, fp
 800945c:	fb0a b101 	mla	r1, sl, r1, fp
 8009460:	4411      	add	r1, r2
 8009462:	f8d9 2000 	ldr.w	r2, [r9]
 8009466:	0c24      	lsrs	r4, r4, #16
 8009468:	0c12      	lsrs	r2, r2, #16
 800946a:	fb0a 2404 	mla	r4, sl, r4, r2
 800946e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009472:	b289      	uxth	r1, r1
 8009474:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009478:	45f4      	cmp	ip, lr
 800947a:	f849 1b04 	str.w	r1, [r9], #4
 800947e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009482:	d8e4      	bhi.n	800944e <__multiply+0xaa>
 8009484:	9901      	ldr	r1, [sp, #4]
 8009486:	5072      	str	r2, [r6, r1]
 8009488:	9a03      	ldr	r2, [sp, #12]
 800948a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800948e:	3304      	adds	r3, #4
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	d01f      	beq.n	80094d6 <__multiply+0x132>
 8009496:	6834      	ldr	r4, [r6, #0]
 8009498:	f105 0114 	add.w	r1, r5, #20
 800949c:	46b6      	mov	lr, r6
 800949e:	f04f 0a00 	mov.w	sl, #0
 80094a2:	880a      	ldrh	r2, [r1, #0]
 80094a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80094a8:	fb09 b202 	mla	r2, r9, r2, fp
 80094ac:	4492      	add	sl, r2
 80094ae:	b2a4      	uxth	r4, r4
 80094b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80094b4:	f84e 4b04 	str.w	r4, [lr], #4
 80094b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80094bc:	f8be 2000 	ldrh.w	r2, [lr]
 80094c0:	0c24      	lsrs	r4, r4, #16
 80094c2:	fb09 2404 	mla	r4, r9, r4, r2
 80094c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80094ca:	458c      	cmp	ip, r1
 80094cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80094d0:	d8e7      	bhi.n	80094a2 <__multiply+0xfe>
 80094d2:	9a01      	ldr	r2, [sp, #4]
 80094d4:	50b4      	str	r4, [r6, r2]
 80094d6:	3604      	adds	r6, #4
 80094d8:	e7a3      	b.n	8009422 <__multiply+0x7e>
 80094da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1a5      	bne.n	800942e <__multiply+0x8a>
 80094e2:	3f01      	subs	r7, #1
 80094e4:	e7a1      	b.n	800942a <__multiply+0x86>
 80094e6:	bf00      	nop
 80094e8:	0800aae0 	.word	0x0800aae0
 80094ec:	0800aaf1 	.word	0x0800aaf1

080094f0 <__pow5mult>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	4615      	mov	r5, r2
 80094f6:	f012 0203 	ands.w	r2, r2, #3
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	d007      	beq.n	8009510 <__pow5mult+0x20>
 8009500:	4c25      	ldr	r4, [pc, #148]	; (8009598 <__pow5mult+0xa8>)
 8009502:	3a01      	subs	r2, #1
 8009504:	2300      	movs	r3, #0
 8009506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800950a:	f7ff fe9b 	bl	8009244 <__multadd>
 800950e:	4607      	mov	r7, r0
 8009510:	10ad      	asrs	r5, r5, #2
 8009512:	d03d      	beq.n	8009590 <__pow5mult+0xa0>
 8009514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009516:	b97c      	cbnz	r4, 8009538 <__pow5mult+0x48>
 8009518:	2010      	movs	r0, #16
 800951a:	f7ff fe1b 	bl	8009154 <malloc>
 800951e:	4602      	mov	r2, r0
 8009520:	6270      	str	r0, [r6, #36]	; 0x24
 8009522:	b928      	cbnz	r0, 8009530 <__pow5mult+0x40>
 8009524:	4b1d      	ldr	r3, [pc, #116]	; (800959c <__pow5mult+0xac>)
 8009526:	481e      	ldr	r0, [pc, #120]	; (80095a0 <__pow5mult+0xb0>)
 8009528:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800952c:	f000 fbcc 	bl	8009cc8 <__assert_func>
 8009530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009534:	6004      	str	r4, [r0, #0]
 8009536:	60c4      	str	r4, [r0, #12]
 8009538:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800953c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009540:	b94c      	cbnz	r4, 8009556 <__pow5mult+0x66>
 8009542:	f240 2171 	movw	r1, #625	; 0x271
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff ff16 	bl	8009378 <__i2b>
 800954c:	2300      	movs	r3, #0
 800954e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009552:	4604      	mov	r4, r0
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	f04f 0900 	mov.w	r9, #0
 800955a:	07eb      	lsls	r3, r5, #31
 800955c:	d50a      	bpl.n	8009574 <__pow5mult+0x84>
 800955e:	4639      	mov	r1, r7
 8009560:	4622      	mov	r2, r4
 8009562:	4630      	mov	r0, r6
 8009564:	f7ff ff1e 	bl	80093a4 <__multiply>
 8009568:	4639      	mov	r1, r7
 800956a:	4680      	mov	r8, r0
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff fe47 	bl	8009200 <_Bfree>
 8009572:	4647      	mov	r7, r8
 8009574:	106d      	asrs	r5, r5, #1
 8009576:	d00b      	beq.n	8009590 <__pow5mult+0xa0>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	b938      	cbnz	r0, 800958c <__pow5mult+0x9c>
 800957c:	4622      	mov	r2, r4
 800957e:	4621      	mov	r1, r4
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff ff0f 	bl	80093a4 <__multiply>
 8009586:	6020      	str	r0, [r4, #0]
 8009588:	f8c0 9000 	str.w	r9, [r0]
 800958c:	4604      	mov	r4, r0
 800958e:	e7e4      	b.n	800955a <__pow5mult+0x6a>
 8009590:	4638      	mov	r0, r7
 8009592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009596:	bf00      	nop
 8009598:	0800ac48 	.word	0x0800ac48
 800959c:	0800aa6a 	.word	0x0800aa6a
 80095a0:	0800aaf1 	.word	0x0800aaf1

080095a4 <__lshift>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	6849      	ldr	r1, [r1, #4]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095b2:	68a3      	ldr	r3, [r4, #8]
 80095b4:	4607      	mov	r7, r0
 80095b6:	4691      	mov	r9, r2
 80095b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095bc:	f108 0601 	add.w	r6, r8, #1
 80095c0:	42b3      	cmp	r3, r6
 80095c2:	db0b      	blt.n	80095dc <__lshift+0x38>
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff fddb 	bl	8009180 <_Balloc>
 80095ca:	4605      	mov	r5, r0
 80095cc:	b948      	cbnz	r0, 80095e2 <__lshift+0x3e>
 80095ce:	4602      	mov	r2, r0
 80095d0:	4b28      	ldr	r3, [pc, #160]	; (8009674 <__lshift+0xd0>)
 80095d2:	4829      	ldr	r0, [pc, #164]	; (8009678 <__lshift+0xd4>)
 80095d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80095d8:	f000 fb76 	bl	8009cc8 <__assert_func>
 80095dc:	3101      	adds	r1, #1
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	e7ee      	b.n	80095c0 <__lshift+0x1c>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f100 0114 	add.w	r1, r0, #20
 80095e8:	f100 0210 	add.w	r2, r0, #16
 80095ec:	4618      	mov	r0, r3
 80095ee:	4553      	cmp	r3, sl
 80095f0:	db33      	blt.n	800965a <__lshift+0xb6>
 80095f2:	6920      	ldr	r0, [r4, #16]
 80095f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095f8:	f104 0314 	add.w	r3, r4, #20
 80095fc:	f019 091f 	ands.w	r9, r9, #31
 8009600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009608:	d02b      	beq.n	8009662 <__lshift+0xbe>
 800960a:	f1c9 0e20 	rsb	lr, r9, #32
 800960e:	468a      	mov	sl, r1
 8009610:	2200      	movs	r2, #0
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	fa00 f009 	lsl.w	r0, r0, r9
 8009618:	4302      	orrs	r2, r0
 800961a:	f84a 2b04 	str.w	r2, [sl], #4
 800961e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009622:	459c      	cmp	ip, r3
 8009624:	fa22 f20e 	lsr.w	r2, r2, lr
 8009628:	d8f3      	bhi.n	8009612 <__lshift+0x6e>
 800962a:	ebac 0304 	sub.w	r3, ip, r4
 800962e:	3b15      	subs	r3, #21
 8009630:	f023 0303 	bic.w	r3, r3, #3
 8009634:	3304      	adds	r3, #4
 8009636:	f104 0015 	add.w	r0, r4, #21
 800963a:	4584      	cmp	ip, r0
 800963c:	bf38      	it	cc
 800963e:	2304      	movcc	r3, #4
 8009640:	50ca      	str	r2, [r1, r3]
 8009642:	b10a      	cbz	r2, 8009648 <__lshift+0xa4>
 8009644:	f108 0602 	add.w	r6, r8, #2
 8009648:	3e01      	subs	r6, #1
 800964a:	4638      	mov	r0, r7
 800964c:	612e      	str	r6, [r5, #16]
 800964e:	4621      	mov	r1, r4
 8009650:	f7ff fdd6 	bl	8009200 <_Bfree>
 8009654:	4628      	mov	r0, r5
 8009656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965a:	f842 0f04 	str.w	r0, [r2, #4]!
 800965e:	3301      	adds	r3, #1
 8009660:	e7c5      	b.n	80095ee <__lshift+0x4a>
 8009662:	3904      	subs	r1, #4
 8009664:	f853 2b04 	ldr.w	r2, [r3], #4
 8009668:	f841 2f04 	str.w	r2, [r1, #4]!
 800966c:	459c      	cmp	ip, r3
 800966e:	d8f9      	bhi.n	8009664 <__lshift+0xc0>
 8009670:	e7ea      	b.n	8009648 <__lshift+0xa4>
 8009672:	bf00      	nop
 8009674:	0800aae0 	.word	0x0800aae0
 8009678:	0800aaf1 	.word	0x0800aaf1

0800967c <__mcmp>:
 800967c:	b530      	push	{r4, r5, lr}
 800967e:	6902      	ldr	r2, [r0, #16]
 8009680:	690c      	ldr	r4, [r1, #16]
 8009682:	1b12      	subs	r2, r2, r4
 8009684:	d10e      	bne.n	80096a4 <__mcmp+0x28>
 8009686:	f100 0314 	add.w	r3, r0, #20
 800968a:	3114      	adds	r1, #20
 800968c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009690:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009694:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009698:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800969c:	42a5      	cmp	r5, r4
 800969e:	d003      	beq.n	80096a8 <__mcmp+0x2c>
 80096a0:	d305      	bcc.n	80096ae <__mcmp+0x32>
 80096a2:	2201      	movs	r2, #1
 80096a4:	4610      	mov	r0, r2
 80096a6:	bd30      	pop	{r4, r5, pc}
 80096a8:	4283      	cmp	r3, r0
 80096aa:	d3f3      	bcc.n	8009694 <__mcmp+0x18>
 80096ac:	e7fa      	b.n	80096a4 <__mcmp+0x28>
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	e7f7      	b.n	80096a4 <__mcmp+0x28>

080096b4 <__mdiff>:
 80096b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	460c      	mov	r4, r1
 80096ba:	4606      	mov	r6, r0
 80096bc:	4611      	mov	r1, r2
 80096be:	4620      	mov	r0, r4
 80096c0:	4617      	mov	r7, r2
 80096c2:	f7ff ffdb 	bl	800967c <__mcmp>
 80096c6:	1e05      	subs	r5, r0, #0
 80096c8:	d110      	bne.n	80096ec <__mdiff+0x38>
 80096ca:	4629      	mov	r1, r5
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fd57 	bl	8009180 <_Balloc>
 80096d2:	b930      	cbnz	r0, 80096e2 <__mdiff+0x2e>
 80096d4:	4b39      	ldr	r3, [pc, #228]	; (80097bc <__mdiff+0x108>)
 80096d6:	4602      	mov	r2, r0
 80096d8:	f240 2132 	movw	r1, #562	; 0x232
 80096dc:	4838      	ldr	r0, [pc, #224]	; (80097c0 <__mdiff+0x10c>)
 80096de:	f000 faf3 	bl	8009cc8 <__assert_func>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	bfa4      	itt	ge
 80096ee:	463b      	movge	r3, r7
 80096f0:	4627      	movge	r7, r4
 80096f2:	4630      	mov	r0, r6
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	bfa6      	itte	ge
 80096f8:	461c      	movge	r4, r3
 80096fa:	2500      	movge	r5, #0
 80096fc:	2501      	movlt	r5, #1
 80096fe:	f7ff fd3f 	bl	8009180 <_Balloc>
 8009702:	b920      	cbnz	r0, 800970e <__mdiff+0x5a>
 8009704:	4b2d      	ldr	r3, [pc, #180]	; (80097bc <__mdiff+0x108>)
 8009706:	4602      	mov	r2, r0
 8009708:	f44f 7110 	mov.w	r1, #576	; 0x240
 800970c:	e7e6      	b.n	80096dc <__mdiff+0x28>
 800970e:	693e      	ldr	r6, [r7, #16]
 8009710:	60c5      	str	r5, [r0, #12]
 8009712:	6925      	ldr	r5, [r4, #16]
 8009714:	f107 0114 	add.w	r1, r7, #20
 8009718:	f104 0914 	add.w	r9, r4, #20
 800971c:	f100 0e14 	add.w	lr, r0, #20
 8009720:	f107 0210 	add.w	r2, r7, #16
 8009724:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009728:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800972c:	46f2      	mov	sl, lr
 800972e:	2700      	movs	r7, #0
 8009730:	f859 3b04 	ldr.w	r3, [r9], #4
 8009734:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009738:	fa1f f883 	uxth.w	r8, r3
 800973c:	fa17 f78b 	uxtah	r7, r7, fp
 8009740:	0c1b      	lsrs	r3, r3, #16
 8009742:	eba7 0808 	sub.w	r8, r7, r8
 8009746:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800974a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800974e:	fa1f f888 	uxth.w	r8, r8
 8009752:	141f      	asrs	r7, r3, #16
 8009754:	454d      	cmp	r5, r9
 8009756:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800975a:	f84a 3b04 	str.w	r3, [sl], #4
 800975e:	d8e7      	bhi.n	8009730 <__mdiff+0x7c>
 8009760:	1b2b      	subs	r3, r5, r4
 8009762:	3b15      	subs	r3, #21
 8009764:	f023 0303 	bic.w	r3, r3, #3
 8009768:	3304      	adds	r3, #4
 800976a:	3415      	adds	r4, #21
 800976c:	42a5      	cmp	r5, r4
 800976e:	bf38      	it	cc
 8009770:	2304      	movcc	r3, #4
 8009772:	4419      	add	r1, r3
 8009774:	4473      	add	r3, lr
 8009776:	469e      	mov	lr, r3
 8009778:	460d      	mov	r5, r1
 800977a:	4565      	cmp	r5, ip
 800977c:	d30e      	bcc.n	800979c <__mdiff+0xe8>
 800977e:	f10c 0203 	add.w	r2, ip, #3
 8009782:	1a52      	subs	r2, r2, r1
 8009784:	f022 0203 	bic.w	r2, r2, #3
 8009788:	3903      	subs	r1, #3
 800978a:	458c      	cmp	ip, r1
 800978c:	bf38      	it	cc
 800978e:	2200      	movcc	r2, #0
 8009790:	441a      	add	r2, r3
 8009792:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009796:	b17b      	cbz	r3, 80097b8 <__mdiff+0x104>
 8009798:	6106      	str	r6, [r0, #16]
 800979a:	e7a5      	b.n	80096e8 <__mdiff+0x34>
 800979c:	f855 8b04 	ldr.w	r8, [r5], #4
 80097a0:	fa17 f488 	uxtah	r4, r7, r8
 80097a4:	1422      	asrs	r2, r4, #16
 80097a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80097aa:	b2a4      	uxth	r4, r4
 80097ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80097b0:	f84e 4b04 	str.w	r4, [lr], #4
 80097b4:	1417      	asrs	r7, r2, #16
 80097b6:	e7e0      	b.n	800977a <__mdiff+0xc6>
 80097b8:	3e01      	subs	r6, #1
 80097ba:	e7ea      	b.n	8009792 <__mdiff+0xde>
 80097bc:	0800aae0 	.word	0x0800aae0
 80097c0:	0800aaf1 	.word	0x0800aaf1

080097c4 <__d2b>:
 80097c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097c8:	4689      	mov	r9, r1
 80097ca:	2101      	movs	r1, #1
 80097cc:	ec57 6b10 	vmov	r6, r7, d0
 80097d0:	4690      	mov	r8, r2
 80097d2:	f7ff fcd5 	bl	8009180 <_Balloc>
 80097d6:	4604      	mov	r4, r0
 80097d8:	b930      	cbnz	r0, 80097e8 <__d2b+0x24>
 80097da:	4602      	mov	r2, r0
 80097dc:	4b25      	ldr	r3, [pc, #148]	; (8009874 <__d2b+0xb0>)
 80097de:	4826      	ldr	r0, [pc, #152]	; (8009878 <__d2b+0xb4>)
 80097e0:	f240 310a 	movw	r1, #778	; 0x30a
 80097e4:	f000 fa70 	bl	8009cc8 <__assert_func>
 80097e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097f0:	bb35      	cbnz	r5, 8009840 <__d2b+0x7c>
 80097f2:	2e00      	cmp	r6, #0
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	d028      	beq.n	800984a <__d2b+0x86>
 80097f8:	4668      	mov	r0, sp
 80097fa:	9600      	str	r6, [sp, #0]
 80097fc:	f7ff fd8c 	bl	8009318 <__lo0bits>
 8009800:	9900      	ldr	r1, [sp, #0]
 8009802:	b300      	cbz	r0, 8009846 <__d2b+0x82>
 8009804:	9a01      	ldr	r2, [sp, #4]
 8009806:	f1c0 0320 	rsb	r3, r0, #32
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	430b      	orrs	r3, r1
 8009810:	40c2      	lsrs	r2, r0
 8009812:	6163      	str	r3, [r4, #20]
 8009814:	9201      	str	r2, [sp, #4]
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	61a3      	str	r3, [r4, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bf14      	ite	ne
 800981e:	2202      	movne	r2, #2
 8009820:	2201      	moveq	r2, #1
 8009822:	6122      	str	r2, [r4, #16]
 8009824:	b1d5      	cbz	r5, 800985c <__d2b+0x98>
 8009826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800982a:	4405      	add	r5, r0
 800982c:	f8c9 5000 	str.w	r5, [r9]
 8009830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009834:	f8c8 0000 	str.w	r0, [r8]
 8009838:	4620      	mov	r0, r4
 800983a:	b003      	add	sp, #12
 800983c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009844:	e7d5      	b.n	80097f2 <__d2b+0x2e>
 8009846:	6161      	str	r1, [r4, #20]
 8009848:	e7e5      	b.n	8009816 <__d2b+0x52>
 800984a:	a801      	add	r0, sp, #4
 800984c:	f7ff fd64 	bl	8009318 <__lo0bits>
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	6163      	str	r3, [r4, #20]
 8009854:	2201      	movs	r2, #1
 8009856:	6122      	str	r2, [r4, #16]
 8009858:	3020      	adds	r0, #32
 800985a:	e7e3      	b.n	8009824 <__d2b+0x60>
 800985c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009864:	f8c9 0000 	str.w	r0, [r9]
 8009868:	6918      	ldr	r0, [r3, #16]
 800986a:	f7ff fd35 	bl	80092d8 <__hi0bits>
 800986e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009872:	e7df      	b.n	8009834 <__d2b+0x70>
 8009874:	0800aae0 	.word	0x0800aae0
 8009878:	0800aaf1 	.word	0x0800aaf1

0800987c <_calloc_r>:
 800987c:	b513      	push	{r0, r1, r4, lr}
 800987e:	434a      	muls	r2, r1
 8009880:	4611      	mov	r1, r2
 8009882:	9201      	str	r2, [sp, #4]
 8009884:	f000 f85a 	bl	800993c <_malloc_r>
 8009888:	4604      	mov	r4, r0
 800988a:	b118      	cbz	r0, 8009894 <_calloc_r+0x18>
 800988c:	9a01      	ldr	r2, [sp, #4]
 800988e:	2100      	movs	r1, #0
 8009890:	f7fe f942 	bl	8007b18 <memset>
 8009894:	4620      	mov	r0, r4
 8009896:	b002      	add	sp, #8
 8009898:	bd10      	pop	{r4, pc}
	...

0800989c <_free_r>:
 800989c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989e:	2900      	cmp	r1, #0
 80098a0:	d048      	beq.n	8009934 <_free_r+0x98>
 80098a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a6:	9001      	str	r0, [sp, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f1a1 0404 	sub.w	r4, r1, #4
 80098ae:	bfb8      	it	lt
 80098b0:	18e4      	addlt	r4, r4, r3
 80098b2:	f000 fa65 	bl	8009d80 <__malloc_lock>
 80098b6:	4a20      	ldr	r2, [pc, #128]	; (8009938 <_free_r+0x9c>)
 80098b8:	9801      	ldr	r0, [sp, #4]
 80098ba:	6813      	ldr	r3, [r2, #0]
 80098bc:	4615      	mov	r5, r2
 80098be:	b933      	cbnz	r3, 80098ce <_free_r+0x32>
 80098c0:	6063      	str	r3, [r4, #4]
 80098c2:	6014      	str	r4, [r2, #0]
 80098c4:	b003      	add	sp, #12
 80098c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098ca:	f000 ba5f 	b.w	8009d8c <__malloc_unlock>
 80098ce:	42a3      	cmp	r3, r4
 80098d0:	d90b      	bls.n	80098ea <_free_r+0x4e>
 80098d2:	6821      	ldr	r1, [r4, #0]
 80098d4:	1862      	adds	r2, r4, r1
 80098d6:	4293      	cmp	r3, r2
 80098d8:	bf04      	itt	eq
 80098da:	681a      	ldreq	r2, [r3, #0]
 80098dc:	685b      	ldreq	r3, [r3, #4]
 80098de:	6063      	str	r3, [r4, #4]
 80098e0:	bf04      	itt	eq
 80098e2:	1852      	addeq	r2, r2, r1
 80098e4:	6022      	streq	r2, [r4, #0]
 80098e6:	602c      	str	r4, [r5, #0]
 80098e8:	e7ec      	b.n	80098c4 <_free_r+0x28>
 80098ea:	461a      	mov	r2, r3
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b10b      	cbz	r3, 80098f4 <_free_r+0x58>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d9fa      	bls.n	80098ea <_free_r+0x4e>
 80098f4:	6811      	ldr	r1, [r2, #0]
 80098f6:	1855      	adds	r5, r2, r1
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d10b      	bne.n	8009914 <_free_r+0x78>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	4421      	add	r1, r4
 8009900:	1854      	adds	r4, r2, r1
 8009902:	42a3      	cmp	r3, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	d1dd      	bne.n	80098c4 <_free_r+0x28>
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	6053      	str	r3, [r2, #4]
 800990e:	4421      	add	r1, r4
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	e7d7      	b.n	80098c4 <_free_r+0x28>
 8009914:	d902      	bls.n	800991c <_free_r+0x80>
 8009916:	230c      	movs	r3, #12
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	e7d3      	b.n	80098c4 <_free_r+0x28>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf04      	itt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	bf04      	itt	eq
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	6054      	str	r4, [r2, #4]
 8009932:	e7c7      	b.n	80098c4 <_free_r+0x28>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	20000224 	.word	0x20000224

0800993c <_malloc_r>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	1ccd      	adds	r5, r1, #3
 8009940:	f025 0503 	bic.w	r5, r5, #3
 8009944:	3508      	adds	r5, #8
 8009946:	2d0c      	cmp	r5, #12
 8009948:	bf38      	it	cc
 800994a:	250c      	movcc	r5, #12
 800994c:	2d00      	cmp	r5, #0
 800994e:	4606      	mov	r6, r0
 8009950:	db01      	blt.n	8009956 <_malloc_r+0x1a>
 8009952:	42a9      	cmp	r1, r5
 8009954:	d903      	bls.n	800995e <_malloc_r+0x22>
 8009956:	230c      	movs	r3, #12
 8009958:	6033      	str	r3, [r6, #0]
 800995a:	2000      	movs	r0, #0
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995e:	f000 fa0f 	bl	8009d80 <__malloc_lock>
 8009962:	4921      	ldr	r1, [pc, #132]	; (80099e8 <_malloc_r+0xac>)
 8009964:	680a      	ldr	r2, [r1, #0]
 8009966:	4614      	mov	r4, r2
 8009968:	b99c      	cbnz	r4, 8009992 <_malloc_r+0x56>
 800996a:	4f20      	ldr	r7, [pc, #128]	; (80099ec <_malloc_r+0xb0>)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	b923      	cbnz	r3, 800997a <_malloc_r+0x3e>
 8009970:	4621      	mov	r1, r4
 8009972:	4630      	mov	r0, r6
 8009974:	f000 f998 	bl	8009ca8 <_sbrk_r>
 8009978:	6038      	str	r0, [r7, #0]
 800997a:	4629      	mov	r1, r5
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f993 	bl	8009ca8 <_sbrk_r>
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	d123      	bne.n	80099ce <_malloc_r+0x92>
 8009986:	230c      	movs	r3, #12
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	4630      	mov	r0, r6
 800998c:	f000 f9fe 	bl	8009d8c <__malloc_unlock>
 8009990:	e7e3      	b.n	800995a <_malloc_r+0x1e>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	1b5b      	subs	r3, r3, r5
 8009996:	d417      	bmi.n	80099c8 <_malloc_r+0x8c>
 8009998:	2b0b      	cmp	r3, #11
 800999a:	d903      	bls.n	80099a4 <_malloc_r+0x68>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	441c      	add	r4, r3
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	e004      	b.n	80099ae <_malloc_r+0x72>
 80099a4:	6863      	ldr	r3, [r4, #4]
 80099a6:	42a2      	cmp	r2, r4
 80099a8:	bf0c      	ite	eq
 80099aa:	600b      	streq	r3, [r1, #0]
 80099ac:	6053      	strne	r3, [r2, #4]
 80099ae:	4630      	mov	r0, r6
 80099b0:	f000 f9ec 	bl	8009d8c <__malloc_unlock>
 80099b4:	f104 000b 	add.w	r0, r4, #11
 80099b8:	1d23      	adds	r3, r4, #4
 80099ba:	f020 0007 	bic.w	r0, r0, #7
 80099be:	1ac2      	subs	r2, r0, r3
 80099c0:	d0cc      	beq.n	800995c <_malloc_r+0x20>
 80099c2:	1a1b      	subs	r3, r3, r0
 80099c4:	50a3      	str	r3, [r4, r2]
 80099c6:	e7c9      	b.n	800995c <_malloc_r+0x20>
 80099c8:	4622      	mov	r2, r4
 80099ca:	6864      	ldr	r4, [r4, #4]
 80099cc:	e7cc      	b.n	8009968 <_malloc_r+0x2c>
 80099ce:	1cc4      	adds	r4, r0, #3
 80099d0:	f024 0403 	bic.w	r4, r4, #3
 80099d4:	42a0      	cmp	r0, r4
 80099d6:	d0e3      	beq.n	80099a0 <_malloc_r+0x64>
 80099d8:	1a21      	subs	r1, r4, r0
 80099da:	4630      	mov	r0, r6
 80099dc:	f000 f964 	bl	8009ca8 <_sbrk_r>
 80099e0:	3001      	adds	r0, #1
 80099e2:	d1dd      	bne.n	80099a0 <_malloc_r+0x64>
 80099e4:	e7cf      	b.n	8009986 <_malloc_r+0x4a>
 80099e6:	bf00      	nop
 80099e8:	20000224 	.word	0x20000224
 80099ec:	20000228 	.word	0x20000228

080099f0 <__ssputs_r>:
 80099f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	688e      	ldr	r6, [r1, #8]
 80099f6:	429e      	cmp	r6, r3
 80099f8:	4682      	mov	sl, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	4690      	mov	r8, r2
 80099fe:	461f      	mov	r7, r3
 8009a00:	d838      	bhi.n	8009a74 <__ssputs_r+0x84>
 8009a02:	898a      	ldrh	r2, [r1, #12]
 8009a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a08:	d032      	beq.n	8009a70 <__ssputs_r+0x80>
 8009a0a:	6825      	ldr	r5, [r4, #0]
 8009a0c:	6909      	ldr	r1, [r1, #16]
 8009a0e:	eba5 0901 	sub.w	r9, r5, r1
 8009a12:	6965      	ldr	r5, [r4, #20]
 8009a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	444b      	add	r3, r9
 8009a20:	106d      	asrs	r5, r5, #1
 8009a22:	429d      	cmp	r5, r3
 8009a24:	bf38      	it	cc
 8009a26:	461d      	movcc	r5, r3
 8009a28:	0553      	lsls	r3, r2, #21
 8009a2a:	d531      	bpl.n	8009a90 <__ssputs_r+0xa0>
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7ff ff85 	bl	800993c <_malloc_r>
 8009a32:	4606      	mov	r6, r0
 8009a34:	b950      	cbnz	r0, 8009a4c <__ssputs_r+0x5c>
 8009a36:	230c      	movs	r3, #12
 8009a38:	f8ca 3000 	str.w	r3, [sl]
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4c:	6921      	ldr	r1, [r4, #16]
 8009a4e:	464a      	mov	r2, r9
 8009a50:	f7ff fb88 	bl	8009164 <memcpy>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	6126      	str	r6, [r4, #16]
 8009a62:	6165      	str	r5, [r4, #20]
 8009a64:	444e      	add	r6, r9
 8009a66:	eba5 0509 	sub.w	r5, r5, r9
 8009a6a:	6026      	str	r6, [r4, #0]
 8009a6c:	60a5      	str	r5, [r4, #8]
 8009a6e:	463e      	mov	r6, r7
 8009a70:	42be      	cmp	r6, r7
 8009a72:	d900      	bls.n	8009a76 <__ssputs_r+0x86>
 8009a74:	463e      	mov	r6, r7
 8009a76:	4632      	mov	r2, r6
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	4641      	mov	r1, r8
 8009a7c:	f000 f966 	bl	8009d4c <memmove>
 8009a80:	68a3      	ldr	r3, [r4, #8]
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	1b9b      	subs	r3, r3, r6
 8009a86:	4432      	add	r2, r6
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	6022      	str	r2, [r4, #0]
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7db      	b.n	8009a48 <__ssputs_r+0x58>
 8009a90:	462a      	mov	r2, r5
 8009a92:	f000 f981 	bl	8009d98 <_realloc_r>
 8009a96:	4606      	mov	r6, r0
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d1e1      	bne.n	8009a60 <__ssputs_r+0x70>
 8009a9c:	6921      	ldr	r1, [r4, #16]
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	f7ff fefc 	bl	800989c <_free_r>
 8009aa4:	e7c7      	b.n	8009a36 <__ssputs_r+0x46>
	...

08009aa8 <_svfiprintf_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	4698      	mov	r8, r3
 8009aae:	898b      	ldrh	r3, [r1, #12]
 8009ab0:	061b      	lsls	r3, r3, #24
 8009ab2:	b09d      	sub	sp, #116	; 0x74
 8009ab4:	4607      	mov	r7, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	4614      	mov	r4, r2
 8009aba:	d50e      	bpl.n	8009ada <_svfiprintf_r+0x32>
 8009abc:	690b      	ldr	r3, [r1, #16]
 8009abe:	b963      	cbnz	r3, 8009ada <_svfiprintf_r+0x32>
 8009ac0:	2140      	movs	r1, #64	; 0x40
 8009ac2:	f7ff ff3b 	bl	800993c <_malloc_r>
 8009ac6:	6028      	str	r0, [r5, #0]
 8009ac8:	6128      	str	r0, [r5, #16]
 8009aca:	b920      	cbnz	r0, 8009ad6 <_svfiprintf_r+0x2e>
 8009acc:	230c      	movs	r3, #12
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad4:	e0d1      	b.n	8009c7a <_svfiprintf_r+0x1d2>
 8009ad6:	2340      	movs	r3, #64	; 0x40
 8009ad8:	616b      	str	r3, [r5, #20]
 8009ada:	2300      	movs	r3, #0
 8009adc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ade:	2320      	movs	r3, #32
 8009ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae8:	2330      	movs	r3, #48	; 0x30
 8009aea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c94 <_svfiprintf_r+0x1ec>
 8009aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009af2:	f04f 0901 	mov.w	r9, #1
 8009af6:	4623      	mov	r3, r4
 8009af8:	469a      	mov	sl, r3
 8009afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009afe:	b10a      	cbz	r2, 8009b04 <_svfiprintf_r+0x5c>
 8009b00:	2a25      	cmp	r2, #37	; 0x25
 8009b02:	d1f9      	bne.n	8009af8 <_svfiprintf_r+0x50>
 8009b04:	ebba 0b04 	subs.w	fp, sl, r4
 8009b08:	d00b      	beq.n	8009b22 <_svfiprintf_r+0x7a>
 8009b0a:	465b      	mov	r3, fp
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ff6d 	bl	80099f0 <__ssputs_r>
 8009b16:	3001      	adds	r0, #1
 8009b18:	f000 80aa 	beq.w	8009c70 <_svfiprintf_r+0x1c8>
 8009b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1e:	445a      	add	r2, fp
 8009b20:	9209      	str	r2, [sp, #36]	; 0x24
 8009b22:	f89a 3000 	ldrb.w	r3, [sl]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80a2 	beq.w	8009c70 <_svfiprintf_r+0x1c8>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b36:	f10a 0a01 	add.w	sl, sl, #1
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	9307      	str	r3, [sp, #28]
 8009b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b42:	931a      	str	r3, [sp, #104]	; 0x68
 8009b44:	4654      	mov	r4, sl
 8009b46:	2205      	movs	r2, #5
 8009b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b4c:	4851      	ldr	r0, [pc, #324]	; (8009c94 <_svfiprintf_r+0x1ec>)
 8009b4e:	f7f6 fb7f 	bl	8000250 <memchr>
 8009b52:	9a04      	ldr	r2, [sp, #16]
 8009b54:	b9d8      	cbnz	r0, 8009b8e <_svfiprintf_r+0xe6>
 8009b56:	06d0      	lsls	r0, r2, #27
 8009b58:	bf44      	itt	mi
 8009b5a:	2320      	movmi	r3, #32
 8009b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b60:	0711      	lsls	r1, r2, #28
 8009b62:	bf44      	itt	mi
 8009b64:	232b      	movmi	r3, #43	; 0x2b
 8009b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b70:	d015      	beq.n	8009b9e <_svfiprintf_r+0xf6>
 8009b72:	9a07      	ldr	r2, [sp, #28]
 8009b74:	4654      	mov	r4, sl
 8009b76:	2000      	movs	r0, #0
 8009b78:	f04f 0c0a 	mov.w	ip, #10
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b82:	3b30      	subs	r3, #48	; 0x30
 8009b84:	2b09      	cmp	r3, #9
 8009b86:	d94e      	bls.n	8009c26 <_svfiprintf_r+0x17e>
 8009b88:	b1b0      	cbz	r0, 8009bb8 <_svfiprintf_r+0x110>
 8009b8a:	9207      	str	r2, [sp, #28]
 8009b8c:	e014      	b.n	8009bb8 <_svfiprintf_r+0x110>
 8009b8e:	eba0 0308 	sub.w	r3, r0, r8
 8009b92:	fa09 f303 	lsl.w	r3, r9, r3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	46a2      	mov	sl, r4
 8009b9c:	e7d2      	b.n	8009b44 <_svfiprintf_r+0x9c>
 8009b9e:	9b03      	ldr	r3, [sp, #12]
 8009ba0:	1d19      	adds	r1, r3, #4
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	9103      	str	r1, [sp, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfbb      	ittet	lt
 8009baa:	425b      	neglt	r3, r3
 8009bac:	f042 0202 	orrlt.w	r2, r2, #2
 8009bb0:	9307      	strge	r3, [sp, #28]
 8009bb2:	9307      	strlt	r3, [sp, #28]
 8009bb4:	bfb8      	it	lt
 8009bb6:	9204      	strlt	r2, [sp, #16]
 8009bb8:	7823      	ldrb	r3, [r4, #0]
 8009bba:	2b2e      	cmp	r3, #46	; 0x2e
 8009bbc:	d10c      	bne.n	8009bd8 <_svfiprintf_r+0x130>
 8009bbe:	7863      	ldrb	r3, [r4, #1]
 8009bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc2:	d135      	bne.n	8009c30 <_svfiprintf_r+0x188>
 8009bc4:	9b03      	ldr	r3, [sp, #12]
 8009bc6:	1d1a      	adds	r2, r3, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	9203      	str	r2, [sp, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bfb8      	it	lt
 8009bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bd4:	3402      	adds	r4, #2
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ca4 <_svfiprintf_r+0x1fc>
 8009bdc:	7821      	ldrb	r1, [r4, #0]
 8009bde:	2203      	movs	r2, #3
 8009be0:	4650      	mov	r0, sl
 8009be2:	f7f6 fb35 	bl	8000250 <memchr>
 8009be6:	b140      	cbz	r0, 8009bfa <_svfiprintf_r+0x152>
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	eba0 000a 	sub.w	r0, r0, sl
 8009bee:	fa03 f000 	lsl.w	r0, r3, r0
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	4303      	orrs	r3, r0
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfe:	4826      	ldr	r0, [pc, #152]	; (8009c98 <_svfiprintf_r+0x1f0>)
 8009c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c04:	2206      	movs	r2, #6
 8009c06:	f7f6 fb23 	bl	8000250 <memchr>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d038      	beq.n	8009c80 <_svfiprintf_r+0x1d8>
 8009c0e:	4b23      	ldr	r3, [pc, #140]	; (8009c9c <_svfiprintf_r+0x1f4>)
 8009c10:	bb1b      	cbnz	r3, 8009c5a <_svfiprintf_r+0x1b2>
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	3307      	adds	r3, #7
 8009c16:	f023 0307 	bic.w	r3, r3, #7
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c20:	4433      	add	r3, r6
 8009c22:	9309      	str	r3, [sp, #36]	; 0x24
 8009c24:	e767      	b.n	8009af6 <_svfiprintf_r+0x4e>
 8009c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	e7a5      	b.n	8009b7c <_svfiprintf_r+0xd4>
 8009c30:	2300      	movs	r3, #0
 8009c32:	3401      	adds	r4, #1
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	4619      	mov	r1, r3
 8009c38:	f04f 0c0a 	mov.w	ip, #10
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c42:	3a30      	subs	r2, #48	; 0x30
 8009c44:	2a09      	cmp	r2, #9
 8009c46:	d903      	bls.n	8009c50 <_svfiprintf_r+0x1a8>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0c5      	beq.n	8009bd8 <_svfiprintf_r+0x130>
 8009c4c:	9105      	str	r1, [sp, #20]
 8009c4e:	e7c3      	b.n	8009bd8 <_svfiprintf_r+0x130>
 8009c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c54:	4604      	mov	r4, r0
 8009c56:	2301      	movs	r3, #1
 8009c58:	e7f0      	b.n	8009c3c <_svfiprintf_r+0x194>
 8009c5a:	ab03      	add	r3, sp, #12
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	462a      	mov	r2, r5
 8009c60:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <_svfiprintf_r+0x1f8>)
 8009c62:	a904      	add	r1, sp, #16
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7fd ffef 	bl	8007c48 <_printf_float>
 8009c6a:	1c42      	adds	r2, r0, #1
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	d1d6      	bne.n	8009c1e <_svfiprintf_r+0x176>
 8009c70:	89ab      	ldrh	r3, [r5, #12]
 8009c72:	065b      	lsls	r3, r3, #25
 8009c74:	f53f af2c 	bmi.w	8009ad0 <_svfiprintf_r+0x28>
 8009c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c7a:	b01d      	add	sp, #116	; 0x74
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	ab03      	add	r3, sp, #12
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	462a      	mov	r2, r5
 8009c86:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <_svfiprintf_r+0x1f8>)
 8009c88:	a904      	add	r1, sp, #16
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f7fe fa68 	bl	8008160 <_printf_i>
 8009c90:	e7eb      	b.n	8009c6a <_svfiprintf_r+0x1c2>
 8009c92:	bf00      	nop
 8009c94:	0800ac54 	.word	0x0800ac54
 8009c98:	0800ac5e 	.word	0x0800ac5e
 8009c9c:	08007c49 	.word	0x08007c49
 8009ca0:	080099f1 	.word	0x080099f1
 8009ca4:	0800ac5a 	.word	0x0800ac5a

08009ca8 <_sbrk_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d06      	ldr	r5, [pc, #24]	; (8009cc4 <_sbrk_r+0x1c>)
 8009cac:	2300      	movs	r3, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	f7f8 fb2c 	bl	8002310 <_sbrk>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_sbrk_r+0x1a>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_sbrk_r+0x1a>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20000934 	.word	0x20000934

08009cc8 <__assert_func>:
 8009cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cca:	4614      	mov	r4, r2
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <__assert_func+0x2c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	68d8      	ldr	r0, [r3, #12]
 8009cd6:	b14c      	cbz	r4, 8009cec <__assert_func+0x24>
 8009cd8:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <__assert_func+0x30>)
 8009cda:	9100      	str	r1, [sp, #0]
 8009cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ce0:	4906      	ldr	r1, [pc, #24]	; (8009cfc <__assert_func+0x34>)
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f000 f80e 	bl	8009d04 <fiprintf>
 8009ce8:	f000 faa4 	bl	800a234 <abort>
 8009cec:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <__assert_func+0x38>)
 8009cee:	461c      	mov	r4, r3
 8009cf0:	e7f3      	b.n	8009cda <__assert_func+0x12>
 8009cf2:	bf00      	nop
 8009cf4:	20000028 	.word	0x20000028
 8009cf8:	0800ac65 	.word	0x0800ac65
 8009cfc:	0800ac72 	.word	0x0800ac72
 8009d00:	0800aca0 	.word	0x0800aca0

08009d04 <fiprintf>:
 8009d04:	b40e      	push	{r1, r2, r3}
 8009d06:	b503      	push	{r0, r1, lr}
 8009d08:	4601      	mov	r1, r0
 8009d0a:	ab03      	add	r3, sp, #12
 8009d0c:	4805      	ldr	r0, [pc, #20]	; (8009d24 <fiprintf+0x20>)
 8009d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d12:	6800      	ldr	r0, [r0, #0]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	f000 f88f 	bl	8009e38 <_vfiprintf_r>
 8009d1a:	b002      	add	sp, #8
 8009d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d20:	b003      	add	sp, #12
 8009d22:	4770      	bx	lr
 8009d24:	20000028 	.word	0x20000028

08009d28 <__ascii_mbtowc>:
 8009d28:	b082      	sub	sp, #8
 8009d2a:	b901      	cbnz	r1, 8009d2e <__ascii_mbtowc+0x6>
 8009d2c:	a901      	add	r1, sp, #4
 8009d2e:	b142      	cbz	r2, 8009d42 <__ascii_mbtowc+0x1a>
 8009d30:	b14b      	cbz	r3, 8009d46 <__ascii_mbtowc+0x1e>
 8009d32:	7813      	ldrb	r3, [r2, #0]
 8009d34:	600b      	str	r3, [r1, #0]
 8009d36:	7812      	ldrb	r2, [r2, #0]
 8009d38:	1e10      	subs	r0, r2, #0
 8009d3a:	bf18      	it	ne
 8009d3c:	2001      	movne	r0, #1
 8009d3e:	b002      	add	sp, #8
 8009d40:	4770      	bx	lr
 8009d42:	4610      	mov	r0, r2
 8009d44:	e7fb      	b.n	8009d3e <__ascii_mbtowc+0x16>
 8009d46:	f06f 0001 	mvn.w	r0, #1
 8009d4a:	e7f8      	b.n	8009d3e <__ascii_mbtowc+0x16>

08009d4c <memmove>:
 8009d4c:	4288      	cmp	r0, r1
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	eb01 0402 	add.w	r4, r1, r2
 8009d54:	d902      	bls.n	8009d5c <memmove+0x10>
 8009d56:	4284      	cmp	r4, r0
 8009d58:	4623      	mov	r3, r4
 8009d5a:	d807      	bhi.n	8009d6c <memmove+0x20>
 8009d5c:	1e43      	subs	r3, r0, #1
 8009d5e:	42a1      	cmp	r1, r4
 8009d60:	d008      	beq.n	8009d74 <memmove+0x28>
 8009d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6a:	e7f8      	b.n	8009d5e <memmove+0x12>
 8009d6c:	4402      	add	r2, r0
 8009d6e:	4601      	mov	r1, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	d100      	bne.n	8009d76 <memmove+0x2a>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d7e:	e7f7      	b.n	8009d70 <memmove+0x24>

08009d80 <__malloc_lock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__malloc_lock+0x8>)
 8009d82:	f000 bc17 	b.w	800a5b4 <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	2000093c 	.word	0x2000093c

08009d8c <__malloc_unlock>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__malloc_unlock+0x8>)
 8009d8e:	f000 bc12 	b.w	800a5b6 <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	2000093c 	.word	0x2000093c

08009d98 <_realloc_r>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	460e      	mov	r6, r1
 8009da0:	b921      	cbnz	r1, 8009dac <_realloc_r+0x14>
 8009da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009da6:	4611      	mov	r1, r2
 8009da8:	f7ff bdc8 	b.w	800993c <_malloc_r>
 8009dac:	b922      	cbnz	r2, 8009db8 <_realloc_r+0x20>
 8009dae:	f7ff fd75 	bl	800989c <_free_r>
 8009db2:	4625      	mov	r5, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db8:	f000 fc62 	bl	800a680 <_malloc_usable_size_r>
 8009dbc:	42a0      	cmp	r0, r4
 8009dbe:	d20f      	bcs.n	8009de0 <_realloc_r+0x48>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f7ff fdba 	bl	800993c <_malloc_r>
 8009dc8:	4605      	mov	r5, r0
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d0f2      	beq.n	8009db4 <_realloc_r+0x1c>
 8009dce:	4631      	mov	r1, r6
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	f7ff f9c7 	bl	8009164 <memcpy>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff fd5f 	bl	800989c <_free_r>
 8009dde:	e7e9      	b.n	8009db4 <_realloc_r+0x1c>
 8009de0:	4635      	mov	r5, r6
 8009de2:	e7e7      	b.n	8009db4 <_realloc_r+0x1c>

08009de4 <__sfputc_r>:
 8009de4:	6893      	ldr	r3, [r2, #8]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	b410      	push	{r4}
 8009dec:	6093      	str	r3, [r2, #8]
 8009dee:	da08      	bge.n	8009e02 <__sfputc_r+0x1e>
 8009df0:	6994      	ldr	r4, [r2, #24]
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	db01      	blt.n	8009dfa <__sfputc_r+0x16>
 8009df6:	290a      	cmp	r1, #10
 8009df8:	d103      	bne.n	8009e02 <__sfputc_r+0x1e>
 8009dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dfe:	f000 b94b 	b.w	800a098 <__swbuf_r>
 8009e02:	6813      	ldr	r3, [r2, #0]
 8009e04:	1c58      	adds	r0, r3, #1
 8009e06:	6010      	str	r0, [r2, #0]
 8009e08:	7019      	strb	r1, [r3, #0]
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <__sfputs_r>:
 8009e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e14:	4606      	mov	r6, r0
 8009e16:	460f      	mov	r7, r1
 8009e18:	4614      	mov	r4, r2
 8009e1a:	18d5      	adds	r5, r2, r3
 8009e1c:	42ac      	cmp	r4, r5
 8009e1e:	d101      	bne.n	8009e24 <__sfputs_r+0x12>
 8009e20:	2000      	movs	r0, #0
 8009e22:	e007      	b.n	8009e34 <__sfputs_r+0x22>
 8009e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e28:	463a      	mov	r2, r7
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7ff ffda 	bl	8009de4 <__sfputc_r>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d1f3      	bne.n	8009e1c <__sfputs_r+0xa>
 8009e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e38 <_vfiprintf_r>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	b09d      	sub	sp, #116	; 0x74
 8009e40:	4614      	mov	r4, r2
 8009e42:	4698      	mov	r8, r3
 8009e44:	4606      	mov	r6, r0
 8009e46:	b118      	cbz	r0, 8009e50 <_vfiprintf_r+0x18>
 8009e48:	6983      	ldr	r3, [r0, #24]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <_vfiprintf_r+0x18>
 8009e4c:	f000 fb14 	bl	800a478 <__sinit>
 8009e50:	4b89      	ldr	r3, [pc, #548]	; (800a078 <_vfiprintf_r+0x240>)
 8009e52:	429d      	cmp	r5, r3
 8009e54:	d11b      	bne.n	8009e8e <_vfiprintf_r+0x56>
 8009e56:	6875      	ldr	r5, [r6, #4]
 8009e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5a:	07d9      	lsls	r1, r3, #31
 8009e5c:	d405      	bmi.n	8009e6a <_vfiprintf_r+0x32>
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_vfiprintf_r+0x32>
 8009e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e66:	f000 fba5 	bl	800a5b4 <__retarget_lock_acquire_recursive>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	071b      	lsls	r3, r3, #28
 8009e6e:	d501      	bpl.n	8009e74 <_vfiprintf_r+0x3c>
 8009e70:	692b      	ldr	r3, [r5, #16]
 8009e72:	b9eb      	cbnz	r3, 8009eb0 <_vfiprintf_r+0x78>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4630      	mov	r0, r6
 8009e78:	f000 f96e 	bl	800a158 <__swsetup_r>
 8009e7c:	b1c0      	cbz	r0, 8009eb0 <_vfiprintf_r+0x78>
 8009e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e80:	07dc      	lsls	r4, r3, #31
 8009e82:	d50e      	bpl.n	8009ea2 <_vfiprintf_r+0x6a>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	b01d      	add	sp, #116	; 0x74
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8e:	4b7b      	ldr	r3, [pc, #492]	; (800a07c <_vfiprintf_r+0x244>)
 8009e90:	429d      	cmp	r5, r3
 8009e92:	d101      	bne.n	8009e98 <_vfiprintf_r+0x60>
 8009e94:	68b5      	ldr	r5, [r6, #8]
 8009e96:	e7df      	b.n	8009e58 <_vfiprintf_r+0x20>
 8009e98:	4b79      	ldr	r3, [pc, #484]	; (800a080 <_vfiprintf_r+0x248>)
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	bf08      	it	eq
 8009e9e:	68f5      	ldreq	r5, [r6, #12]
 8009ea0:	e7da      	b.n	8009e58 <_vfiprintf_r+0x20>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	0598      	lsls	r0, r3, #22
 8009ea6:	d4ed      	bmi.n	8009e84 <_vfiprintf_r+0x4c>
 8009ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eaa:	f000 fb84 	bl	800a5b6 <__retarget_lock_release_recursive>
 8009eae:	e7e9      	b.n	8009e84 <_vfiprintf_r+0x4c>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ebe:	2330      	movs	r3, #48	; 0x30
 8009ec0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a084 <_vfiprintf_r+0x24c>
 8009ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec8:	f04f 0901 	mov.w	r9, #1
 8009ecc:	4623      	mov	r3, r4
 8009ece:	469a      	mov	sl, r3
 8009ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed4:	b10a      	cbz	r2, 8009eda <_vfiprintf_r+0xa2>
 8009ed6:	2a25      	cmp	r2, #37	; 0x25
 8009ed8:	d1f9      	bne.n	8009ece <_vfiprintf_r+0x96>
 8009eda:	ebba 0b04 	subs.w	fp, sl, r4
 8009ede:	d00b      	beq.n	8009ef8 <_vfiprintf_r+0xc0>
 8009ee0:	465b      	mov	r3, fp
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ff93 	bl	8009e12 <__sfputs_r>
 8009eec:	3001      	adds	r0, #1
 8009eee:	f000 80aa 	beq.w	800a046 <_vfiprintf_r+0x20e>
 8009ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef4:	445a      	add	r2, fp
 8009ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 80a2 	beq.w	800a046 <_vfiprintf_r+0x20e>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f0c:	f10a 0a01 	add.w	sl, sl, #1
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	9307      	str	r3, [sp, #28]
 8009f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f18:	931a      	str	r3, [sp, #104]	; 0x68
 8009f1a:	4654      	mov	r4, sl
 8009f1c:	2205      	movs	r2, #5
 8009f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f22:	4858      	ldr	r0, [pc, #352]	; (800a084 <_vfiprintf_r+0x24c>)
 8009f24:	f7f6 f994 	bl	8000250 <memchr>
 8009f28:	9a04      	ldr	r2, [sp, #16]
 8009f2a:	b9d8      	cbnz	r0, 8009f64 <_vfiprintf_r+0x12c>
 8009f2c:	06d1      	lsls	r1, r2, #27
 8009f2e:	bf44      	itt	mi
 8009f30:	2320      	movmi	r3, #32
 8009f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f36:	0713      	lsls	r3, r2, #28
 8009f38:	bf44      	itt	mi
 8009f3a:	232b      	movmi	r3, #43	; 0x2b
 8009f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f40:	f89a 3000 	ldrb.w	r3, [sl]
 8009f44:	2b2a      	cmp	r3, #42	; 0x2a
 8009f46:	d015      	beq.n	8009f74 <_vfiprintf_r+0x13c>
 8009f48:	9a07      	ldr	r2, [sp, #28]
 8009f4a:	4654      	mov	r4, sl
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f04f 0c0a 	mov.w	ip, #10
 8009f52:	4621      	mov	r1, r4
 8009f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f58:	3b30      	subs	r3, #48	; 0x30
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	d94e      	bls.n	8009ffc <_vfiprintf_r+0x1c4>
 8009f5e:	b1b0      	cbz	r0, 8009f8e <_vfiprintf_r+0x156>
 8009f60:	9207      	str	r2, [sp, #28]
 8009f62:	e014      	b.n	8009f8e <_vfiprintf_r+0x156>
 8009f64:	eba0 0308 	sub.w	r3, r0, r8
 8009f68:	fa09 f303 	lsl.w	r3, r9, r3
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	46a2      	mov	sl, r4
 8009f72:	e7d2      	b.n	8009f1a <_vfiprintf_r+0xe2>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	1d19      	adds	r1, r3, #4
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	9103      	str	r1, [sp, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfbb      	ittet	lt
 8009f80:	425b      	neglt	r3, r3
 8009f82:	f042 0202 	orrlt.w	r2, r2, #2
 8009f86:	9307      	strge	r3, [sp, #28]
 8009f88:	9307      	strlt	r3, [sp, #28]
 8009f8a:	bfb8      	it	lt
 8009f8c:	9204      	strlt	r2, [sp, #16]
 8009f8e:	7823      	ldrb	r3, [r4, #0]
 8009f90:	2b2e      	cmp	r3, #46	; 0x2e
 8009f92:	d10c      	bne.n	8009fae <_vfiprintf_r+0x176>
 8009f94:	7863      	ldrb	r3, [r4, #1]
 8009f96:	2b2a      	cmp	r3, #42	; 0x2a
 8009f98:	d135      	bne.n	800a006 <_vfiprintf_r+0x1ce>
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	1d1a      	adds	r2, r3, #4
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	9203      	str	r2, [sp, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfb8      	it	lt
 8009fa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009faa:	3402      	adds	r4, #2
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a094 <_vfiprintf_r+0x25c>
 8009fb2:	7821      	ldrb	r1, [r4, #0]
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	f7f6 f94a 	bl	8000250 <memchr>
 8009fbc:	b140      	cbz	r0, 8009fd0 <_vfiprintf_r+0x198>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	eba0 000a 	sub.w	r0, r0, sl
 8009fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	4303      	orrs	r3, r0
 8009fcc:	3401      	adds	r4, #1
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd4:	482c      	ldr	r0, [pc, #176]	; (800a088 <_vfiprintf_r+0x250>)
 8009fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fda:	2206      	movs	r2, #6
 8009fdc:	f7f6 f938 	bl	8000250 <memchr>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d03f      	beq.n	800a064 <_vfiprintf_r+0x22c>
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <_vfiprintf_r+0x254>)
 8009fe6:	bb1b      	cbnz	r3, 800a030 <_vfiprintf_r+0x1f8>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	3307      	adds	r3, #7
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff6:	443b      	add	r3, r7
 8009ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffa:	e767      	b.n	8009ecc <_vfiprintf_r+0x94>
 8009ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a000:	460c      	mov	r4, r1
 800a002:	2001      	movs	r0, #1
 800a004:	e7a5      	b.n	8009f52 <_vfiprintf_r+0x11a>
 800a006:	2300      	movs	r3, #0
 800a008:	3401      	adds	r4, #1
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	4619      	mov	r1, r3
 800a00e:	f04f 0c0a 	mov.w	ip, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a018:	3a30      	subs	r2, #48	; 0x30
 800a01a:	2a09      	cmp	r2, #9
 800a01c:	d903      	bls.n	800a026 <_vfiprintf_r+0x1ee>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0c5      	beq.n	8009fae <_vfiprintf_r+0x176>
 800a022:	9105      	str	r1, [sp, #20]
 800a024:	e7c3      	b.n	8009fae <_vfiprintf_r+0x176>
 800a026:	fb0c 2101 	mla	r1, ip, r1, r2
 800a02a:	4604      	mov	r4, r0
 800a02c:	2301      	movs	r3, #1
 800a02e:	e7f0      	b.n	800a012 <_vfiprintf_r+0x1da>
 800a030:	ab03      	add	r3, sp, #12
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	462a      	mov	r2, r5
 800a036:	4b16      	ldr	r3, [pc, #88]	; (800a090 <_vfiprintf_r+0x258>)
 800a038:	a904      	add	r1, sp, #16
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7fd fe04 	bl	8007c48 <_printf_float>
 800a040:	4607      	mov	r7, r0
 800a042:	1c78      	adds	r0, r7, #1
 800a044:	d1d6      	bne.n	8009ff4 <_vfiprintf_r+0x1bc>
 800a046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a048:	07d9      	lsls	r1, r3, #31
 800a04a:	d405      	bmi.n	800a058 <_vfiprintf_r+0x220>
 800a04c:	89ab      	ldrh	r3, [r5, #12]
 800a04e:	059a      	lsls	r2, r3, #22
 800a050:	d402      	bmi.n	800a058 <_vfiprintf_r+0x220>
 800a052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a054:	f000 faaf 	bl	800a5b6 <__retarget_lock_release_recursive>
 800a058:	89ab      	ldrh	r3, [r5, #12]
 800a05a:	065b      	lsls	r3, r3, #25
 800a05c:	f53f af12 	bmi.w	8009e84 <_vfiprintf_r+0x4c>
 800a060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a062:	e711      	b.n	8009e88 <_vfiprintf_r+0x50>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	462a      	mov	r2, r5
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <_vfiprintf_r+0x258>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	4630      	mov	r0, r6
 800a070:	f7fe f876 	bl	8008160 <_printf_i>
 800a074:	e7e4      	b.n	800a040 <_vfiprintf_r+0x208>
 800a076:	bf00      	nop
 800a078:	0800accc 	.word	0x0800accc
 800a07c:	0800acec 	.word	0x0800acec
 800a080:	0800acac 	.word	0x0800acac
 800a084:	0800ac54 	.word	0x0800ac54
 800a088:	0800ac5e 	.word	0x0800ac5e
 800a08c:	08007c49 	.word	0x08007c49
 800a090:	08009e13 	.word	0x08009e13
 800a094:	0800ac5a 	.word	0x0800ac5a

0800a098 <__swbuf_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	460e      	mov	r6, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b118      	cbz	r0, 800a0aa <__swbuf_r+0x12>
 800a0a2:	6983      	ldr	r3, [r0, #24]
 800a0a4:	b90b      	cbnz	r3, 800a0aa <__swbuf_r+0x12>
 800a0a6:	f000 f9e7 	bl	800a478 <__sinit>
 800a0aa:	4b21      	ldr	r3, [pc, #132]	; (800a130 <__swbuf_r+0x98>)
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	d12b      	bne.n	800a108 <__swbuf_r+0x70>
 800a0b0:	686c      	ldr	r4, [r5, #4]
 800a0b2:	69a3      	ldr	r3, [r4, #24]
 800a0b4:	60a3      	str	r3, [r4, #8]
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	071a      	lsls	r2, r3, #28
 800a0ba:	d52f      	bpl.n	800a11c <__swbuf_r+0x84>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	b36b      	cbz	r3, 800a11c <__swbuf_r+0x84>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6820      	ldr	r0, [r4, #0]
 800a0c4:	1ac0      	subs	r0, r0, r3
 800a0c6:	6963      	ldr	r3, [r4, #20]
 800a0c8:	b2f6      	uxtb	r6, r6
 800a0ca:	4283      	cmp	r3, r0
 800a0cc:	4637      	mov	r7, r6
 800a0ce:	dc04      	bgt.n	800a0da <__swbuf_r+0x42>
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f93c 	bl	800a350 <_fflush_r>
 800a0d8:	bb30      	cbnz	r0, 800a128 <__swbuf_r+0x90>
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	60a3      	str	r3, [r4, #8]
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	6022      	str	r2, [r4, #0]
 800a0e6:	701e      	strb	r6, [r3, #0]
 800a0e8:	6963      	ldr	r3, [r4, #20]
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	4283      	cmp	r3, r0
 800a0ee:	d004      	beq.n	800a0fa <__swbuf_r+0x62>
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	07db      	lsls	r3, r3, #31
 800a0f4:	d506      	bpl.n	800a104 <__swbuf_r+0x6c>
 800a0f6:	2e0a      	cmp	r6, #10
 800a0f8:	d104      	bne.n	800a104 <__swbuf_r+0x6c>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 f927 	bl	800a350 <_fflush_r>
 800a102:	b988      	cbnz	r0, 800a128 <__swbuf_r+0x90>
 800a104:	4638      	mov	r0, r7
 800a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <__swbuf_r+0x9c>)
 800a10a:	429c      	cmp	r4, r3
 800a10c:	d101      	bne.n	800a112 <__swbuf_r+0x7a>
 800a10e:	68ac      	ldr	r4, [r5, #8]
 800a110:	e7cf      	b.n	800a0b2 <__swbuf_r+0x1a>
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <__swbuf_r+0xa0>)
 800a114:	429c      	cmp	r4, r3
 800a116:	bf08      	it	eq
 800a118:	68ec      	ldreq	r4, [r5, #12]
 800a11a:	e7ca      	b.n	800a0b2 <__swbuf_r+0x1a>
 800a11c:	4621      	mov	r1, r4
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 f81a 	bl	800a158 <__swsetup_r>
 800a124:	2800      	cmp	r0, #0
 800a126:	d0cb      	beq.n	800a0c0 <__swbuf_r+0x28>
 800a128:	f04f 37ff 	mov.w	r7, #4294967295
 800a12c:	e7ea      	b.n	800a104 <__swbuf_r+0x6c>
 800a12e:	bf00      	nop
 800a130:	0800accc 	.word	0x0800accc
 800a134:	0800acec 	.word	0x0800acec
 800a138:	0800acac 	.word	0x0800acac

0800a13c <__ascii_wctomb>:
 800a13c:	b149      	cbz	r1, 800a152 <__ascii_wctomb+0x16>
 800a13e:	2aff      	cmp	r2, #255	; 0xff
 800a140:	bf85      	ittet	hi
 800a142:	238a      	movhi	r3, #138	; 0x8a
 800a144:	6003      	strhi	r3, [r0, #0]
 800a146:	700a      	strbls	r2, [r1, #0]
 800a148:	f04f 30ff 	movhi.w	r0, #4294967295
 800a14c:	bf98      	it	ls
 800a14e:	2001      	movls	r0, #1
 800a150:	4770      	bx	lr
 800a152:	4608      	mov	r0, r1
 800a154:	4770      	bx	lr
	...

0800a158 <__swsetup_r>:
 800a158:	4b32      	ldr	r3, [pc, #200]	; (800a224 <__swsetup_r+0xcc>)
 800a15a:	b570      	push	{r4, r5, r6, lr}
 800a15c:	681d      	ldr	r5, [r3, #0]
 800a15e:	4606      	mov	r6, r0
 800a160:	460c      	mov	r4, r1
 800a162:	b125      	cbz	r5, 800a16e <__swsetup_r+0x16>
 800a164:	69ab      	ldr	r3, [r5, #24]
 800a166:	b913      	cbnz	r3, 800a16e <__swsetup_r+0x16>
 800a168:	4628      	mov	r0, r5
 800a16a:	f000 f985 	bl	800a478 <__sinit>
 800a16e:	4b2e      	ldr	r3, [pc, #184]	; (800a228 <__swsetup_r+0xd0>)
 800a170:	429c      	cmp	r4, r3
 800a172:	d10f      	bne.n	800a194 <__swsetup_r+0x3c>
 800a174:	686c      	ldr	r4, [r5, #4]
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a17c:	0719      	lsls	r1, r3, #28
 800a17e:	d42c      	bmi.n	800a1da <__swsetup_r+0x82>
 800a180:	06dd      	lsls	r5, r3, #27
 800a182:	d411      	bmi.n	800a1a8 <__swsetup_r+0x50>
 800a184:	2309      	movs	r3, #9
 800a186:	6033      	str	r3, [r6, #0]
 800a188:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	f04f 30ff 	mov.w	r0, #4294967295
 800a192:	e03e      	b.n	800a212 <__swsetup_r+0xba>
 800a194:	4b25      	ldr	r3, [pc, #148]	; (800a22c <__swsetup_r+0xd4>)
 800a196:	429c      	cmp	r4, r3
 800a198:	d101      	bne.n	800a19e <__swsetup_r+0x46>
 800a19a:	68ac      	ldr	r4, [r5, #8]
 800a19c:	e7eb      	b.n	800a176 <__swsetup_r+0x1e>
 800a19e:	4b24      	ldr	r3, [pc, #144]	; (800a230 <__swsetup_r+0xd8>)
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	bf08      	it	eq
 800a1a4:	68ec      	ldreq	r4, [r5, #12]
 800a1a6:	e7e6      	b.n	800a176 <__swsetup_r+0x1e>
 800a1a8:	0758      	lsls	r0, r3, #29
 800a1aa:	d512      	bpl.n	800a1d2 <__swsetup_r+0x7a>
 800a1ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ae:	b141      	cbz	r1, 800a1c2 <__swsetup_r+0x6a>
 800a1b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	d002      	beq.n	800a1be <__swsetup_r+0x66>
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7ff fb6f 	bl	800989c <_free_r>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	6063      	str	r3, [r4, #4]
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f043 0308 	orr.w	r3, r3, #8
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	b94b      	cbnz	r3, 800a1f2 <__swsetup_r+0x9a>
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1e8:	d003      	beq.n	800a1f2 <__swsetup_r+0x9a>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f000 fa07 	bl	800a600 <__smakebuf_r>
 800a1f2:	89a0      	ldrh	r0, [r4, #12]
 800a1f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1f8:	f010 0301 	ands.w	r3, r0, #1
 800a1fc:	d00a      	beq.n	800a214 <__swsetup_r+0xbc>
 800a1fe:	2300      	movs	r3, #0
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	6963      	ldr	r3, [r4, #20]
 800a204:	425b      	negs	r3, r3
 800a206:	61a3      	str	r3, [r4, #24]
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	b943      	cbnz	r3, 800a21e <__swsetup_r+0xc6>
 800a20c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a210:	d1ba      	bne.n	800a188 <__swsetup_r+0x30>
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	0781      	lsls	r1, r0, #30
 800a216:	bf58      	it	pl
 800a218:	6963      	ldrpl	r3, [r4, #20]
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	e7f4      	b.n	800a208 <__swsetup_r+0xb0>
 800a21e:	2000      	movs	r0, #0
 800a220:	e7f7      	b.n	800a212 <__swsetup_r+0xba>
 800a222:	bf00      	nop
 800a224:	20000028 	.word	0x20000028
 800a228:	0800accc 	.word	0x0800accc
 800a22c:	0800acec 	.word	0x0800acec
 800a230:	0800acac 	.word	0x0800acac

0800a234 <abort>:
 800a234:	b508      	push	{r3, lr}
 800a236:	2006      	movs	r0, #6
 800a238:	f000 fa52 	bl	800a6e0 <raise>
 800a23c:	2001      	movs	r0, #1
 800a23e:	f7f7 ffef 	bl	8002220 <_exit>
	...

0800a244 <__sflush_r>:
 800a244:	898a      	ldrh	r2, [r1, #12]
 800a246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	4605      	mov	r5, r0
 800a24c:	0710      	lsls	r0, r2, #28
 800a24e:	460c      	mov	r4, r1
 800a250:	d458      	bmi.n	800a304 <__sflush_r+0xc0>
 800a252:	684b      	ldr	r3, [r1, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	dc05      	bgt.n	800a264 <__sflush_r+0x20>
 800a258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	dc02      	bgt.n	800a264 <__sflush_r+0x20>
 800a25e:	2000      	movs	r0, #0
 800a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a266:	2e00      	cmp	r6, #0
 800a268:	d0f9      	beq.n	800a25e <__sflush_r+0x1a>
 800a26a:	2300      	movs	r3, #0
 800a26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a270:	682f      	ldr	r7, [r5, #0]
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	d032      	beq.n	800a2dc <__sflush_r+0x98>
 800a276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	075a      	lsls	r2, r3, #29
 800a27c:	d505      	bpl.n	800a28a <__sflush_r+0x46>
 800a27e:	6863      	ldr	r3, [r4, #4]
 800a280:	1ac0      	subs	r0, r0, r3
 800a282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a284:	b10b      	cbz	r3, 800a28a <__sflush_r+0x46>
 800a286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a288:	1ac0      	subs	r0, r0, r3
 800a28a:	2300      	movs	r3, #0
 800a28c:	4602      	mov	r2, r0
 800a28e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a290:	6a21      	ldr	r1, [r4, #32]
 800a292:	4628      	mov	r0, r5
 800a294:	47b0      	blx	r6
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	d106      	bne.n	800a2aa <__sflush_r+0x66>
 800a29c:	6829      	ldr	r1, [r5, #0]
 800a29e:	291d      	cmp	r1, #29
 800a2a0:	d82c      	bhi.n	800a2fc <__sflush_r+0xb8>
 800a2a2:	4a2a      	ldr	r2, [pc, #168]	; (800a34c <__sflush_r+0x108>)
 800a2a4:	40ca      	lsrs	r2, r1
 800a2a6:	07d6      	lsls	r6, r2, #31
 800a2a8:	d528      	bpl.n	800a2fc <__sflush_r+0xb8>
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	6062      	str	r2, [r4, #4]
 800a2ae:	04d9      	lsls	r1, r3, #19
 800a2b0:	6922      	ldr	r2, [r4, #16]
 800a2b2:	6022      	str	r2, [r4, #0]
 800a2b4:	d504      	bpl.n	800a2c0 <__sflush_r+0x7c>
 800a2b6:	1c42      	adds	r2, r0, #1
 800a2b8:	d101      	bne.n	800a2be <__sflush_r+0x7a>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	b903      	cbnz	r3, 800a2c0 <__sflush_r+0x7c>
 800a2be:	6560      	str	r0, [r4, #84]	; 0x54
 800a2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c2:	602f      	str	r7, [r5, #0]
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d0ca      	beq.n	800a25e <__sflush_r+0x1a>
 800a2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d002      	beq.n	800a2d6 <__sflush_r+0x92>
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f7ff fae3 	bl	800989c <_free_r>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a2da:	e7c1      	b.n	800a260 <__sflush_r+0x1c>
 800a2dc:	6a21      	ldr	r1, [r4, #32]
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b0      	blx	r6
 800a2e4:	1c41      	adds	r1, r0, #1
 800a2e6:	d1c7      	bne.n	800a278 <__sflush_r+0x34>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0c4      	beq.n	800a278 <__sflush_r+0x34>
 800a2ee:	2b1d      	cmp	r3, #29
 800a2f0:	d001      	beq.n	800a2f6 <__sflush_r+0xb2>
 800a2f2:	2b16      	cmp	r3, #22
 800a2f4:	d101      	bne.n	800a2fa <__sflush_r+0xb6>
 800a2f6:	602f      	str	r7, [r5, #0]
 800a2f8:	e7b1      	b.n	800a25e <__sflush_r+0x1a>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	e7ad      	b.n	800a260 <__sflush_r+0x1c>
 800a304:	690f      	ldr	r7, [r1, #16]
 800a306:	2f00      	cmp	r7, #0
 800a308:	d0a9      	beq.n	800a25e <__sflush_r+0x1a>
 800a30a:	0793      	lsls	r3, r2, #30
 800a30c:	680e      	ldr	r6, [r1, #0]
 800a30e:	bf08      	it	eq
 800a310:	694b      	ldreq	r3, [r1, #20]
 800a312:	600f      	str	r7, [r1, #0]
 800a314:	bf18      	it	ne
 800a316:	2300      	movne	r3, #0
 800a318:	eba6 0807 	sub.w	r8, r6, r7
 800a31c:	608b      	str	r3, [r1, #8]
 800a31e:	f1b8 0f00 	cmp.w	r8, #0
 800a322:	dd9c      	ble.n	800a25e <__sflush_r+0x1a>
 800a324:	6a21      	ldr	r1, [r4, #32]
 800a326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a328:	4643      	mov	r3, r8
 800a32a:	463a      	mov	r2, r7
 800a32c:	4628      	mov	r0, r5
 800a32e:	47b0      	blx	r6
 800a330:	2800      	cmp	r0, #0
 800a332:	dc06      	bgt.n	800a342 <__sflush_r+0xfe>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	f04f 30ff 	mov.w	r0, #4294967295
 800a340:	e78e      	b.n	800a260 <__sflush_r+0x1c>
 800a342:	4407      	add	r7, r0
 800a344:	eba8 0800 	sub.w	r8, r8, r0
 800a348:	e7e9      	b.n	800a31e <__sflush_r+0xda>
 800a34a:	bf00      	nop
 800a34c:	20400001 	.word	0x20400001

0800a350 <_fflush_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	690b      	ldr	r3, [r1, #16]
 800a354:	4605      	mov	r5, r0
 800a356:	460c      	mov	r4, r1
 800a358:	b913      	cbnz	r3, 800a360 <_fflush_r+0x10>
 800a35a:	2500      	movs	r5, #0
 800a35c:	4628      	mov	r0, r5
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	b118      	cbz	r0, 800a36a <_fflush_r+0x1a>
 800a362:	6983      	ldr	r3, [r0, #24]
 800a364:	b90b      	cbnz	r3, 800a36a <_fflush_r+0x1a>
 800a366:	f000 f887 	bl	800a478 <__sinit>
 800a36a:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <_fflush_r+0x6c>)
 800a36c:	429c      	cmp	r4, r3
 800a36e:	d11b      	bne.n	800a3a8 <_fflush_r+0x58>
 800a370:	686c      	ldr	r4, [r5, #4]
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0ef      	beq.n	800a35a <_fflush_r+0xa>
 800a37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a37c:	07d0      	lsls	r0, r2, #31
 800a37e:	d404      	bmi.n	800a38a <_fflush_r+0x3a>
 800a380:	0599      	lsls	r1, r3, #22
 800a382:	d402      	bmi.n	800a38a <_fflush_r+0x3a>
 800a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a386:	f000 f915 	bl	800a5b4 <__retarget_lock_acquire_recursive>
 800a38a:	4628      	mov	r0, r5
 800a38c:	4621      	mov	r1, r4
 800a38e:	f7ff ff59 	bl	800a244 <__sflush_r>
 800a392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a394:	07da      	lsls	r2, r3, #31
 800a396:	4605      	mov	r5, r0
 800a398:	d4e0      	bmi.n	800a35c <_fflush_r+0xc>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	059b      	lsls	r3, r3, #22
 800a39e:	d4dd      	bmi.n	800a35c <_fflush_r+0xc>
 800a3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a2:	f000 f908 	bl	800a5b6 <__retarget_lock_release_recursive>
 800a3a6:	e7d9      	b.n	800a35c <_fflush_r+0xc>
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <_fflush_r+0x70>)
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d101      	bne.n	800a3b2 <_fflush_r+0x62>
 800a3ae:	68ac      	ldr	r4, [r5, #8]
 800a3b0:	e7df      	b.n	800a372 <_fflush_r+0x22>
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <_fflush_r+0x74>)
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	bf08      	it	eq
 800a3b8:	68ec      	ldreq	r4, [r5, #12]
 800a3ba:	e7da      	b.n	800a372 <_fflush_r+0x22>
 800a3bc:	0800accc 	.word	0x0800accc
 800a3c0:	0800acec 	.word	0x0800acec
 800a3c4:	0800acac 	.word	0x0800acac

0800a3c8 <std>:
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	b510      	push	{r4, lr}
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3d6:	6083      	str	r3, [r0, #8]
 800a3d8:	8181      	strh	r1, [r0, #12]
 800a3da:	6643      	str	r3, [r0, #100]	; 0x64
 800a3dc:	81c2      	strh	r2, [r0, #14]
 800a3de:	6183      	str	r3, [r0, #24]
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	305c      	adds	r0, #92	; 0x5c
 800a3e6:	f7fd fb97 	bl	8007b18 <memset>
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <std+0x38>)
 800a3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ee:	4b05      	ldr	r3, [pc, #20]	; (800a404 <std+0x3c>)
 800a3f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3f2:	4b05      	ldr	r3, [pc, #20]	; (800a408 <std+0x40>)
 800a3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3f6:	4b05      	ldr	r3, [pc, #20]	; (800a40c <std+0x44>)
 800a3f8:	6224      	str	r4, [r4, #32]
 800a3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	bf00      	nop
 800a400:	0800a719 	.word	0x0800a719
 800a404:	0800a73b 	.word	0x0800a73b
 800a408:	0800a773 	.word	0x0800a773
 800a40c:	0800a797 	.word	0x0800a797

0800a410 <_cleanup_r>:
 800a410:	4901      	ldr	r1, [pc, #4]	; (800a418 <_cleanup_r+0x8>)
 800a412:	f000 b8af 	b.w	800a574 <_fwalk_reent>
 800a416:	bf00      	nop
 800a418:	0800a351 	.word	0x0800a351

0800a41c <__sfmoreglue>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	1e4a      	subs	r2, r1, #1
 800a420:	2568      	movs	r5, #104	; 0x68
 800a422:	4355      	muls	r5, r2
 800a424:	460e      	mov	r6, r1
 800a426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a42a:	f7ff fa87 	bl	800993c <_malloc_r>
 800a42e:	4604      	mov	r4, r0
 800a430:	b140      	cbz	r0, 800a444 <__sfmoreglue+0x28>
 800a432:	2100      	movs	r1, #0
 800a434:	e9c0 1600 	strd	r1, r6, [r0]
 800a438:	300c      	adds	r0, #12
 800a43a:	60a0      	str	r0, [r4, #8]
 800a43c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a440:	f7fd fb6a 	bl	8007b18 <memset>
 800a444:	4620      	mov	r0, r4
 800a446:	bd70      	pop	{r4, r5, r6, pc}

0800a448 <__sfp_lock_acquire>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sfp_lock_acquire+0x8>)
 800a44a:	f000 b8b3 	b.w	800a5b4 <__retarget_lock_acquire_recursive>
 800a44e:	bf00      	nop
 800a450:	20000940 	.word	0x20000940

0800a454 <__sfp_lock_release>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__sfp_lock_release+0x8>)
 800a456:	f000 b8ae 	b.w	800a5b6 <__retarget_lock_release_recursive>
 800a45a:	bf00      	nop
 800a45c:	20000940 	.word	0x20000940

0800a460 <__sinit_lock_acquire>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__sinit_lock_acquire+0x8>)
 800a462:	f000 b8a7 	b.w	800a5b4 <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	2000093b 	.word	0x2000093b

0800a46c <__sinit_lock_release>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__sinit_lock_release+0x8>)
 800a46e:	f000 b8a2 	b.w	800a5b6 <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	2000093b 	.word	0x2000093b

0800a478 <__sinit>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	4604      	mov	r4, r0
 800a47c:	f7ff fff0 	bl	800a460 <__sinit_lock_acquire>
 800a480:	69a3      	ldr	r3, [r4, #24]
 800a482:	b11b      	cbz	r3, 800a48c <__sinit+0x14>
 800a484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a488:	f7ff bff0 	b.w	800a46c <__sinit_lock_release>
 800a48c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a490:	6523      	str	r3, [r4, #80]	; 0x50
 800a492:	4b13      	ldr	r3, [pc, #76]	; (800a4e0 <__sinit+0x68>)
 800a494:	4a13      	ldr	r2, [pc, #76]	; (800a4e4 <__sinit+0x6c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	62a2      	str	r2, [r4, #40]	; 0x28
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	bf04      	itt	eq
 800a49e:	2301      	moveq	r3, #1
 800a4a0:	61a3      	streq	r3, [r4, #24]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 f820 	bl	800a4e8 <__sfp>
 800a4a8:	6060      	str	r0, [r4, #4]
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f81c 	bl	800a4e8 <__sfp>
 800a4b0:	60a0      	str	r0, [r4, #8]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 f818 	bl	800a4e8 <__sfp>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	60e0      	str	r0, [r4, #12]
 800a4bc:	2104      	movs	r1, #4
 800a4be:	6860      	ldr	r0, [r4, #4]
 800a4c0:	f7ff ff82 	bl	800a3c8 <std>
 800a4c4:	68a0      	ldr	r0, [r4, #8]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	2109      	movs	r1, #9
 800a4ca:	f7ff ff7d 	bl	800a3c8 <std>
 800a4ce:	68e0      	ldr	r0, [r4, #12]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	2112      	movs	r1, #18
 800a4d4:	f7ff ff78 	bl	800a3c8 <std>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	61a3      	str	r3, [r4, #24]
 800a4dc:	e7d2      	b.n	800a484 <__sinit+0xc>
 800a4de:	bf00      	nop
 800a4e0:	0800a924 	.word	0x0800a924
 800a4e4:	0800a411 	.word	0x0800a411

0800a4e8 <__sfp>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	f7ff ffac 	bl	800a448 <__sfp_lock_acquire>
 800a4f0:	4b1e      	ldr	r3, [pc, #120]	; (800a56c <__sfp+0x84>)
 800a4f2:	681e      	ldr	r6, [r3, #0]
 800a4f4:	69b3      	ldr	r3, [r6, #24]
 800a4f6:	b913      	cbnz	r3, 800a4fe <__sfp+0x16>
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f7ff ffbd 	bl	800a478 <__sinit>
 800a4fe:	3648      	adds	r6, #72	; 0x48
 800a500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a504:	3b01      	subs	r3, #1
 800a506:	d503      	bpl.n	800a510 <__sfp+0x28>
 800a508:	6833      	ldr	r3, [r6, #0]
 800a50a:	b30b      	cbz	r3, 800a550 <__sfp+0x68>
 800a50c:	6836      	ldr	r6, [r6, #0]
 800a50e:	e7f7      	b.n	800a500 <__sfp+0x18>
 800a510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a514:	b9d5      	cbnz	r5, 800a54c <__sfp+0x64>
 800a516:	4b16      	ldr	r3, [pc, #88]	; (800a570 <__sfp+0x88>)
 800a518:	60e3      	str	r3, [r4, #12]
 800a51a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a51e:	6665      	str	r5, [r4, #100]	; 0x64
 800a520:	f000 f847 	bl	800a5b2 <__retarget_lock_init_recursive>
 800a524:	f7ff ff96 	bl	800a454 <__sfp_lock_release>
 800a528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a52c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a530:	6025      	str	r5, [r4, #0]
 800a532:	61a5      	str	r5, [r4, #24]
 800a534:	2208      	movs	r2, #8
 800a536:	4629      	mov	r1, r5
 800a538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a53c:	f7fd faec 	bl	8007b18 <memset>
 800a540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a548:	4620      	mov	r0, r4
 800a54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a54c:	3468      	adds	r4, #104	; 0x68
 800a54e:	e7d9      	b.n	800a504 <__sfp+0x1c>
 800a550:	2104      	movs	r1, #4
 800a552:	4638      	mov	r0, r7
 800a554:	f7ff ff62 	bl	800a41c <__sfmoreglue>
 800a558:	4604      	mov	r4, r0
 800a55a:	6030      	str	r0, [r6, #0]
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d1d5      	bne.n	800a50c <__sfp+0x24>
 800a560:	f7ff ff78 	bl	800a454 <__sfp_lock_release>
 800a564:	230c      	movs	r3, #12
 800a566:	603b      	str	r3, [r7, #0]
 800a568:	e7ee      	b.n	800a548 <__sfp+0x60>
 800a56a:	bf00      	nop
 800a56c:	0800a924 	.word	0x0800a924
 800a570:	ffff0001 	.word	0xffff0001

0800a574 <_fwalk_reent>:
 800a574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a578:	4606      	mov	r6, r0
 800a57a:	4688      	mov	r8, r1
 800a57c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a580:	2700      	movs	r7, #0
 800a582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a586:	f1b9 0901 	subs.w	r9, r9, #1
 800a58a:	d505      	bpl.n	800a598 <_fwalk_reent+0x24>
 800a58c:	6824      	ldr	r4, [r4, #0]
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d1f7      	bne.n	800a582 <_fwalk_reent+0xe>
 800a592:	4638      	mov	r0, r7
 800a594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a598:	89ab      	ldrh	r3, [r5, #12]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d907      	bls.n	800a5ae <_fwalk_reent+0x3a>
 800a59e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	d003      	beq.n	800a5ae <_fwalk_reent+0x3a>
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	47c0      	blx	r8
 800a5ac:	4307      	orrs	r7, r0
 800a5ae:	3568      	adds	r5, #104	; 0x68
 800a5b0:	e7e9      	b.n	800a586 <_fwalk_reent+0x12>

0800a5b2 <__retarget_lock_init_recursive>:
 800a5b2:	4770      	bx	lr

0800a5b4 <__retarget_lock_acquire_recursive>:
 800a5b4:	4770      	bx	lr

0800a5b6 <__retarget_lock_release_recursive>:
 800a5b6:	4770      	bx	lr

0800a5b8 <__swhatbuf_r>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	460e      	mov	r6, r1
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	b096      	sub	sp, #88	; 0x58
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	461d      	mov	r5, r3
 800a5c8:	da07      	bge.n	800a5da <__swhatbuf_r+0x22>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	89b3      	ldrh	r3, [r6, #12]
 800a5d0:	061a      	lsls	r2, r3, #24
 800a5d2:	d410      	bmi.n	800a5f6 <__swhatbuf_r+0x3e>
 800a5d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d8:	e00e      	b.n	800a5f8 <__swhatbuf_r+0x40>
 800a5da:	466a      	mov	r2, sp
 800a5dc:	f000 f902 	bl	800a7e4 <_fstat_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	dbf2      	blt.n	800a5ca <__swhatbuf_r+0x12>
 800a5e4:	9a01      	ldr	r2, [sp, #4]
 800a5e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5ee:	425a      	negs	r2, r3
 800a5f0:	415a      	adcs	r2, r3
 800a5f2:	602a      	str	r2, [r5, #0]
 800a5f4:	e7ee      	b.n	800a5d4 <__swhatbuf_r+0x1c>
 800a5f6:	2340      	movs	r3, #64	; 0x40
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	b016      	add	sp, #88	; 0x58
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}

0800a600 <__smakebuf_r>:
 800a600:	898b      	ldrh	r3, [r1, #12]
 800a602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a604:	079d      	lsls	r5, r3, #30
 800a606:	4606      	mov	r6, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	d507      	bpl.n	800a61c <__smakebuf_r+0x1c>
 800a60c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2301      	movs	r3, #1
 800a616:	6163      	str	r3, [r4, #20]
 800a618:	b002      	add	sp, #8
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	ab01      	add	r3, sp, #4
 800a61e:	466a      	mov	r2, sp
 800a620:	f7ff ffca 	bl	800a5b8 <__swhatbuf_r>
 800a624:	9900      	ldr	r1, [sp, #0]
 800a626:	4605      	mov	r5, r0
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff f987 	bl	800993c <_malloc_r>
 800a62e:	b948      	cbnz	r0, 800a644 <__smakebuf_r+0x44>
 800a630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a634:	059a      	lsls	r2, r3, #22
 800a636:	d4ef      	bmi.n	800a618 <__smakebuf_r+0x18>
 800a638:	f023 0303 	bic.w	r3, r3, #3
 800a63c:	f043 0302 	orr.w	r3, r3, #2
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	e7e3      	b.n	800a60c <__smakebuf_r+0xc>
 800a644:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <__smakebuf_r+0x7c>)
 800a646:	62b3      	str	r3, [r6, #40]	; 0x28
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	6020      	str	r0, [r4, #0]
 800a64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	9b00      	ldr	r3, [sp, #0]
 800a654:	6163      	str	r3, [r4, #20]
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	6120      	str	r0, [r4, #16]
 800a65a:	b15b      	cbz	r3, 800a674 <__smakebuf_r+0x74>
 800a65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a660:	4630      	mov	r0, r6
 800a662:	f000 f8d1 	bl	800a808 <_isatty_r>
 800a666:	b128      	cbz	r0, 800a674 <__smakebuf_r+0x74>
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	f023 0303 	bic.w	r3, r3, #3
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	89a0      	ldrh	r0, [r4, #12]
 800a676:	4305      	orrs	r5, r0
 800a678:	81a5      	strh	r5, [r4, #12]
 800a67a:	e7cd      	b.n	800a618 <__smakebuf_r+0x18>
 800a67c:	0800a411 	.word	0x0800a411

0800a680 <_malloc_usable_size_r>:
 800a680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a684:	1f18      	subs	r0, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	bfbc      	itt	lt
 800a68a:	580b      	ldrlt	r3, [r1, r0]
 800a68c:	18c0      	addlt	r0, r0, r3
 800a68e:	4770      	bx	lr

0800a690 <_raise_r>:
 800a690:	291f      	cmp	r1, #31
 800a692:	b538      	push	{r3, r4, r5, lr}
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	d904      	bls.n	800a6a4 <_raise_r+0x14>
 800a69a:	2316      	movs	r3, #22
 800a69c:	6003      	str	r3, [r0, #0]
 800a69e:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6a6:	b112      	cbz	r2, 800a6ae <_raise_r+0x1e>
 800a6a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6ac:	b94b      	cbnz	r3, 800a6c2 <_raise_r+0x32>
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 f830 	bl	800a714 <_getpid_r>
 800a6b4:	462a      	mov	r2, r5
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6be:	f000 b817 	b.w	800a6f0 <_kill_r>
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d00a      	beq.n	800a6dc <_raise_r+0x4c>
 800a6c6:	1c59      	adds	r1, r3, #1
 800a6c8:	d103      	bne.n	800a6d2 <_raise_r+0x42>
 800a6ca:	2316      	movs	r3, #22
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	e7e7      	b.n	800a6a2 <_raise_r+0x12>
 800a6d2:	2400      	movs	r4, #0
 800a6d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6d8:	4628      	mov	r0, r5
 800a6da:	4798      	blx	r3
 800a6dc:	2000      	movs	r0, #0
 800a6de:	e7e0      	b.n	800a6a2 <_raise_r+0x12>

0800a6e0 <raise>:
 800a6e0:	4b02      	ldr	r3, [pc, #8]	; (800a6ec <raise+0xc>)
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	f7ff bfd3 	b.w	800a690 <_raise_r>
 800a6ea:	bf00      	nop
 800a6ec:	20000028 	.word	0x20000028

0800a6f0 <_kill_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d07      	ldr	r5, [pc, #28]	; (800a710 <_kill_r+0x20>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f7f7 fd7f 	bl	8002200 <_kill>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d102      	bne.n	800a70c <_kill_r+0x1c>
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	b103      	cbz	r3, 800a70c <_kill_r+0x1c>
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	20000934 	.word	0x20000934

0800a714 <_getpid_r>:
 800a714:	f7f7 bd6c 	b.w	80021f0 <_getpid>

0800a718 <__sread>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	460c      	mov	r4, r1
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	f000 f894 	bl	800a84c <_read_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	bfab      	itete	ge
 800a728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a72a:	89a3      	ldrhlt	r3, [r4, #12]
 800a72c:	181b      	addge	r3, r3, r0
 800a72e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a732:	bfac      	ite	ge
 800a734:	6563      	strge	r3, [r4, #84]	; 0x54
 800a736:	81a3      	strhlt	r3, [r4, #12]
 800a738:	bd10      	pop	{r4, pc}

0800a73a <__swrite>:
 800a73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73e:	461f      	mov	r7, r3
 800a740:	898b      	ldrh	r3, [r1, #12]
 800a742:	05db      	lsls	r3, r3, #23
 800a744:	4605      	mov	r5, r0
 800a746:	460c      	mov	r4, r1
 800a748:	4616      	mov	r6, r2
 800a74a:	d505      	bpl.n	800a758 <__swrite+0x1e>
 800a74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a750:	2302      	movs	r3, #2
 800a752:	2200      	movs	r2, #0
 800a754:	f000 f868 	bl	800a828 <_lseek_r>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a75e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	4632      	mov	r2, r6
 800a766:	463b      	mov	r3, r7
 800a768:	4628      	mov	r0, r5
 800a76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a76e:	f000 b817 	b.w	800a7a0 <_write_r>

0800a772 <__sseek>:
 800a772:	b510      	push	{r4, lr}
 800a774:	460c      	mov	r4, r1
 800a776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77a:	f000 f855 	bl	800a828 <_lseek_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	bf15      	itete	ne
 800a784:	6560      	strne	r0, [r4, #84]	; 0x54
 800a786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a78a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a78e:	81a3      	strheq	r3, [r4, #12]
 800a790:	bf18      	it	ne
 800a792:	81a3      	strhne	r3, [r4, #12]
 800a794:	bd10      	pop	{r4, pc}

0800a796 <__sclose>:
 800a796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79a:	f000 b813 	b.w	800a7c4 <_close_r>
	...

0800a7a0 <_write_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	; (800a7c0 <_write_r+0x20>)
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f7 fd5d 	bl	800226e <_write>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_write_r+0x1e>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_write_r+0x1e>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20000934 	.word	0x20000934

0800a7c4 <_close_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_close_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f7 fd69 	bl	80022a6 <_close>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_close_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_close_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	20000934 	.word	0x20000934

0800a7e4 <_fstat_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	; (800a804 <_fstat_r+0x20>)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	f7f7 fd64 	bl	80022be <_fstat>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d102      	bne.n	800a800 <_fstat_r+0x1c>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	b103      	cbz	r3, 800a800 <_fstat_r+0x1c>
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	bf00      	nop
 800a804:	20000934 	.word	0x20000934

0800a808 <_isatty_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d06      	ldr	r5, [pc, #24]	; (800a824 <_isatty_r+0x1c>)
 800a80c:	2300      	movs	r3, #0
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7f7 fd63 	bl	80022de <_isatty>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_isatty_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_isatty_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20000934 	.word	0x20000934

0800a828 <_lseek_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d07      	ldr	r5, [pc, #28]	; (800a848 <_lseek_r+0x20>)
 800a82c:	4604      	mov	r4, r0
 800a82e:	4608      	mov	r0, r1
 800a830:	4611      	mov	r1, r2
 800a832:	2200      	movs	r2, #0
 800a834:	602a      	str	r2, [r5, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	f7f7 fd5c 	bl	80022f4 <_lseek>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_lseek_r+0x1e>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_lseek_r+0x1e>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	20000934 	.word	0x20000934

0800a84c <_read_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	; (800a86c <_read_r+0x20>)
 800a850:	4604      	mov	r4, r0
 800a852:	4608      	mov	r0, r1
 800a854:	4611      	mov	r1, r2
 800a856:	2200      	movs	r2, #0
 800a858:	602a      	str	r2, [r5, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	f7f7 fcea 	bl	8002234 <_read>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_read_r+0x1e>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_read_r+0x1e>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	20000934 	.word	0x20000934

0800a870 <_init>:
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a872:	bf00      	nop
 800a874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a876:	bc08      	pop	{r3}
 800a878:	469e      	mov	lr, r3
 800a87a:	4770      	bx	lr

0800a87c <_fini>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	bf00      	nop
 800a880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a882:	bc08      	pop	{r3}
 800a884:	469e      	mov	lr, r3
 800a886:	4770      	bx	lr
