
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b7c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e14  08005e14  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e1c  08005e1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000010  08005e34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08005e34  00020554  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cd1  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8b  00000000  00000000  00032d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000358a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00036610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028992  00000000  00000000  00037258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011faa  00000000  00000000  0005fbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f659a  00000000  00000000  00071b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016812e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  00168180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d5c 	.word	0x08005d5c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005d5c 	.word	0x08005d5c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_CAN1_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000548:	2210      	movs	r2, #16
 800054a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_CAN1_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_CAN1_Init+0x68>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000564:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000568:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000590:	f001 f904 	bl	800179c <HAL_CAN_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fecd 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002c 	.word	0x2000002c
 80005a8:	40006400 	.word	0x40006400

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_CAN_MspInit+0x8c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d12f      	bne.n	800062e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fe:	2303      	movs	r3, #3
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060e:	2309      	movs	r3, #9
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_CAN_MspInit+0x94>)
 800061a:	f002 f8d1 	bl	80027c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2014      	movs	r0, #20
 8000624:	f002 f803 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000628:	2014      	movs	r0, #20
 800062a:	f002 f81c 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b6c      	ldr	r3, [pc, #432]	; (800080c <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a6b      	ldr	r2, [pc, #428]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b66      	ldr	r3, [pc, #408]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a65      	ldr	r2, [pc, #404]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a5f      	ldr	r2, [pc, #380]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b5d      	ldr	r3, [pc, #372]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b5a      	ldr	r3, [pc, #360]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a59      	ldr	r2, [pc, #356]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b57      	ldr	r3, [pc, #348]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b54      	ldr	r3, [pc, #336]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a53      	ldr	r2, [pc, #332]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b51      	ldr	r3, [pc, #324]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a4d      	ldr	r2, [pc, #308]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <MX_GPIO_Init+0x1cc>)
 80006f2:	f002 fa11 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	4846      	ldr	r0, [pc, #280]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80006fc:	f002 fa0c 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4840      	ldr	r0, [pc, #256]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000718:	f002 f852 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800071c:	2332      	movs	r3, #50	; 0x32
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072c:	230b      	movs	r3, #11
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4838      	ldr	r0, [pc, #224]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000738:	f002 f842 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800073c:	2386      	movs	r3, #134	; 0x86
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4831      	ldr	r0, [pc, #196]	; (800081c <MX_GPIO_Init+0x1d8>)
 8000758:	f002 f832 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800075c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4826      	ldr	r0, [pc, #152]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000776:	f002 f823 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000798:	f002 f812 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007b4:	f002 f804 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007cc:	f001 fff8 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007ee:	f001 ffe7 	bl	80027c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f001 ff19 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f001 ff32 	bl	8002666 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	40021800 	.word	0x40021800
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000

08000820 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000830:	d129      	bne.n	8000886 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_GPIO_EXTI_Callback+0x70>)
 8000834:	f240 620a 	movw	r2, #1546	; 0x60a
 8000838:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_GPIO_EXTI_Callback+0x70>)
 800083c:	2208      	movs	r2, #8
 800083e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 8000842:	2240      	movs	r2, #64	; 0x40
 8000844:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 8000848:	2241      	movs	r2, #65	; 0x41
 800084a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 800084e:	2260      	movs	r2, #96	; 0x60
 8000850:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_GPIO_EXTI_Callback+0x78>)
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_GPIO_EXTI_Callback+0x74>)
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <HAL_GPIO_EXTI_Callback+0x70>)
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000878:	f001 f9bc 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8000882:	f000 fd59 	bl	8001338 <Error_Handler>
		}
	}
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000058 	.word	0x20000058
 8000894:	20000070 	.word	0x20000070
 8000898:	20000078 	.word	0x20000078
 800089c:	2000002c 	.word	0x2000002c

080008a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008a4:	f000 fef9 	bl	800169a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008a8:	f000 f86a 	bl	8000980 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008ac:	f7ff feca 	bl	8000644 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80008b0:	f000 fdc4 	bl	800143c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80008b4:	f000 fe3e 	bl	8001534 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 80008b8:	f7ff fe40 	bl	800053c <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, UserMessage, 4);
 80008bc:	2204      	movs	r2, #4
 80008be:	4929      	ldr	r1, [pc, #164]	; (8000964 <main+0xc4>)
 80008c0:	4829      	ldr	r0, [pc, #164]	; (8000968 <main+0xc8>)
 80008c2:	f003 fcfa 	bl	80042ba <HAL_UART_Receive_IT>

	HAL_CAN_Start(&hcan1);
 80008c6:	4829      	ldr	r0, [pc, #164]	; (800096c <main+0xcc>)
 80008c8:	f001 f950 	bl	8001b6c <HAL_CAN_Start>

	// TxHeader param config
	TxHeader.StdId = 0x000;
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <main+0xd0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <main+0xd0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <main+0xd0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <main+0xd0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <main+0xd0>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <main+0xd0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	751a      	strb	r2, [r3, #20]

	TxData[0] = 0x82;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <main+0xd4>)
 80008f2:	2282      	movs	r2, #130	; 0x82
 80008f4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x0A;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <main+0xd4>)
 80008f8:	220a      	movs	r2, #10
 80008fa:	705a      	strb	r2, [r3, #1]



	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <main+0xd8>)
 80008fe:	2201      	movs	r2, #1
 8000900:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <main+0xd8>)
 8000904:	2212      	movs	r2, #18
 8000906:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <main+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <main+0xd8>)
 8000910:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000914:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <main+0xd8>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <main+0xd8>)
 800091e:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000922:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <main+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0xd8>)
 8000932:	2201      	movs	r2, #1
 8000934:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <main+0xd8>)
 8000938:	2214      	movs	r2, #20
 800093a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 800093c:	490e      	ldr	r1, [pc, #56]	; (8000978 <main+0xd8>)
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <main+0xcc>)
 8000940:	f001 f828 	bl	8001994 <HAL_CAN_ConfigFilter>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000944:	2102      	movs	r1, #2
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <main+0xcc>)
 8000948:	f001 fb41 	bl	8001fce <HAL_CAN_ActivateNotification>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <main+0xdc>)
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <main+0xd4>)
 8000950:	4907      	ldr	r1, [pc, #28]	; (8000970 <main+0xd0>)
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <main+0xcc>)
 8000954:	f001 f94e 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <main+0xc2>
		Error_Handler();
 800095e:	f000 fceb 	bl	8001338 <Error_Handler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000962:	e7fe      	b.n	8000962 <main+0xc2>
 8000964:	20000054 	.word	0x20000054
 8000968:	200000c8 	.word	0x200000c8
 800096c:	2000002c 	.word	0x2000002c
 8000970:	20000058 	.word	0x20000058
 8000974:	20000070 	.word	0x20000070
 8000978:	200000a0 	.word	0x200000a0
 800097c:	20000078 	.word	0x20000078

08000980 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0b8      	sub	sp, #224	; 0xe0
 8000984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800098a:	2234      	movs	r2, #52	; 0x34
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f005 f9dc 	bl	8005d4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	2290      	movs	r2, #144	; 0x90
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 f9cd 	bl	8005d4c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80009b2:	f002 fa45 	bl	8002e40 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <SystemClock_Config+0x128>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <SystemClock_Config+0x128>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <SystemClock_Config+0x128>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <SystemClock_Config+0x12c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d6:	4a35      	ldr	r2, [pc, #212]	; (8000aac <SystemClock_Config+0x12c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	4b33      	ldr	r3, [pc, #204]	; (8000aac <SystemClock_Config+0x12c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a06:	2304      	movs	r3, #4
 8000a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fa69 	bl	8002f00 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000a34:	f000 fc80 	bl	8001338 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a38:	f002 fa12 	bl	8002e60 <HAL_PWREx_EnableOverDrive>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000a42:	f000 fc79 	bl	8001338 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fcf5 	bl	800345c <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8000a78:	f000 fc5e 	bl	8001338 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SystemClock_Config+0x130>)
 8000a7e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 ff0a 	bl	80038a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8000a9a:	f000 fc4d 	bl	8001338 <Error_Handler>
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	37e0      	adds	r7, #224	; 0xe0
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000
 8000ab0:	00200100 	.word	0x00200100

08000ab4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4ac7      	ldr	r2, [pc, #796]	; (8000de0 <HAL_UART_RxCpltCallback+0x32c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	f040 83f6 	bne.w	80012b4 <HAL_UART_RxCpltCallback+0x800>

		switch(iMachineStatus){
 8000ac8:	4bc6      	ldr	r3, [pc, #792]	; (8000de4 <HAL_UART_RxCpltCallback+0x330>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b64      	cmp	r3, #100	; 0x64
 8000ace:	f300 80c1 	bgt.w	8000c54 <HAL_UART_RxCpltCallback+0x1a0>
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	f2c0 83f4 	blt.w	80012c0 <HAL_UART_RxCpltCallback+0x80c>
 8000ad8:	3b0a      	subs	r3, #10
 8000ada:	2b5a      	cmp	r3, #90	; 0x5a
 8000adc:	f200 83f0 	bhi.w	80012c0 <HAL_UART_RxCpltCallback+0x80c>
 8000ae0:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <HAL_UART_RxCpltCallback+0x34>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000ca1 	.word	0x08000ca1
 8000aec:	080012c1 	.word	0x080012c1
 8000af0:	080012c1 	.word	0x080012c1
 8000af4:	080012c1 	.word	0x080012c1
 8000af8:	080012c1 	.word	0x080012c1
 8000afc:	080012c1 	.word	0x080012c1
 8000b00:	080012c1 	.word	0x080012c1
 8000b04:	080012c1 	.word	0x080012c1
 8000b08:	080012c1 	.word	0x080012c1
 8000b0c:	080012c1 	.word	0x080012c1
 8000b10:	08000d0b 	.word	0x08000d0b
 8000b14:	08000d75 	.word	0x08000d75
 8000b18:	080012c1 	.word	0x080012c1
 8000b1c:	080012c1 	.word	0x080012c1
 8000b20:	080012c1 	.word	0x080012c1
 8000b24:	080012c1 	.word	0x080012c1
 8000b28:	080012c1 	.word	0x080012c1
 8000b2c:	080012c1 	.word	0x080012c1
 8000b30:	080012c1 	.word	0x080012c1
 8000b34:	080012c1 	.word	0x080012c1
 8000b38:	08000e0d 	.word	0x08000e0d
 8000b3c:	080012c1 	.word	0x080012c1
 8000b40:	080012c1 	.word	0x080012c1
 8000b44:	080012c1 	.word	0x080012c1
 8000b48:	080012c1 	.word	0x080012c1
 8000b4c:	080012c1 	.word	0x080012c1
 8000b50:	080012c1 	.word	0x080012c1
 8000b54:	080012c1 	.word	0x080012c1
 8000b58:	080012c1 	.word	0x080012c1
 8000b5c:	080012c1 	.word	0x080012c1
 8000b60:	08000e77 	.word	0x08000e77
 8000b64:	08000ee1 	.word	0x08000ee1
 8000b68:	08000f4b 	.word	0x08000f4b
 8000b6c:	08000fb5 	.word	0x08000fb5
 8000b70:	0800101f 	.word	0x0800101f
 8000b74:	08001089 	.word	0x08001089
 8000b78:	080012c1 	.word	0x080012c1
 8000b7c:	080012c1 	.word	0x080012c1
 8000b80:	080012c1 	.word	0x080012c1
 8000b84:	080012c1 	.word	0x080012c1
 8000b88:	0800110d 	.word	0x0800110d
 8000b8c:	080012c1 	.word	0x080012c1
 8000b90:	080012c1 	.word	0x080012c1
 8000b94:	080012c1 	.word	0x080012c1
 8000b98:	080012c1 	.word	0x080012c1
 8000b9c:	080012c1 	.word	0x080012c1
 8000ba0:	080012c1 	.word	0x080012c1
 8000ba4:	080012c1 	.word	0x080012c1
 8000ba8:	080012c1 	.word	0x080012c1
 8000bac:	080012c1 	.word	0x080012c1
 8000bb0:	08001177 	.word	0x08001177
 8000bb4:	080012c1 	.word	0x080012c1
 8000bb8:	080012c1 	.word	0x080012c1
 8000bbc:	080012c1 	.word	0x080012c1
 8000bc0:	080012c1 	.word	0x080012c1
 8000bc4:	080012c1 	.word	0x080012c1
 8000bc8:	080012c1 	.word	0x080012c1
 8000bcc:	080012c1 	.word	0x080012c1
 8000bd0:	080012c1 	.word	0x080012c1
 8000bd4:	080012c1 	.word	0x080012c1
 8000bd8:	080011e1 	.word	0x080011e1
 8000bdc:	080012c1 	.word	0x080012c1
 8000be0:	080012c1 	.word	0x080012c1
 8000be4:	080012c1 	.word	0x080012c1
 8000be8:	080012c1 	.word	0x080012c1
 8000bec:	080012c1 	.word	0x080012c1
 8000bf0:	080012c1 	.word	0x080012c1
 8000bf4:	080012c1 	.word	0x080012c1
 8000bf8:	080012c1 	.word	0x080012c1
 8000bfc:	080012c1 	.word	0x080012c1
 8000c00:	080012c1 	.word	0x080012c1
 8000c04:	080012c1 	.word	0x080012c1
 8000c08:	080012c1 	.word	0x080012c1
 8000c0c:	080012c1 	.word	0x080012c1
 8000c10:	080012c1 	.word	0x080012c1
 8000c14:	080012c1 	.word	0x080012c1
 8000c18:	080012c1 	.word	0x080012c1
 8000c1c:	080012c1 	.word	0x080012c1
 8000c20:	080012c1 	.word	0x080012c1
 8000c24:	080012c1 	.word	0x080012c1
 8000c28:	080012c1 	.word	0x080012c1
 8000c2c:	080012c1 	.word	0x080012c1
 8000c30:	080012c1 	.word	0x080012c1
 8000c34:	080012c1 	.word	0x080012c1
 8000c38:	080012c1 	.word	0x080012c1
 8000c3c:	080012c1 	.word	0x080012c1
 8000c40:	080012c1 	.word	0x080012c1
 8000c44:	080012c1 	.word	0x080012c1
 8000c48:	080012c1 	.word	0x080012c1
 8000c4c:	080012c1 	.word	0x080012c1
 8000c50:	08000c5d 	.word	0x08000c5d
 8000c54:	2bc8      	cmp	r3, #200	; 0xc8
 8000c56:	f000 82f8 	beq.w	800124a <HAL_UART_RxCpltCallback+0x796>
 8000c5a:	e331      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 100: //PDO
			TxHeader.StdId = 0x000;
 8000c5c:	4b62      	ldr	r3, [pc, #392]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 2;
 8000c62:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x01;
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x0A;
 8000c6e:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000c70:	220a      	movs	r2, #10
 8000c72:	705a      	strb	r2, [r3, #1]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c74:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <HAL_UART_RxCpltCallback+0x33c>)
 8000c76:	4a5d      	ldr	r2, [pc, #372]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000c78:	495b      	ldr	r1, [pc, #364]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000c7a:	485e      	ldr	r0, [pc, #376]	; (8000df4 <HAL_UART_RxCpltCallback+0x340>)
 8000c7c:	f000 ffba 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_UART_RxCpltCallback+0x1d8>
				Error_Handler();
 8000c86:	f000 fb57 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 10;
				HAL_UART_Transmit(&huart3, "C100", 4, 100);
			}
			break;
 8000c8a:	e319      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 10;
 8000c8c:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <HAL_UART_RxCpltCallback+0x330>)
 8000c8e:	220a      	movs	r2, #10
 8000c90:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C100", 4, 100);
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	2204      	movs	r2, #4
 8000c96:	4958      	ldr	r1, [pc, #352]	; (8000df8 <HAL_UART_RxCpltCallback+0x344>)
 8000c98:	4858      	ldr	r0, [pc, #352]	; (8000dfc <HAL_UART_RxCpltCallback+0x348>)
 8000c9a:	f003 fa7b 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000c9e:	e30f      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 10: //SHUTDOWN
			TxHeader.StdId = 0x60A;
 8000ca0:	4b51      	ldr	r3, [pc, #324]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000ca2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ca6:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000ca8:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000caa:	2208      	movs	r2, #8
 8000cac:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000cae:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cb0:	2222      	movs	r2, #34	; 0x22
 8000cb2:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cb6:	2240      	movs	r2, #64	; 0x40
 8000cb8:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000cba:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cbc:	2260      	movs	r2, #96	; 0x60
 8000cbe:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x06;
 8000cc6:	4b49      	ldr	r3, [pc, #292]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cc8:	2206      	movs	r2, #6
 8000cca:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000cd8:	4b44      	ldr	r3, [pc, #272]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cde:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <HAL_UART_RxCpltCallback+0x33c>)
 8000ce0:	4a42      	ldr	r2, [pc, #264]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000ce2:	4941      	ldr	r1, [pc, #260]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000ce4:	4843      	ldr	r0, [pc, #268]	; (8000df4 <HAL_UART_RxCpltCallback+0x340>)
 8000ce6:	f000 ff85 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <HAL_UART_RxCpltCallback+0x242>
				Error_Handler();
 8000cf0:	f000 fb22 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 20;
				HAL_UART_Transmit(&huart3, "C010", 4, 100);
			}
			break;
 8000cf4:	e2e4      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 20;
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <HAL_UART_RxCpltCallback+0x330>)
 8000cf8:	2214      	movs	r2, #20
 8000cfa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000cfc:	2364      	movs	r3, #100	; 0x64
 8000cfe:	2204      	movs	r2, #4
 8000d00:	493f      	ldr	r1, [pc, #252]	; (8000e00 <HAL_UART_RxCpltCallback+0x34c>)
 8000d02:	483e      	ldr	r0, [pc, #248]	; (8000dfc <HAL_UART_RxCpltCallback+0x348>)
 8000d04:	f003 fa46 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000d08:	e2da      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 20://SWITCH ON
			TxHeader.StdId = 0x60A;
 8000d0a:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000d0c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d10:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d1a:	2222      	movs	r2, #34	; 0x22
 8000d1c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d20:	2240      	movs	r2, #64	; 0x40
 8000d22:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d26:	2260      	movs	r2, #96	; 0x60
 8000d28:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x07;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <HAL_UART_RxCpltCallback+0x33c>)
 8000d4a:	4a28      	ldr	r2, [pc, #160]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d4c:	4926      	ldr	r1, [pc, #152]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000d4e:	4829      	ldr	r0, [pc, #164]	; (8000df4 <HAL_UART_RxCpltCallback+0x340>)
 8000d50:	f000 ff50 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <HAL_UART_RxCpltCallback+0x2ac>
				Error_Handler();
 8000d5a:	f000 faed 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 21;
				HAL_UART_Transmit(&huart3, "C020", 4, 100);
			}
			break;
 8000d5e:	e2af      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 21;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_UART_RxCpltCallback+0x330>)
 8000d62:	2215      	movs	r2, #21
 8000d64:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000d66:	2364      	movs	r3, #100	; 0x64
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4926      	ldr	r1, [pc, #152]	; (8000e04 <HAL_UART_RxCpltCallback+0x350>)
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <HAL_UART_RxCpltCallback+0x348>)
 8000d6e:	f003 fa11 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000d72:	e2a5      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>



		case 21://ENABLE OPERATION
			TxHeader.StdId = 0x60A;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000d76:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d7a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d84:	2222      	movs	r2, #34	; 0x22
 8000d86:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d8a:	2240      	movs	r2, #64	; 0x40
 8000d8c:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d90:	2260      	movs	r2, #96	; 0x60
 8000d92:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_UART_RxCpltCallback+0x33c>)
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_UART_RxCpltCallback+0x338>)
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <HAL_UART_RxCpltCallback+0x334>)
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <HAL_UART_RxCpltCallback+0x340>)
 8000dba:	f000 ff1b 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <HAL_UART_RxCpltCallback+0x316>
				Error_Handler();
 8000dc4:	f000 fab8 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 30;
				HAL_UART_Transmit(&huart3, "C021", 4, 100);
			}
			break;
 8000dc8:	e27a      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 30;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_UART_RxCpltCallback+0x330>)
 8000dcc:	221e      	movs	r2, #30
 8000dce:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C021", 4, 100);
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <HAL_UART_RxCpltCallback+0x354>)
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <HAL_UART_RxCpltCallback+0x348>)
 8000dd8:	f003 f9dc 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000ddc:	e270      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
 8000dde:	bf00      	nop
 8000de0:	40004800 	.word	0x40004800
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000058 	.word	0x20000058
 8000dec:	20000070 	.word	0x20000070
 8000df0:	20000078 	.word	0x20000078
 8000df4:	2000002c 	.word	0x2000002c
 8000df8:	08005d74 	.word	0x08005d74
 8000dfc:	200000c8 	.word	0x200000c8
 8000e00:	08005d7c 	.word	0x08005d7c
 8000e04:	08005d84 	.word	0x08005d84
 8000e08:	08005d8c 	.word	0x08005d8c
			}
			break;
			*/

		case 30://POSITION MODE
			TxHeader.StdId = 0x60A;
 8000e0c:	4bae      	ldr	r3, [pc, #696]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000e0e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e12:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000e14:	4bac      	ldr	r3, [pc, #688]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000e16:	2208      	movs	r2, #8
 8000e18:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000e1a:	4bac      	ldr	r3, [pc, #688]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e1c:	2222      	movs	r2, #34	; 0x22
 8000e1e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x60;
 8000e20:	4baa      	ldr	r3, [pc, #680]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e22:	2260      	movs	r2, #96	; 0x60
 8000e24:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000e26:	4ba9      	ldr	r3, [pc, #676]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e28:	2260      	movs	r2, #96	; 0x60
 8000e2a:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000e2c:	4ba7      	ldr	r3, [pc, #668]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x01;
 8000e32:	4ba6      	ldr	r3, [pc, #664]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000e38:	4ba4      	ldr	r3, [pc, #656]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000e3e:	4ba3      	ldr	r3, [pc, #652]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000e44:	4ba1      	ldr	r3, [pc, #644]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e4a:	4ba1      	ldr	r3, [pc, #644]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 8000e4c:	4a9f      	ldr	r2, [pc, #636]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e4e:	499e      	ldr	r1, [pc, #632]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000e50:	48a0      	ldr	r0, [pc, #640]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 8000e52:	f000 fecf 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <HAL_UART_RxCpltCallback+0x3ae>
				Error_Handler();
 8000e5c:	f000 fa6c 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 40;
				HAL_UART_Transmit(&huart3, "C030", 4, 100);
			}
			break;
 8000e60:	e22e      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 40;
 8000e62:	4b9d      	ldr	r3, [pc, #628]	; (80010d8 <HAL_UART_RxCpltCallback+0x624>)
 8000e64:	2228      	movs	r2, #40	; 0x28
 8000e66:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000e68:	2364      	movs	r3, #100	; 0x64
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	499b      	ldr	r1, [pc, #620]	; (80010dc <HAL_UART_RxCpltCallback+0x628>)
 8000e6e:	489c      	ldr	r0, [pc, #624]	; (80010e0 <HAL_UART_RxCpltCallback+0x62c>)
 8000e70:	f003 f990 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000e74:	e224      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>

		case 40:// POSITION 120
			TxHeader.StdId = 0x60A;
 8000e76:	4b94      	ldr	r3, [pc, #592]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000e78:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e7c:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000e7e:	4b92      	ldr	r3, [pc, #584]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000e84:	4b91      	ldr	r3, [pc, #580]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e86:	2222      	movs	r2, #34	; 0x22
 8000e88:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000e8a:	4b90      	ldr	r3, [pc, #576]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e8c:	227a      	movs	r2, #122	; 0x7a
 8000e8e:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000e90:	4b8e      	ldr	r3, [pc, #568]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e92:	2260      	movs	r2, #96	; 0x60
 8000e94:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000e96:	4b8d      	ldr	r3, [pc, #564]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0xC0;
 8000e9c:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000e9e:	22c0      	movs	r2, #192	; 0xc0
 8000ea0:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0xD4;
 8000ea2:	4b8a      	ldr	r3, [pc, #552]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000ea4:	22d4      	movs	r2, #212	; 0xd4
 8000ea6:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x01;
 8000ea8:	4b88      	ldr	r3, [pc, #544]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000eae:	4b87      	ldr	r3, [pc, #540]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000eb4:	4b86      	ldr	r3, [pc, #536]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 8000eb6:	4a85      	ldr	r2, [pc, #532]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000eb8:	4983      	ldr	r1, [pc, #524]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000eba:	4886      	ldr	r0, [pc, #536]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 8000ebc:	f000 fe9a 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <HAL_UART_RxCpltCallback+0x418>
				Error_Handler();
 8000ec6:	f000 fa37 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P120", 4, 100);
			}
			break;
 8000eca:	e1f9      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000ecc:	4b82      	ldr	r3, [pc, #520]	; (80010d8 <HAL_UART_RxCpltCallback+0x624>)
 8000ece:	2232      	movs	r2, #50	; 0x32
 8000ed0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P120", 4, 100);
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	4983      	ldr	r1, [pc, #524]	; (80010e4 <HAL_UART_RxCpltCallback+0x630>)
 8000ed8:	4881      	ldr	r0, [pc, #516]	; (80010e0 <HAL_UART_RxCpltCallback+0x62c>)
 8000eda:	f003 f95b 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000ede:	e1ef      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 41:// POSITION 90
			TxHeader.StdId = 0x60A;
 8000ee0:	4b79      	ldr	r3, [pc, #484]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000ee2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ee6:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000eea:	2208      	movs	r2, #8
 8000eec:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000eee:	4b77      	ldr	r3, [pc, #476]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000ef0:	2222      	movs	r2, #34	; 0x22
 8000ef2:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000ef4:	4b75      	ldr	r3, [pc, #468]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000ef6:	227a      	movs	r2, #122	; 0x7a
 8000ef8:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000efa:	4b74      	ldr	r3, [pc, #464]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000efc:	2260      	movs	r2, #96	; 0x60
 8000efe:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000f00:	4b72      	ldr	r3, [pc, #456]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x90;
 8000f06:	4b71      	ldr	r3, [pc, #452]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f08:	2290      	movs	r2, #144	; 0x90
 8000f0a:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x5F;
 8000f0c:	4b6f      	ldr	r3, [pc, #444]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f0e:	225f      	movs	r2, #95	; 0x5f
 8000f10:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x01;
 8000f12:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000f18:	4b6c      	ldr	r3, [pc, #432]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f1e:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 8000f20:	4a6a      	ldr	r2, [pc, #424]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f22:	4969      	ldr	r1, [pc, #420]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000f24:	486b      	ldr	r0, [pc, #428]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 8000f26:	f000 fe65 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HAL_UART_RxCpltCallback+0x482>
				Error_Handler();
 8000f30:	f000 fa02 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P090", 4, 100);
			}
			break;
 8000f34:	e1c4      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000f36:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <HAL_UART_RxCpltCallback+0x624>)
 8000f38:	2232      	movs	r2, #50	; 0x32
 8000f3a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P090", 4, 100);
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4969      	ldr	r1, [pc, #420]	; (80010e8 <HAL_UART_RxCpltCallback+0x634>)
 8000f42:	4867      	ldr	r0, [pc, #412]	; (80010e0 <HAL_UART_RxCpltCallback+0x62c>)
 8000f44:	f003 f926 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000f48:	e1ba      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 42:// POSITION 0
			TxHeader.StdId = 0x60A;
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000f4c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f50:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000f54:	2208      	movs	r2, #8
 8000f56:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000f58:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f5a:	2222      	movs	r2, #34	; 0x22
 8000f5c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000f5e:	4b5b      	ldr	r3, [pc, #364]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f60:	227a      	movs	r2, #122	; 0x7a
 8000f62:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000f64:	4b59      	ldr	r3, [pc, #356]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f66:	2260      	movs	r2, #96	; 0x60
 8000f68:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000f6a:	4b58      	ldr	r3, [pc, #352]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 8000f70:	4b56      	ldr	r3, [pc, #344]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000f76:	4b55      	ldr	r3, [pc, #340]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000f82:	4b52      	ldr	r3, [pc, #328]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 8000f8a:	4a50      	ldr	r2, [pc, #320]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000f8c:	494e      	ldr	r1, [pc, #312]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000f8e:	4851      	ldr	r0, [pc, #324]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 8000f90:	f000 fe30 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <HAL_UART_RxCpltCallback+0x4ec>
				Error_Handler();
 8000f9a:	f000 f9cd 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P000", 4, 100);
			}
			break;
 8000f9e:	e18f      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000fa0:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <HAL_UART_RxCpltCallback+0x624>)
 8000fa2:	2232      	movs	r2, #50	; 0x32
 8000fa4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	2204      	movs	r2, #4
 8000faa:	4950      	ldr	r1, [pc, #320]	; (80010ec <HAL_UART_RxCpltCallback+0x638>)
 8000fac:	484c      	ldr	r0, [pc, #304]	; (80010e0 <HAL_UART_RxCpltCallback+0x62c>)
 8000fae:	f003 f8f1 	bl	8004194 <HAL_UART_Transmit>
			break;
 8000fb2:	e185      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 43:// POSITION 180
			TxHeader.StdId = 0x60A;
 8000fb4:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000fb6:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fba:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000fbc:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000fc2:	4b42      	ldr	r3, [pc, #264]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fc4:	2222      	movs	r2, #34	; 0x22
 8000fc6:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fca:	227a      	movs	r2, #122	; 0x7a
 8000fcc:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fd0:	2260      	movs	r2, #96	; 0x60
 8000fd2:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x20;
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fdc:	2220      	movs	r2, #32
 8000fde:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0xBF;
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fe2:	22bf      	movs	r2, #191	; 0xbf
 8000fe4:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x02;
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 8000ff4:	4a35      	ldr	r2, [pc, #212]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8000ff6:	4934      	ldr	r1, [pc, #208]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8000ff8:	4836      	ldr	r0, [pc, #216]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 8000ffa:	f000 fdfb 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_UART_RxCpltCallback+0x556>
				Error_Handler();
 8001004:	f000 f998 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P180", 4, 100);
			}
			break;
 8001008:	e15a      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <HAL_UART_RxCpltCallback+0x624>)
 800100c:	2232      	movs	r2, #50	; 0x32
 800100e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P180", 4, 100);
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2204      	movs	r2, #4
 8001014:	4936      	ldr	r1, [pc, #216]	; (80010f0 <HAL_UART_RxCpltCallback+0x63c>)
 8001016:	4832      	ldr	r0, [pc, #200]	; (80010e0 <HAL_UART_RxCpltCallback+0x62c>)
 8001018:	f003 f8bc 	bl	8004194 <HAL_UART_Transmit>
			break;
 800101c:	e150      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 44:// POSITION 45
			TxHeader.StdId = 0x60A;
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8001020:	f240 620a 	movw	r2, #1546	; 0x60a
 8001024:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8001028:	2208      	movs	r2, #8
 800102a:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 800102e:	2222      	movs	r2, #34	; 0x22
 8001030:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001034:	227a      	movs	r2, #122	; 0x7a
 8001036:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 800103a:	2260      	movs	r2, #96	; 0x60
 800103c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001040:	2200      	movs	r2, #0
 8001042:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0xC8;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001046:	22c8      	movs	r2, #200	; 0xc8
 8001048:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0xAF;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 800104c:	22af      	movs	r2, #175	; 0xaf
 800104e:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001052:	2200      	movs	r2, #0
 8001054:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001058:	2200      	movs	r2, #0
 800105a:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001060:	4919      	ldr	r1, [pc, #100]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 8001064:	f000 fdc6 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_UART_RxCpltCallback+0x5c0>
				Error_Handler();
 800106e:	f000 f963 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P045", 4, 100);
			}
			break;
 8001072:	e125      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_RxCpltCallback+0x624>)
 8001076:	2232      	movs	r2, #50	; 0x32
 8001078:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P045", 4, 100);
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	2204      	movs	r2, #4
 800107e:	491d      	ldr	r1, [pc, #116]	; (80010f4 <HAL_UART_RxCpltCallback+0x640>)
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <HAL_UART_RxCpltCallback+0x62c>)
 8001082:	f003 f887 	bl	8004194 <HAL_UART_Transmit>
			break;
 8001086:	e11b      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 45:// POSITION XXX
			TxHeader.StdId = 0x60A;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 800108a:	f240 620a 	movw	r2, #1546	; 0x60a
 800108e:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 8001092:	2208      	movs	r2, #8
 8001094:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 8001098:	2222      	movs	r2, #34	; 0x22
 800109a:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 800109e:	227a      	movs	r2, #122	; 0x7a
 80010a0:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 80010a4:	2260      	movs	r2, #96	; 0x60
 80010a6:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	70da      	strb	r2, [r3, #3]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_UART_RxCpltCallback+0x61c>)
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_UART_RxCpltCallback+0x618>)
 80010b2:	4905      	ldr	r1, [pc, #20]	; (80010c8 <HAL_UART_RxCpltCallback+0x614>)
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <HAL_UART_RxCpltCallback+0x620>)
 80010b6:	f000 fd9d 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d01b      	beq.n	80010f8 <HAL_UART_RxCpltCallback+0x644>
				Error_Handler();
 80010c0:	f000 f93a 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "PXXX", 4, 100);
			}
			break;
 80010c4:	e0fc      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
 80010c6:	bf00      	nop
 80010c8:	20000058 	.word	0x20000058
 80010cc:	20000070 	.word	0x20000070
 80010d0:	20000078 	.word	0x20000078
 80010d4:	2000002c 	.word	0x2000002c
 80010d8:	20000000 	.word	0x20000000
 80010dc:	08005d94 	.word	0x08005d94
 80010e0:	200000c8 	.word	0x200000c8
 80010e4:	08005d9c 	.word	0x08005d9c
 80010e8:	08005da4 	.word	0x08005da4
 80010ec:	08005dac 	.word	0x08005dac
 80010f0:	08005db4 	.word	0x08005db4
 80010f4:	08005dbc 	.word	0x08005dbc
				iMachineStatus = 50;
 80010f8:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_UART_RxCpltCallback+0x820>)
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "PXXX", 4, 100);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2204      	movs	r2, #4
 8001102:	4975      	ldr	r1, [pc, #468]	; (80012d8 <HAL_UART_RxCpltCallback+0x824>)
 8001104:	4875      	ldr	r0, [pc, #468]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 8001106:	f003 f845 	bl	8004194 <HAL_UART_Transmit>
			break;
 800110a:	e0d9      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 50://START SUPPLY
			TxHeader.StdId = 0x60A;
 800110c:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 800110e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001112:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001114:	4b72      	ldr	r3, [pc, #456]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 8001116:	2208      	movs	r2, #8
 8001118:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800111c:	2222      	movs	r2, #34	; 0x22
 800111e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001128:	2260      	movs	r2, #96	; 0x60
 800112a:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800112c:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800112e:	2200      	movs	r2, #0
 8001130:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x1F;
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001134:	221f      	movs	r2, #31
 8001136:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800113a:	2200      	movs	r2, #0
 800113c:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800113e:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001140:	2200      	movs	r2, #0
 8001142:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001144:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001146:	2200      	movs	r2, #0
 8001148:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800114a:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <HAL_UART_RxCpltCallback+0x834>)
 800114c:	4a65      	ldr	r2, [pc, #404]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800114e:	4964      	ldr	r1, [pc, #400]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 8001150:	4866      	ldr	r0, [pc, #408]	; (80012ec <HAL_UART_RxCpltCallback+0x838>)
 8001152:	f000 fd4f 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_UART_RxCpltCallback+0x6ae>
				Error_Handler();
 800115c:	f000 f8ec 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 60;
				HAL_UART_Transmit(&huart3, "C050", 4, 100);
			}
			break;
 8001160:	e0ae      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 60;
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_UART_RxCpltCallback+0x820>)
 8001164:	223c      	movs	r2, #60	; 0x3c
 8001166:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2204      	movs	r2, #4
 800116c:	4960      	ldr	r1, [pc, #384]	; (80012f0 <HAL_UART_RxCpltCallback+0x83c>)
 800116e:	485b      	ldr	r0, [pc, #364]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 8001170:	f003 f810 	bl	8004194 <HAL_UART_Transmit>
			break;
 8001174:	e0a4      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>

		case 60://STOP SUPPLY
			TxHeader.StdId = 0x60A;
 8001176:	4b5a      	ldr	r3, [pc, #360]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 8001178:	f240 620a 	movw	r2, #1546	; 0x60a
 800117c:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 8001180:	2208      	movs	r2, #8
 8001182:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001186:	2222      	movs	r2, #34	; 0x22
 8001188:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001190:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001192:	2260      	movs	r2, #96	; 0x60
 8001194:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001198:	2200      	movs	r2, #0
 800119a:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 800119c:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800119e:	220f      	movs	r2, #15
 80011a0:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 80011a2:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 80011a8:	4b4e      	ldr	r3, [pc, #312]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80011b4:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <HAL_UART_RxCpltCallback+0x834>)
 80011b6:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011b8:	4949      	ldr	r1, [pc, #292]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 80011ba:	484c      	ldr	r0, [pc, #304]	; (80012ec <HAL_UART_RxCpltCallback+0x838>)
 80011bc:	f000 fd1a 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_UART_RxCpltCallback+0x718>
				Error_Handler();
 80011c6:	f000 f8b7 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 70;
				HAL_UART_Transmit(&huart3, "C060", 4, 100);
			}
			break;
 80011ca:	e079      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 70;
 80011cc:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_UART_RxCpltCallback+0x820>)
 80011ce:	2246      	movs	r2, #70	; 0x46
 80011d0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C060", 4, 100);
 80011d2:	2364      	movs	r3, #100	; 0x64
 80011d4:	2204      	movs	r2, #4
 80011d6:	4947      	ldr	r1, [pc, #284]	; (80012f4 <HAL_UART_RxCpltCallback+0x840>)
 80011d8:	4840      	ldr	r0, [pc, #256]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 80011da:	f002 ffdb 	bl	8004194 <HAL_UART_Transmit>
			break;
 80011de:	e06f      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 70://POSTION CHECK
			TxHeader.StdId = 0x60A;
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 80011e2:	f240 620a 	movw	r2, #1546	; 0x60a
 80011e6:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 80011e8:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 80011ea:	2208      	movs	r2, #8
 80011ec:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x40;
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x64;
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 80011fc:	2260      	movs	r2, #96	; 0x60
 80011fe:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001202:	2200      	movs	r2, #0
 8001204:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001208:	2200      	movs	r2, #0
 800120a:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800120e:	2200      	movs	r2, #0
 8001210:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001214:	2200      	movs	r2, #0
 8001216:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800121a:	2200      	movs	r2, #0
 800121c:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HAL_UART_RxCpltCallback+0x834>)
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001222:	492f      	ldr	r1, [pc, #188]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 8001224:	4831      	ldr	r0, [pc, #196]	; (80012ec <HAL_UART_RxCpltCallback+0x838>)
 8001226:	f000 fce5 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <HAL_UART_RxCpltCallback+0x782>
				Error_Handler();
 8001230:	f000 f882 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 80;
				HAL_UART_Transmit(&huart3, "C070", 4, 100);
			}
			break;
 8001234:	e044      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 80;
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_UART_RxCpltCallback+0x820>)
 8001238:	2250      	movs	r2, #80	; 0x50
 800123a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C070", 4, 100);
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	2204      	movs	r2, #4
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <HAL_UART_RxCpltCallback+0x844>)
 8001242:	4826      	ldr	r0, [pc, #152]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 8001244:	f002 ffa6 	bl	8004194 <HAL_UART_Transmit>
			break;
 8001248:	e03a      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		case 200://FAULT RESET
			TxHeader.StdId = 0x60A;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 800124c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001250:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 8001254:	2208      	movs	r2, #8
 8001256:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800125a:	2222      	movs	r2, #34	; 0x22
 800125c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001260:	2240      	movs	r2, #64	; 0x40
 8001262:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001266:	2260      	movs	r2, #96	; 0x60
 8001268:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800126c:	2200      	movs	r2, #0
 800126e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x80;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001278:	2200      	movs	r2, #0
 800127a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800127e:	2200      	movs	r2, #0
 8001280:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 8001284:	2200      	movs	r2, #0
 8001286:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_UART_RxCpltCallback+0x834>)
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <HAL_UART_RxCpltCallback+0x830>)
 800128c:	4914      	ldr	r1, [pc, #80]	; (80012e0 <HAL_UART_RxCpltCallback+0x82c>)
 800128e:	4817      	ldr	r0, [pc, #92]	; (80012ec <HAL_UART_RxCpltCallback+0x838>)
 8001290:	f000 fcb0 	bl	8001bf4 <HAL_CAN_AddTxMessage>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_UART_RxCpltCallback+0x7ec>
				Error_Handler();
 800129a:	f000 f84d 	bl	8001338 <Error_Handler>
			}
			else{
				iMachineStatus = 10;
				HAL_UART_Transmit(&huart3, "C200", 4, 100);
			}
			break;
 800129e:	e00f      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 10;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_UART_RxCpltCallback+0x820>)
 80012a2:	220a      	movs	r2, #10
 80012a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C200", 4, 100);
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2204      	movs	r2, #4
 80012aa:	4914      	ldr	r1, [pc, #80]	; (80012fc <HAL_UART_RxCpltCallback+0x848>)
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 80012ae:	f002 ff71 	bl	8004194 <HAL_UART_Transmit>
			break;
 80012b2:	e005      	b.n	80012c0 <HAL_UART_RxCpltCallback+0x80c>
		}

	}
	else{
		HAL_UART_Transmit(&huart3, ErrorMessage, strlen(ErrorMessage), 100);
 80012b4:	2364      	movs	r3, #100	; 0x64
 80012b6:	220c      	movs	r2, #12
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HAL_UART_RxCpltCallback+0x84c>)
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 80012bc:	f002 ff6a 	bl	8004194 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, UserMessage, 4);
 80012c0:	2204      	movs	r2, #4
 80012c2:	4910      	ldr	r1, [pc, #64]	; (8001304 <HAL_UART_RxCpltCallback+0x850>)
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_UART_RxCpltCallback+0x828>)
 80012c6:	f002 fff8 	bl	80042ba <HAL_UART_Receive_IT>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000
 80012d8:	08005dc4 	.word	0x08005dc4
 80012dc:	200000c8 	.word	0x200000c8
 80012e0:	20000058 	.word	0x20000058
 80012e4:	20000070 	.word	0x20000070
 80012e8:	20000078 	.word	0x20000078
 80012ec:	2000002c 	.word	0x2000002c
 80012f0:	08005dcc 	.word	0x08005dcc
 80012f4:	08005dd4 	.word	0x08005dd4
 80012f8:	08005ddc 	.word	0x08005ddc
 80012fc:	08005de4 	.word	0x08005de4
 8001300:	08005dec 	.word	0x08005dec
 8001304:	20000054 	.word	0x20000054

08001308 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001314:	2100      	movs	r1, #0
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fd47 	bl	8001daa <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800131c:	2101      	movs	r1, #1
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001320:	f001 fc13 	bl	8002b4a <HAL_GPIO_TogglePin>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000098 	.word	0x20000098
 8001330:	2000007c 	.word	0x2000007c
 8001334:	40020400 	.word	0x40020400

08001338 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x44>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x44>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x44>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_MspInit+0x44>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x44>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x44>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f99c 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <CAN1_RX0_IRQHandler+0x10>)
 80013e6:	f000 fe18 	bl	800201a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000002c 	.word	0x2000002c

080013f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <USART3_IRQHandler+0x10>)
 80013fa:	f002 ffad 	bl	8004358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000c8 	.word	0x200000c8

08001408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800140c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001410:	f001 fbb6 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART3_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001448:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001480:	f002 fe3a 	bl	80040f8 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f7ff ff55 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200000c8 	.word	0x200000c8
 8001498:	40004800 	.word	0x40004800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x8c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d130      	bne.n	8001520 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0x90>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_UART_MspInit+0x90>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x90>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0x90>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_UART_MspInit+0x90>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_UART_MspInit+0x90>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001500:	2307      	movs	r3, #7
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_UART_MspInit+0x94>)
 800150c:	f001 f958 	bl	80027c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2027      	movs	r0, #39	; 0x27
 8001516:	f001 f88a 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800151a:	2027      	movs	r0, #39	; 0x27
 800151c:	f001 f8a3 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40004800 	.word	0x40004800
 800152c:	40023800 	.word	0x40023800
 8001530:	40020c00 	.word	0x40020c00

08001534 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800153e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2206      	movs	r2, #6
 8001544:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2202      	movs	r2, #2
 800154a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2202      	movs	r2, #2
 8001556:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2201      	movs	r2, #1
 800155c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	2201      	movs	r2, #1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	f001 fb1a 	bl	8002bb0 <HAL_PCD_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001582:	f7ff fed9 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000014c 	.word	0x2000014c

08001590 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d141      	bne.n	8001636 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015dc:	230a      	movs	r3, #10
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <HAL_PCD_MspInit+0xb4>)
 80015e8:	f001 f8ea 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <HAL_PCD_MspInit+0xb4>)
 8001602:	f001 f8dd 	bl	80027c0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6353      	str	r3, [r2, #52]	; 0x34
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001672:	f7ff fed1 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f004 fb45 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff f911 	bl	80008a0 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800168c:	08005e24 	.word	0x08005e24
  ldr r2, =_sbss
 8001690:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001694:	20000554 	.word	0x20000554

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>

0800169a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 ffba 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f805 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016aa:	f7ff fe4b 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 ffd5 	bl	8002682 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 ff9d 	bl	800262e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000004 	.word	0x20000004
 800170c:	2000000c 	.word	0x2000000c
 8001710:	20000008 	.word	0x20000008

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000000c 	.word	0x2000000c
 8001738:	20000550 	.word	0x20000550

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000550 	.word	0x20000550

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000000c 	.word	0x2000000c

0800179c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0ed      	b.n	800198a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe fef6 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d0:	f7ff ffb4 	bl	800173c <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d6:	e012      	b.n	80017fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d8:	f7ff ffb0 	bl	800173c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b0a      	cmp	r3, #10
 80017e4:	d90b      	bls.n	80017fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2205      	movs	r2, #5
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0c5      	b.n	800198a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0e5      	beq.n	80017d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0202 	bic.w	r2, r2, #2
 800181a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181c:	f7ff ff8e 	bl	800173c <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001822:	e012      	b.n	800184a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001824:	f7ff ff8a 	bl	800173c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b0a      	cmp	r3, #10
 8001830:	d90b      	bls.n	800184a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2205      	movs	r2, #5
 8001842:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e09f      	b.n	800198a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e5      	bne.n	8001824 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e1b      	ldrb	r3, [r3, #24]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d108      	bne.n	8001872 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e007      	b.n	8001882 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7e5b      	ldrb	r3, [r3, #25]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e007      	b.n	80018ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e9b      	ldrb	r3, [r3, #26]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0220 	bic.w	r2, r2, #32
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7edb      	ldrb	r3, [r3, #27]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0210 	bic.w	r2, r2, #16
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0210 	orr.w	r2, r2, #16
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0208 	orr.w	r2, r2, #8
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e007      	b.n	800192a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0208 	bic.w	r2, r2, #8
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7f5b      	ldrb	r3, [r3, #29]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d108      	bne.n	8001944 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0204 	orr.w	r2, r2, #4
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e007      	b.n	8001954 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0204 	bic.w	r2, r2, #4
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	ea42 0103 	orr.w	r1, r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d003      	beq.n	80019ba <HAL_CAN_ConfigFilter+0x26>
 80019b2:	7cfb      	ldrb	r3, [r7, #19]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 80c7 	bne.w	8001b48 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_CAN_ConfigFilter+0x1d0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d001      	beq.n	80019c8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_CAN_ConfigFilter+0x1d4>)
 80019c6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4a63      	ldr	r2, [pc, #396]	; (8001b68 <HAL_CAN_ConfigFilter+0x1d4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d123      	bne.n	8001a76 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3248      	adds	r2, #72	; 0x48
 8001a56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a6c:	6979      	ldr	r1, [r7, #20]
 8001a6e:	3348      	adds	r3, #72	; 0x48
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d122      	bne.n	8001ac4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3248      	adds	r2, #72	; 0x48
 8001aa4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aba:	6979      	ldr	r1, [r7, #20]
 8001abc:	3348      	adds	r3, #72	; 0x48
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ade:	e007      	b.n	8001af0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b0a:	e007      	b.n	8001b1c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b3a:	f023 0201 	bic.w	r2, r3, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e006      	b.n	8001b56 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40003400 	.word	0x40003400
 8001b68:	40006400 	.word	0x40006400

08001b6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d12e      	bne.n	8001bde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff fdd0 	bl	800173c <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9e:	e012      	b.n	8001bc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ba0:	f7ff fdcc 	bl	800173c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b0a      	cmp	r3, #10
 8001bac:	d90b      	bls.n	8001bc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e012      	b.n	8001bec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e5      	bne.n	8001ba0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e006      	b.n	8001bec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
  }
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d003      	beq.n	8001c20 <HAL_CAN_AddTxMessage+0x2c>
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	f040 80b8 	bne.w	8001d90 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a0 	beq.w	8001d80 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	0e1b      	lsrs	r3, r3, #24
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d907      	bls.n	8001c60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e09e      	b.n	8001d9e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c60:	2201      	movs	r2, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	409a      	lsls	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3318      	adds	r3, #24
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	440b      	add	r3, r1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00f      	b.n	8001cae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c9e:	68f9      	ldr	r1, [r7, #12]
 8001ca0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ca2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3318      	adds	r3, #24
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	440b      	add	r3, r1
 8001cac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3318      	adds	r3, #24
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	7d1b      	ldrb	r3, [r3, #20]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d111      	bne.n	8001cee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3318      	adds	r3, #24
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6811      	ldr	r1, [r2, #0]
 8001cde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	3304      	adds	r3, #4
 8001cec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3307      	adds	r3, #7
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	061a      	lsls	r2, r3, #24
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3305      	adds	r3, #5
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	3204      	adds	r2, #4
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	4610      	mov	r0, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	ea43 0200 	orr.w	r2, r3, r0
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	061a      	lsls	r2, r3, #24
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3302      	adds	r3, #2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	4313      	orrs	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	4610      	mov	r0, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	6811      	ldr	r1, [r2, #0]
 8001d4c:	ea43 0200 	orr.w	r2, r3, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3318      	adds	r3, #24
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	6811      	ldr	r1, [r2, #0]
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3318      	adds	r3, #24
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e00e      	b.n	8001d9e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e006      	b.n	8001d9e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d003      	beq.n	8001dce <HAL_CAN_GetRxMessage+0x24>
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	f040 80f3 	bne.w	8001fb4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10e      	bne.n	8001df2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0e7      	b.n	8001fc2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d107      	bne.n	8001e10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d8      	b.n	8001fc2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	331b      	adds	r3, #27
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0204 	and.w	r2, r3, #4
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	331b      	adds	r3, #27
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4413      	add	r3, r2
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0d5b      	lsrs	r3, r3, #21
 8001e3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	331b      	adds	r3, #27
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	331b      	adds	r3, #27
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0202 	and.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	331b      	adds	r3, #27
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	331b      	adds	r3, #27
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	331b      	adds	r3, #27
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0a1a      	lsrs	r2, r3, #8
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0c1a      	lsrs	r2, r3, #16
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3302      	adds	r3, #2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e1a      	lsrs	r2, r3, #24
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3304      	adds	r3, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0a1a      	lsrs	r2, r3, #8
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3305      	adds	r3, #5
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0c1a      	lsrs	r2, r3, #16
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	3306      	adds	r3, #6
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0e1a      	lsrs	r2, r3, #24
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	3307      	adds	r3, #7
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e006      	b.n	8001fc2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
  }
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d002      	beq.n	8001fec <HAL_CAN_ActivateNotification+0x1e>
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d109      	bne.n	8002000 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6959      	ldr	r1, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e006      	b.n	800200e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b08a      	sub	sp, #40	; 0x28
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d07c      	beq.n	800215a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d023      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f983 	bl	8002388 <HAL_CAN_TxMailbox0CompleteCallback>
 8002082:	e016      	b.n	80020b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
 8002096:	e00c      	b.n	80020b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	e002      	b.n	80020b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f989 	bl	80023c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d024      	beq.n	8002106 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f963 	bl	800239c <HAL_CAN_TxMailbox1CompleteCallback>
 80020d6:	e016      	b.n	8002106 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d004      	beq.n	80020ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	e00c      	b.n	8002106 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e002      	b.n	8002106 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f969 	bl	80023d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d024      	beq.n	800215a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002118:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f943 	bl	80023b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800212a:	e016      	b.n	800215a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	e00c      	b.n	800215a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	e002      	b.n	800215a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f949 	bl	80023ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002174:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2210      	movs	r2, #16
 800217c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2208      	movs	r2, #8
 8002198:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f930 	bl	8002400 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff f8a5 	bl	8001308 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00c      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2210      	movs	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00b      	beq.n	8002204 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2208      	movs	r2, #8
 80021fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f912 	bl	8002428 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8f9 	bl	8002414 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2210      	movs	r2, #16
 800223c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8fc 	bl	800243c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8f5 	bl	8002450 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d07b      	beq.n	8002368 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d072      	beq.n	8002360 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d043      	beq.n	8002360 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d03e      	beq.n	8002360 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e8:	2b60      	cmp	r3, #96	; 0x60
 80022ea:	d02b      	beq.n	8002344 <HAL_CAN_IRQHandler+0x32a>
 80022ec:	2b60      	cmp	r3, #96	; 0x60
 80022ee:	d82e      	bhi.n	800234e <HAL_CAN_IRQHandler+0x334>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d022      	beq.n	800233a <HAL_CAN_IRQHandler+0x320>
 80022f4:	2b50      	cmp	r3, #80	; 0x50
 80022f6:	d82a      	bhi.n	800234e <HAL_CAN_IRQHandler+0x334>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d019      	beq.n	8002330 <HAL_CAN_IRQHandler+0x316>
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d826      	bhi.n	800234e <HAL_CAN_IRQHandler+0x334>
 8002300:	2b30      	cmp	r3, #48	; 0x30
 8002302:	d010      	beq.n	8002326 <HAL_CAN_IRQHandler+0x30c>
 8002304:	2b30      	cmp	r3, #48	; 0x30
 8002306:	d822      	bhi.n	800234e <HAL_CAN_IRQHandler+0x334>
 8002308:	2b10      	cmp	r3, #16
 800230a:	d002      	beq.n	8002312 <HAL_CAN_IRQHandler+0x2f8>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d005      	beq.n	800231c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002310:	e01d      	b.n	800234e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800231a:	e019      	b.n	8002350 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002324:	e014      	b.n	8002350 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232e:	e00f      	b.n	8002350 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002338:	e00a      	b.n	8002350 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002342:	e005      	b.n	8002350 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800234c:	e000      	b.n	8002350 <HAL_CAN_IRQHandler+0x336>
            break;
 800234e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800235e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2204      	movs	r2, #4
 8002366:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f872 	bl	8002464 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <__NVIC_SetPriorityGrouping+0x40>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <__NVIC_SetPriorityGrouping+0x40>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00
 80024bc:	05fa0000 	.word	0x05fa0000

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff f848 	bl	800173c <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d008      	beq.n	80026cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e052      	b.n	8002772 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0216 	bic.w	r2, r2, #22
 80026da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_DMA_Abort+0x62>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0208 	bic.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e013      	b.n	8002746 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff f80d 	bl	800173c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d90c      	bls.n	8002746 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e015      	b.n	8002772 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e4      	bne.n	800271e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e00c      	b.n	80027b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2205      	movs	r2, #5
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e175      	b.n	8002acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 8164 	bne.w	8002ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_GPIO_Init+0x56>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d130      	bne.n	8002878 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0201 	and.w	r2, r3, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b03      	cmp	r3, #3
 8002882:	d017      	beq.n	80028b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d123      	bne.n	8002908 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	08da      	lsrs	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3208      	adds	r2, #8
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80be 	beq.w	8002ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002962:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_GPIO_Init+0x328>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d037      	beq.n	80029fe <HAL_GPIO_Init+0x23e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_GPIO_Init+0x23a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a56      	ldr	r2, [pc, #344]	; (8002af4 <HAL_GPIO_Init+0x334>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x236>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_GPIO_Init+0x338>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x232>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_GPIO_Init+0x33c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a53      	ldr	r2, [pc, #332]	; (8002b00 <HAL_GPIO_Init+0x340>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x22a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x344>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x348>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x350>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x21a>
 80029d6:	2309      	movs	r3, #9
 80029d8:	e012      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029da:	230a      	movs	r3, #10
 80029dc:	e010      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029de:	2308      	movs	r3, #8
 80029e0:	e00e      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e2:	2307      	movs	r3, #7
 80029e4:	e00c      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00a      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ea:	2305      	movs	r3, #5
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_GPIO_Init+0x328>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f ae86 	bls.w	80027e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40021800 	.word	0x40021800
 8002b08:	40021c00 	.word	0x40021c00
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40022400 	.word	0x40022400
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	041a      	lsls	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fe3e 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	b08f      	sub	sp, #60	; 0x3c
 8002bb4:	af0a      	add	r7, sp, #40	; 0x28
 8002bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e116      	b.n	8002df0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fcd7 	bl	8001590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 fde9 	bl	80057d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	687e      	ldr	r6, [r7, #4]
 8002c0e:	466d      	mov	r5, sp
 8002c10:	f106 0410 	add.w	r4, r6, #16
 8002c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c20:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c24:	1d33      	adds	r3, r6, #4
 8002c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f002 fd7d 	bl	8005728 <USB_CoreInit>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0d7      	b.n	8002df0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fdd7 	bl	80057fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e04a      	b.n	8002ce8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	333d      	adds	r3, #61	; 0x3d
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	333c      	adds	r3, #60	; 0x3c
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3342      	adds	r3, #66	; 0x42
 8002c8e:	4602      	mov	r2, r0
 8002c90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	333f      	adds	r3, #63	; 0x3f
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3344      	adds	r3, #68	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3348      	adds	r3, #72	; 0x48
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3350      	adds	r3, #80	; 0x50
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3af      	bcc.n	8002c52 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e044      	b.n	8002d82 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3b5      	bcc.n	8002cf8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002daa:	1d33      	adds	r3, r6, #4
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f002 fd70 	bl	8005894 <USB_DevInit>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e014      	b.n	8002df0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f80a 	bl	8002df8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 ff2a 	bl	8005c42 <USB_DevDisconnect>

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002df8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	10000003 	.word	0x10000003

08002e40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40007000 	.word	0x40007000

08002e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8e:	f7fe fc55 	bl	800173c <HAL_GetTick>
 8002e92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e94:	e009      	b.n	8002eaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e96:	f7fe fc51 	bl	800173c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea4:	d901      	bls.n	8002eaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e022      	b.n	8002ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ec4:	f7fe fc3a 	bl	800173c <HAL_GetTick>
 8002ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eca:	e009      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ecc:	f7fe fc36 	bl	800173c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eda:	d901      	bls.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e007      	b.n	8002ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eec:	d1ee      	bne.n	8002ecc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e29b      	b.n	800344e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f24:	4b96      	ldr	r3, [pc, #600]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f30:	4b93      	ldr	r3, [pc, #588]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x62>
 8002f3c:	4b90      	ldr	r3, [pc, #576]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06c      	beq.n	8003030 <HAL_RCC_OscConfig+0x130>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d168      	bne.n	8003030 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e275      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x7a>
 8002f6c:	4b84      	ldr	r3, [pc, #528]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a83      	ldr	r2, [pc, #524]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e02e      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x9c>
 8002f82:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7e      	ldr	r2, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7b      	ldr	r2, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xc0>
 8002fa6:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a75      	ldr	r2, [pc, #468]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a72      	ldr	r2, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd8>
 8002fc0:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6e      	ldr	r2, [pc, #440]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b6c      	ldr	r3, [pc, #432]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6b      	ldr	r2, [pc, #428]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fbac 	bl	800173c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fba8 	bl	800173c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e229      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b61      	ldr	r3, [pc, #388]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe8>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fb98 	bl	800173c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fb94 	bl	800173c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e215      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b57      	ldr	r3, [pc, #348]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x110>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d069      	beq.n	8003112 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x190>
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x17a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1e9      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	493d      	ldr	r1, [pc, #244]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e040      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d023      	beq.n	80030e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fb4a 	bl	800173c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ac:	f7fe fb46 	bl	800173c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1c7      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4929      	ldr	r1, [pc, #164]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
 80030de:	e018      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fb26 	bl	800173c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fe fb22 	bl	800173c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1a3      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d038      	beq.n	8003190 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	4a15      	ldr	r2, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe fb03 	bl	800173c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313a:	f7fe faff 	bl	800173c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e180      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x23a>
 8003158:	e01a      	b.n	8003190 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_RCC_OscConfig+0x280>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe fae9 	bl	800173c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316e:	f7fe fae5 	bl	800173c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d903      	bls.n	8003184 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e166      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
 8003180:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b92      	ldr	r3, [pc, #584]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80a4 	beq.w	80032e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319e:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b89      	ldr	r3, [pc, #548]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a88      	ldr	r2, [pc, #544]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b86      	ldr	r3, [pc, #536]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c2:	2301      	movs	r3, #1
 80031c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c6:	4b83      	ldr	r3, [pc, #524]	; (80033d4 <HAL_RCC_OscConfig+0x4d4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031d2:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x4d4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7f      	ldr	r2, [pc, #508]	; (80033d4 <HAL_RCC_OscConfig+0x4d4>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031de:	f7fe faad 	bl	800173c <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e6:	f7fe faa9 	bl	800173c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b64      	cmp	r3, #100	; 0x64
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e12a      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f8:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x4d4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x31a>
 800320c:	4b70      	ldr	r3, [pc, #448]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a6f      	ldr	r2, [pc, #444]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	e02d      	b.n	8003276 <HAL_RCC_OscConfig+0x376>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x33c>
 8003222:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a67      	ldr	r2, [pc, #412]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	e01c      	b.n	8003276 <HAL_RCC_OscConfig+0x376>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d10c      	bne.n	800325e <HAL_RCC_OscConfig+0x35e>
 8003244:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a61      	ldr	r2, [pc, #388]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a5e      	ldr	r2, [pc, #376]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	e00b      	b.n	8003276 <HAL_RCC_OscConfig+0x376>
 800325e:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a5b      	ldr	r2, [pc, #364]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d015      	beq.n	80032aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fe fa5d 	bl	800173c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe fa59 	bl	800173c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0d8      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ee      	beq.n	8003286 <HAL_RCC_OscConfig+0x386>
 80032a8:	e014      	b.n	80032d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fa47 	bl	800173c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fe fa43 	bl	800173c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0c2      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ee      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80ae 	beq.w	800344c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d06d      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d14b      	bne.n	800339c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fa14 	bl	800173c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fa10 	bl	800173c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e091      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	491b      	ldr	r1, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f9e2 	bl	800173c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe f9de 	bl	800173c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e05f      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x47c>
 800339a:	e057      	b.n	800344c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f9c8 	bl	800173c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe f9c4 	bl	800173c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e045      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4b0>
 80033ce:	e03d      	b.n	800344c <HAL_RCC_OscConfig+0x54c>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033d8:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <HAL_RCC_OscConfig+0x558>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d030      	beq.n	8003448 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d129      	bne.n	8003448 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d122      	bne.n	8003448 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003408:	4013      	ands	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003410:	4293      	cmp	r3, r2
 8003412:	d119      	bne.n	8003448 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d10f      	bne.n	8003448 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0d0      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003474:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d910      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b67      	ldr	r3, [pc, #412]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 020f 	bic.w	r2, r3, #15
 800348a:	4965      	ldr	r1, [pc, #404]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b63      	ldr	r3, [pc, #396]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b8      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034bc:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a58      	ldr	r2, [pc, #352]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a52      	ldr	r2, [pc, #328]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80034da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e0:	4b50      	ldr	r3, [pc, #320]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	494d      	ldr	r1, [pc, #308]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d040      	beq.n	8003580 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d115      	bne.n	800353e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07f      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e073      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352e:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06b      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 0203 	bic.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4936      	ldr	r1, [pc, #216]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fe f8f4 	bl	800173c <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	e00a      	b.n	800356e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fe f8f0 	bl	800173c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e053      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 020c 	and.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	429a      	cmp	r2, r3
 800357e:	d1eb      	bne.n	8003558 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d210      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 020f 	bic.w	r2, r3, #15
 8003596:	4922      	ldr	r1, [pc, #136]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e032      	b.n	8003616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4916      	ldr	r1, [pc, #88]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ee:	f000 f821 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	490a      	ldr	r1, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x1cc>)
 8003600:	5ccb      	ldrb	r3, [r1, r3]
 8003602:	fa22 f303 	lsr.w	r3, r2, r3
 8003606:	4a09      	ldr	r2, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1d0>)
 8003608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_ClockConfig+0x1d4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe f850 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023c00 	.word	0x40023c00
 8003624:	40023800 	.word	0x40023800
 8003628:	08005dfc 	.word	0x08005dfc
 800362c:	20000004 	.word	0x20000004
 8003630:	20000008 	.word	0x20000008

08003634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b094      	sub	sp, #80	; 0x50
 800363a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
 8003640:	2300      	movs	r3, #0
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	2300      	movs	r3, #0
 8003646:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800364c:	4b79      	ldr	r3, [pc, #484]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d00d      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x40>
 8003658:	2b08      	cmp	r3, #8
 800365a:	f200 80e1 	bhi.w	8003820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x34>
 8003662:	2b04      	cmp	r3, #4
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x3a>
 8003666:	e0db      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b73      	ldr	r3, [pc, #460]	; (8003838 <HAL_RCC_GetSysClockFreq+0x204>)
 800366a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800366c:	e0db      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366e:	4b73      	ldr	r3, [pc, #460]	; (800383c <HAL_RCC_GetSysClockFreq+0x208>)
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003672:	e0d8      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003674:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800367c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800367e:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	2200      	movs	r2, #0
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
 8003694:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	2300      	movs	r3, #0
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036a6:	4622      	mov	r2, r4
 80036a8:	462b      	mov	r3, r5
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	0159      	lsls	r1, r3, #5
 80036b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b8:	0150      	lsls	r0, r2, #5
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4621      	mov	r1, r4
 80036c0:	1a51      	subs	r1, r2, r1
 80036c2:	6139      	str	r1, [r7, #16]
 80036c4:	4629      	mov	r1, r5
 80036c6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d8:	4659      	mov	r1, fp
 80036da:	018b      	lsls	r3, r1, #6
 80036dc:	4651      	mov	r1, sl
 80036de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036e2:	4651      	mov	r1, sl
 80036e4:	018a      	lsls	r2, r1, #6
 80036e6:	4651      	mov	r1, sl
 80036e8:	ebb2 0801 	subs.w	r8, r2, r1
 80036ec:	4659      	mov	r1, fp
 80036ee:	eb63 0901 	sbc.w	r9, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb18 0303 	adds.w	r3, r8, r3
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	462b      	mov	r3, r5
 8003714:	eb49 0303 	adc.w	r3, r9, r3
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003726:	4629      	mov	r1, r5
 8003728:	024b      	lsls	r3, r1, #9
 800372a:	4621      	mov	r1, r4
 800372c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003730:	4621      	mov	r1, r4
 8003732:	024a      	lsls	r2, r1, #9
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	2200      	movs	r2, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
 800373e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003744:	f7fc fd78 	bl	8000238 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003750:	e058      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	4618      	mov	r0, r3
 800375c:	4611      	mov	r1, r2
 800375e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	0159      	lsls	r1, r3, #5
 800377a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377e:	0150      	lsls	r0, r2, #5
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4641      	mov	r1, r8
 8003786:	ebb2 0a01 	subs.w	sl, r2, r1
 800378a:	4649      	mov	r1, r9
 800378c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800379c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037a4:	ebb2 040a 	subs.w	r4, r2, sl
 80037a8:	eb63 050b 	sbc.w	r5, r3, fp
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	464b      	mov	r3, r9
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037da:	4629      	mov	r1, r5
 80037dc:	028b      	lsls	r3, r1, #10
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e4:	4621      	mov	r1, r4
 80037e6:	028a      	lsls	r2, r1, #10
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ee:	2200      	movs	r2, #0
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	61fa      	str	r2, [r7, #28]
 80037f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f8:	f7fc fd1e 	bl	8000238 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_GetSysClockFreq+0x200>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	3301      	adds	r3, #1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800381e:	e002      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetSysClockFreq+0x204>)
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003828:	4618      	mov	r0, r3
 800382a:	3750      	adds	r7, #80	; 0x50
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	007a1200 	.word	0x007a1200

08003840 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08005e0c 	.word	0x08005e0c

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08005e0c 	.word	0x08005e0c

080038a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038d0:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a68      	ldr	r2, [pc, #416]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038da:	6093      	str	r3, [r2, #8]
 80038dc:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	4964      	ldr	r1, [pc, #400]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d017      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003902:	4b5d      	ldr	r3, [pc, #372]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003908:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	4959      	ldr	r1, [pc, #356]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003920:	d101      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800393e:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003944:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	494a      	ldr	r1, [pc, #296]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395c:	d101      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 808b 	beq.w	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800398c:	4b3a      	ldr	r3, [pc, #232]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	4a39      	ldr	r2, [pc, #228]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003996:	6413      	str	r3, [r2, #64]	; 0x40
 8003998:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd fec4 	bl	800173c <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b8:	f7fd fec0 	bl	800173c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e38f      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039d6:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d035      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d02e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d114      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd fe88 	bl	800173c <HAL_GetTick>
 8003a2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd fe84 	bl	800173c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e351      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ee      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a6e:	400b      	ands	r3, r1
 8003a70:	4901      	ldr	r1, [pc, #4]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	0ffffcff 	.word	0x0ffffcff
 8003a84:	4bac      	ldr	r3, [pc, #688]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4aab      	ldr	r2, [pc, #684]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a8e:	6093      	str	r3, [r2, #8]
 8003a90:	4ba9      	ldr	r3, [pc, #676]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	49a6      	ldr	r1, [pc, #664]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aae:	4ba2      	ldr	r3, [pc, #648]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	4aa0      	ldr	r2, [pc, #640]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003abe:	4b9e      	ldr	r3, [pc, #632]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	499b      	ldr	r1, [pc, #620]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003adc:	4b96      	ldr	r3, [pc, #600]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aea:	4993      	ldr	r1, [pc, #588]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003afe:	4b8e      	ldr	r3, [pc, #568]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	498a      	ldr	r1, [pc, #552]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b20:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2e:	4982      	ldr	r1, [pc, #520]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b42:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4979      	ldr	r1, [pc, #484]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b64:	4b74      	ldr	r3, [pc, #464]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f023 0203 	bic.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4971      	ldr	r1, [pc, #452]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f023 020c 	bic.w	r2, r3, #12
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b94:	4968      	ldr	r1, [pc, #416]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	4960      	ldr	r1, [pc, #384]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	4957      	ldr	r1, [pc, #348]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bec:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	494f      	ldr	r1, [pc, #316]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	4946      	ldr	r1, [pc, #280]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c30:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	493e      	ldr	r1, [pc, #248]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	4935      	ldr	r1, [pc, #212]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c74:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c82:	492d      	ldr	r1, [pc, #180]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d011      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c96:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca4:	4924      	ldr	r1, [pc, #144]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb4:	d101      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce4:	4914      	ldr	r1, [pc, #80]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d08:	490b      	ldr	r1, [pc, #44]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00f      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2c:	4902      	ldr	r1, [pc, #8]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d34:	e002      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d48:	4b8a      	ldr	r3, [pc, #552]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	4986      	ldr	r1, [pc, #536]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d6c:	4b81      	ldr	r3, [pc, #516]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	497d      	ldr	r1, [pc, #500]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d006      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80d6 	beq.w	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d98:	4b76      	ldr	r3, [pc, #472]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a75      	ldr	r2, [pc, #468]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da4:	f7fd fcca 	bl	800173c <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dac:	f7fd fcc6 	bl	800173c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e195      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dbe:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d021      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11d      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dde:	4b65      	ldr	r3, [pc, #404]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	0e1b      	lsrs	r3, r3, #24
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	019a      	lsls	r2, r3, #6
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	4958      	ldr	r1, [pc, #352]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d004      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e44:	d129      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e46:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e54:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	0f1b      	lsrs	r3, r3, #28
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	019a      	lsls	r2, r3, #6
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	493e      	ldr	r1, [pc, #248]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e82:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e88:	f023 021f 	bic.w	r2, r3, #31
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	3b01      	subs	r3, #1
 8003e92:	4938      	ldr	r1, [pc, #224]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea6:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eac:	0e1b      	lsrs	r3, r3, #24
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eba:	0f1b      	lsrs	r3, r3, #28
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	019a      	lsls	r2, r3, #6
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	4926      	ldr	r1, [pc, #152]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	071b      	lsls	r3, r3, #28
 8003f0a:	491a      	ldr	r1, [pc, #104]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1e:	f7fd fc0d 	bl	800173c <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f26:	f7fd fc09 	bl	800173c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b64      	cmp	r3, #100	; 0x64
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0d8      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f040 80ce 	bne.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd fbf0 	bl	800173c <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f60:	f7fd fbec 	bl	800173c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d904      	bls.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0bb      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f84:	d0ec      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02e      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d12a      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	0f1b      	lsrs	r3, r3, #28
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	019a      	lsls	r2, r3, #6
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	4944      	ldr	r1, [pc, #272]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fea:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	493d      	ldr	r1, [pc, #244]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d022      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d11d      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	0e1b      	lsrs	r3, r3, #24
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	0f1b      	lsrs	r3, r3, #28
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	019a      	lsls	r2, r3, #6
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	431a      	orrs	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	4929      	ldr	r1, [pc, #164]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d028      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	4917      	ldr	r1, [pc, #92]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4911      	ldr	r1, [pc, #68]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fd fb3c 	bl	800173c <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c8:	f7fd fb38 	bl	800173c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e007      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d1ef      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023800 	.word	0x40023800

080040f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e040      	b.n	800418c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd f9be 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	; 0x24
 8004124:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fc18 	bl	800496c <UART_SetConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e022      	b.n	800418c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fe70 	bl	8004e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fef7 	bl	8004f78 <UART_CheckIdleState>
 800418a:	4603      	mov	r3, r0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	f040 8081 	bne.w	80042b0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_UART_Transmit+0x26>
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e079      	b.n	80042b2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_UART_Transmit+0x38>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e072      	b.n	80042b2 <HAL_UART_Transmit+0x11e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2221      	movs	r2, #33	; 0x21
 80041e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041e2:	f7fd faab 	bl	800173c <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004200:	d108      	bne.n	8004214 <HAL_UART_Transmit+0x80>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e003      	b.n	800421c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004224:	e02c      	b.n	8004280 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2200      	movs	r2, #0
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 feea 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e038      	b.n	80042b2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004254:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	3302      	adds	r3, #2
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	e007      	b.n	800426e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	3301      	adds	r3, #1
 800426c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1cc      	bne.n	8004226 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 feb7 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e005      	b.n	80042b2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e000      	b.n	80042b2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08a      	sub	sp, #40	; 0x28
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	4613      	mov	r3, r2
 80042c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d13d      	bne.n	800434c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Receive_IT+0x22>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e036      	b.n	800434e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Receive_IT+0x34>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e02f      	b.n	800434e <HAL_UART_Receive_IT+0x94>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d018      	beq.n	800433c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	613b      	str	r3, [r7, #16]
   return(result);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	623b      	str	r3, [r7, #32]
 800432a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	69f9      	ldr	r1, [r7, #28]
 800432e:	6a3a      	ldr	r2, [r7, #32]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	61bb      	str	r3, [r7, #24]
   return(result);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	461a      	mov	r2, r3
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 ff26 	bl	8005194 <UART_Start_Receive_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	e000      	b.n	800434e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b0ba      	sub	sp, #232	; 0xe8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800437e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004382:	f640 030f 	movw	r3, #2063	; 0x80f
 8004386:	4013      	ands	r3, r2
 8004388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800438c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d115      	bne.n	80043c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00f      	beq.n	80043c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 82a4 	beq.w	80048fe <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
      }
      return;
 80043be:	e29e      	b.n	80048fe <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8117 	beq.w	80045f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043da:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <HAL_UART_IRQHandler+0x298>)
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 810a 	beq.w	80045f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d011      	beq.n	8004414 <HAL_UART_IRQHandler+0xbc>
 80043f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440a:	f043 0201 	orr.w	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d011      	beq.n	8004444 <HAL_UART_IRQHandler+0xec>
 8004420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2202      	movs	r2, #2
 8004432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d011      	beq.n	8004474 <HAL_UART_IRQHandler+0x11c>
 8004450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2204      	movs	r2, #4
 8004462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446a:	f043 0202 	orr.w	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d017      	beq.n	80044b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800448c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004490:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2208      	movs	r2, #8
 800449e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a6:	f043 0208 	orr.w	r2, r3, #8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d012      	beq.n	80044e2 <HAL_UART_IRQHandler+0x18a>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00c      	beq.n	80044e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 820a 	beq.w	8004902 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d005      	beq.n	800453a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800452e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004532:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04f      	beq.n	80045da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fef4 	bl	8005328 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d141      	bne.n	80045d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800457a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800457e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d9      	bne.n	800454e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d013      	beq.n	80045ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <HAL_UART_IRQHandler+0x29c>)
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe f8e3 	bl	800277a <HAL_DMA_Abort_IT>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00f      	b.n	80045ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9ae 	bl	800492c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e00b      	b.n	80045ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9aa 	bl	800492c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e007      	b.n	80045ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f9a6 	bl	800492c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80045e8:	e18b      	b.n	8004902 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ea:	bf00      	nop
    return;
 80045ec:	e189      	b.n	8004902 <HAL_UART_IRQHandler+0x5aa>
 80045ee:	bf00      	nop
 80045f0:	04000120 	.word	0x04000120
 80045f4:	080053ef 	.word	0x080053ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 8144 	bne.w	800488a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 813d 	beq.w	800488a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8136 	beq.w	800488a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2210      	movs	r2, #16
 8004624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	f040 80b2 	bne.w	800479a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004642:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 815d 	beq.w	8004906 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004656:	429a      	cmp	r2, r3
 8004658:	f080 8155 	bcs.w	8004906 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004670:	f000 8085 	beq.w	800477e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800469e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1da      	bne.n	8004674 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e1      	bne.n	80046be <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800471e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800472c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004760:	65bb      	str	r3, [r7, #88]	; 0x58
 8004762:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e4      	bne.n	800473e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4618      	mov	r0, r3
 800477a:	f7fd ff8e 	bl	800269a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478a:	b29b      	uxth	r3, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8d4 	bl	8004940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004798:	e0b5      	b.n	8004906 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a7 	beq.w	800490a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80047bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a2 	beq.w	800490a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e4      	bne.n	80047c6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	623b      	str	r3, [r7, #32]
   return(result);
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004820:	633a      	str	r2, [r7, #48]	; 0x30
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e3      	bne.n	80047fc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	60fb      	str	r3, [r7, #12]
   return(result);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	69b9      	ldr	r1, [r7, #24]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	617b      	str	r3, [r7, #20]
   return(result);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e4      	bne.n	8004846 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f85c 	bl	8004940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004888:	e03f      	b.n	800490a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <HAL_UART_IRQHandler+0x55c>
 8004896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f853 	bl	8004958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048b2:	e02d      	b.n	8004910 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00e      	beq.n	80048de <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01c      	beq.n	800490e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
    }
    return;
 80048dc:	e017      	b.n	800490e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <HAL_UART_IRQHandler+0x5b8>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fd8f 	bl	800541a <UART_EndTransmit_IT>
    return;
 80048fc:	e008      	b.n	8004910 <HAL_UART_IRQHandler+0x5b8>
      return;
 80048fe:	bf00      	nop
 8004900:	e006      	b.n	8004910 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004902:	bf00      	nop
 8004904:	e004      	b.n	8004910 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004906:	bf00      	nop
 8004908:	e002      	b.n	8004910 <HAL_UART_IRQHandler+0x5b8>
      return;
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <HAL_UART_IRQHandler+0x5b8>
    return;
 800490e:	bf00      	nop
  }

}
 8004910:	37e8      	adds	r7, #232	; 0xe8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop

08004918 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <UART_SetConfig+0x2c4>)
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a94      	ldr	r2, [pc, #592]	; (8004c34 <UART_SetConfig+0x2c8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d120      	bne.n	8004a2a <UART_SetConfig+0xbe>
 80049e8:	4b93      	ldr	r3, [pc, #588]	; (8004c38 <UART_SetConfig+0x2cc>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d816      	bhi.n	8004a24 <UART_SetConfig+0xb8>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x90>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a19 	.word	0x08004a19
 8004a04:	08004a13 	.word	0x08004a13
 8004a08:	08004a1f 	.word	0x08004a1f
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e150      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e14d      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e14a      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e147      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e144      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a83      	ldr	r2, [pc, #524]	; (8004c3c <UART_SetConfig+0x2d0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d132      	bne.n	8004a9a <UART_SetConfig+0x12e>
 8004a34:	4b80      	ldr	r3, [pc, #512]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d828      	bhi.n	8004a94 <UART_SetConfig+0x128>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0xdc>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004a95 	.word	0x08004a95
 8004a54:	08004a95 	.word	0x08004a95
 8004a58:	08004a89 	.word	0x08004a89
 8004a5c:	08004a95 	.word	0x08004a95
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004a95 	.word	0x08004a95
 8004a68:	08004a83 	.word	0x08004a83
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a95 	.word	0x08004a95
 8004a78:	08004a8f 	.word	0x08004a8f
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e118      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a82:	2302      	movs	r3, #2
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e115      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e112      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a8e:	2308      	movs	r3, #8
 8004a90:	77fb      	strb	r3, [r7, #31]
 8004a92:	e10f      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a94:	2310      	movs	r3, #16
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e10c      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a68      	ldr	r2, [pc, #416]	; (8004c40 <UART_SetConfig+0x2d4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d120      	bne.n	8004ae6 <UART_SetConfig+0x17a>
 8004aa4:	4b64      	ldr	r3, [pc, #400]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aae:	2b30      	cmp	r3, #48	; 0x30
 8004ab0:	d013      	beq.n	8004ada <UART_SetConfig+0x16e>
 8004ab2:	2b30      	cmp	r3, #48	; 0x30
 8004ab4:	d814      	bhi.n	8004ae0 <UART_SetConfig+0x174>
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d009      	beq.n	8004ace <UART_SetConfig+0x162>
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d810      	bhi.n	8004ae0 <UART_SetConfig+0x174>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <UART_SetConfig+0x15c>
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d006      	beq.n	8004ad4 <UART_SetConfig+0x168>
 8004ac6:	e00b      	b.n	8004ae0 <UART_SetConfig+0x174>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e0f2      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e0ef      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e0ec      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004ada:	2308      	movs	r3, #8
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e0e9      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e0e6      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a56      	ldr	r2, [pc, #344]	; (8004c44 <UART_SetConfig+0x2d8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d120      	bne.n	8004b32 <UART_SetConfig+0x1c6>
 8004af0:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004afa:	2bc0      	cmp	r3, #192	; 0xc0
 8004afc:	d013      	beq.n	8004b26 <UART_SetConfig+0x1ba>
 8004afe:	2bc0      	cmp	r3, #192	; 0xc0
 8004b00:	d814      	bhi.n	8004b2c <UART_SetConfig+0x1c0>
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d009      	beq.n	8004b1a <UART_SetConfig+0x1ae>
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d810      	bhi.n	8004b2c <UART_SetConfig+0x1c0>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <UART_SetConfig+0x1a8>
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d006      	beq.n	8004b20 <UART_SetConfig+0x1b4>
 8004b12:	e00b      	b.n	8004b2c <UART_SetConfig+0x1c0>
 8004b14:	2300      	movs	r3, #0
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e0cc      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e0c9      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b20:	2304      	movs	r3, #4
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e0c6      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b26:	2308      	movs	r3, #8
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e0c3      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e0c0      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a44      	ldr	r2, [pc, #272]	; (8004c48 <UART_SetConfig+0x2dc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d125      	bne.n	8004b88 <UART_SetConfig+0x21c>
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4a:	d017      	beq.n	8004b7c <UART_SetConfig+0x210>
 8004b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b50:	d817      	bhi.n	8004b82 <UART_SetConfig+0x216>
 8004b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b56:	d00b      	beq.n	8004b70 <UART_SetConfig+0x204>
 8004b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5c:	d811      	bhi.n	8004b82 <UART_SetConfig+0x216>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <UART_SetConfig+0x1fe>
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d006      	beq.n	8004b76 <UART_SetConfig+0x20a>
 8004b68:	e00b      	b.n	8004b82 <UART_SetConfig+0x216>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e0a1      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b70:	2302      	movs	r3, #2
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e09e      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b76:	2304      	movs	r3, #4
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e09b      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e098      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b82:	2310      	movs	r3, #16
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e095      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <UART_SetConfig+0x2e0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d125      	bne.n	8004bde <UART_SetConfig+0x272>
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba0:	d017      	beq.n	8004bd2 <UART_SetConfig+0x266>
 8004ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba6:	d817      	bhi.n	8004bd8 <UART_SetConfig+0x26c>
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bac:	d00b      	beq.n	8004bc6 <UART_SetConfig+0x25a>
 8004bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb2:	d811      	bhi.n	8004bd8 <UART_SetConfig+0x26c>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <UART_SetConfig+0x254>
 8004bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbc:	d006      	beq.n	8004bcc <UART_SetConfig+0x260>
 8004bbe:	e00b      	b.n	8004bd8 <UART_SetConfig+0x26c>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e076      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e073      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e070      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e06d      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e06a      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <UART_SetConfig+0x2e4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d138      	bne.n	8004c5a <UART_SetConfig+0x2ee>
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <UART_SetConfig+0x2cc>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bf6:	d017      	beq.n	8004c28 <UART_SetConfig+0x2bc>
 8004bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bfc:	d82a      	bhi.n	8004c54 <UART_SetConfig+0x2e8>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	d00b      	beq.n	8004c1c <UART_SetConfig+0x2b0>
 8004c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c08:	d824      	bhi.n	8004c54 <UART_SetConfig+0x2e8>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <UART_SetConfig+0x2aa>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d006      	beq.n	8004c22 <UART_SetConfig+0x2b6>
 8004c14:	e01e      	b.n	8004c54 <UART_SetConfig+0x2e8>
 8004c16:	2300      	movs	r3, #0
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e04b      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e048      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c22:	2304      	movs	r3, #4
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e045      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e042      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c2e:	bf00      	nop
 8004c30:	efff69f3 	.word	0xefff69f3
 8004c34:	40011000 	.word	0x40011000
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40004400 	.word	0x40004400
 8004c40:	40004800 	.word	0x40004800
 8004c44:	40004c00 	.word	0x40004c00
 8004c48:	40005000 	.word	0x40005000
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	40007800 	.word	0x40007800
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e02c      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a72      	ldr	r2, [pc, #456]	; (8004e28 <UART_SetConfig+0x4bc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d125      	bne.n	8004cb0 <UART_SetConfig+0x344>
 8004c64:	4b71      	ldr	r3, [pc, #452]	; (8004e2c <UART_SetConfig+0x4c0>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c72:	d017      	beq.n	8004ca4 <UART_SetConfig+0x338>
 8004c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c78:	d817      	bhi.n	8004caa <UART_SetConfig+0x33e>
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	d00b      	beq.n	8004c98 <UART_SetConfig+0x32c>
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c84:	d811      	bhi.n	8004caa <UART_SetConfig+0x33e>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <UART_SetConfig+0x326>
 8004c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8e:	d006      	beq.n	8004c9e <UART_SetConfig+0x332>
 8004c90:	e00b      	b.n	8004caa <UART_SetConfig+0x33e>
 8004c92:	2300      	movs	r3, #0
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e00d      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e00a      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e007      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e004      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004caa:	2310      	movs	r3, #16
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e001      	b.n	8004cb4 <UART_SetConfig+0x348>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	d15b      	bne.n	8004d76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004cbe:	7ffb      	ldrb	r3, [r7, #31]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d828      	bhi.n	8004d16 <UART_SetConfig+0x3aa>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x360>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe fdb2 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	61b8      	str	r0, [r7, #24]
        break;
 8004cf6:	e013      	b.n	8004d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe fdc2 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	61b8      	str	r0, [r7, #24]
        break;
 8004cfe:	e00f      	b.n	8004d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <UART_SetConfig+0x4c4>)
 8004d02:	61bb      	str	r3, [r7, #24]
        break;
 8004d04:	e00c      	b.n	8004d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe fc95 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8004d0a:	61b8      	str	r0, [r7, #24]
        break;
 8004d0c:	e008      	b.n	8004d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e004      	b.n	8004d20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d074      	beq.n	8004e10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	005a      	lsls	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	441a      	add	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d916      	bls.n	8004d70 <UART_SetConfig+0x404>
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d212      	bcs.n	8004d70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f023 030f 	bic.w	r3, r3, #15
 8004d52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	89fa      	ldrh	r2, [r7, #14]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e04f      	b.n	8004e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	77bb      	strb	r3, [r7, #30]
 8004d74:	e04c      	b.n	8004e10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d76:	7ffb      	ldrb	r3, [r7, #31]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d828      	bhi.n	8004dce <UART_SetConfig+0x462>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x418>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004db9 	.word	0x08004db9
 8004d90:	08004dcf 	.word	0x08004dcf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004dcf 	.word	0x08004dcf
 8004da0:	08004dcf 	.word	0x08004dcf
 8004da4:	08004dc7 	.word	0x08004dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe fd56 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61b8      	str	r0, [r7, #24]
        break;
 8004dae:	e013      	b.n	8004dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe fd66 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004db4:	61b8      	str	r0, [r7, #24]
        break;
 8004db6:	e00f      	b.n	8004dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <UART_SetConfig+0x4c4>)
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e00c      	b.n	8004dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe fc39 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8004dc2:	61b8      	str	r0, [r7, #24]
        break;
 8004dc4:	e008      	b.n	8004dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dca:	61bb      	str	r3, [r7, #24]
        break;
 8004dcc:	e004      	b.n	8004dd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	085a      	lsrs	r2, r3, #1
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b0f      	cmp	r3, #15
 8004df6:	d909      	bls.n	8004e0c <UART_SetConfig+0x4a0>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d205      	bcs.n	8004e0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	e001      	b.n	8004e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40007c00 	.word	0x40007c00
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00f42400 	.word	0x00f42400

08004e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01a      	beq.n	8004f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f32:	d10a      	bne.n	8004f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f88:	f7fc fbd8 	bl	800173c <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d10e      	bne.n	8004fba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f82d 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e023      	b.n	8005002 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d10e      	bne.n	8004fe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f817 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e00d      	b.n	8005002 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b09c      	sub	sp, #112	; 0x70
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501a:	e0a5      	b.n	8005168 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	f000 80a1 	beq.w	8005168 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fc fb89 	bl	800173c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <UART_WaitOnFlagUntilTimeout+0x32>
 8005036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005038:	2b00      	cmp	r3, #0
 800503a:	d13e      	bne.n	80050ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800504a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005050:	667b      	str	r3, [r7, #100]	; 0x64
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800505c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e6      	bne.n	800503c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	663b      	str	r3, [r7, #96]	; 0x60
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800508e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005090:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e067      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d04f      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	d147      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	613b      	str	r3, [r7, #16]
   return(result);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	66bb      	str	r3, [r7, #104]	; 0x68
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005134:	623a      	str	r2, [r7, #32]
 8005136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	61bb      	str	r3, [r7, #24]
   return(result);
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e010      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	f43f af4a 	beq.w	800501c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3770      	adds	r7, #112	; 0x70
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005194:	b480      	push	{r7}
 8005196:	b097      	sub	sp, #92	; 0x5c
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d10e      	bne.n	80051e6 <UART_Start_Receive_IT+0x52>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <UART_Start_Receive_IT+0x48>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051da:	e02d      	b.n	8005238 <UART_Start_Receive_IT+0xa4>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e4:	e028      	b.n	8005238 <UART_Start_Receive_IT+0xa4>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <UART_Start_Receive_IT+0x76>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <UART_Start_Receive_IT+0x6c>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	22ff      	movs	r2, #255	; 0xff
 80051fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051fe:	e01b      	b.n	8005238 <UART_Start_Receive_IT+0xa4>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	227f      	movs	r2, #127	; 0x7f
 8005204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005208:	e016      	b.n	8005238 <UART_Start_Receive_IT+0xa4>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005212:	d10d      	bne.n	8005230 <UART_Start_Receive_IT+0x9c>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <UART_Start_Receive_IT+0x92>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	227f      	movs	r2, #127	; 0x7f
 8005220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005224:	e008      	b.n	8005238 <UART_Start_Receive_IT+0xa4>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	223f      	movs	r2, #63	; 0x3f
 800522a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800522e:	e003      	b.n	8005238 <UART_Start_Receive_IT+0xa4>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2222      	movs	r2, #34	; 0x22
 8005244:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	657b      	str	r3, [r7, #84]	; 0x54
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005266:	64ba      	str	r2, [r7, #72]	; 0x48
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800526c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e5      	bne.n	8005246 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	d107      	bne.n	8005294 <UART_Start_Receive_IT+0x100>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <UART_Start_Receive_IT+0x18c>)
 8005290:	665a      	str	r2, [r3, #100]	; 0x64
 8005292:	e002      	b.n	800529a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a23      	ldr	r2, [pc, #140]	; (8005324 <UART_Start_Receive_IT+0x190>)
 8005298:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d019      	beq.n	80052de <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_Start_Receive_IT+0x116>
 80052dc:	e018      	b.n	8005310 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	613b      	str	r3, [r7, #16]
   return(result);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f043 0320 	orr.w	r3, r3, #32
 80052f2:	653b      	str	r3, [r7, #80]	; 0x50
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	69f9      	ldr	r1, [r7, #28]
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	61bb      	str	r3, [r7, #24]
   return(result);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	375c      	adds	r7, #92	; 0x5c
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	080055cb 	.word	0x080055cb
 8005324:	0800546f 	.word	0x0800546f

08005328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b095      	sub	sp, #84	; 0x54
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	643b      	str	r3, [r7, #64]	; 0x40
 8005350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	61fb      	str	r3, [r7, #28]
   return(result);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	64bb      	str	r3, [r7, #72]	; 0x48
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539a:	2b01      	cmp	r3, #1
 800539c:	d118      	bne.n	80053d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e6      	bne.n	800539e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80053e2:	bf00      	nop
 80053e4:	3754      	adds	r7, #84	; 0x54
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fa8d 	bl	800492c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b088      	sub	sp, #32
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6979      	ldr	r1, [r7, #20]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	613b      	str	r3, [r7, #16]
   return(result);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fa59 	bl	8004918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005466:	bf00      	nop
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b096      	sub	sp, #88	; 0x58
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800547c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005484:	2b22      	cmp	r3, #34	; 0x22
 8005486:	f040 8094 	bne.w	80055b2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005494:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005498:	b2d9      	uxtb	r1, r3
 800549a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	400a      	ands	r2, r1
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d177      	bne.n	80055c2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
 80054f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e6      	bne.n	80054d2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	623b      	str	r3, [r7, #32]
   return(result);
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3308      	adds	r3, #8
 8005522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005524:	633a      	str	r2, [r7, #48]	; 0x30
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800552a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	2b01      	cmp	r3, #1
 800554a:	d12e      	bne.n	80055aa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0310 	bic.w	r3, r3, #16
 8005566:	64bb      	str	r3, [r7, #72]	; 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	69b9      	ldr	r1, [r7, #24]
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	617b      	str	r3, [r7, #20]
   return(result);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d103      	bne.n	800559a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2210      	movs	r2, #16
 8005598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff f9cc 	bl	8004940 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055a8:	e00b      	b.n	80055c2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fa82 	bl	8000ab4 <HAL_UART_RxCpltCallback>
}
 80055b0:	e007      	b.n	80055c2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0208 	orr.w	r2, r2, #8
 80055c0:	619a      	str	r2, [r3, #24]
}
 80055c2:	bf00      	nop
 80055c4:	3758      	adds	r7, #88	; 0x58
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b096      	sub	sp, #88	; 0x58
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e0:	2b22      	cmp	r3, #34	; 0x22
 80055e2:	f040 8094 	bne.w	800570e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80055f6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80055fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055fe:	4013      	ands	r3, r2
 8005600:	b29a      	uxth	r2, r3
 8005602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005604:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	1c9a      	adds	r2, r3, #2
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d177      	bne.n	800571e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564c:	643b      	str	r3, [r7, #64]	; 0x40
 800564e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12e      	bne.n	8005706 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6979      	ldr	r1, [r7, #20]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	613b      	str	r3, [r7, #16]
   return(result);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d103      	bne.n	80056f6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2210      	movs	r2, #16
 80056f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff f91e 	bl	8004940 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005704:	e00b      	b.n	800571e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb f9d4 	bl	8000ab4 <HAL_UART_RxCpltCallback>
}
 800570c:	e007      	b.n	800571e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0208 	orr.w	r2, r2, #8
 800571c:	619a      	str	r2, [r3, #24]
}
 800571e:	bf00      	nop
 8005720:	3758      	adds	r7, #88	; 0x58
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005728:	b084      	sub	sp, #16
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	f107 001c 	add.w	r0, r7, #28
 8005736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	2b01      	cmp	r3, #1
 800573e:	d120      	bne.n	8005782 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <USB_CoreInit+0xac>)
 8005752:	4013      	ands	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa92 	bl	8005ca0 <USB_CoreReset>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
 8005780:	e010      	b.n	80057a4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa86 	bl	8005ca0 <USB_CoreReset>
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10b      	bne.n	80057c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f043 0206 	orr.w	r2, r3, #6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	ffbdffbf 	.word	0xffbdffbf

080057d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f023 0201 	bic.w	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d115      	bne.n	8005848 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005828:	2001      	movs	r0, #1
 800582a:	f7fb ff93 	bl	8001754 <HAL_Delay>
      ms++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa25 	bl	8005c84 <USB_GetMode>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d01e      	beq.n	800587e <USB_SetCurrentMode+0x84>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b31      	cmp	r3, #49	; 0x31
 8005844:	d9f0      	bls.n	8005828 <USB_SetCurrentMode+0x2e>
 8005846:	e01a      	b.n	800587e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d115      	bne.n	800587a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800585a:	2001      	movs	r0, #1
 800585c:	f7fb ff7a 	bl	8001754 <HAL_Delay>
      ms++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa0c 	bl	8005c84 <USB_GetMode>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <USB_SetCurrentMode+0x84>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b31      	cmp	r3, #49	; 0x31
 8005876:	d9f0      	bls.n	800585a <USB_SetCurrentMode+0x60>
 8005878:	e001      	b.n	800587e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e005      	b.n	800588a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b32      	cmp	r3, #50	; 0x32
 8005882:	d101      	bne.n	8005888 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005894:	b084      	sub	sp, #16
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e009      	b.n	80058c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	2200      	movs	r2, #0
 80058c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3301      	adds	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b0e      	cmp	r3, #14
 80058cc:	d9f2      	bls.n	80058b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11c      	bne.n	800590e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e005      	b.n	800591a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	4619      	mov	r1, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	461a      	mov	r2, r3
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10c      	bne.n	800595a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f961 	bl	8005c10 <USB_SetDevSpeed>
 800594e:	e008      	b.n	8005962 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005950:	2101      	movs	r1, #1
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f95c 	bl	8005c10 <USB_SetDevSpeed>
 8005958:	e003      	b.n	8005962 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800595a:	2103      	movs	r1, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f957 	bl	8005c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005962:	2110      	movs	r1, #16
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8f3 	bl	8005b50 <USB_FlushTxFifo>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f91d 	bl	8005bb4 <USB_FlushRxFifo>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	e043      	b.n	8005a36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c4:	d118      	bne.n	80059f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e013      	b.n	8005a0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e008      	b.n	8005a0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	3301      	adds	r3, #1
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3b7      	bcc.n	80059ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e043      	b.n	8005acc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5a:	d118      	bne.n	8005a8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e013      	b.n	8005aa0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e008      	b.n	8005aa0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b7      	bcc.n	8005a44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <USB_DevInit+0x2b4>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f043 0208 	orr.w	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d105      	bne.n	8005b38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <USB_DevInit+0x2b8>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	803c3800 	.word	0x803c3800
 8005b4c:	40000004 	.word	0x40000004

08005b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <USB_FlushTxFifo+0x60>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d901      	bls.n	8005b6e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e01a      	b.n	8005ba4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	daf3      	bge.n	8005b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <USB_FlushTxFifo+0x60>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e006      	b.n	8005ba4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d0f1      	beq.n	8005b86 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	00030d40 	.word	0x00030d40

08005bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <USB_FlushRxFifo+0x58>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e017      	b.n	8005c00 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	daf3      	bge.n	8005bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2210      	movs	r2, #16
 8005be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <USB_FlushRxFifo+0x58>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e006      	b.n	8005c00 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d0f1      	beq.n	8005be2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	00030d40 	.word	0x00030d40

08005c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0301 	and.w	r3, r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <USB_CoreReset+0x60>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e01a      	b.n	8005cf2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	daf3      	bge.n	8005cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f043 0201 	orr.w	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <USB_CoreReset+0x60>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e006      	b.n	8005cf2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d0f1      	beq.n	8005cd4 <USB_CoreReset+0x34>

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	00030d40 	.word	0x00030d40

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4d0d      	ldr	r5, [pc, #52]	; (8005d3c <__libc_init_array+0x38>)
 8005d08:	4c0d      	ldr	r4, [pc, #52]	; (8005d40 <__libc_init_array+0x3c>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	2600      	movs	r6, #0
 8005d10:	42a6      	cmp	r6, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	4d0b      	ldr	r5, [pc, #44]	; (8005d44 <__libc_init_array+0x40>)
 8005d16:	4c0c      	ldr	r4, [pc, #48]	; (8005d48 <__libc_init_array+0x44>)
 8005d18:	f000 f820 	bl	8005d5c <_init>
 8005d1c:	1b64      	subs	r4, r4, r5
 8005d1e:	10a4      	asrs	r4, r4, #2
 8005d20:	2600      	movs	r6, #0
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2c:	4798      	blx	r3
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d36:	4798      	blx	r3
 8005d38:	3601      	adds	r6, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	08005e1c 	.word	0x08005e1c
 8005d40:	08005e1c 	.word	0x08005e1c
 8005d44:	08005e1c 	.word	0x08005e1c
 8005d48:	08005e20 	.word	0x08005e20

08005d4c <memset>:
 8005d4c:	4402      	add	r2, r0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d100      	bne.n	8005d56 <memset+0xa>
 8005d54:	4770      	bx	lr
 8005d56:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5a:	e7f9      	b.n	8005d50 <memset+0x4>

08005d5c <_init>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr

08005d68 <_fini>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr
