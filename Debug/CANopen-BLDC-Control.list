
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005834  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a9c  08005a9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa4  08005aa4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000010  08005abc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08005abc  00020554  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140ca  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b99  00000000  00000000  00034108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00036ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289a2  00000000  00000000  00038660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001264f  00000000  00000000  00061002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69af  00000000  00000000  00073651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  0016a054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a14 	.word	0x08005a14

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005a14 	.word	0x08005a14

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_CAN1_Init+0x68>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_CAN1_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_CAN1_Init+0x68>)
 800053c:	2210      	movs	r2, #16
 800053e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_CAN1_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_CAN1_Init+0x68>)
 8000548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_CAN1_Init+0x68>)
 8000550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_CAN1_Init+0x68>)
 8000558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_CAN1_Init+0x68>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_CAN1_Init+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f000 ff8c 	bl	80014a0 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 fd55 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c
 800059c:	40006400 	.word	0x40006400

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_CAN_MspInit+0x8c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12f      	bne.n	8000622 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	2303      	movs	r3, #3
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000602:	2309      	movs	r3, #9
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f001 ff59 	bl	80024c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f001 fe8b 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f001 fea4 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006400 	.word	0x40006400
 8000630:	40023800 	.word	0x40023800
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a65      	ldr	r2, [pc, #404]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a5f      	ldr	r2, [pc, #380]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 f899 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 f894 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f001 feda 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f001 feca 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000730:	2386      	movs	r3, #134	; 0x86
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f001 feba 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000750:	f244 0381 	movw	r3, #16513	; 0x4081
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f001 feab 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f001 fe9a 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f001 fe8c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f001 fe80 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f001 fe6f 	bl	80024c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f001 fda1 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f001 fdba 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000824:	d129      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_GPIO_EXTI_Callback+0x70>)
 8000828:	f240 620a 	movw	r2, #1546	; 0x60a
 800082c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_GPIO_EXTI_Callback+0x70>)
 8000830:	2208      	movs	r2, #8
 8000832:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000836:	2240      	movs	r2, #64	; 0x40
 8000838:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 800083c:	2241      	movs	r2, #65	; 0x41
 800083e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000842:	2260      	movs	r2, #96	; 0x60
 8000844:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_GPIO_EXTI_Callback+0x78>)
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <HAL_GPIO_EXTI_Callback+0x70>)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <HAL_GPIO_EXTI_Callback+0x7c>)
 800086c:	f001 f844 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8000876:	f000 fbe1 	bl	800103c <Error_Handler>
		}
	}
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000090 	.word	0x20000090
 8000888:	20000054 	.word	0x20000054
 800088c:	2000005c 	.word	0x2000005c
 8000890:	2000002c 	.word	0x2000002c

08000894 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000898:	f000 fd81 	bl	800139e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800089c:	f000 f86a 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a0:	f7ff feca 	bl	8000638 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80008a4:	f000 fc4c 	bl	8001140 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80008a8:	f000 fcc6 	bl	8001238 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 80008ac:	f7ff fe40 	bl	8000530 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, UserMessage, 4);
 80008b0:	2204      	movs	r2, #4
 80008b2:	4929      	ldr	r1, [pc, #164]	; (8000958 <main+0xc4>)
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <main+0xc8>)
 80008b6:	f003 fb5e 	bl	8003f76 <HAL_UART_Receive_IT>

	HAL_CAN_Start(&hcan1);
 80008ba:	4829      	ldr	r0, [pc, #164]	; (8000960 <main+0xcc>)
 80008bc:	f000 ffd8 	bl	8001870 <HAL_CAN_Start>

	// TxHeader param config
	TxHeader.StdId = 0x000;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <main+0xd0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <main+0xd0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <main+0xd0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <main+0xd0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <main+0xd0>)
 80008da:	2202      	movs	r2, #2
 80008dc:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <main+0xd0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	751a      	strb	r2, [r3, #20]

	TxData[0] = 0x82;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <main+0xd4>)
 80008e6:	2282      	movs	r2, #130	; 0x82
 80008e8:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x0A;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <main+0xd4>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	705a      	strb	r2, [r3, #1]



	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <main+0xd8>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <main+0xd8>)
 80008f8:	2212      	movs	r2, #18
 80008fa:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <main+0xd8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <main+0xd8>)
 8000904:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000908:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <main+0xd8>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <main+0xd8>)
 8000912:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000916:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <main+0xd8>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <main+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <main+0xd8>)
 8000926:	2201      	movs	r2, #1
 8000928:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <main+0xd8>)
 800092c:	2214      	movs	r2, #20
 800092e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8000930:	490e      	ldr	r1, [pc, #56]	; (800096c <main+0xd8>)
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <main+0xcc>)
 8000934:	f000 feb0 	bl	8001698 <HAL_CAN_ConfigFilter>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000938:	2102      	movs	r1, #2
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <main+0xcc>)
 800093c:	f001 f9c9 	bl	8001cd2 <HAL_CAN_ActivateNotification>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <main+0xdc>)
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <main+0xd4>)
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <main+0xd0>)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <main+0xcc>)
 8000948:	f000 ffd6 	bl	80018f8 <HAL_CAN_AddTxMessage>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <main+0xc2>
		Error_Handler();
 8000952:	f000 fb73 	bl	800103c <Error_Handler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000956:	e7fe      	b.n	8000956 <main+0xc2>
 8000958:	200000c4 	.word	0x200000c4
 800095c:	200000c8 	.word	0x200000c8
 8000960:	2000002c 	.word	0x2000002c
 8000964:	20000090 	.word	0x20000090
 8000968:	20000054 	.word	0x20000054
 800096c:	20000068 	.word	0x20000068
 8000970:	2000005c 	.word	0x2000005c

08000974 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0b8      	sub	sp, #224	; 0xe0
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f005 f83e 	bl	8005a04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2290      	movs	r2, #144	; 0x90
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f82f 	bl	8005a04 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80009a6:	f002 f8cd 	bl	8002b44 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <SystemClock_Config+0x128>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a3b      	ldr	r2, [pc, #236]	; (8000a9c <SystemClock_Config+0x128>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <SystemClock_Config+0x128>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <SystemClock_Config+0x12c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ca:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <SystemClock_Config+0x12c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <SystemClock_Config+0x12c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 f8f1 	bl	8002c04 <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000a28:	f000 fb08 	bl	800103c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a2c:	f002 f89a 	bl	8002b64 <HAL_PWREx_EnableOverDrive>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000a36:	f000 fb01 	bl	800103c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a5e:	2103      	movs	r1, #3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fb7d 	bl	8003160 <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8000a6c:	f000 fae6 	bl	800103c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <SystemClock_Config+0x130>)
 8000a72:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fd6e 	bl	8003564 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8000a8e:	f000 fad5 	bl	800103c <Error_Handler>
	}
}
 8000a92:	bf00      	nop
 8000a94:	37e0      	adds	r7, #224	; 0xe0
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000
 8000aa4:	00200100 	.word	0x00200100

08000aa8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4ab2      	ldr	r2, [pc, #712]	; (8000d80 <HAL_UART_RxCpltCallback+0x2d8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	f040 827e 	bne.w	8000fb8 <HAL_UART_RxCpltCallback+0x510>

		switch(iMachineStatus){
 8000abc:	4bb1      	ldr	r3, [pc, #708]	; (8000d84 <HAL_UART_RxCpltCallback+0x2dc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b64      	cmp	r3, #100	; 0x64
 8000ac2:	f000 809c 	beq.w	8000bfe <HAL_UART_RxCpltCallback+0x156>
 8000ac6:	2b64      	cmp	r3, #100	; 0x64
 8000ac8:	f300 827c 	bgt.w	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
 8000acc:	2b28      	cmp	r3, #40	; 0x28
 8000ace:	f300 808f 	bgt.w	8000bf0 <HAL_UART_RxCpltCallback+0x148>
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	da46      	bge.n	8000b64 <HAL_UART_RxCpltCallback+0xbc>
 8000ad6:	e275      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
 8000ad8:	3b32      	subs	r3, #50	; 0x32
 8000ada:	2b1e      	cmp	r3, #30
 8000adc:	f200 8272 	bhi.w	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
 8000ae0:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <HAL_UART_RxCpltCallback+0x40>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000e17 	.word	0x08000e17
 8000aec:	08000fc5 	.word	0x08000fc5
 8000af0:	08000fc5 	.word	0x08000fc5
 8000af4:	08000fc5 	.word	0x08000fc5
 8000af8:	08000fc5 	.word	0x08000fc5
 8000afc:	08000fc5 	.word	0x08000fc5
 8000b00:	08000fc5 	.word	0x08000fc5
 8000b04:	08000fc5 	.word	0x08000fc5
 8000b08:	08000fc5 	.word	0x08000fc5
 8000b0c:	08000fc5 	.word	0x08000fc5
 8000b10:	08000e81 	.word	0x08000e81
 8000b14:	08000fc5 	.word	0x08000fc5
 8000b18:	08000fc5 	.word	0x08000fc5
 8000b1c:	08000fc5 	.word	0x08000fc5
 8000b20:	08000fc5 	.word	0x08000fc5
 8000b24:	08000fc5 	.word	0x08000fc5
 8000b28:	08000fc5 	.word	0x08000fc5
 8000b2c:	08000fc5 	.word	0x08000fc5
 8000b30:	08000fc5 	.word	0x08000fc5
 8000b34:	08000fc5 	.word	0x08000fc5
 8000b38:	08000eeb 	.word	0x08000eeb
 8000b3c:	08000fc5 	.word	0x08000fc5
 8000b40:	08000fc5 	.word	0x08000fc5
 8000b44:	08000fc5 	.word	0x08000fc5
 8000b48:	08000fc5 	.word	0x08000fc5
 8000b4c:	08000fc5 	.word	0x08000fc5
 8000b50:	08000fc5 	.word	0x08000fc5
 8000b54:	08000fc5 	.word	0x08000fc5
 8000b58:	08000fc5 	.word	0x08000fc5
 8000b5c:	08000fc5 	.word	0x08000fc5
 8000b60:	08000f55 	.word	0x08000f55
 8000b64:	3b0a      	subs	r3, #10
 8000b66:	2b1e      	cmp	r3, #30
 8000b68:	f200 822c 	bhi.w	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <HAL_UART_RxCpltCallback+0xcc>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000c43 	.word	0x08000c43
 8000b78:	08000fc5 	.word	0x08000fc5
 8000b7c:	08000fc5 	.word	0x08000fc5
 8000b80:	08000fc5 	.word	0x08000fc5
 8000b84:	08000fc5 	.word	0x08000fc5
 8000b88:	08000fc5 	.word	0x08000fc5
 8000b8c:	08000fc5 	.word	0x08000fc5
 8000b90:	08000fc5 	.word	0x08000fc5
 8000b94:	08000fc5 	.word	0x08000fc5
 8000b98:	08000fc5 	.word	0x08000fc5
 8000b9c:	08000cad 	.word	0x08000cad
 8000ba0:	08000fc5 	.word	0x08000fc5
 8000ba4:	08000fc5 	.word	0x08000fc5
 8000ba8:	08000fc5 	.word	0x08000fc5
 8000bac:	08000fc5 	.word	0x08000fc5
 8000bb0:	08000fc5 	.word	0x08000fc5
 8000bb4:	08000fc5 	.word	0x08000fc5
 8000bb8:	08000fc5 	.word	0x08000fc5
 8000bbc:	08000fc5 	.word	0x08000fc5
 8000bc0:	08000fc5 	.word	0x08000fc5
 8000bc4:	08000d17 	.word	0x08000d17
 8000bc8:	08000fc5 	.word	0x08000fc5
 8000bcc:	08000fc5 	.word	0x08000fc5
 8000bd0:	08000fc5 	.word	0x08000fc5
 8000bd4:	08000fc5 	.word	0x08000fc5
 8000bd8:	08000fc5 	.word	0x08000fc5
 8000bdc:	08000fc5 	.word	0x08000fc5
 8000be0:	08000fc5 	.word	0x08000fc5
 8000be4:	08000fc5 	.word	0x08000fc5
 8000be8:	08000fc5 	.word	0x08000fc5
 8000bec:	08000dad 	.word	0x08000dad
 8000bf0:	2b50      	cmp	r3, #80	; 0x50
 8000bf2:	f300 81e7 	bgt.w	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
 8000bf6:	2b32      	cmp	r3, #50	; 0x32
 8000bf8:	f6bf af6e 	bge.w	8000ad8 <HAL_UART_RxCpltCallback+0x30>
 8000bfc:	e1e2      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 100: //PDO
			TxHeader.StdId = 0x000;
 8000bfe:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 2;
 8000c04:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x01;
 8000c0a:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x0A;
 8000c10:	4b5e      	ldr	r3, [pc, #376]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c12:	220a      	movs	r2, #10
 8000c14:	705a      	strb	r2, [r3, #1]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c16:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <HAL_UART_RxCpltCallback+0x2e8>)
 8000c18:	4a5c      	ldr	r2, [pc, #368]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c1a:	495b      	ldr	r1, [pc, #364]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c1c:	485d      	ldr	r0, [pc, #372]	; (8000d94 <HAL_UART_RxCpltCallback+0x2ec>)
 8000c1e:	f000 fe6b 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d002      	beq.n	8000c2e <HAL_UART_RxCpltCallback+0x186>
				Error_Handler();
 8000c28:	f000 fa08 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 10;
				HAL_UART_Transmit(&huart3, "C100", 4, 100);
			}
			break;
 8000c2c:	e1ca      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 10;
 8000c2e:	4b55      	ldr	r3, [pc, #340]	; (8000d84 <HAL_UART_RxCpltCallback+0x2dc>)
 8000c30:	220a      	movs	r2, #10
 8000c32:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C100", 4, 100);
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	2204      	movs	r2, #4
 8000c38:	4957      	ldr	r1, [pc, #348]	; (8000d98 <HAL_UART_RxCpltCallback+0x2f0>)
 8000c3a:	4858      	ldr	r0, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x2f4>)
 8000c3c:	f003 f908 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000c40:	e1c0      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 10: //SHUTDOWN
			TxHeader.StdId = 0x60A;
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c44:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c48:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000c4a:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000c50:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c52:	2222      	movs	r2, #34	; 0x22
 8000c54:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c58:	2240      	movs	r2, #64	; 0x40
 8000c5a:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000c5c:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c5e:	2260      	movs	r2, #96	; 0x60
 8000c60:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x06;
 8000c68:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000c74:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c80:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <HAL_UART_RxCpltCallback+0x2e8>)
 8000c82:	4a42      	ldr	r2, [pc, #264]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000c84:	4940      	ldr	r1, [pc, #256]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c86:	4843      	ldr	r0, [pc, #268]	; (8000d94 <HAL_UART_RxCpltCallback+0x2ec>)
 8000c88:	f000 fe36 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <HAL_UART_RxCpltCallback+0x1f0>
				Error_Handler();
 8000c92:	f000 f9d3 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 20;
				HAL_UART_Transmit(&huart3, "C010", 4, 100);
			}
			break;
 8000c96:	e195      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 20;
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_UART_RxCpltCallback+0x2dc>)
 8000c9a:	2214      	movs	r2, #20
 8000c9c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	493f      	ldr	r1, [pc, #252]	; (8000da0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000ca4:	483d      	ldr	r0, [pc, #244]	; (8000d9c <HAL_UART_RxCpltCallback+0x2f4>)
 8000ca6:	f003 f8d3 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000caa:	e18b      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 20://SWITCH ON
			TxHeader.StdId = 0x60A;
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000cae:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cb2:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000cb4:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cbc:	2222      	movs	r2, #34	; 0x22
 8000cbe:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc8:	2260      	movs	r2, #96	; 0x60
 8000cca:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x07;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <HAL_UART_RxCpltCallback+0x2e8>)
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000cee:	4926      	ldr	r1, [pc, #152]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000cf0:	4828      	ldr	r0, [pc, #160]	; (8000d94 <HAL_UART_RxCpltCallback+0x2ec>)
 8000cf2:	f000 fe01 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <HAL_UART_RxCpltCallback+0x25a>
				Error_Handler();
 8000cfc:	f000 f99e 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 30;
				HAL_UART_Transmit(&huart3, "C020", 4, 100);
			}
			break;
 8000d00:	e160      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 30;
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_UART_RxCpltCallback+0x2dc>)
 8000d04:	221e      	movs	r2, #30
 8000d06:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4925      	ldr	r1, [pc, #148]	; (8000da4 <HAL_UART_RxCpltCallback+0x2fc>)
 8000d0e:	4823      	ldr	r0, [pc, #140]	; (8000d9c <HAL_UART_RxCpltCallback+0x2f4>)
 8000d10:	f003 f89e 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000d14:	e156      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
			break;

			 */

		case 30://POSITION MODE
			TxHeader.StdId = 0x60A;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d18:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d1c:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d20:	2208      	movs	r2, #8
 8000d22:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d26:	2222      	movs	r2, #34	; 0x22
 8000d28:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x60;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d2c:	2260      	movs	r2, #96	; 0x60
 8000d2e:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d32:	2260      	movs	r2, #96	; 0x60
 8000d34:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x01;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_UART_RxCpltCallback+0x2e8>)
 8000d56:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_UART_RxCpltCallback+0x2e4>)
 8000d58:	490b      	ldr	r1, [pc, #44]	; (8000d88 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d5c:	f000 fdcc 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <HAL_UART_RxCpltCallback+0x2c4>
				Error_Handler();
 8000d66:	f000 f969 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 40;
				HAL_UART_Transmit(&huart3, "C030", 4, 100);
			}
			break;
 8000d6a:	e12b      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 40;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_UART_RxCpltCallback+0x2dc>)
 8000d6e:	2228      	movs	r2, #40	; 0x28
 8000d70:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	2204      	movs	r2, #4
 8000d76:	490c      	ldr	r1, [pc, #48]	; (8000da8 <HAL_UART_RxCpltCallback+0x300>)
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <HAL_UART_RxCpltCallback+0x2f4>)
 8000d7a:	f003 f869 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000d7e:	e121      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
 8000d80:	40004800 	.word	0x40004800
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000090 	.word	0x20000090
 8000d8c:	20000054 	.word	0x20000054
 8000d90:	2000005c 	.word	0x2000005c
 8000d94:	2000002c 	.word	0x2000002c
 8000d98:	08005a2c 	.word	0x08005a2c
 8000d9c:	200000c8 	.word	0x200000c8
 8000da0:	08005a34 	.word	0x08005a34
 8000da4:	08005a3c 	.word	0x08005a3c
 8000da8:	08005a44 	.word	0x08005a44
		case 40:// POSITION 0//POSITION 30
			TxHeader.StdId = 0x60A;
 8000dac:	4b8a      	ldr	r3, [pc, #552]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000dae:	f240 620a 	movw	r2, #1546	; 0x60a
 8000db2:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000db4:	4b88      	ldr	r3, [pc, #544]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000db6:	2208      	movs	r2, #8
 8000db8:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000dba:	4b88      	ldr	r3, [pc, #544]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dbc:	2222      	movs	r2, #34	; 0x22
 8000dbe:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dc2:	227a      	movs	r2, #122	; 0x7a
 8000dc4:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000dc6:	4b85      	ldr	r3, [pc, #532]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dc8:	2260      	movs	r2, #96	; 0x60
 8000dca:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000dcc:	4b83      	ldr	r3, [pc, #524]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;//0x30;
 8000dd2:	4b82      	ldr	r3, [pc, #520]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;//0x75;
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;//0X00;
 8000dde:	4b7f      	ldr	r3, [pc, #508]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;//0x00;
 8000de4:	4b7d      	ldr	r3, [pc, #500]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000dea:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <HAL_UART_RxCpltCallback+0x538>)
 8000dec:	4a7b      	ldr	r2, [pc, #492]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000dee:	497a      	ldr	r1, [pc, #488]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000df0:	487c      	ldr	r0, [pc, #496]	; (8000fe4 <HAL_UART_RxCpltCallback+0x53c>)
 8000df2:	f000 fd81 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <HAL_UART_RxCpltCallback+0x35a>
				Error_Handler();
 8000dfc:	f000 f91e 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "C040", 4, 100);
			}
			break;
 8000e00:	e0e0      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 50;
 8000e02:	4b79      	ldr	r3, [pc, #484]	; (8000fe8 <HAL_UART_RxCpltCallback+0x540>)
 8000e04:	2232      	movs	r2, #50	; 0x32
 8000e06:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C040", 4, 100);
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4977      	ldr	r1, [pc, #476]	; (8000fec <HAL_UART_RxCpltCallback+0x544>)
 8000e0e:	4878      	ldr	r0, [pc, #480]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000e10:	f003 f81e 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000e14:	e0d6      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 50://START SUPPLY
			TxHeader.StdId = 0x60A;
 8000e16:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000e18:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e1c:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000e1e:	4b6e      	ldr	r3, [pc, #440]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000e24:	4b6d      	ldr	r3, [pc, #436]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e26:	2222      	movs	r2, #34	; 0x22
 8000e28:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000e2a:	4b6c      	ldr	r3, [pc, #432]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000e30:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e32:	2260      	movs	r2, #96	; 0x60
 8000e34:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000e36:	4b69      	ldr	r3, [pc, #420]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x1F;
 8000e3c:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e3e:	221f      	movs	r2, #31
 8000e40:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000e42:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000e48:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000e4e:	4b63      	ldr	r3, [pc, #396]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e54:	4b62      	ldr	r3, [pc, #392]	; (8000fe0 <HAL_UART_RxCpltCallback+0x538>)
 8000e56:	4a61      	ldr	r2, [pc, #388]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e58:	495f      	ldr	r1, [pc, #380]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000e5a:	4862      	ldr	r0, [pc, #392]	; (8000fe4 <HAL_UART_RxCpltCallback+0x53c>)
 8000e5c:	f000 fd4c 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_UART_RxCpltCallback+0x3c4>
				Error_Handler();
 8000e66:	f000 f8e9 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 60;
				HAL_UART_Transmit(&huart3, "C050", 4, 100);
			}
			break;
 8000e6a:	e0ab      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 60;
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <HAL_UART_RxCpltCallback+0x540>)
 8000e6e:	223c      	movs	r2, #60	; 0x3c
 8000e70:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	2204      	movs	r2, #4
 8000e76:	495f      	ldr	r1, [pc, #380]	; (8000ff4 <HAL_UART_RxCpltCallback+0x54c>)
 8000e78:	485d      	ldr	r0, [pc, #372]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000e7a:	f002 ffe9 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000e7e:	e0a1      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 60://STOP SUPPLY
			TxHeader.StdId = 0x60A;
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000e82:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e86:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000e88:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e90:	2222      	movs	r2, #34	; 0x22
 8000e92:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000e94:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e96:	2240      	movs	r2, #64	; 0x40
 8000e98:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000e9a:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000e9c:	2260      	movs	r2, #96	; 0x60
 8000e9e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000eac:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000eb8:	4b48      	ldr	r3, [pc, #288]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ebe:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <HAL_UART_RxCpltCallback+0x538>)
 8000ec0:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000ec2:	4945      	ldr	r1, [pc, #276]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000ec4:	4847      	ldr	r0, [pc, #284]	; (8000fe4 <HAL_UART_RxCpltCallback+0x53c>)
 8000ec6:	f000 fd17 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_UART_RxCpltCallback+0x42e>
				Error_Handler();
 8000ed0:	f000 f8b4 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 70;
				HAL_UART_Transmit(&huart3, "C060", 4, 100);
			}
			break;
 8000ed4:	e076      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 70;
 8000ed6:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <HAL_UART_RxCpltCallback+0x540>)
 8000ed8:	2246      	movs	r2, #70	; 0x46
 8000eda:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2204      	movs	r2, #4
 8000ee0:	4945      	ldr	r1, [pc, #276]	; (8000ff8 <HAL_UART_RxCpltCallback+0x550>)
 8000ee2:	4843      	ldr	r0, [pc, #268]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000ee4:	f002 ffb4 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000ee8:	e06c      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 70://POSTION CHECK
			TxHeader.StdId = 0x60A;
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000eec:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ef0:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000ef2:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x40;
 8000ef8:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000efa:	2240      	movs	r2, #64	; 0x40
 8000efc:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x64;
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f00:	2264      	movs	r2, #100	; 0x64
 8000f02:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f06:	2260      	movs	r2, #96	; 0x60
 8000f08:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_UART_RxCpltCallback+0x538>)
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f2c:	492a      	ldr	r1, [pc, #168]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000f2e:	482d      	ldr	r0, [pc, #180]	; (8000fe4 <HAL_UART_RxCpltCallback+0x53c>)
 8000f30:	f000 fce2 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_UART_RxCpltCallback+0x498>
				Error_Handler();
 8000f3a:	f000 f87f 	bl	800103c <Error_Handler>
			}
			else{
				iMachineStatus = 80;
				HAL_UART_Transmit(&huart3, "C070", 4, 100);
			}
			break;
 8000f3e:	e041      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				iMachineStatus = 80;
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_UART_RxCpltCallback+0x540>)
 8000f42:	2250      	movs	r2, #80	; 0x50
 8000f44:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	2204      	movs	r2, #4
 8000f4a:	492c      	ldr	r1, [pc, #176]	; (8000ffc <HAL_UART_RxCpltCallback+0x554>)
 8000f4c:	4828      	ldr	r0, [pc, #160]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000f4e:	f002 ff7f 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000f52:	e037      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
		case 80://POSTION 45
			TxHeader.StdId = 0x60A;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000f56:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f5a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000f5e:	2208      	movs	r2, #8
 8000f60:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f64:	2222      	movs	r2, #34	; 0x22
 8000f66:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f6a:	227a      	movs	r2, #122	; 0x7a
 8000f6c:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f70:	2260      	movs	r2, #96	; 0x60
 8000f72:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x2D;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f7c:	222d      	movs	r2, #45	; 0x2d
 8000f7e:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_UART_RxCpltCallback+0x538>)
 8000f94:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <HAL_UART_RxCpltCallback+0x534>)
 8000f96:	4910      	ldr	r1, [pc, #64]	; (8000fd8 <HAL_UART_RxCpltCallback+0x530>)
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <HAL_UART_RxCpltCallback+0x53c>)
 8000f9a:	f000 fcad 	bl	80018f8 <HAL_CAN_AddTxMessage>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <HAL_UART_RxCpltCallback+0x502>
				Error_Handler();
 8000fa4:	f000 f84a 	bl	800103c <Error_Handler>
			}
			else{
				HAL_UART_Transmit(&huart3, "C080", 4, 100);
			}
			break;
 8000fa8:	e00c      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>
				HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	2204      	movs	r2, #4
 8000fae:	4914      	ldr	r1, [pc, #80]	; (8001000 <HAL_UART_RxCpltCallback+0x558>)
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000fb2:	f002 ff4d 	bl	8003e50 <HAL_UART_Transmit>
			break;
 8000fb6:	e005      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x51c>

		}

	}
	else{
		HAL_UART_Transmit(&huart3, ErrorMessage, strlen(ErrorMessage), 100);
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	220c      	movs	r2, #12
 8000fbc:	4911      	ldr	r1, [pc, #68]	; (8001004 <HAL_UART_RxCpltCallback+0x55c>)
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000fc0:	f002 ff46 	bl	8003e50 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, UserMessage, 4);
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4910      	ldr	r1, [pc, #64]	; (8001008 <HAL_UART_RxCpltCallback+0x560>)
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_UART_RxCpltCallback+0x548>)
 8000fca:	f002 ffd4 	bl	8003f76 <HAL_UART_Receive_IT>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	20000054 	.word	0x20000054
 8000fe0:	2000005c 	.word	0x2000005c
 8000fe4:	2000002c 	.word	0x2000002c
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	08005a4c 	.word	0x08005a4c
 8000ff0:	200000c8 	.word	0x200000c8
 8000ff4:	08005a54 	.word	0x08005a54
 8000ff8:	08005a5c 	.word	0x08005a5c
 8000ffc:	08005a64 	.word	0x08005a64
 8001000:	08005a6c 	.word	0x08005a6c
 8001004:	08005a74 	.word	0x08005a74
 8001008:	200000c4 	.word	0x200000c4

0800100c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fd47 	bl	8001aae <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001020:	2101      	movs	r1, #1
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001024:	f001 fc13 	bl	800284e <HAL_GPIO_TogglePin>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000060 	.word	0x20000060
 8001034:	200000a8 	.word	0x200000a8
 8001038:	40020400 	.word	0x40020400

0800103c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_MspInit+0x44>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_MspInit+0x44>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_MspInit+0x44>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x44>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x44>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x44>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f99c 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <CAN1_RX0_IRQHandler+0x10>)
 80010ea:	f000 fe18 	bl	8001d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000002c 	.word	0x2000002c

080010f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <USART3_IRQHandler+0x10>)
 80010fe:	f002 ff89 	bl	8004014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000c8 	.word	0x200000c8

0800110c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001114:	f001 fbb6 	bl	8002884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <MX_USART3_UART_Init+0x5c>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800114c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001184:	f002 fe16 	bl	8003db4 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800118e:	f7ff ff55 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000c8 	.word	0x200000c8
 800119c:	40004800 	.word	0x40004800

080011a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d130      	bne.n	8001224 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_UART_MspInit+0x90>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001204:	2307      	movs	r3, #7
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <HAL_UART_MspInit+0x94>)
 8001210:	f001 f958 	bl	80024c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2027      	movs	r0, #39	; 0x27
 800121a:	f001 f88a 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800121e:	2027      	movs	r0, #39	; 0x27
 8001220:	f001 f8a3 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40004800 	.word	0x40004800
 8001230:	40023800 	.word	0x40023800
 8001234:	40020c00 	.word	0x40020c00

08001238 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001242:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001246:	2206      	movs	r2, #6
 8001248:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124c:	2202      	movs	r2, #2
 800124e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2202      	movs	r2, #2
 800125a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2201      	movs	r2, #1
 8001260:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2201      	movs	r2, #1
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	f001 fb1a 	bl	80028b4 <HAL_PCD_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001286:	f7ff fed9 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000014c 	.word	0x2000014c

08001294 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b4:	d141      	bne.n	800133a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012e0:	230a      	movs	r3, #10
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4817      	ldr	r0, [pc, #92]	; (8001348 <HAL_PCD_MspInit+0xb4>)
 80012ec:	f001 f8ea 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <HAL_PCD_MspInit+0xb4>)
 8001306:	f001 f8dd 	bl	80024c4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	6353      	str	r3, [r2, #52]	; 0x34
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 8001318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_PCD_MspInit+0xb0>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001368:	4c0b      	ldr	r4, [pc, #44]	; (8001398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001376:	f7ff fed1 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f004 fb1f 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff fa89 	bl	8000894 <main>
  bx  lr    
 8001382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001390:	08005aac 	.word	0x08005aac
  ldr r2, =_sbss
 8001394:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001398:	20000554 	.word	0x20000554

0800139c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC_IRQHandler>

0800139e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 ffba 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 f805 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ae:	f7ff fe4b 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x54>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x58>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 ffd5 	bl	8002386 <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 ff9d 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_InitTick+0x5c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000004 	.word	0x20000004
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	2000000c 	.word	0x2000000c
 800143c:	20000550 	.word	0x20000550

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000550 	.word	0x20000550

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c

080014a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0ed      	b.n	800168e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff f86e 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff ffb4 	bl	8001440 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014da:	e012      	b.n	8001502 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014dc:	f7ff ffb0 	bl	8001440 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d90b      	bls.n	8001502 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2205      	movs	r2, #5
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0c5      	b.n	800168e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0e5      	beq.n	80014dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0202 	bic.w	r2, r2, #2
 800151e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001520:	f7ff ff8e 	bl	8001440 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff ff8a 	bl	8001440 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e09f      	b.n	800168e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7e5b      	ldrb	r3, [r3, #25]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e9b      	ldrb	r3, [r3, #26]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e007      	b.n	80015da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0220 	bic.w	r2, r2, #32
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7edb      	ldrb	r3, [r3, #27]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0210 	bic.w	r2, r2, #16
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e007      	b.n	8001604 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0210 	orr.w	r2, r2, #16
 8001602:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7f1b      	ldrb	r3, [r3, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0208 	orr.w	r2, r2, #8
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0208 	bic.w	r2, r2, #8
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7f5b      	ldrb	r3, [r3, #29]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	ea42 0103 	orr.w	r1, r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <HAL_CAN_ConfigFilter+0x26>
 80016b6:	7cfb      	ldrb	r3, [r7, #19]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 80c7 	bne.w	800184c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a69      	ldr	r2, [pc, #420]	; (8001868 <HAL_CAN_ConfigFilter+0x1d0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d001      	beq.n	80016cc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_CAN_ConfigFilter+0x1d4>)
 80016ca:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4a63      	ldr	r2, [pc, #396]	; (800186c <HAL_CAN_ConfigFilter+0x1d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d111      	bne.n	8001708 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016ea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2201      	movs	r2, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d123      	bne.n	800177a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001754:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3248      	adds	r2, #72	; 0x48
 800175a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800176e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001770:	6979      	ldr	r1, [r7, #20]
 8001772:	3348      	adds	r3, #72	; 0x48
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d122      	bne.n	80017c8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	431a      	orrs	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3248      	adds	r2, #72	; 0x48
 80017a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017be:	6979      	ldr	r1, [r7, #20]
 80017c0:	3348      	adds	r3, #72	; 0x48
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800180e:	e007      	b.n	8001820 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	431a      	orrs	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d107      	bne.n	8001838 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	431a      	orrs	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800183e:	f023 0201 	bic.w	r2, r3, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e006      	b.n	800185a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40003400 	.word	0x40003400
 800186c:	40006400 	.word	0x40006400

08001870 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d12e      	bne.n	80018e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff fdd0 	bl	8001440 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018a2:	e012      	b.n	80018ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a4:	f7ff fdcc 	bl	8001440 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d90b      	bls.n	80018ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e012      	b.n	80018f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1e5      	bne.n	80018a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e006      	b.n	80018f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
  }
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d003      	beq.n	8001924 <HAL_CAN_AddTxMessage+0x2c>
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	2b02      	cmp	r3, #2
 8001920:	f040 80b8 	bne.w	8001a94 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a0 	beq.w	8001a84 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	0e1b      	lsrs	r3, r3, #24
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d907      	bls.n	8001964 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e09e      	b.n	8001aa2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001964:	2201      	movs	r2, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	409a      	lsls	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	6809      	ldr	r1, [r1, #0]
 8001984:	431a      	orrs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3318      	adds	r3, #24
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	440b      	add	r3, r1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e00f      	b.n	80019b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800199c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3318      	adds	r3, #24
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	440b      	add	r3, r1
 80019b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3318      	adds	r3, #24
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	440b      	add	r3, r1
 80019c2:	3304      	adds	r3, #4
 80019c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	7d1b      	ldrb	r3, [r3, #20]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d111      	bne.n	80019f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3318      	adds	r3, #24
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	3304      	adds	r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	6811      	ldr	r1, [r2, #0]
 80019e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3318      	adds	r3, #24
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	440b      	add	r3, r1
 80019ee:	3304      	adds	r3, #4
 80019f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3307      	adds	r3, #7
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	061a      	lsls	r2, r3, #24
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3306      	adds	r3, #6
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3305      	adds	r3, #5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	3204      	adds	r2, #4
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	4610      	mov	r0, r2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	6811      	ldr	r1, [r2, #0]
 8001a1a:	ea43 0200 	orr.w	r2, r3, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	440b      	add	r3, r1
 8001a24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	061a      	lsls	r2, r3, #24
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3302      	adds	r3, #2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	4313      	orrs	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	6811      	ldr	r1, [r2, #0]
 8001a50:	ea43 0200 	orr.w	r2, r3, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	440b      	add	r3, r1
 8001a5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3318      	adds	r3, #24
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	6811      	ldr	r1, [r2, #0]
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e00e      	b.n	8001aa2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e006      	b.n	8001aa2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <HAL_CAN_GetRxMessage+0x24>
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 80f3 	bne.w	8001cb8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10e      	bne.n	8001af6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0e7      	b.n	8001cc6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0d8      	b.n	8001cc6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	331b      	adds	r3, #27
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0204 	and.w	r2, r3, #4
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	331b      	adds	r3, #27
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0d5b      	lsrs	r3, r3, #21
 8001b42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	331b      	adds	r3, #27
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	331b      	adds	r3, #27
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0202 	and.w	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	331b      	adds	r3, #27
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4413      	add	r3, r2
 8001b86:	3304      	adds	r3, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 020f 	and.w	r2, r3, #15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	331b      	adds	r3, #27
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	331b      	adds	r3, #27
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0c1b      	lsrs	r3, r3, #16
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0a1a      	lsrs	r2, r3, #8
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0c1a      	lsrs	r2, r3, #16
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3302      	adds	r3, #2
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e1a      	lsrs	r2, r3, #24
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3303      	adds	r3, #3
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0a1a      	lsrs	r2, r3, #8
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3305      	adds	r3, #5
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0c1a      	lsrs	r2, r3, #16
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3306      	adds	r3, #6
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e1a      	lsrs	r2, r3, #24
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3307      	adds	r3, #7
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d108      	bne.n	8001ca4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0220 	orr.w	r2, r2, #32
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	e007      	b.n	8001cb4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e006      	b.n	8001cc6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d002      	beq.n	8001cf0 <HAL_CAN_ActivateNotification+0x1e>
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d109      	bne.n	8001d04 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6959      	ldr	r1, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e006      	b.n	8001d12 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b08a      	sub	sp, #40	; 0x28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d07c      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d023      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f983 	bl	800208c <HAL_CAN_TxMailbox0CompleteCallback>
 8001d86:	e016      	b.n	8001db6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e00c      	b.n	8001db6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	e002      	b.n	8001db6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f989 	bl	80020c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d024      	beq.n	8001e0a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f963 	bl	80020a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dda:	e016      	b.n	8001e0a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	e00c      	b.n	8001e0a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	e002      	b.n	8001e0a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f969 	bl	80020dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d024      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f943 	bl	80020b4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e2e:	e016      	b.n	8001e5e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e00c      	b.n	8001e5e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	e002      	b.n	8001e5e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f949 	bl	80020f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2210      	movs	r2, #16
 8001e80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f930 	bl	8002104 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff f8a5 	bl	800100c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00c      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2208      	movs	r2, #8
 8001f00:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f912 	bl	800212c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8f9 	bl	8002118 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2210      	movs	r2, #16
 8001f40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8fc 	bl	8002140 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2208      	movs	r2, #8
 8001f62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8f5 	bl	8002154 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d07b      	beq.n	800206c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d072      	beq.n	8002064 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d043      	beq.n	8002064 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d03e      	beq.n	8002064 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fec:	2b60      	cmp	r3, #96	; 0x60
 8001fee:	d02b      	beq.n	8002048 <HAL_CAN_IRQHandler+0x32a>
 8001ff0:	2b60      	cmp	r3, #96	; 0x60
 8001ff2:	d82e      	bhi.n	8002052 <HAL_CAN_IRQHandler+0x334>
 8001ff4:	2b50      	cmp	r3, #80	; 0x50
 8001ff6:	d022      	beq.n	800203e <HAL_CAN_IRQHandler+0x320>
 8001ff8:	2b50      	cmp	r3, #80	; 0x50
 8001ffa:	d82a      	bhi.n	8002052 <HAL_CAN_IRQHandler+0x334>
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d019      	beq.n	8002034 <HAL_CAN_IRQHandler+0x316>
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	d826      	bhi.n	8002052 <HAL_CAN_IRQHandler+0x334>
 8002004:	2b30      	cmp	r3, #48	; 0x30
 8002006:	d010      	beq.n	800202a <HAL_CAN_IRQHandler+0x30c>
 8002008:	2b30      	cmp	r3, #48	; 0x30
 800200a:	d822      	bhi.n	8002052 <HAL_CAN_IRQHandler+0x334>
 800200c:	2b10      	cmp	r3, #16
 800200e:	d002      	beq.n	8002016 <HAL_CAN_IRQHandler+0x2f8>
 8002010:	2b20      	cmp	r3, #32
 8002012:	d005      	beq.n	8002020 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002014:	e01d      	b.n	8002052 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800201e:	e019      	b.n	8002054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002028:	e014      	b.n	8002054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002032:	e00f      	b.n	8002054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800203c:	e00a      	b.n	8002054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002046:	e005      	b.n	8002054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002050:	e000      	b.n	8002054 <HAL_CAN_IRQHandler+0x336>
            break;
 8002052:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002062:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2204      	movs	r2, #4
 800206a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f872 	bl	8002168 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	05fa0000 	.word	0x05fa0000

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	; (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff f848 	bl	8001440 <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d008      	beq.n	80023d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e052      	b.n	8002476 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0216 	bic.w	r2, r2, #22
 80023de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <HAL_DMA_Abort+0x62>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002420:	e013      	b.n	800244a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002422:	f7ff f80d 	bl	8001440 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b05      	cmp	r3, #5
 800242e:	d90c      	bls.n	800244a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2203      	movs	r2, #3
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e015      	b.n	8002476 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e4      	bne.n	8002422 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	223f      	movs	r2, #63	; 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00c      	b.n	80024b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2205      	movs	r2, #5
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e175      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8164 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x56>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80be 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002666:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae86 	bls.w	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	041a      	lsls	r2, r3, #16
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43d9      	mvns	r1, r3
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd ffb6 	bl	8000814 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40013c00 	.word	0x40013c00

080028b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b6:	b08f      	sub	sp, #60	; 0x3c
 80028b8:	af0a      	add	r7, sp, #40	; 0x28
 80028ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e116      	b.n	8002af4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe fcd7 	bl	8001294 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fdc3 	bl	8005490 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	687e      	ldr	r6, [r7, #4]
 8002912:	466d      	mov	r5, sp
 8002914:	f106 0410 	add.w	r4, r6, #16
 8002918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002924:	e885 0003 	stmia.w	r5, {r0, r1}
 8002928:	1d33      	adds	r3, r6, #4
 800292a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292c:	6838      	ldr	r0, [r7, #0]
 800292e:	f002 fd57 	bl	80053e0 <USB_CoreInit>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0d7      	b.n	8002af4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fdb1 	bl	80054b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e04a      	b.n	80029ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	333d      	adds	r3, #61	; 0x3d
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	333c      	adds	r3, #60	; 0x3c
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	b298      	uxth	r0, r3
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3342      	adds	r3, #66	; 0x42
 8002992:	4602      	mov	r2, r0
 8002994:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	333f      	adds	r3, #63	; 0x3f
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3344      	adds	r3, #68	; 0x44
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3348      	adds	r3, #72	; 0x48
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3350      	adds	r3, #80	; 0x50
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3301      	adds	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d3af      	bcc.n	8002956 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e044      	b.n	8002a86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	3301      	adds	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3b5      	bcc.n	80029fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	687e      	ldr	r6, [r7, #4]
 8002a98:	466d      	mov	r5, sp
 8002a9a:	f106 0410 	add.w	r4, r6, #16
 8002a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aae:	1d33      	adds	r3, r6, #4
 8002ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab2:	6838      	ldr	r0, [r7, #0]
 8002ab4:	f002 fd4a 	bl	800554c <USB_DevInit>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e014      	b.n	8002af4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f80a 	bl	8002afc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 ff04 	bl	80058fa <USB_DevDisconnect>

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002afc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	10000003 	.word	0x10000003

08002b44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40007000 	.word	0x40007000

08002b64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b92:	f7fe fc55 	bl	8001440 <HAL_GetTick>
 8002b96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b98:	e009      	b.n	8002bae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b9a:	f7fe fc51 	bl	8001440 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba8:	d901      	bls.n	8002bae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e022      	b.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d1ee      	bne.n	8002b9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fc3a 	bl	8001440 <HAL_GetTick>
 8002bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bce:	e009      	b.n	8002be4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd0:	f7fe fc36 	bl	8001440 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bde:	d901      	bls.n	8002be4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e007      	b.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e29b      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8087 	beq.w	8002d36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c28:	4b96      	ldr	r3, [pc, #600]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d00c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c34:	4b93      	ldr	r3, [pc, #588]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d112      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62>
 8002c40:	4b90      	ldr	r3, [pc, #576]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4c:	d10b      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4e:	4b8d      	ldr	r3, [pc, #564]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d06c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x130>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d168      	bne.n	8002d34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e275      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x7a>
 8002c70:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a83      	ldr	r2, [pc, #524]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e02e      	b.n	8002cdc <HAL_RCC_OscConfig+0xd8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x9c>
 8002c86:	4b7f      	ldr	r3, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7e      	ldr	r2, [pc, #504]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7b      	ldr	r2, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xd8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xc0>
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a75      	ldr	r2, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a72      	ldr	r2, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xd8>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6c      	ldr	r3, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6b      	ldr	r2, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fbac 	bl	8001440 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fba8 	bl	8001440 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e229      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xe8>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fb98 	bl	8001440 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fb94 	bl	8001440 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e215      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x110>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d069      	beq.n	8002e16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d42:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x190>
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x17a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1e9      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	493d      	ldr	r1, [pc, #244]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e040      	b.n	8002e16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d023      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a38      	ldr	r2, [pc, #224]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fb4a 	bl	8001440 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fe fb46 	bl	8001440 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1c7      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4929      	ldr	r1, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
 8002de2:	e018      	b.n	8002e16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fb26 	bl	8001440 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe fb22 	bl	8001440 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1a3      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d038      	beq.n	8002e94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe fb03 	bl	8001440 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe faff 	bl	8001440 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e180      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x23a>
 8002e5c:	e01a      	b.n	8002e94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <HAL_RCC_OscConfig+0x280>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fae9 	bl	8001440 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e72:	f7fe fae5 	bl	8001440 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d903      	bls.n	8002e88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e166      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
 8002e84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	4b92      	ldr	r3, [pc, #584]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a4 	beq.w	8002fea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b8c      	ldr	r3, [pc, #560]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	4b89      	ldr	r3, [pc, #548]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a88      	ldr	r2, [pc, #544]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b86      	ldr	r3, [pc, #536]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eca:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <HAL_RCC_OscConfig+0x4d4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7f      	ldr	r2, [pc, #508]	; (80030d8 <HAL_RCC_OscConfig+0x4d4>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe faad 	bl	8001440 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe faa9 	bl	8001440 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e12a      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x4d4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x31a>
 8002f10:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a6f      	ldr	r2, [pc, #444]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	e02d      	b.n	8002f7a <HAL_RCC_OscConfig+0x376>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x33c>
 8002f26:	4b6b      	ldr	r3, [pc, #428]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a6a      	ldr	r2, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a67      	ldr	r2, [pc, #412]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e01c      	b.n	8002f7a <HAL_RCC_OscConfig+0x376>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x35e>
 8002f48:	4b62      	ldr	r3, [pc, #392]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a61      	ldr	r2, [pc, #388]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a5e      	ldr	r2, [pc, #376]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	e00b      	b.n	8002f7a <HAL_RCC_OscConfig+0x376>
 8002f62:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe fa5d 	bl	8001440 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fa59 	bl	8001440 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0d8      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCC_OscConfig+0x386>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fe fa47 	bl	8001440 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe fa43 	bl	8001440 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0c2      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a3c      	ldr	r2, [pc, #240]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80ae 	beq.w	8003150 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d06d      	beq.n	80030dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d14b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 800300e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fa14 	bl	8001440 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fa10 	bl	8001440 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e091      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	491b      	ldr	r1, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f9e2 	bl	8001440 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f9de 	bl	8001440 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e05f      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x47c>
 800309e:	e057      	b.n	8003150 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f9c8 	bl	8001440 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe f9c4 	bl	8001440 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e045      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4b0>
 80030d2:	e03d      	b.n	8003150 <HAL_RCC_OscConfig+0x54c>
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030dc:	4b1f      	ldr	r3, [pc, #124]	; (800315c <HAL_RCC_OscConfig+0x558>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d030      	beq.n	800314c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d129      	bne.n	800314c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d122      	bne.n	800314c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003112:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003114:	4293      	cmp	r3, r2
 8003116:	d119      	bne.n	800314c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d10f      	bne.n	800314c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d0      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 020f 	bic.w	r2, r3, #15
 800318e:	4965      	ldr	r1, [pc, #404]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b8      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a58      	ldr	r2, [pc, #352]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	494d      	ldr	r1, [pc, #308]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d040      	beq.n	8003284 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d115      	bne.n	8003242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e073      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06b      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4936      	ldr	r1, [pc, #216]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003254:	f7fe f8f4 	bl	8001440 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fe f8f0 	bl	8001440 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e053      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d210      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	4922      	ldr	r1, [pc, #136]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e032      	b.n	800331a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4916      	ldr	r1, [pc, #88]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490e      	ldr	r1, [pc, #56]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f2:	f000 f821 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490a      	ldr	r1, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x1cc>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_RCC_ClockConfig+0x1d0>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1d4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe f850 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00
 8003328:	40023800 	.word	0x40023800
 800332c:	08005a84 	.word	0x08005a84
 8003330:	20000004 	.word	0x20000004
 8003334:	20000008 	.word	0x20000008

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	2300      	movs	r3, #0
 800334a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003350:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d00d      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x40>
 800335c:	2b08      	cmp	r3, #8
 800335e:	f200 80bd 	bhi.w	80034dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x34>
 8003366:	2b04      	cmp	r3, #4
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x3a>
 800336a:	e0b7      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800336e:	60bb      	str	r3, [r7, #8]
      break;
 8003370:	e0b7      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003372:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003374:	60bb      	str	r3, [r7, #8]
      break;
 8003376:	e0b4      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003378:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003380:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003382:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04d      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	461a      	mov	r2, r3
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	ea02 0800 	and.w	r8, r2, r0
 80033a6:	ea03 0901 	and.w	r9, r3, r1
 80033aa:	4640      	mov	r0, r8
 80033ac:	4649      	mov	r1, r9
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	014b      	lsls	r3, r1, #5
 80033b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033bc:	0142      	lsls	r2, r0, #5
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	ebb0 0008 	subs.w	r0, r0, r8
 80033c6:	eb61 0109 	sbc.w	r1, r1, r9
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	018b      	lsls	r3, r1, #6
 80033d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033d8:	0182      	lsls	r2, r0, #6
 80033da:	1a12      	subs	r2, r2, r0
 80033dc:	eb63 0301 	sbc.w	r3, r3, r1
 80033e0:	f04f 0000 	mov.w	r0, #0
 80033e4:	f04f 0100 	mov.w	r1, #0
 80033e8:	00d9      	lsls	r1, r3, #3
 80033ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ee:	00d0      	lsls	r0, r2, #3
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	eb12 0208 	adds.w	r2, r2, r8
 80033f8:	eb43 0309 	adc.w	r3, r3, r9
 80033fc:	f04f 0000 	mov.w	r0, #0
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	0259      	lsls	r1, r3, #9
 8003406:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800340a:	0250      	lsls	r0, r2, #9
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	461a      	mov	r2, r3
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f7fc ff0c 	bl	8000238 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4613      	mov	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e04a      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	461a      	mov	r2, r3
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	f240 10ff 	movw	r0, #511	; 0x1ff
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	ea02 0400 	and.w	r4, r2, r0
 8003442:	ea03 0501 	and.w	r5, r3, r1
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	014b      	lsls	r3, r1, #5
 8003454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003458:	0142      	lsls	r2, r0, #5
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	1b00      	subs	r0, r0, r4
 8003460:	eb61 0105 	sbc.w	r1, r1, r5
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	018b      	lsls	r3, r1, #6
 800346e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003472:	0182      	lsls	r2, r0, #6
 8003474:	1a12      	subs	r2, r2, r0
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	f04f 0000 	mov.w	r0, #0
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	00d9      	lsls	r1, r3, #3
 8003484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003488:	00d0      	lsls	r0, r2, #3
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	1912      	adds	r2, r2, r4
 8003490:	eb45 0303 	adc.w	r3, r5, r3
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	0299      	lsls	r1, r3, #10
 800349e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034a2:	0290      	lsls	r0, r2, #10
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	f7fc fec0 	bl	8000238 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	3301      	adds	r3, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	60bb      	str	r3, [r7, #8]
      break;
 80034da:	e002      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034de:	60bb      	str	r3, [r7, #8]
      break;
 80034e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e2:	68bb      	ldr	r3, [r7, #8]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	007a1200 	.word	0x007a1200

080034fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_GetHCLKFreq+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003518:	f7ff fff0 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0a9b      	lsrs	r3, r3, #10
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800
 8003538:	08005a94 	.word	0x08005a94

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003540:	f7ff ffdc 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0b5b      	lsrs	r3, r3, #13
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	08005a94 	.word	0x08005a94

08003564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a68      	ldr	r2, [pc, #416]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	4964      	ldr	r1, [pc, #400]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d017      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	4959      	ldr	r1, [pc, #356]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d017      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035fa:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	494a      	ldr	r1, [pc, #296]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003618:	d101      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 808b 	beq.w	800375e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a39      	ldr	r2, [pc, #228]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
 8003654:	4b37      	ldr	r3, [pc, #220]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003660:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fd fee8 	bl	8001440 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fd fee4 	bl	8001440 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e38f      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003692:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d035      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d02e      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036b0:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036d2:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036d8:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d114      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd feac 	bl	8001440 <HAL_GetTick>
 80036e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd fea8 	bl	8001440 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e351      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ee      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371a:	d111      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800372a:	400b      	ands	r3, r1
 800372c:	4901      	ldr	r1, [pc, #4]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
 8003732:	e00b      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003734:	40023800 	.word	0x40023800
 8003738:	40007000 	.word	0x40007000
 800373c:	0ffffcff 	.word	0x0ffffcff
 8003740:	4bb3      	ldr	r3, [pc, #716]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4ab2      	ldr	r2, [pc, #712]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003746:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800374a:	6093      	str	r3, [r2, #8]
 800374c:	4bb0      	ldr	r3, [pc, #704]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003758:	49ad      	ldr	r1, [pc, #692]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375a:	4313      	orrs	r3, r2
 800375c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800376a:	4ba9      	ldr	r3, [pc, #676]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003770:	4aa7      	ldr	r2, [pc, #668]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003776:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800377a:	4ba5      	ldr	r3, [pc, #660]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	49a2      	ldr	r1, [pc, #648]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003798:	4b9d      	ldr	r3, [pc, #628]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a6:	499a      	ldr	r1, [pc, #616]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ba:	4b95      	ldr	r3, [pc, #596]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c8:	4991      	ldr	r1, [pc, #580]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037dc:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	4989      	ldr	r1, [pc, #548]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037fe:	4b84      	ldr	r3, [pc, #528]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4980      	ldr	r1, [pc, #512]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003820:	4b7b      	ldr	r3, [pc, #492]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	4978      	ldr	r1, [pc, #480]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003842:	4b73      	ldr	r3, [pc, #460]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f023 020c 	bic.w	r2, r3, #12
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	496f      	ldr	r1, [pc, #444]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	4967      	ldr	r1, [pc, #412]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003886:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	495e      	ldr	r1, [pc, #376]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	4956      	ldr	r1, [pc, #344]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ca:	4b51      	ldr	r3, [pc, #324]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038ec:	4b48      	ldr	r3, [pc, #288]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	4945      	ldr	r1, [pc, #276]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	493c      	ldr	r1, [pc, #240]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003930:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393e:	4934      	ldr	r1, [pc, #208]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003952:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003960:	492b      	ldr	r1, [pc, #172]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800396c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003970:	d101      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003982:	2301      	movs	r3, #1
 8003984:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003992:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a0:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c4:	4912      	ldr	r1, [pc, #72]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039d8:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	4909      	ldr	r1, [pc, #36]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	e002      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	4986      	ldr	r1, [pc, #536]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a28:	4b81      	ldr	r3, [pc, #516]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a38:	497d      	ldr	r1, [pc, #500]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d006      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80d6 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a54:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fcee 	bl	8001440 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a68:	f7fd fcea 	bl	8001440 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e195      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7a:	4b6d      	ldr	r3, [pc, #436]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d021      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11d      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a9a:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aa8:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	0e1b      	lsrs	r3, r3, #24
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	019a      	lsls	r2, r3, #6
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	071b      	lsls	r3, r3, #28
 8003ace:	4958      	ldr	r1, [pc, #352]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02e      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b00:	d129      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b02:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b10:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b16:	0f1b      	lsrs	r3, r3, #28
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	493e      	ldr	r1, [pc, #248]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b3e:	4b3c      	ldr	r3, [pc, #240]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b44:	f023 021f 	bic.w	r2, r3, #31
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	4938      	ldr	r1, [pc, #224]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01d      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b62:	4b33      	ldr	r3, [pc, #204]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	0e1b      	lsrs	r3, r3, #24
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b76:	0f1b      	lsrs	r3, r3, #28
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	019a      	lsls	r2, r3, #6
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	061b      	lsls	r3, r3, #24
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	071b      	lsls	r3, r3, #28
 8003b96:	4926      	ldr	r1, [pc, #152]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	019a      	lsls	r2, r3, #6
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	071b      	lsls	r3, r3, #28
 8003bc6:	491a      	ldr	r1, [pc, #104]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bda:	f7fd fc31 	bl	8001440 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003be2:	f7fd fc2d 	bl	8001440 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	; 0x64
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f040 80ce 	bne.w	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd fc14 	bl	8001440 <HAL_GetTick>
 8003c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c1c:	f7fd fc10 	bl	8001440 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d904      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0bb      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c40:	d0ec      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02e      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d12a      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c78:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	0f1b      	lsrs	r3, r3, #28
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	019a      	lsls	r2, r3, #6
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	071b      	lsls	r3, r3, #28
 8003c9e:	4944      	ldr	r1, [pc, #272]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	493d      	ldr	r1, [pc, #244]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd4:	d11d      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	0f1b      	lsrs	r3, r3, #28
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	019a      	lsls	r2, r3, #6
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	4929      	ldr	r1, [pc, #164]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	0e1b      	lsrs	r3, r3, #24
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d2c:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	019a      	lsls	r2, r3, #6
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	071b      	lsls	r3, r3, #28
 8003d52:	4917      	ldr	r1, [pc, #92]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	4911      	ldr	r1, [pc, #68]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7c:	f7fd fb60 	bl	8001440 <HAL_GetTick>
 8003d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d84:	f7fd fb5c 	bl	8001440 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e007      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da2:	d1ef      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e040      	b.n	8003e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd f9e2 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fc18 	bl	8004628 <UART_SetConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fe6e 	bl	8004aec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fef5 	bl	8004c30 <UART_CheckIdleState>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	f040 8081 	bne.w	8003f6c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_Transmit+0x26>
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e079      	b.n	8003f6e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Transmit+0x38>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e072      	b.n	8003f6e <HAL_UART_Transmit+0x11e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2221      	movs	r2, #33	; 0x21
 8003e9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9e:	f7fd facf 	bl	8001440 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_UART_Transmit+0x80>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ee0:	e02c      	b.n	8003f3c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fee8 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e038      	b.n	8003f6e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3302      	adds	r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e007      	b.n	8003f2a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1cc      	bne.n	8003ee2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 feb5 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e005      	b.n	8003f6e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b08a      	sub	sp, #40	; 0x28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d13d      	bne.n	8004008 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_UART_Receive_IT+0x22>
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e036      	b.n	800400a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Receive_IT+0x34>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e02f      	b.n	800400a <HAL_UART_Receive_IT+0x94>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d018      	beq.n	8003ff8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	69f9      	ldr	r1, [r7, #28]
 8003fea:	6a3a      	ldr	r2, [r7, #32]
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 ff24 	bl	8004e4c <UART_Start_Receive_IT>
 8004004:	4603      	mov	r3, r0
 8004006:	e000      	b.n	800400a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b0ba      	sub	sp, #232	; 0xe8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800403a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800403e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004042:	4013      	ands	r3, r2
 8004044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d115      	bne.n	800407c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00f      	beq.n	800407c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 82a4 	beq.w	80045ba <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
      }
      return;
 800407a:	e29e      	b.n	80045ba <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800407c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8117 	beq.w	80042b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004092:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004096:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_UART_IRQHandler+0x298>)
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 810a 	beq.w	80042b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d011      	beq.n	80040d0 <HAL_UART_IRQHandler+0xbc>
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d011      	beq.n	8004100 <HAL_UART_IRQHandler+0xec>
 80040dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2202      	movs	r2, #2
 80040ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d011      	beq.n	8004130 <HAL_UART_IRQHandler+0x11c>
 800410c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2204      	movs	r2, #4
 800411e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d017      	beq.n	800416c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800414c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2208      	movs	r2, #8
 800415a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004162:	f043 0208 	orr.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800416c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <HAL_UART_IRQHandler+0x18a>
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800418c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 820a 	beq.w	80045be <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d005      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d04f      	beq.n	8004296 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fef2 	bl	8004fe0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d141      	bne.n	800428e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800423a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800424e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1d9      	bne.n	800420a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <HAL_UART_IRQHandler+0x29c>)
 8004264:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe f907 	bl	800247e <HAL_DMA_Abort_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00f      	b.n	80042a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9ae 	bl	80045e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e00b      	b.n	80042a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9aa 	bl	80045e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	e007      	b.n	80042a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9a6 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042a4:	e18b      	b.n	80045be <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a6:	bf00      	nop
    return;
 80042a8:	e189      	b.n	80045be <HAL_UART_IRQHandler+0x5aa>
 80042aa:	bf00      	nop
 80042ac:	04000120 	.word	0x04000120
 80042b0:	080050a7 	.word	0x080050a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 8144 	bne.w	8004546 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 813d 	beq.w	8004546 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8136 	beq.w	8004546 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2210      	movs	r2, #16
 80042e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	f040 80b2 	bne.w	8004456 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 815d 	beq.w	80045c2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800430e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004312:	429a      	cmp	r2, r3
 8004314:	f080 8155 	bcs.w	80045c2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800431e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	f000 8085 	beq.w	800443a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800435a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800435e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1da      	bne.n	8004330 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800438a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3308      	adds	r3, #8
 800439a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800439e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e1      	bne.n	800437a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e3      	bne.n	80043b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800441c:	65bb      	str	r3, [r7, #88]	; 0x58
 800441e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e4      	bne.n	80043fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd ffb2 	bl	800239e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004446:	b29b      	uxth	r3, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	b29b      	uxth	r3, r3
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8d4 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004454:	e0b5      	b.n	80045c2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004462:	b29b      	uxth	r3, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a7 	beq.w	80045c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80a2 	beq.w	80045c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e4      	bne.n	8004482 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044dc:	633a      	str	r2, [r7, #48]	; 0x30
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e3      	bne.n	80044b8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0310 	bic.w	r3, r3, #16
 8004516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	617b      	str	r3, [r7, #20]
   return(result);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e4      	bne.n	8004502 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800453c:	4619      	mov	r1, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f85c 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004544:	e03f      	b.n	80045c6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <HAL_UART_IRQHandler+0x55c>
 8004552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f853 	bl	8004614 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800456e:	e02d      	b.n	80045cc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01c      	beq.n	80045ca <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
    }
    return;
 8004598:	e017      	b.n	80045ca <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d012      	beq.n	80045cc <HAL_UART_IRQHandler+0x5b8>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fd8d 	bl	80050d2 <UART_EndTransmit_IT>
    return;
 80045b8:	e008      	b.n	80045cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80045ba:	bf00      	nop
 80045bc:	e006      	b.n	80045cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80045ca:	bf00      	nop
  }

}
 80045cc:	37e8      	adds	r7, #232	; 0xe8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop

080045d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4ba7      	ldr	r3, [pc, #668]	; (80048f0 <UART_SetConfig+0x2c8>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	430b      	orrs	r3, r1
 800465e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a95      	ldr	r2, [pc, #596]	; (80048f4 <UART_SetConfig+0x2cc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d120      	bne.n	80046e6 <UART_SetConfig+0xbe>
 80046a4:	4b94      	ldr	r3, [pc, #592]	; (80048f8 <UART_SetConfig+0x2d0>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d816      	bhi.n	80046e0 <UART_SetConfig+0xb8>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x90>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046d5 	.word	0x080046d5
 80046c0:	080046cf 	.word	0x080046cf
 80046c4:	080046db 	.word	0x080046db
 80046c8:	2301      	movs	r3, #1
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e14f      	b.n	800496e <UART_SetConfig+0x346>
 80046ce:	2302      	movs	r3, #2
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e14c      	b.n	800496e <UART_SetConfig+0x346>
 80046d4:	2304      	movs	r3, #4
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e149      	b.n	800496e <UART_SetConfig+0x346>
 80046da:	2308      	movs	r3, #8
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e146      	b.n	800496e <UART_SetConfig+0x346>
 80046e0:	2310      	movs	r3, #16
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e143      	b.n	800496e <UART_SetConfig+0x346>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a84      	ldr	r2, [pc, #528]	; (80048fc <UART_SetConfig+0x2d4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d132      	bne.n	8004756 <UART_SetConfig+0x12e>
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <UART_SetConfig+0x2d0>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d828      	bhi.n	8004750 <UART_SetConfig+0x128>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0xdc>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004739 	.word	0x08004739
 8004708:	08004751 	.word	0x08004751
 800470c:	08004751 	.word	0x08004751
 8004710:	08004751 	.word	0x08004751
 8004714:	08004745 	.word	0x08004745
 8004718:	08004751 	.word	0x08004751
 800471c:	08004751 	.word	0x08004751
 8004720:	08004751 	.word	0x08004751
 8004724:	0800473f 	.word	0x0800473f
 8004728:	08004751 	.word	0x08004751
 800472c:	08004751 	.word	0x08004751
 8004730:	08004751 	.word	0x08004751
 8004734:	0800474b 	.word	0x0800474b
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e117      	b.n	800496e <UART_SetConfig+0x346>
 800473e:	2302      	movs	r3, #2
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e114      	b.n	800496e <UART_SetConfig+0x346>
 8004744:	2304      	movs	r3, #4
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e111      	b.n	800496e <UART_SetConfig+0x346>
 800474a:	2308      	movs	r3, #8
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e10e      	b.n	800496e <UART_SetConfig+0x346>
 8004750:	2310      	movs	r3, #16
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e10b      	b.n	800496e <UART_SetConfig+0x346>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a69      	ldr	r2, [pc, #420]	; (8004900 <UART_SetConfig+0x2d8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d120      	bne.n	80047a2 <UART_SetConfig+0x17a>
 8004760:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <UART_SetConfig+0x2d0>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800476a:	2b30      	cmp	r3, #48	; 0x30
 800476c:	d013      	beq.n	8004796 <UART_SetConfig+0x16e>
 800476e:	2b30      	cmp	r3, #48	; 0x30
 8004770:	d814      	bhi.n	800479c <UART_SetConfig+0x174>
 8004772:	2b20      	cmp	r3, #32
 8004774:	d009      	beq.n	800478a <UART_SetConfig+0x162>
 8004776:	2b20      	cmp	r3, #32
 8004778:	d810      	bhi.n	800479c <UART_SetConfig+0x174>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x15c>
 800477e:	2b10      	cmp	r3, #16
 8004780:	d006      	beq.n	8004790 <UART_SetConfig+0x168>
 8004782:	e00b      	b.n	800479c <UART_SetConfig+0x174>
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e0f1      	b.n	800496e <UART_SetConfig+0x346>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e0ee      	b.n	800496e <UART_SetConfig+0x346>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e0eb      	b.n	800496e <UART_SetConfig+0x346>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e0e8      	b.n	800496e <UART_SetConfig+0x346>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e0e5      	b.n	800496e <UART_SetConfig+0x346>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a57      	ldr	r2, [pc, #348]	; (8004904 <UART_SetConfig+0x2dc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d120      	bne.n	80047ee <UART_SetConfig+0x1c6>
 80047ac:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <UART_SetConfig+0x2d0>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047b6:	2bc0      	cmp	r3, #192	; 0xc0
 80047b8:	d013      	beq.n	80047e2 <UART_SetConfig+0x1ba>
 80047ba:	2bc0      	cmp	r3, #192	; 0xc0
 80047bc:	d814      	bhi.n	80047e8 <UART_SetConfig+0x1c0>
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d009      	beq.n	80047d6 <UART_SetConfig+0x1ae>
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d810      	bhi.n	80047e8 <UART_SetConfig+0x1c0>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <UART_SetConfig+0x1a8>
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d006      	beq.n	80047dc <UART_SetConfig+0x1b4>
 80047ce:	e00b      	b.n	80047e8 <UART_SetConfig+0x1c0>
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e0cb      	b.n	800496e <UART_SetConfig+0x346>
 80047d6:	2302      	movs	r3, #2
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e0c8      	b.n	800496e <UART_SetConfig+0x346>
 80047dc:	2304      	movs	r3, #4
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e0c5      	b.n	800496e <UART_SetConfig+0x346>
 80047e2:	2308      	movs	r3, #8
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e0c2      	b.n	800496e <UART_SetConfig+0x346>
 80047e8:	2310      	movs	r3, #16
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e0bf      	b.n	800496e <UART_SetConfig+0x346>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a45      	ldr	r2, [pc, #276]	; (8004908 <UART_SetConfig+0x2e0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0x21c>
 80047f8:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <UART_SetConfig+0x2d0>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004806:	d017      	beq.n	8004838 <UART_SetConfig+0x210>
 8004808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480c:	d817      	bhi.n	800483e <UART_SetConfig+0x216>
 800480e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004812:	d00b      	beq.n	800482c <UART_SetConfig+0x204>
 8004814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004818:	d811      	bhi.n	800483e <UART_SetConfig+0x216>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <UART_SetConfig+0x1fe>
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d006      	beq.n	8004832 <UART_SetConfig+0x20a>
 8004824:	e00b      	b.n	800483e <UART_SetConfig+0x216>
 8004826:	2300      	movs	r3, #0
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e0a0      	b.n	800496e <UART_SetConfig+0x346>
 800482c:	2302      	movs	r3, #2
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e09d      	b.n	800496e <UART_SetConfig+0x346>
 8004832:	2304      	movs	r3, #4
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e09a      	b.n	800496e <UART_SetConfig+0x346>
 8004838:	2308      	movs	r3, #8
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e097      	b.n	800496e <UART_SetConfig+0x346>
 800483e:	2310      	movs	r3, #16
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e094      	b.n	800496e <UART_SetConfig+0x346>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a30      	ldr	r2, [pc, #192]	; (800490c <UART_SetConfig+0x2e4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d125      	bne.n	800489a <UART_SetConfig+0x272>
 800484e:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <UART_SetConfig+0x2d0>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800485c:	d017      	beq.n	800488e <UART_SetConfig+0x266>
 800485e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004862:	d817      	bhi.n	8004894 <UART_SetConfig+0x26c>
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004868:	d00b      	beq.n	8004882 <UART_SetConfig+0x25a>
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486e:	d811      	bhi.n	8004894 <UART_SetConfig+0x26c>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x254>
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004878:	d006      	beq.n	8004888 <UART_SetConfig+0x260>
 800487a:	e00b      	b.n	8004894 <UART_SetConfig+0x26c>
 800487c:	2301      	movs	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e075      	b.n	800496e <UART_SetConfig+0x346>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e072      	b.n	800496e <UART_SetConfig+0x346>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e06f      	b.n	800496e <UART_SetConfig+0x346>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e06c      	b.n	800496e <UART_SetConfig+0x346>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e069      	b.n	800496e <UART_SetConfig+0x346>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <UART_SetConfig+0x2e8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d137      	bne.n	8004914 <UART_SetConfig+0x2ec>
 80048a4:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <UART_SetConfig+0x2d0>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048b2:	d017      	beq.n	80048e4 <UART_SetConfig+0x2bc>
 80048b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048b8:	d817      	bhi.n	80048ea <UART_SetConfig+0x2c2>
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d00b      	beq.n	80048d8 <UART_SetConfig+0x2b0>
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d811      	bhi.n	80048ea <UART_SetConfig+0x2c2>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <UART_SetConfig+0x2aa>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ce:	d006      	beq.n	80048de <UART_SetConfig+0x2b6>
 80048d0:	e00b      	b.n	80048ea <UART_SetConfig+0x2c2>
 80048d2:	2300      	movs	r3, #0
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e04a      	b.n	800496e <UART_SetConfig+0x346>
 80048d8:	2302      	movs	r3, #2
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e047      	b.n	800496e <UART_SetConfig+0x346>
 80048de:	2304      	movs	r3, #4
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e044      	b.n	800496e <UART_SetConfig+0x346>
 80048e4:	2308      	movs	r3, #8
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e041      	b.n	800496e <UART_SetConfig+0x346>
 80048ea:	2310      	movs	r3, #16
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e03e      	b.n	800496e <UART_SetConfig+0x346>
 80048f0:	efff69f3 	.word	0xefff69f3
 80048f4:	40011000 	.word	0x40011000
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40004400 	.word	0x40004400
 8004900:	40004800 	.word	0x40004800
 8004904:	40004c00 	.word	0x40004c00
 8004908:	40005000 	.word	0x40005000
 800490c:	40011400 	.word	0x40011400
 8004910:	40007800 	.word	0x40007800
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a71      	ldr	r2, [pc, #452]	; (8004ae0 <UART_SetConfig+0x4b8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d125      	bne.n	800496a <UART_SetConfig+0x342>
 800491e:	4b71      	ldr	r3, [pc, #452]	; (8004ae4 <UART_SetConfig+0x4bc>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004928:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800492c:	d017      	beq.n	800495e <UART_SetConfig+0x336>
 800492e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004932:	d817      	bhi.n	8004964 <UART_SetConfig+0x33c>
 8004934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004938:	d00b      	beq.n	8004952 <UART_SetConfig+0x32a>
 800493a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493e:	d811      	bhi.n	8004964 <UART_SetConfig+0x33c>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <UART_SetConfig+0x324>
 8004944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004948:	d006      	beq.n	8004958 <UART_SetConfig+0x330>
 800494a:	e00b      	b.n	8004964 <UART_SetConfig+0x33c>
 800494c:	2300      	movs	r3, #0
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e00d      	b.n	800496e <UART_SetConfig+0x346>
 8004952:	2302      	movs	r3, #2
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e00a      	b.n	800496e <UART_SetConfig+0x346>
 8004958:	2304      	movs	r3, #4
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e007      	b.n	800496e <UART_SetConfig+0x346>
 800495e:	2308      	movs	r3, #8
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e004      	b.n	800496e <UART_SetConfig+0x346>
 8004964:	2310      	movs	r3, #16
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e001      	b.n	800496e <UART_SetConfig+0x346>
 800496a:	2310      	movs	r3, #16
 800496c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004976:	d15a      	bne.n	8004a2e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004978:	7ffb      	ldrb	r3, [r7, #31]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d827      	bhi.n	80049ce <UART_SetConfig+0x3a6>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x35c>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fdb4 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61b8      	str	r0, [r7, #24]
        break;
 80049ae:	e013      	b.n	80049d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fe fdc4 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 80049b4:	61b8      	str	r0, [r7, #24]
        break;
 80049b6:	e00f      	b.n	80049d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <UART_SetConfig+0x4c0>)
 80049ba:	61bb      	str	r3, [r7, #24]
        break;
 80049bc:	e00c      	b.n	80049d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fe fcbb 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80049c2:	61b8      	str	r0, [r7, #24]
        break;
 80049c4:	e008      	b.n	80049d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	61bb      	str	r3, [r7, #24]
        break;
 80049cc:	e004      	b.n	80049d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	77bb      	strb	r3, [r7, #30]
        break;
 80049d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d074      	beq.n	8004ac8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	005a      	lsls	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	d916      	bls.n	8004a28 <UART_SetConfig+0x400>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d212      	bcs.n	8004a28 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f023 030f 	bic.w	r3, r3, #15
 8004a0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	89fa      	ldrh	r2, [r7, #14]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	e04f      	b.n	8004ac8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77bb      	strb	r3, [r7, #30]
 8004a2c:	e04c      	b.n	8004ac8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2e:	7ffb      	ldrb	r3, [r7, #31]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d828      	bhi.n	8004a86 <UART_SetConfig+0x45e>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x414>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a77 	.word	0x08004a77
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a87 	.word	0x08004a87
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7fe fd58 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8004a64:	61b8      	str	r0, [r7, #24]
        break;
 8004a66:	e013      	b.n	8004a90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe fd68 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8004a6c:	61b8      	str	r0, [r7, #24]
        break;
 8004a6e:	e00f      	b.n	8004a90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <UART_SetConfig+0x4c0>)
 8004a72:	61bb      	str	r3, [r7, #24]
        break;
 8004a74:	e00c      	b.n	8004a90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe fc5f 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8004a7a:	61b8      	str	r0, [r7, #24]
        break;
 8004a7c:	e008      	b.n	8004a90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	61bb      	str	r3, [r7, #24]
        break;
 8004a84:	e004      	b.n	8004a90 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a8e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	085a      	lsrs	r2, r3, #1
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b0f      	cmp	r3, #15
 8004aae:	d909      	bls.n	8004ac4 <UART_SetConfig+0x49c>
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d205      	bcs.n	8004ac4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	e001      	b.n	8004ac8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ad4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40007c00 	.word	0x40007c00
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	00f42400 	.word	0x00f42400

08004aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bea:	d10a      	bne.n	8004c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c40:	f7fc fbfe 	bl	8001440 <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d10e      	bne.n	8004c72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f82d 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e023      	b.n	8004cba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d10e      	bne.n	8004c9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f817 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e00d      	b.n	8004cba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b09c      	sub	sp, #112	; 0x70
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	e0a5      	b.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	f000 80a1 	beq.w	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fc fbaf 	bl	8001440 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d13e      	bne.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d08:	667b      	str	r3, [r7, #100]	; 0x64
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d46:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e067      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d04f      	beq.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8e:	d147      	bne.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	613b      	str	r3, [r7, #16]
   return(result);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dec:	623a      	str	r2, [r7, #32]
 8004dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	69f9      	ldr	r1, [r7, #28]
 8004df2:	6a3a      	ldr	r2, [r7, #32]
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e010      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f43f af4a 	beq.w	8004cd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3770      	adds	r7, #112	; 0x70
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b097      	sub	sp, #92	; 0x5c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	d10e      	bne.n	8004e9e <UART_Start_Receive_IT+0x52>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <UART_Start_Receive_IT+0x48>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e92:	e02d      	b.n	8004ef0 <UART_Start_Receive_IT+0xa4>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e9c:	e028      	b.n	8004ef0 <UART_Start_Receive_IT+0xa4>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <UART_Start_Receive_IT+0x76>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <UART_Start_Receive_IT+0x6c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	22ff      	movs	r2, #255	; 0xff
 8004eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eb6:	e01b      	b.n	8004ef0 <UART_Start_Receive_IT+0xa4>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	227f      	movs	r2, #127	; 0x7f
 8004ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ec0:	e016      	b.n	8004ef0 <UART_Start_Receive_IT+0xa4>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eca:	d10d      	bne.n	8004ee8 <UART_Start_Receive_IT+0x9c>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <UART_Start_Receive_IT+0x92>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	227f      	movs	r2, #127	; 0x7f
 8004ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004edc:	e008      	b.n	8004ef0 <UART_Start_Receive_IT+0xa4>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	223f      	movs	r2, #63	; 0x3f
 8004ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ee6:	e003      	b.n	8004ef0 <UART_Start_Receive_IT+0xa4>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2222      	movs	r2, #34	; 0x22
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	657b      	str	r3, [r7, #84]	; 0x54
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3a:	d107      	bne.n	8004f4c <UART_Start_Receive_IT+0x100>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <UART_Start_Receive_IT+0x18c>)
 8004f48:	665a      	str	r2, [r3, #100]	; 0x64
 8004f4a:	e002      	b.n	8004f52 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <UART_Start_Receive_IT+0x190>)
 8004f50:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d019      	beq.n	8004f96 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
 8004f82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e6      	bne.n	8004f62 <UART_Start_Receive_IT+0x116>
 8004f94:	e018      	b.n	8004fc8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f043 0320 	orr.w	r3, r3, #32
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	69f9      	ldr	r1, [r7, #28]
 8004fba:	6a3a      	ldr	r2, [r7, #32]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e6      	bne.n	8004f96 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	375c      	adds	r7, #92	; 0x5c
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	08005283 	.word	0x08005283
 8004fdc:	08005127 	.word	0x08005127

08004fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b095      	sub	sp, #84	; 0x54
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	643b      	str	r3, [r7, #64]	; 0x40
 8005008:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800500c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e6      	bne.n	8004fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	61fb      	str	r3, [r7, #28]
   return(result);
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3308      	adds	r3, #8
 8005038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005052:	2b01      	cmp	r3, #1
 8005054:	d118      	bne.n	8005088 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	60bb      	str	r3, [r7, #8]
   return(result);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f023 0310 	bic.w	r3, r3, #16
 800506a:	647b      	str	r3, [r7, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	613b      	str	r3, [r7, #16]
   return(result);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	665a      	str	r2, [r3, #100]	; 0x64
}
 800509a:	bf00      	nop
 800509c:	3754      	adds	r7, #84	; 0x54
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff fa8f 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b088      	sub	sp, #32
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	613b      	str	r3, [r7, #16]
   return(result);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fa5b 	bl	80045d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511e:	bf00      	nop
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b096      	sub	sp, #88	; 0x58
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005134:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800513c:	2b22      	cmp	r3, #34	; 0x22
 800513e:	f040 8094 	bne.w	800526a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800514c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005150:	b2d9      	uxtb	r1, r3
 8005152:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005156:	b2da      	uxtb	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	400a      	ands	r2, r1
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d177      	bne.n	800527a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e6      	bne.n	800518a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3308      	adds	r3, #8
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	623b      	str	r3, [r7, #32]
   return(result);
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051dc:	633a      	str	r2, [r7, #48]	; 0x30
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005200:	2b01      	cmp	r3, #1
 8005202:	d12e      	bne.n	8005262 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	60fb      	str	r3, [r7, #12]
   return(result);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0310 	bic.w	r3, r3, #16
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	617b      	str	r3, [r7, #20]
   return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b10      	cmp	r3, #16
 8005248:	d103      	bne.n	8005252 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2210      	movs	r2, #16
 8005250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff f9ce 	bl	80045fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005260:	e00b      	b.n	800527a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fb fc20 	bl	8000aa8 <HAL_UART_RxCpltCallback>
}
 8005268:	e007      	b.n	800527a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0208 	orr.w	r2, r2, #8
 8005278:	619a      	str	r2, [r3, #24]
}
 800527a:	bf00      	nop
 800527c:	3758      	adds	r7, #88	; 0x58
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b096      	sub	sp, #88	; 0x58
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005298:	2b22      	cmp	r3, #34	; 0x22
 800529a:	f040 8094 	bne.w	80053c6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80052ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80052b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052b6:	4013      	ands	r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	1c9a      	adds	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d177      	bne.n	80053d6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
 8005306:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800530a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	61fb      	str	r3, [r7, #28]
   return(result);
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535c:	2b01      	cmp	r3, #1
 800535e:	d12e      	bne.n	80053be <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60bb      	str	r3, [r7, #8]
   return(result);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	647b      	str	r3, [r7, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6979      	ldr	r1, [r7, #20]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	613b      	str	r3, [r7, #16]
   return(result);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e6      	bne.n	8005366 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d103      	bne.n	80053ae <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2210      	movs	r2, #16
 80053ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff f920 	bl	80045fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053bc:	e00b      	b.n	80053d6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb fb72 	bl	8000aa8 <HAL_UART_RxCpltCallback>
}
 80053c4:	e007      	b.n	80053d6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0208 	orr.w	r2, r2, #8
 80053d4:	619a      	str	r2, [r3, #24]
}
 80053d6:	bf00      	nop
 80053d8:	3758      	adds	r7, #88	; 0x58
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e0:	b084      	sub	sp, #16
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	f107 001c 	add.w	r0, r7, #28
 80053ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d120      	bne.n	800543a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <USB_CoreInit+0xac>)
 800540a:	4013      	ands	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800541c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa92 	bl	8005958 <USB_CoreReset>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
 8005438:	e010      	b.n	800545c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fa86 	bl	8005958 <USB_CoreReset>
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10b      	bne.n	800547a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f043 0206 	orr.w	r2, r3, #6
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005486:	b004      	add	sp, #16
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	ffbdffbf 	.word	0xffbdffbf

08005490 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 0201 	bic.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d115      	bne.n	8005500 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054e0:	2001      	movs	r0, #1
 80054e2:	f7fb ffb9 	bl	8001458 <HAL_Delay>
      ms++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa25 	bl	800593c <USB_GetMode>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d01e      	beq.n	8005536 <USB_SetCurrentMode+0x84>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b31      	cmp	r3, #49	; 0x31
 80054fc:	d9f0      	bls.n	80054e0 <USB_SetCurrentMode+0x2e>
 80054fe:	e01a      	b.n	8005536 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d115      	bne.n	8005532 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005512:	2001      	movs	r0, #1
 8005514:	f7fb ffa0 	bl	8001458 <HAL_Delay>
      ms++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa0c 	bl	800593c <USB_GetMode>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <USB_SetCurrentMode+0x84>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b31      	cmp	r3, #49	; 0x31
 800552e:	d9f0      	bls.n	8005512 <USB_SetCurrentMode+0x60>
 8005530:	e001      	b.n	8005536 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e005      	b.n	8005542 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b32      	cmp	r3, #50	; 0x32
 800553a:	d101      	bne.n	8005540 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800554c:	b084      	sub	sp, #16
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800555a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e009      	b.n	8005580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3340      	adds	r3, #64	; 0x40
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	2200      	movs	r2, #0
 8005578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	3301      	adds	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b0e      	cmp	r3, #14
 8005584:	d9f2      	bls.n	800556c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11c      	bne.n	80055c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e005      	b.n	80055d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	4619      	mov	r1, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	461a      	mov	r2, r3
 80055ee:	680b      	ldr	r3, [r1, #0]
 80055f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055fe:	2100      	movs	r1, #0
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f961 	bl	80058c8 <USB_SetDevSpeed>
 8005606:	e008      	b.n	800561a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005608:	2101      	movs	r1, #1
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f95c 	bl	80058c8 <USB_SetDevSpeed>
 8005610:	e003      	b.n	800561a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005612:	2103      	movs	r1, #3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f957 	bl	80058c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800561a:	2110      	movs	r1, #16
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8f3 	bl	8005808 <USB_FlushTxFifo>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f91d 	bl	800586c <USB_FlushRxFifo>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	461a      	mov	r2, r3
 8005644:	2300      	movs	r3, #0
 8005646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	461a      	mov	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	e043      	b.n	80056ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567c:	d118      	bne.n	80056b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e013      	b.n	80056c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e008      	b.n	80056c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3301      	adds	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d3b7      	bcc.n	8005666 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	e043      	b.n	8005784 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800570e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005712:	d118      	bne.n	8005746 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e013      	b.n	8005758 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e008      	b.n	8005758 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800577c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3b7      	bcc.n	80056fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800579a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f043 0210 	orr.w	r2, r3, #16
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <USB_DevInit+0x2b4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <USB_DevInit+0x2b8>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057fc:	b004      	add	sp, #16
 80057fe:	4770      	bx	lr
 8005800:	803c3800 	.word	0x803c3800
 8005804:	40000004 	.word	0x40000004

08005808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	4a12      	ldr	r2, [pc, #72]	; (8005868 <USB_FlushTxFifo+0x60>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e01a      	b.n	800585c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	daf3      	bge.n	8005816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	019b      	lsls	r3, r3, #6
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <USB_FlushTxFifo+0x60>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e006      	b.n	800585c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	d0f1      	beq.n	800583e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	00030d40 	.word	0x00030d40

0800586c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <USB_FlushRxFifo+0x58>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e017      	b.n	80058b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	daf3      	bge.n	8005878 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2210      	movs	r2, #16
 8005898:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3301      	adds	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <USB_FlushRxFifo+0x58>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e006      	b.n	80058b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d0f1      	beq.n	800589a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	00030d40 	.word	0x00030d40

080058c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005914:	f023 0303 	bic.w	r3, r3, #3
 8005918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0301 	and.w	r3, r3, #1
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <USB_CoreReset+0x60>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e01a      	b.n	80059aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	daf3      	bge.n	8005964 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f043 0201 	orr.w	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <USB_CoreReset+0x60>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e006      	b.n	80059aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d0f1      	beq.n	800598c <USB_CoreReset+0x34>

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	00030d40 	.word	0x00030d40

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	4d0d      	ldr	r5, [pc, #52]	; (80059f4 <__libc_init_array+0x38>)
 80059c0:	4c0d      	ldr	r4, [pc, #52]	; (80059f8 <__libc_init_array+0x3c>)
 80059c2:	1b64      	subs	r4, r4, r5
 80059c4:	10a4      	asrs	r4, r4, #2
 80059c6:	2600      	movs	r6, #0
 80059c8:	42a6      	cmp	r6, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	4d0b      	ldr	r5, [pc, #44]	; (80059fc <__libc_init_array+0x40>)
 80059ce:	4c0c      	ldr	r4, [pc, #48]	; (8005a00 <__libc_init_array+0x44>)
 80059d0:	f000 f820 	bl	8005a14 <_init>
 80059d4:	1b64      	subs	r4, r4, r5
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	2600      	movs	r6, #0
 80059da:	42a6      	cmp	r6, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e4:	4798      	blx	r3
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ee:	4798      	blx	r3
 80059f0:	3601      	adds	r6, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	08005aa4 	.word	0x08005aa4
 80059f8:	08005aa4 	.word	0x08005aa4
 80059fc:	08005aa4 	.word	0x08005aa4
 8005a00:	08005aa8 	.word	0x08005aa8

08005a04 <memset>:
 8005a04:	4402      	add	r2, r0
 8005a06:	4603      	mov	r3, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <_init>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	bf00      	nop
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr

08005a20 <_fini>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr
