
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a220  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a420  0800a420  0001a420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8e4  0800a8e4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8e4  0800a8e4  0001a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8ec  0800a8ec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f0  0800a8f0  0001a8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  200001f4  0800aae8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800aae8  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198c2  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ce  00000000  00000000  00039ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9e2  00000000  00000000  0003f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019731  00000000  00000000  0006a1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001021ce  00000000  00000000  00083923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185af1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006540  00000000  00000000  00185b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a408 	.word	0x0800a408

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800a408 	.word	0x0800a408

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_CAN1_Init+0x68>)
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <MX_CAN1_Init+0x6c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_CAN1_Init+0x68>)
 8000600:	2210      	movs	r2, #16
 8000602:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_CAN1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_CAN1_Init+0x68>)
 800060c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000610:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_CAN1_Init+0x68>)
 8000614:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000618:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_CAN1_Init+0x68>)
 800061c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000620:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_CAN1_Init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_CAN1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_CAN1_Init+0x68>)
 8000648:	f002 f802 	bl	8002650 <HAL_CAN_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000652:	f001 fad7 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000210 	.word	0x20000210
 8000660:	40006400 	.word	0x40006400

08000664 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <HAL_CAN_MspInit+0x8c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d12f      	bne.n	80006e6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 800068c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006b6:	2303      	movs	r3, #3
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c6:	2309      	movs	r3, #9
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_CAN_MspInit+0x94>)
 80006d2:	f002 ffcf 	bl	8003674 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2014      	movs	r0, #20
 80006dc:	f002 ff01 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006e0:	2014      	movs	r0, #20
 80006e2:	f002 ff1a 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40006400 	.word	0x40006400
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020c00 	.word	0x40020c00

080006fc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a6b      	ldr	r2, [pc, #428]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a65      	ldr	r2, [pc, #404]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a5f      	ldr	r2, [pc, #380]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a59      	ldr	r2, [pc, #356]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4d      	ldr	r2, [pc, #308]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a8:	4847      	ldr	r0, [pc, #284]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 80007aa:	f003 f90f 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4846      	ldr	r0, [pc, #280]	; (80008cc <MX_GPIO_Init+0x1d0>)
 80007b4:	f003 f90a 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4840      	ldr	r0, [pc, #256]	; (80008d0 <MX_GPIO_Init+0x1d4>)
 80007d0:	f002 ff50 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x1d4>)
 80007f0:	f002 ff40 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f4:	2386      	movs	r3, #134	; 0x86
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4831      	ldr	r0, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x1d8>)
 8000810:	f002 ff30 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000814:	f244 0381 	movw	r3, #16513	; 0x4081
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4826      	ldr	r0, [pc, #152]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 800082e:	f002 ff21 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000844:	230b      	movs	r3, #11
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 8000850:	f002 ff10 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_GPIO_Init+0x1d0>)
 800086c:	f002 ff02 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0x1d0>)
 8000884:	f002 fef6 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000888:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_GPIO_Init+0x1d0>)
 80008a6:	f002 fee5 	bl	8003674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f002 fe17 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f002 fe30 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021800 	.word	0x40021800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <fnLEDsErrorState+0x28>)
 80008e2:	f003 f873 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <fnLEDsErrorState+0x28>)
 80008ec:	f003 f86e 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <fnLEDsErrorState+0x28>)
 80008f8:	f003 f868 	bl	80039cc <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020400 	.word	0x40020400

08000904 <fnInit>:


//INIT FUNCTION
void fnInit(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000908:	4bc6      	ldr	r3, [pc, #792]	; (8000c24 <fnInit+0x320>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b50      	cmp	r3, #80	; 0x50
 800090e:	f200 833a 	bhi.w	8000f86 <fnInit+0x682>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <fnInit+0x14>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a5d 	.word	0x08000a5d
 800091c:	08000f87 	.word	0x08000f87
 8000920:	08000f87 	.word	0x08000f87
 8000924:	08000f87 	.word	0x08000f87
 8000928:	08000f87 	.word	0x08000f87
 800092c:	08000aa5 	.word	0x08000aa5
 8000930:	08000f87 	.word	0x08000f87
 8000934:	08000f87 	.word	0x08000f87
 8000938:	08000f87 	.word	0x08000f87
 800093c:	08000f87 	.word	0x08000f87
 8000940:	08000aed 	.word	0x08000aed
 8000944:	08000f87 	.word	0x08000f87
 8000948:	08000f87 	.word	0x08000f87
 800094c:	08000f87 	.word	0x08000f87
 8000950:	08000f87 	.word	0x08000f87
 8000954:	08000f87 	.word	0x08000f87
 8000958:	08000f87 	.word	0x08000f87
 800095c:	08000f87 	.word	0x08000f87
 8000960:	08000f87 	.word	0x08000f87
 8000964:	08000f87 	.word	0x08000f87
 8000968:	08000b5b 	.word	0x08000b5b
 800096c:	08000f87 	.word	0x08000f87
 8000970:	08000f87 	.word	0x08000f87
 8000974:	08000f87 	.word	0x08000f87
 8000978:	08000f87 	.word	0x08000f87
 800097c:	08000bc9 	.word	0x08000bc9
 8000980:	08000f87 	.word	0x08000f87
 8000984:	08000f87 	.word	0x08000f87
 8000988:	08000f87 	.word	0x08000f87
 800098c:	08000f87 	.word	0x08000f87
 8000990:	08000c61 	.word	0x08000c61
 8000994:	08000f87 	.word	0x08000f87
 8000998:	08000f87 	.word	0x08000f87
 800099c:	08000f87 	.word	0x08000f87
 80009a0:	08000f87 	.word	0x08000f87
 80009a4:	08000f87 	.word	0x08000f87
 80009a8:	08000f87 	.word	0x08000f87
 80009ac:	08000f87 	.word	0x08000f87
 80009b0:	08000f87 	.word	0x08000f87
 80009b4:	08000f87 	.word	0x08000f87
 80009b8:	08000ccf 	.word	0x08000ccf
 80009bc:	08000f87 	.word	0x08000f87
 80009c0:	08000f87 	.word	0x08000f87
 80009c4:	08000f87 	.word	0x08000f87
 80009c8:	08000f87 	.word	0x08000f87
 80009cc:	08000f87 	.word	0x08000f87
 80009d0:	08000f87 	.word	0x08000f87
 80009d4:	08000f87 	.word	0x08000f87
 80009d8:	08000f87 	.word	0x08000f87
 80009dc:	08000f87 	.word	0x08000f87
 80009e0:	08000d3d 	.word	0x08000d3d
 80009e4:	08000f87 	.word	0x08000f87
 80009e8:	08000f87 	.word	0x08000f87
 80009ec:	08000f87 	.word	0x08000f87
 80009f0:	08000f87 	.word	0x08000f87
 80009f4:	08000dab 	.word	0x08000dab
 80009f8:	08000f87 	.word	0x08000f87
 80009fc:	08000f87 	.word	0x08000f87
 8000a00:	08000f87 	.word	0x08000f87
 8000a04:	08000f87 	.word	0x08000f87
 8000a08:	08000e27 	.word	0x08000e27
 8000a0c:	08000f87 	.word	0x08000f87
 8000a10:	08000f87 	.word	0x08000f87
 8000a14:	08000f87 	.word	0x08000f87
 8000a18:	08000f87 	.word	0x08000f87
 8000a1c:	08000f87 	.word	0x08000f87
 8000a20:	08000f87 	.word	0x08000f87
 8000a24:	08000f87 	.word	0x08000f87
 8000a28:	08000f87 	.word	0x08000f87
 8000a2c:	08000f87 	.word	0x08000f87
 8000a30:	08000e95 	.word	0x08000e95
 8000a34:	08000f87 	.word	0x08000f87
 8000a38:	08000f87 	.word	0x08000f87
 8000a3c:	08000f87 	.word	0x08000f87
 8000a40:	08000f87 	.word	0x08000f87
 8000a44:	08000f87 	.word	0x08000f87
 8000a48:	08000f87 	.word	0x08000f87
 8000a4c:	08000f87 	.word	0x08000f87
 8000a50:	08000f87 	.word	0x08000f87
 8000a54:	08000f87 	.word	0x08000f87
 8000a58:	08000f49 	.word	0x08000f49

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000a5c:	4b72      	ldr	r3, [pc, #456]	; (8000c28 <fnInit+0x324>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a62:	4b71      	ldr	r3, [pc, #452]	; (8000c28 <fnInit+0x324>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000a68:	4b70      	ldr	r3, [pc, #448]	; (8000c2c <fnInit+0x328>)
 8000a6a:	2282      	movs	r2, #130	; 0x82
 8000a6c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	; (8000c2c <fnInit+0x328>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a74:	4b6e      	ldr	r3, [pc, #440]	; (8000c30 <fnInit+0x32c>)
 8000a76:	4a6d      	ldr	r2, [pc, #436]	; (8000c2c <fnInit+0x328>)
 8000a78:	496b      	ldr	r1, [pc, #428]	; (8000c28 <fnInit+0x324>)
 8000a7a:	486e      	ldr	r0, [pc, #440]	; (8000c34 <fnInit+0x330>)
 8000a7c:	f002 f814 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <fnInit+0x18c>
			fnLEDsErrorState();
 8000a86:	f7ff ff27 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000a8a:	f001 f8bb 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 8000a8e:	e27a      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 5;
 8000a90:	4b64      	ldr	r3, [pc, #400]	; (8000c24 <fnInit+0x320>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	2204      	movs	r2, #4
 8000a9a:	4967      	ldr	r1, [pc, #412]	; (8000c38 <fnInit+0x334>)
 8000a9c:	4867      	ldr	r0, [pc, #412]	; (8000c3c <fnInit+0x338>)
 8000a9e:	f004 ffe7 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000aa2:	e270      	b.n	8000f86 <fnInit+0x682>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000aa4:	4b60      	ldr	r3, [pc, #384]	; (8000c28 <fnInit+0x324>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000aaa:	4b5f      	ldr	r3, [pc, #380]	; (8000c28 <fnInit+0x324>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 8000ab0:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <fnInit+0x328>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000ab6:	4b5d      	ldr	r3, [pc, #372]	; (8000c2c <fnInit+0x328>)
 8000ab8:	220a      	movs	r2, #10
 8000aba:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000abc:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <fnInit+0x32c>)
 8000abe:	4a5b      	ldr	r2, [pc, #364]	; (8000c2c <fnInit+0x328>)
 8000ac0:	4959      	ldr	r1, [pc, #356]	; (8000c28 <fnInit+0x324>)
 8000ac2:	485c      	ldr	r0, [pc, #368]	; (8000c34 <fnInit+0x330>)
 8000ac4:	f001 fff0 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <fnInit+0x1d4>
			fnLEDsErrorState();
 8000ace:	f7ff ff03 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000ad2:	f001 f897 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000ad6:	e256      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 10;
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <fnInit+0x320>)
 8000ada:	220a      	movs	r2, #10
 8000adc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000ade:	2364      	movs	r3, #100	; 0x64
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4957      	ldr	r1, [pc, #348]	; (8000c40 <fnInit+0x33c>)
 8000ae4:	4855      	ldr	r0, [pc, #340]	; (8000c3c <fnInit+0x338>)
 8000ae6:	f004 ffc3 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000aea:	e24c      	b.n	8000f86 <fnInit+0x682>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000aec:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <fnInit+0x324>)
 8000aee:	f240 620a 	movw	r2, #1546	; 0x60a
 8000af2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000af4:	4b4c      	ldr	r3, [pc, #304]	; (8000c28 <fnInit+0x324>)
 8000af6:	2208      	movs	r2, #8
 8000af8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000afa:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <fnInit+0x328>)
 8000afc:	2222      	movs	r2, #34	; 0x22
 8000afe:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b00:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <fnInit+0x328>)
 8000b02:	2240      	movs	r2, #64	; 0x40
 8000b04:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b06:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <fnInit+0x328>)
 8000b08:	2260      	movs	r2, #96	; 0x60
 8000b0a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b0c:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <fnInit+0x328>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000b12:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <fnInit+0x328>)
 8000b14:	2206      	movs	r2, #6
 8000b16:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b18:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <fnInit+0x328>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <fnInit+0x328>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <fnInit+0x328>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b2a:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <fnInit+0x32c>)
 8000b2c:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <fnInit+0x328>)
 8000b2e:	493e      	ldr	r1, [pc, #248]	; (8000c28 <fnInit+0x324>)
 8000b30:	4840      	ldr	r0, [pc, #256]	; (8000c34 <fnInit+0x330>)
 8000b32:	f001 ffb9 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <fnInit+0x242>
			fnLEDsErrorState();
 8000b3c:	f7ff fecc 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000b40:	f001 f860 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000b44:	e21f      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 20;
 8000b46:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <fnInit+0x320>)
 8000b48:	2214      	movs	r2, #20
 8000b4a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2204      	movs	r2, #4
 8000b50:	493c      	ldr	r1, [pc, #240]	; (8000c44 <fnInit+0x340>)
 8000b52:	483a      	ldr	r0, [pc, #232]	; (8000c3c <fnInit+0x338>)
 8000b54:	f004 ff8c 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000b58:	e215      	b.n	8000f86 <fnInit+0x682>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000b5a:	4b33      	ldr	r3, [pc, #204]	; (8000c28 <fnInit+0x324>)
 8000b5c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b60:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b62:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <fnInit+0x324>)
 8000b64:	2208      	movs	r2, #8
 8000b66:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <fnInit+0x328>)
 8000b6a:	2222      	movs	r2, #34	; 0x22
 8000b6c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <fnInit+0x328>)
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b74:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <fnInit+0x328>)
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <fnInit+0x328>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <fnInit+0x328>)
 8000b82:	2207      	movs	r2, #7
 8000b84:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <fnInit+0x328>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <fnInit+0x328>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <fnInit+0x328>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <fnInit+0x32c>)
 8000b9a:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <fnInit+0x328>)
 8000b9c:	4922      	ldr	r1, [pc, #136]	; (8000c28 <fnInit+0x324>)
 8000b9e:	4825      	ldr	r0, [pc, #148]	; (8000c34 <fnInit+0x330>)
 8000ba0:	f001 ff82 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <fnInit+0x2b0>
			fnLEDsErrorState();
 8000baa:	f7ff fe95 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000bae:	f001 f829 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000bb2:	e1e8      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 25;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <fnInit+0x320>)
 8000bb6:	2219      	movs	r2, #25
 8000bb8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	4922      	ldr	r1, [pc, #136]	; (8000c48 <fnInit+0x344>)
 8000bc0:	481e      	ldr	r0, [pc, #120]	; (8000c3c <fnInit+0x338>)
 8000bc2:	f004 ff55 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000bc6:	e1de      	b.n	8000f86 <fnInit+0x682>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <fnInit+0x324>)
 8000bca:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bce:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <fnInit+0x324>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <fnInit+0x328>)
 8000bd8:	2222      	movs	r2, #34	; 0x22
 8000bda:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <fnInit+0x328>)
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <fnInit+0x328>)
 8000be4:	2260      	movs	r2, #96	; 0x60
 8000be6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <fnInit+0x328>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <fnInit+0x328>)
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <fnInit+0x328>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <fnInit+0x328>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <fnInit+0x328>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <fnInit+0x32c>)
 8000c08:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <fnInit+0x328>)
 8000c0a:	4907      	ldr	r1, [pc, #28]	; (8000c28 <fnInit+0x324>)
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <fnInit+0x330>)
 8000c0e:	f001 ff4b 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d019      	beq.n	8000c4c <fnInit+0x348>
			fnLEDsErrorState();
 8000c18:	f7ff fe5e 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000c1c:	f000 fff2 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000c20:	e1b1      	b.n	8000f86 <fnInit+0x682>
 8000c22:	bf00      	nop
 8000c24:	20000002 	.word	0x20000002
 8000c28:	20000250 	.word	0x20000250
 8000c2c:	20000268 	.word	0x20000268
 8000c30:	20000270 	.word	0x20000270
 8000c34:	20000210 	.word	0x20000210
 8000c38:	0800a420 	.word	0x0800a420
 8000c3c:	20000450 	.word	0x20000450
 8000c40:	0800a428 	.word	0x0800a428
 8000c44:	0800a430 	.word	0x0800a430
 8000c48:	0800a438 	.word	0x0800a438
			iMachineStatus = 30;
 8000c4c:	4bb0      	ldr	r3, [pc, #704]	; (8000f10 <fnInit+0x60c>)
 8000c4e:	221e      	movs	r2, #30
 8000c50:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	2204      	movs	r2, #4
 8000c56:	49af      	ldr	r1, [pc, #700]	; (8000f14 <fnInit+0x610>)
 8000c58:	48af      	ldr	r0, [pc, #700]	; (8000f18 <fnInit+0x614>)
 8000c5a:	f004 ff09 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000c5e:	e192      	b.n	8000f86 <fnInit+0x682>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000c60:	4bae      	ldr	r3, [pc, #696]	; (8000f1c <fnInit+0x618>)
 8000c62:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c66:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c68:	4bac      	ldr	r3, [pc, #688]	; (8000f1c <fnInit+0x618>)
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c6e:	4bac      	ldr	r3, [pc, #688]	; (8000f20 <fnInit+0x61c>)
 8000c70:	2222      	movs	r2, #34	; 0x22
 8000c72:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000c74:	4baa      	ldr	r3, [pc, #680]	; (8000f20 <fnInit+0x61c>)
 8000c76:	2260      	movs	r2, #96	; 0x60
 8000c78:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c7a:	4ba9      	ldr	r3, [pc, #676]	; (8000f20 <fnInit+0x61c>)
 8000c7c:	2260      	movs	r2, #96	; 0x60
 8000c7e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c80:	4ba7      	ldr	r3, [pc, #668]	; (8000f20 <fnInit+0x61c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000c86:	4ba6      	ldr	r3, [pc, #664]	; (8000f20 <fnInit+0x61c>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c8c:	4ba4      	ldr	r3, [pc, #656]	; (8000f20 <fnInit+0x61c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c92:	4ba3      	ldr	r3, [pc, #652]	; (8000f20 <fnInit+0x61c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c98:	4ba1      	ldr	r3, [pc, #644]	; (8000f20 <fnInit+0x61c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c9e:	4ba1      	ldr	r3, [pc, #644]	; (8000f24 <fnInit+0x620>)
 8000ca0:	4a9f      	ldr	r2, [pc, #636]	; (8000f20 <fnInit+0x61c>)
 8000ca2:	499e      	ldr	r1, [pc, #632]	; (8000f1c <fnInit+0x618>)
 8000ca4:	48a0      	ldr	r0, [pc, #640]	; (8000f28 <fnInit+0x624>)
 8000ca6:	f001 feff 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <fnInit+0x3b6>
			fnLEDsErrorState();
 8000cb0:	f7ff fe12 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000cb4:	f000 ffa6 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000cb8:	e165      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 40;
 8000cba:	4b95      	ldr	r3, [pc, #596]	; (8000f10 <fnInit+0x60c>)
 8000cbc:	2228      	movs	r2, #40	; 0x28
 8000cbe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4999      	ldr	r1, [pc, #612]	; (8000f2c <fnInit+0x628>)
 8000cc6:	4894      	ldr	r0, [pc, #592]	; (8000f18 <fnInit+0x614>)
 8000cc8:	f004 fed2 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000ccc:	e15b      	b.n	8000f86 <fnInit+0x682>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000cce:	4b93      	ldr	r3, [pc, #588]	; (8000f1c <fnInit+0x618>)
 8000cd0:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cd4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cd6:	4b91      	ldr	r3, [pc, #580]	; (8000f1c <fnInit+0x618>)
 8000cd8:	2208      	movs	r2, #8
 8000cda:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000cdc:	4b90      	ldr	r3, [pc, #576]	; (8000f20 <fnInit+0x61c>)
 8000cde:	2222      	movs	r2, #34	; 0x22
 8000ce0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000ce2:	4b8f      	ldr	r3, [pc, #572]	; (8000f20 <fnInit+0x61c>)
 8000ce4:	227a      	movs	r2, #122	; 0x7a
 8000ce6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ce8:	4b8d      	ldr	r3, [pc, #564]	; (8000f20 <fnInit+0x61c>)
 8000cea:	2260      	movs	r2, #96	; 0x60
 8000cec:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000cee:	4b8c      	ldr	r3, [pc, #560]	; (8000f20 <fnInit+0x61c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000cf4:	4b8a      	ldr	r3, [pc, #552]	; (8000f20 <fnInit+0x61c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cfa:	4b89      	ldr	r3, [pc, #548]	; (8000f20 <fnInit+0x61c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d00:	4b87      	ldr	r3, [pc, #540]	; (8000f20 <fnInit+0x61c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d06:	4b86      	ldr	r3, [pc, #536]	; (8000f20 <fnInit+0x61c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d0c:	4b85      	ldr	r3, [pc, #532]	; (8000f24 <fnInit+0x620>)
 8000d0e:	4a84      	ldr	r2, [pc, #528]	; (8000f20 <fnInit+0x61c>)
 8000d10:	4982      	ldr	r1, [pc, #520]	; (8000f1c <fnInit+0x618>)
 8000d12:	4885      	ldr	r0, [pc, #532]	; (8000f28 <fnInit+0x624>)
 8000d14:	f001 fec8 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <fnInit+0x424>
			fnLEDsErrorState();
 8000d1e:	f7ff fddb 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000d22:	f000 ff6f 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000d26:	e12e      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 50;
 8000d28:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <fnInit+0x60c>)
 8000d2a:	2232      	movs	r2, #50	; 0x32
 8000d2c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2204      	movs	r2, #4
 8000d32:	497f      	ldr	r1, [pc, #508]	; (8000f30 <fnInit+0x62c>)
 8000d34:	4878      	ldr	r0, [pc, #480]	; (8000f18 <fnInit+0x614>)
 8000d36:	f004 fe9b 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000d3a:	e124      	b.n	8000f86 <fnInit+0x682>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000d3c:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <fnInit+0x618>)
 8000d3e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d42:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d44:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <fnInit+0x618>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d4a:	4b75      	ldr	r3, [pc, #468]	; (8000f20 <fnInit+0x61c>)
 8000d4c:	2222      	movs	r2, #34	; 0x22
 8000d4e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d50:	4b73      	ldr	r3, [pc, #460]	; (8000f20 <fnInit+0x61c>)
 8000d52:	2240      	movs	r2, #64	; 0x40
 8000d54:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d56:	4b72      	ldr	r3, [pc, #456]	; (8000f20 <fnInit+0x61c>)
 8000d58:	2260      	movs	r2, #96	; 0x60
 8000d5a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d5c:	4b70      	ldr	r3, [pc, #448]	; (8000f20 <fnInit+0x61c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000d62:	4b6f      	ldr	r3, [pc, #444]	; (8000f20 <fnInit+0x61c>)
 8000d64:	221f      	movs	r2, #31
 8000d66:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d68:	4b6d      	ldr	r3, [pc, #436]	; (8000f20 <fnInit+0x61c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <fnInit+0x61c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d74:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <fnInit+0x61c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <fnInit+0x620>)
 8000d7c:	4a68      	ldr	r2, [pc, #416]	; (8000f20 <fnInit+0x61c>)
 8000d7e:	4967      	ldr	r1, [pc, #412]	; (8000f1c <fnInit+0x618>)
 8000d80:	4869      	ldr	r0, [pc, #420]	; (8000f28 <fnInit+0x624>)
 8000d82:	f001 fe91 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <fnInit+0x492>
			fnLEDsErrorState();
 8000d8c:	f7ff fda4 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000d90:	f000 ff38 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000d94:	e0f7      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 55;
 8000d96:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <fnInit+0x60c>)
 8000d98:	2237      	movs	r2, #55	; 0x37
 8000d9a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000d9c:	2364      	movs	r3, #100	; 0x64
 8000d9e:	2204      	movs	r2, #4
 8000da0:	4964      	ldr	r1, [pc, #400]	; (8000f34 <fnInit+0x630>)
 8000da2:	485d      	ldr	r0, [pc, #372]	; (8000f18 <fnInit+0x614>)
 8000da4:	f004 fe64 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000da8:	e0ed      	b.n	8000f86 <fnInit+0x682>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000daa:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <fnInit+0x618>)
 8000dac:	f240 620a 	movw	r2, #1546	; 0x60a
 8000db0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000db2:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <fnInit+0x618>)
 8000db4:	2208      	movs	r2, #8
 8000db6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000db8:	4b59      	ldr	r3, [pc, #356]	; (8000f20 <fnInit+0x61c>)
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000dbe:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <fnInit+0x61c>)
 8000dc0:	2241      	movs	r2, #65	; 0x41
 8000dc2:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000dc4:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <fnInit+0x61c>)
 8000dc6:	2260      	movs	r2, #96	; 0x60
 8000dc8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000dca:	4b55      	ldr	r3, [pc, #340]	; (8000f20 <fnInit+0x61c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000dd0:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <fnInit+0x61c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000dd6:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <fnInit+0x61c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ddc:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <fnInit+0x61c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000de2:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <fnInit+0x61c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000de8:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <fnInit+0x620>)
 8000dea:	4a4d      	ldr	r2, [pc, #308]	; (8000f20 <fnInit+0x61c>)
 8000dec:	494b      	ldr	r1, [pc, #300]	; (8000f1c <fnInit+0x618>)
 8000dee:	484e      	ldr	r0, [pc, #312]	; (8000f28 <fnInit+0x624>)
 8000df0:	f001 fe5a 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <fnInit+0x500>
			fnLEDsErrorState();
 8000dfa:	f7ff fd6d 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000dfe:	f000 ff01 	bl	8001c04 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
		}
		break;
 8000e02:	e0bd      	b.n	8000f80 <fnInit+0x67c>
		else if (RxData[5] & 0b10000) {
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <fnInit+0x634>)
 8000e06:	795b      	ldrb	r3, [r3, #5]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80b7 	beq.w	8000f80 <fnInit+0x67c>
			iMachineStatus = 60;
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <fnInit+0x60c>)
 8000e14:	223c      	movs	r2, #60	; 0x3c
 8000e16:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
 8000e18:	2364      	movs	r3, #100	; 0x64
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4947      	ldr	r1, [pc, #284]	; (8000f3c <fnInit+0x638>)
 8000e1e:	483e      	ldr	r0, [pc, #248]	; (8000f18 <fnInit+0x614>)
 8000e20:	f004 fe26 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000e24:	e0ac      	b.n	8000f80 <fnInit+0x67c>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <fnInit+0x618>)
 8000e28:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e2c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <fnInit+0x618>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <fnInit+0x61c>)
 8000e36:	2222      	movs	r2, #34	; 0x22
 8000e38:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000e3a:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <fnInit+0x61c>)
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <fnInit+0x61c>)
 8000e42:	2260      	movs	r2, #96	; 0x60
 8000e44:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <fnInit+0x61c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <fnInit+0x61c>)
 8000e4e:	220f      	movs	r2, #15
 8000e50:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <fnInit+0x61c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <fnInit+0x61c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <fnInit+0x61c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <fnInit+0x620>)
 8000e66:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <fnInit+0x61c>)
 8000e68:	492c      	ldr	r1, [pc, #176]	; (8000f1c <fnInit+0x618>)
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <fnInit+0x624>)
 8000e6c:	f001 fe1c 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <fnInit+0x57c>
			fnLEDsErrorState();
 8000e76:	f7ff fd2f 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000e7a:	f000 fec3 	bl	8001c04 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000e7e:	e082      	b.n	8000f86 <fnInit+0x682>
			iMachineStatus = 70;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <fnInit+0x60c>)
 8000e82:	2246      	movs	r2, #70	; 0x46
 8000e84:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	2204      	movs	r2, #4
 8000e8a:	492d      	ldr	r1, [pc, #180]	; (8000f40 <fnInit+0x63c>)
 8000e8c:	4822      	ldr	r0, [pc, #136]	; (8000f18 <fnInit+0x614>)
 8000e8e:	f004 fdef 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000e92:	e078      	b.n	8000f86 <fnInit+0x682>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <fnInit+0x618>)
 8000e96:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e9a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <fnInit+0x618>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <fnInit+0x61c>)
 8000ea4:	2240      	movs	r2, #64	; 0x40
 8000ea6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <fnInit+0x61c>)
 8000eaa:	2241      	movs	r2, #65	; 0x41
 8000eac:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <fnInit+0x61c>)
 8000eb0:	2260      	movs	r2, #96	; 0x60
 8000eb2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <fnInit+0x61c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <fnInit+0x61c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <fnInit+0x61c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <fnInit+0x61c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <fnInit+0x61c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <fnInit+0x620>)
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <fnInit+0x61c>)
 8000ed6:	4911      	ldr	r1, [pc, #68]	; (8000f1c <fnInit+0x618>)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <fnInit+0x624>)
 8000eda:	f001 fde5 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <fnInit+0x5ea>
			fnLEDsErrorState();
 8000ee4:	f7ff fcf8 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000ee8:	f000 fe8c 	bl	8001c04 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000eec:	e04a      	b.n	8000f84 <fnInit+0x680>
		else if (RxData[5] & 0b00100) {
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <fnInit+0x634>)
 8000ef0:	795b      	ldrb	r3, [r3, #5]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d044      	beq.n	8000f84 <fnInit+0x680>
			iMachineStatus = 80;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <fnInit+0x60c>)
 8000efc:	2250      	movs	r2, #80	; 0x50
 8000efe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	2204      	movs	r2, #4
 8000f04:	490f      	ldr	r1, [pc, #60]	; (8000f44 <fnInit+0x640>)
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <fnInit+0x614>)
 8000f08:	f004 fdb2 	bl	8005a70 <HAL_UART_Transmit>
		break;
 8000f0c:	e03a      	b.n	8000f84 <fnInit+0x680>
 8000f0e:	bf00      	nop
 8000f10:	20000002 	.word	0x20000002
 8000f14:	0800a440 	.word	0x0800a440
 8000f18:	20000450 	.word	0x20000450
 8000f1c:	20000250 	.word	0x20000250
 8000f20:	20000268 	.word	0x20000268
 8000f24:	20000270 	.word	0x20000270
 8000f28:	20000210 	.word	0x20000210
 8000f2c:	0800a448 	.word	0x0800a448
 8000f30:	0800a450 	.word	0x0800a450
 8000f34:	0800a458 	.word	0x0800a458
 8000f38:	20000290 	.word	0x20000290
 8000f3c:	0800a460 	.word	0x0800a460
 8000f40:	0800a468 	.word	0x0800a468
 8000f44:	0800a470 	.word	0x0800a470

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <fnInit+0x688>)
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	2b27      	cmp	r3, #39	; 0x27
 8000f4e:	d112      	bne.n	8000f76 <fnInit+0x672>
			iMachineStatus = 1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <fnInit+0x68c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <fnInit+0x690>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000f5c:	213c      	movs	r1, #60	; 0x3c
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <fnInit+0x694>)
 8000f60:	f004 f9f0 	bl	8005344 <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000f64:	f000 f876 	bl	8001054 <fnEncCalibration>

			HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	490b      	ldr	r1, [pc, #44]	; (8000f9c <fnInit+0x698>)
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <fnInit+0x69c>)
 8000f70:	f004 fd7e 	bl	8005a70 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000f74:	e007      	b.n	8000f86 <fnInit+0x682>
			fnLEDsErrorState();
 8000f76:	f7ff fcaf 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000f7a:	f000 fe43 	bl	8001c04 <Error_Handler>
		break;
 8000f7e:	e002      	b.n	8000f86 <fnInit+0x682>
		break;
 8000f80:	bf00      	nop
 8000f82:	e000      	b.n	8000f86 <fnInit+0x682>
		break;
 8000f84:	bf00      	nop
	}
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000290 	.word	0x20000290
 8000f90:	20000002 	.word	0x20000002
 8000f94:	20000003 	.word	0x20000003
 8000f98:	200002d4 	.word	0x200002d4
 8000f9c:	0800a478 	.word	0x0800a478
 8000fa0:	20000450 	.word	0x20000450

08000fa4 <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <fnEncCounts2Angle+0x3c>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <fnEncCounts2Angle+0x40>)
 8000fc4:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <fnEncCounts2Angle+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	ee07 3a90 	vmov	s15, r3
}
 8000fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200002c8 	.word	0x200002c8

08000fe8 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <fnEncReadCount+0x5c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <fnEncReadCount+0x60>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <fnEncReadCount+0x60>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d208      	bcs.n	800101a <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8001008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <fnEncReadCount+0x60>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <fnEncReadCount+0x64>)
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	e003      	b.n	8001022 <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <fnEncReadCount+0x60>)
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <fnEncReadCount+0x64>)
 8001020:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount)/2;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <fnEncReadCount+0x64>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ffbc 	bl	8000fa4 <fnEncCounts2Angle>
 800102c:	eeb0 7a40 	vmov.f32	s14, s0
 8001030:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <fnEncReadCount+0x68>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200002d4 	.word	0x200002d4
 8001048:	200002c0 	.word	0x200002c0
 800104c:	200002c2 	.word	0x200002c2
 8001050:	200002c4 	.word	0x200002c4

08001054 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <fnEncCalibration+0x14>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 800105e:	f7ff ffc3 	bl	8000fe8 <fnEncReadCount>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400

0800106c <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b5a      	cmp	r3, #90	; 0x5a
 800107c:	d901      	bls.n	8001082 <fnMoveAbsolute+0x16>
		iNumber = 90;
 800107e:	235a      	movs	r3, #90	; 0x5a
 8001080:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <fnMoveAbsolute+0xc4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d108      	bne.n	800109e <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e00e      	b.n	80010bc <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <fnMoveAbsolute+0xc4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d107      	bne.n	80010b8 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a22      	ldr	r2, [pc, #136]	; (8001134 <fnMoveAbsolute+0xc8>)
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e001      	b.n	80010bc <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d132      	bne.n	8001128 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <fnMoveAbsolute+0xcc>)
 80010c4:	f240 620a 	movw	r2, #1546	; 0x60a
 80010c8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <fnMoveAbsolute+0xcc>)
 80010cc:	2208      	movs	r2, #8
 80010ce:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <fnMoveAbsolute+0xd0>)
 80010d2:	2222      	movs	r2, #34	; 0x22
 80010d4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <fnMoveAbsolute+0xd0>)
 80010d8:	227a      	movs	r2, #122	; 0x7a
 80010da:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <fnMoveAbsolute+0xd0>)
 80010de:	2260      	movs	r2, #96	; 0x60
 80010e0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <fnMoveAbsolute+0xd0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <fnMoveAbsolute+0xd0>)
 80010ee:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <fnMoveAbsolute+0xd0>)
 80010f8:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0c1b      	lsrs	r3, r3, #16
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <fnMoveAbsolute+0xd0>)
 8001102:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0e1b      	lsrs	r3, r3, #24
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <fnMoveAbsolute+0xd0>)
 800110c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <fnMoveAbsolute+0xd4>)
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <fnMoveAbsolute+0xd0>)
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <fnMoveAbsolute+0xcc>)
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <fnMoveAbsolute+0xd8>)
 8001116:	f001 fcc7 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 8001120:	f7ff fbda 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001124:	f000 fd6e 	bl	8001c04 <Error_Handler>
		}

	}
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000001 	.word	0x20000001
 8001134:	fffffc18 	.word	0xfffffc18
 8001138:	20000250 	.word	0x20000250
 800113c:	20000268 	.word	0x20000268
 8001140:	20000270 	.word	0x20000270
 8001144:	20000210 	.word	0x20000210

08001148 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	switch (iSingleMachineStatus){
 800114c:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <fnSingleMotionAction+0xfc>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b1e      	cmp	r3, #30
 8001152:	d040      	beq.n	80011d6 <fnSingleMotionAction+0x8e>
 8001154:	2b1e      	cmp	r3, #30
 8001156:	dc72      	bgt.n	800123e <fnSingleMotionAction+0xf6>
 8001158:	2b0a      	cmp	r3, #10
 800115a:	d002      	beq.n	8001162 <fnSingleMotionAction+0x1a>
 800115c:	2b14      	cmp	r3, #20
 800115e:	d031      	beq.n	80011c4 <fnSingleMotionAction+0x7c>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
		}
		break;
	}
}
 8001160:	e06d      	b.n	800123e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <fnSingleMotionAction+0x100>)
 8001164:	f240 620a 	movw	r2, #1546	; 0x60a
 8001168:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <fnSingleMotionAction+0x100>)
 800116c:	2208      	movs	r2, #8
 800116e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <fnSingleMotionAction+0x104>)
 8001172:	2222      	movs	r2, #34	; 0x22
 8001174:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <fnSingleMotionAction+0x104>)
 8001178:	2240      	movs	r2, #64	; 0x40
 800117a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <fnSingleMotionAction+0x104>)
 800117e:	2260      	movs	r2, #96	; 0x60
 8001180:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <fnSingleMotionAction+0x104>)
 8001184:	2200      	movs	r2, #0
 8001186:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <fnSingleMotionAction+0x104>)
 800118a:	221f      	movs	r2, #31
 800118c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <fnSingleMotionAction+0x104>)
 8001190:	2200      	movs	r2, #0
 8001192:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <fnSingleMotionAction+0x104>)
 8001196:	2200      	movs	r2, #0
 8001198:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <fnSingleMotionAction+0x104>)
 800119c:	2200      	movs	r2, #0
 800119e:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <fnSingleMotionAction+0x108>)
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <fnSingleMotionAction+0x104>)
 80011a4:	4928      	ldr	r1, [pc, #160]	; (8001248 <fnSingleMotionAction+0x100>)
 80011a6:	482b      	ldr	r0, [pc, #172]	; (8001254 <fnSingleMotionAction+0x10c>)
 80011a8:	f001 fc7e 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d004      	beq.n	80011bc <fnSingleMotionAction+0x74>
			fnLEDsErrorState();
 80011b2:	f7ff fb91 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80011b6:	f000 fd25 	bl	8001c04 <Error_Handler>
		break;
 80011ba:	e040      	b.n	800123e <fnSingleMotionAction+0xf6>
			iSingleMachineStatus = 20;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <fnSingleMotionAction+0xfc>)
 80011be:	2214      	movs	r2, #20
 80011c0:	701a      	strb	r2, [r3, #0]
		break;
 80011c2:	e03c      	b.n	800123e <fnSingleMotionAction+0xf6>
		fnMoveAbsolute(iPosition);
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <fnSingleMotionAction+0x110>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff4f 	bl	800106c <fnMoveAbsolute>
		iSingleMachineStatus = 30;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <fnSingleMotionAction+0xfc>)
 80011d0:	221e      	movs	r2, #30
 80011d2:	701a      	strb	r2, [r3, #0]
		break;
 80011d4:	e033      	b.n	800123e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <fnSingleMotionAction+0x100>)
 80011d8:	f240 620a 	movw	r2, #1546	; 0x60a
 80011dc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <fnSingleMotionAction+0x100>)
 80011e0:	2208      	movs	r2, #8
 80011e2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <fnSingleMotionAction+0x104>)
 80011e6:	2222      	movs	r2, #34	; 0x22
 80011e8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <fnSingleMotionAction+0x104>)
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <fnSingleMotionAction+0x104>)
 80011f2:	2260      	movs	r2, #96	; 0x60
 80011f4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <fnSingleMotionAction+0x104>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <fnSingleMotionAction+0x104>)
 80011fe:	220f      	movs	r2, #15
 8001200:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <fnSingleMotionAction+0x104>)
 8001204:	2200      	movs	r2, #0
 8001206:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <fnSingleMotionAction+0x104>)
 800120a:	2200      	movs	r2, #0
 800120c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <fnSingleMotionAction+0x104>)
 8001210:	2200      	movs	r2, #0
 8001212:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <fnSingleMotionAction+0x108>)
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <fnSingleMotionAction+0x104>)
 8001218:	490b      	ldr	r1, [pc, #44]	; (8001248 <fnSingleMotionAction+0x100>)
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <fnSingleMotionAction+0x10c>)
 800121c:	f001 fc44 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <fnSingleMotionAction+0xe8>
			fnLEDsErrorState();
 8001226:	f7ff fb57 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800122a:	f000 fceb 	bl	8001c04 <Error_Handler>
		break;
 800122e:	e005      	b.n	800123c <fnSingleMotionAction+0xf4>
			iSingleMachineStatus = 100;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <fnSingleMotionAction+0xfc>)
 8001232:	2264      	movs	r2, #100	; 0x64
 8001234:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 8001236:	4809      	ldr	r0, [pc, #36]	; (800125c <fnSingleMotionAction+0x114>)
 8001238:	f003 ffae 	bl	8005198 <HAL_TIM_Base_Stop_IT>
		break;
 800123c:	bf00      	nop
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000004 	.word	0x20000004
 8001248:	20000250 	.word	0x20000250
 800124c:	20000268 	.word	0x20000268
 8001250:	20000270 	.word	0x20000270
 8001254:	20000210 	.word	0x20000210
 8001258:	200002cc 	.word	0x200002cc
 800125c:	2000036c 	.word	0x2000036c

08001260 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	switch (iSerialMachineStatus){
 8001264:	4bab      	ldr	r3, [pc, #684]	; (8001514 <fnSerialMotionAction+0x2b4>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b0a      	subs	r3, #10
 800126a:	2b1e      	cmp	r3, #30
 800126c:	f200 8150 	bhi.w	8001510 <fnSerialMotionAction+0x2b0>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <fnSerialMotionAction+0x18>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	080012f5 	.word	0x080012f5
 800127c:	08001511 	.word	0x08001511
 8001280:	08001511 	.word	0x08001511
 8001284:	08001511 	.word	0x08001511
 8001288:	08001511 	.word	0x08001511
 800128c:	08001511 	.word	0x08001511
 8001290:	08001511 	.word	0x08001511
 8001294:	08001511 	.word	0x08001511
 8001298:	08001511 	.word	0x08001511
 800129c:	08001511 	.word	0x08001511
 80012a0:	08001357 	.word	0x08001357
 80012a4:	08001511 	.word	0x08001511
 80012a8:	08001511 	.word	0x08001511
 80012ac:	08001511 	.word	0x08001511
 80012b0:	08001511 	.word	0x08001511
 80012b4:	08001369 	.word	0x08001369
 80012b8:	08001511 	.word	0x08001511
 80012bc:	08001511 	.word	0x08001511
 80012c0:	08001511 	.word	0x08001511
 80012c4:	08001511 	.word	0x08001511
 80012c8:	080013d9 	.word	0x080013d9
 80012cc:	08001511 	.word	0x08001511
 80012d0:	08001511 	.word	0x08001511
 80012d4:	08001511 	.word	0x08001511
 80012d8:	08001511 	.word	0x08001511
 80012dc:	0800143b 	.word	0x0800143b
 80012e0:	08001511 	.word	0x08001511
 80012e4:	08001511 	.word	0x08001511
 80012e8:	08001511 	.word	0x08001511
 80012ec:	08001511 	.word	0x08001511
 80012f0:	080014b5 	.word	0x080014b5
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 80012f4:	4b88      	ldr	r3, [pc, #544]	; (8001518 <fnSerialMotionAction+0x2b8>)
 80012f6:	f240 620a 	movw	r2, #1546	; 0x60a
 80012fa:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80012fc:	4b86      	ldr	r3, [pc, #536]	; (8001518 <fnSerialMotionAction+0x2b8>)
 80012fe:	2208      	movs	r2, #8
 8001300:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001302:	4b86      	ldr	r3, [pc, #536]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001304:	2222      	movs	r2, #34	; 0x22
 8001306:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001308:	4b84      	ldr	r3, [pc, #528]	; (800151c <fnSerialMotionAction+0x2bc>)
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800130e:	4b83      	ldr	r3, [pc, #524]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001310:	2260      	movs	r2, #96	; 0x60
 8001312:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001314:	4b81      	ldr	r3, [pc, #516]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001316:	2200      	movs	r2, #0
 8001318:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800131a:	4b80      	ldr	r3, [pc, #512]	; (800151c <fnSerialMotionAction+0x2bc>)
 800131c:	221f      	movs	r2, #31
 800131e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001320:	4b7e      	ldr	r3, [pc, #504]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001322:	2200      	movs	r2, #0
 8001324:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001326:	4b7d      	ldr	r3, [pc, #500]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001328:	2200      	movs	r2, #0
 800132a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800132c:	4b7b      	ldr	r3, [pc, #492]	; (800151c <fnSerialMotionAction+0x2bc>)
 800132e:	2200      	movs	r2, #0
 8001330:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001332:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <fnSerialMotionAction+0x2c0>)
 8001334:	4a79      	ldr	r2, [pc, #484]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001336:	4978      	ldr	r1, [pc, #480]	; (8001518 <fnSerialMotionAction+0x2b8>)
 8001338:	487a      	ldr	r0, [pc, #488]	; (8001524 <fnSerialMotionAction+0x2c4>)
 800133a:	f001 fbb5 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <fnSerialMotionAction+0xee>
			fnLEDsErrorState();
 8001344:	f7ff fac8 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001348:	f000 fc5c 	bl	8001c04 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 800134c:	e0e0      	b.n	8001510 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 20;
 800134e:	4b71      	ldr	r3, [pc, #452]	; (8001514 <fnSerialMotionAction+0x2b4>)
 8001350:	2214      	movs	r2, #20
 8001352:	701a      	strb	r2, [r3, #0]
		break;
 8001354:	e0dc      	b.n	8001510 <fnSerialMotionAction+0x2b0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 8001356:	4b74      	ldr	r3, [pc, #464]	; (8001528 <fnSerialMotionAction+0x2c8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe86 	bl	800106c <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 8001360:	4b6c      	ldr	r3, [pc, #432]	; (8001514 <fnSerialMotionAction+0x2b4>)
 8001362:	2219      	movs	r2, #25
 8001364:	701a      	strb	r2, [r3, #0]
		break;
 8001366:	e0d3      	b.n	8001510 <fnSerialMotionAction+0x2b0>

	case 25://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001368:	4b6b      	ldr	r3, [pc, #428]	; (8001518 <fnSerialMotionAction+0x2b8>)
 800136a:	f240 620a 	movw	r2, #1546	; 0x60a
 800136e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <fnSerialMotionAction+0x2b8>)
 8001372:	2208      	movs	r2, #8
 8001374:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001376:	4b69      	ldr	r3, [pc, #420]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800137c:	4b67      	ldr	r3, [pc, #412]	; (800151c <fnSerialMotionAction+0x2bc>)
 800137e:	2241      	movs	r2, #65	; 0x41
 8001380:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001382:	4b66      	ldr	r3, [pc, #408]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001384:	2260      	movs	r2, #96	; 0x60
 8001386:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001388:	4b64      	ldr	r3, [pc, #400]	; (800151c <fnSerialMotionAction+0x2bc>)
 800138a:	2200      	movs	r2, #0
 800138c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001394:	4b61      	ldr	r3, [pc, #388]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001396:	2200      	movs	r2, #0
 8001398:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800139a:	4b60      	ldr	r3, [pc, #384]	; (800151c <fnSerialMotionAction+0x2bc>)
 800139c:	2200      	movs	r2, #0
 800139e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80013a0:	4b5e      	ldr	r3, [pc, #376]	; (800151c <fnSerialMotionAction+0x2bc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80013a6:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <fnSerialMotionAction+0x2c0>)
 80013a8:	4a5c      	ldr	r2, [pc, #368]	; (800151c <fnSerialMotionAction+0x2bc>)
 80013aa:	495b      	ldr	r1, [pc, #364]	; (8001518 <fnSerialMotionAction+0x2b8>)
 80013ac:	485d      	ldr	r0, [pc, #372]	; (8001524 <fnSerialMotionAction+0x2c4>)
 80013ae:	f001 fb7b 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <fnSerialMotionAction+0x162>
			fnLEDsErrorState();
 80013b8:	f7ff fa8e 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80013bc:	f000 fc22 	bl	8001c04 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 80013c0:	e0a3      	b.n	800150a <fnSerialMotionAction+0x2aa>
		else if (RxData[5] & 0b10000) {
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <fnSerialMotionAction+0x2cc>)
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 809d 	beq.w	800150a <fnSerialMotionAction+0x2aa>
			iSerialMachineStatus = 30;
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <fnSerialMotionAction+0x2b4>)
 80013d2:	221e      	movs	r2, #30
 80013d4:	701a      	strb	r2, [r3, #0]
		break;
 80013d6:	e098      	b.n	800150a <fnSerialMotionAction+0x2aa>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <fnSerialMotionAction+0x2b8>)
 80013da:	f240 620a 	movw	r2, #1546	; 0x60a
 80013de:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80013e0:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <fnSerialMotionAction+0x2b8>)
 80013e2:	2208      	movs	r2, #8
 80013e4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80013e6:	4b4d      	ldr	r3, [pc, #308]	; (800151c <fnSerialMotionAction+0x2bc>)
 80013e8:	2222      	movs	r2, #34	; 0x22
 80013ea:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <fnSerialMotionAction+0x2bc>)
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <fnSerialMotionAction+0x2bc>)
 80013f4:	2260      	movs	r2, #96	; 0x60
 80013f6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80013f8:	4b48      	ldr	r3, [pc, #288]	; (800151c <fnSerialMotionAction+0x2bc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001400:	220f      	movs	r2, #15
 8001402:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001404:	4b45      	ldr	r3, [pc, #276]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001406:	2200      	movs	r2, #0
 8001408:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <fnSerialMotionAction+0x2bc>)
 800140c:	2200      	movs	r2, #0
 800140e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001412:	2200      	movs	r2, #0
 8001414:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <fnSerialMotionAction+0x2c0>)
 8001418:	4a40      	ldr	r2, [pc, #256]	; (800151c <fnSerialMotionAction+0x2bc>)
 800141a:	493f      	ldr	r1, [pc, #252]	; (8001518 <fnSerialMotionAction+0x2b8>)
 800141c:	4841      	ldr	r0, [pc, #260]	; (8001524 <fnSerialMotionAction+0x2c4>)
 800141e:	f001 fb43 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <fnSerialMotionAction+0x1d2>
			fnLEDsErrorState();
 8001428:	f7ff fa56 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800142c:	f000 fbea 	bl	8001c04 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 8001430:	e06e      	b.n	8001510 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 35;
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <fnSerialMotionAction+0x2b4>)
 8001434:	2223      	movs	r2, #35	; 0x23
 8001436:	701a      	strb	r2, [r3, #0]
		break;
 8001438:	e06a      	b.n	8001510 <fnSerialMotionAction+0x2b0>

	case 35://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <fnSerialMotionAction+0x2b8>)
 800143c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001440:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <fnSerialMotionAction+0x2b8>)
 8001444:	2208      	movs	r2, #8
 8001446:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <fnSerialMotionAction+0x2bc>)
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800144e:	4b33      	ldr	r3, [pc, #204]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001450:	2241      	movs	r2, #65	; 0x41
 8001452:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001456:	2260      	movs	r2, #96	; 0x60
 8001458:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <fnSerialMotionAction+0x2bc>)
 800145c:	2200      	movs	r2, #0
 800145e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001462:	2200      	movs	r2, #0
 8001464:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001468:	2200      	movs	r2, #0
 800146a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <fnSerialMotionAction+0x2bc>)
 800146e:	2200      	movs	r2, #0
 8001470:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <fnSerialMotionAction+0x2bc>)
 8001474:	2200      	movs	r2, #0
 8001476:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <fnSerialMotionAction+0x2c0>)
 800147a:	4a28      	ldr	r2, [pc, #160]	; (800151c <fnSerialMotionAction+0x2bc>)
 800147c:	4926      	ldr	r1, [pc, #152]	; (8001518 <fnSerialMotionAction+0x2b8>)
 800147e:	4829      	ldr	r0, [pc, #164]	; (8001524 <fnSerialMotionAction+0x2c4>)
 8001480:	f001 fb12 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <fnSerialMotionAction+0x234>
			fnLEDsErrorState();
 800148a:	f7ff fa25 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800148e:	f000 fbb9 	bl	8001c04 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 8001492:	e03c      	b.n	800150e <fnSerialMotionAction+0x2ae>
		else if (RxData[5] & 0b00100) {
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <fnSerialMotionAction+0x2cc>)
 8001496:	795b      	ldrb	r3, [r3, #5]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d036      	beq.n	800150e <fnSerialMotionAction+0x2ae>
			iSerialCounter++;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <fnSerialMotionAction+0x2d0>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <fnSerialMotionAction+0x2d0>)
 80014aa:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <fnSerialMotionAction+0x2b4>)
 80014ae:	2228      	movs	r2, #40	; 0x28
 80014b0:	701a      	strb	r2, [r3, #0]
		break;
 80014b2:	e02c      	b.n	800150e <fnSerialMotionAction+0x2ae>

	case 40://REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <fnSerialMotionAction+0x2d0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <fnSerialMotionAction+0x2d4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d10c      	bne.n	80014de <fnSerialMotionAction+0x27e>
			//iSerialCounter = 0;
			iSerialMachineStatus = 100;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <fnSerialMotionAction+0x2b4>)
 80014c6:	2264      	movs	r2, #100	; 0x64
 80014c8:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <fnSerialMotionAction+0x2d8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <fnSerialMotionAction+0x2d4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 80014d6:	4819      	ldr	r0, [pc, #100]	; (800153c <fnSerialMotionAction+0x2dc>)
 80014d8:	f003 fdbf 	bl	800505a <HAL_TIM_Base_Stop>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 80014dc:	e018      	b.n	8001510 <fnSerialMotionAction+0x2b0>
		else if (iSerialCounter % 2 == 0) {
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <fnSerialMotionAction+0x2d0>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <fnSerialMotionAction+0x29c>
			iPosition = iSerialRange;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <fnSerialMotionAction+0x2d8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <fnSerialMotionAction+0x2c8>)
 80014f2:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <fnSerialMotionAction+0x2b4>)
 80014f6:	220a      	movs	r2, #10
 80014f8:	701a      	strb	r2, [r3, #0]
		break;
 80014fa:	e009      	b.n	8001510 <fnSerialMotionAction+0x2b0>
			iPosition = 0;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <fnSerialMotionAction+0x2c8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <fnSerialMotionAction+0x2b4>)
 8001504:	220a      	movs	r2, #10
 8001506:	701a      	strb	r2, [r3, #0]
		break;
 8001508:	e002      	b.n	8001510 <fnSerialMotionAction+0x2b0>
		break;
 800150a:	bf00      	nop
 800150c:	e000      	b.n	8001510 <fnSerialMotionAction+0x2b0>
		break;
 800150e:	bf00      	nop
	}
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000005 	.word	0x20000005
 8001518:	20000250 	.word	0x20000250
 800151c:	20000268 	.word	0x20000268
 8001520:	20000270 	.word	0x20000270
 8001524:	20000210 	.word	0x20000210
 8001528:	200002cc 	.word	0x200002cc
 800152c:	20000290 	.word	0x20000290
 8001530:	2000000c 	.word	0x2000000c
 8001534:	20000014 	.word	0x20000014
 8001538:	20000010 	.word	0x20000010
 800153c:	200003b8 	.word	0x200003b8

08001540 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a27      	ldr	r2, [pc, #156]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11b      	bne.n	800158a <HAL_TIM_PeriodElapsedCallback+0x4a>
		if (iHomingStatus != 1) {
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d006      	beq.n	8001568 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 800155a:	f7ff f9d3 	bl	8000904 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800155e:	2101      	movs	r1, #1
 8001560:	4824      	ldr	r0, [pc, #144]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001562:	f002 fa4c 	bl	80039fe <HAL_GPIO_TogglePin>
	else if(htim -> Instance == TIM11){
		length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
		HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
	}

}
 8001566:	e03c      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
			fnEncReadCount();
 8001568:	f7ff fd3e 	bl	8000fe8 <fnEncReadCount>
			length = sprintf(data_msg, "e%.3f", fEncAngle);
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001576:	ec53 2b17 	vmov	r2, r3, d7
 800157a:	4920      	ldr	r1, [pc, #128]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800157c:	4820      	ldr	r0, [pc, #128]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800157e:	f006 fca9 	bl	8007ed4 <siprintf>
 8001582:	4603      	mov	r3, r0
 8001584:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	e02b      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
	else if(htim -> Instance == TIM7){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d102      	bne.n	800159a <HAL_TIM_PeriodElapsedCallback+0x5a>
		fnSingleMotionAction();
 8001594:	f7ff fdd8 	bl	8001148 <fnSingleMotionAction>
}
 8001598:	e023      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
	else if(htim -> Instance == TIM10){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d102      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0x6a>
		fnSerialMotionAction();
 80015a4:	f7ff fe5c 	bl	8001260 <fnSerialMotionAction>
}
 80015a8:	e01b      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
	else if(htim -> Instance == TIM11){
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d116      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
		length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015be:	ec53 2b17 	vmov	r2, r3, d7
 80015c2:	4914      	ldr	r1, [pc, #80]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015c6:	f006 fc85 	bl	8007ed4 <siprintf>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015ce:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	4909      	ldr	r1, [pc, #36]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015de:	f004 fa47 	bl	8005a70 <HAL_UART_Transmit>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40001000 	.word	0x40001000
 80015f0:	20000003 	.word	0x20000003
 80015f4:	40020400 	.word	0x40020400
 80015f8:	200002c4 	.word	0x200002c4
 80015fc:	0800a480 	.word	0x0800a480
 8001600:	20000240 	.word	0x20000240
 8001604:	2000023c 	.word	0x2000023c
 8001608:	40001400 	.word	0x40001400
 800160c:	40014400 	.word	0x40014400
 8001610:	40014800 	.word	0x40014800
 8001614:	0800a488 	.word	0x0800a488
 8001618:	20000450 	.word	0x20000450

0800161c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800162c:	d129      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_GPIO_EXTI_Callback+0x70>)
 8001630:	f240 620a 	movw	r2, #1546	; 0x60a
 8001634:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_GPIO_EXTI_Callback+0x70>)
 8001638:	2208      	movs	r2, #8
 800163a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 8001644:	2241      	movs	r2, #65	; 0x41
 8001646:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 800164a:	2260      	movs	r2, #96	; 0x60
 800164c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_GPIO_EXTI_Callback+0x78>)
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_GPIO_EXTI_Callback+0x74>)
 8001670:	4906      	ldr	r1, [pc, #24]	; (800168c <HAL_GPIO_EXTI_Callback+0x70>)
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001674:	f001 fa18 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 800167e:	f000 fac1 	bl	8001c04 <Error_Handler>

		//// ENCODER CALIBRATION - BASE
		//		fnEncCalibration();

	}
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000250 	.word	0x20000250
 8001690:	20000268 	.word	0x20000268
 8001694:	20000270 	.word	0x20000270
 8001698:	20000210 	.word	0x20000210

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a0:	f000 ff4c 	bl	800253c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a4:	f000 f860 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a8:	f7ff f828 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016ac:	f000 fe16 	bl	80022dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016b0:	f000 fe90 	bl	80023d4 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80016b4:	f7fe ff9e 	bl	80005f4 <MX_CAN1_Init>
  MX_TIM6_Init();
 80016b8:	f000 fc74 	bl	8001fa4 <MX_TIM6_Init>
  MX_TIM3_Init();
 80016bc:	f000 fc1c 	bl	8001ef8 <MX_TIM3_Init>
  MX_TIM7_Init();
 80016c0:	f000 fca8 	bl	8002014 <MX_TIM7_Init>
  MX_TIM10_Init();
 80016c4:	f000 fcde 	bl	8002084 <MX_TIM10_Init>
  MX_TIM11_Init();
 80016c8:	f000 fd00 	bl	80020cc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80016cc:	2204      	movs	r2, #4
 80016ce:	4921      	ldr	r1, [pc, #132]	; (8001754 <main+0xb8>)
 80016d0:	4821      	ldr	r0, [pc, #132]	; (8001758 <main+0xbc>)
 80016d2:	f004 fa60 	bl	8005b96 <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 80016d6:	4821      	ldr	r0, [pc, #132]	; (800175c <main+0xc0>)
 80016d8:	f001 f9a2 	bl	8002a20 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <main+0xc4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <main+0xc4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <main+0xc4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <main+0xc4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <main+0xc4>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <main+0xc4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <main+0xc8>)
 8001702:	2201      	movs	r2, #1
 8001704:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <main+0xc8>)
 8001708:	2212      	movs	r2, #18
 800170a:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <main+0xc8>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <main+0xc8>)
 8001714:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001718:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <main+0xc8>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <main+0xc8>)
 8001722:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001726:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <main+0xc8>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <main+0xc8>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <main+0xc8>)
 8001736:	2201      	movs	r2, #1
 8001738:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <main+0xc8>)
 800173c:	2214      	movs	r2, #20
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001740:	4908      	ldr	r1, [pc, #32]	; (8001764 <main+0xc8>)
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <main+0xc0>)
 8001744:	f001 f880 	bl	8002848 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001748:	2102      	movs	r1, #2
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <main+0xc0>)
 800174c:	f001 fb99 	bl	8002e82 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001750:	e7fe      	b.n	8001750 <main+0xb4>
 8001752:	bf00      	nop
 8001754:	20000238 	.word	0x20000238
 8001758:	20000450 	.word	0x20000450
 800175c:	20000210 	.word	0x20000210
 8001760:	20000250 	.word	0x20000250
 8001764:	20000298 	.word	0x20000298

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0b8      	sub	sp, #224	; 0xe0
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001772:	2234      	movs	r2, #52	; 0x34
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f005 ff60 	bl	800763c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	2290      	movs	r2, #144	; 0x90
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f005 ff51 	bl	800763c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800179a:	f002 faab 	bl	8003cf4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <SystemClock_Config+0x128>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <SystemClock_Config+0x128>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <SystemClock_Config+0x128>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017b6:	4b37      	ldr	r3, [pc, #220]	; (8001894 <SystemClock_Config+0x12c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017be:	4a35      	ldr	r2, [pc, #212]	; (8001894 <SystemClock_Config+0x12c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <SystemClock_Config+0x12c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017ee:	2304      	movs	r3, #4
 80017f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001810:	4618      	mov	r0, r3
 8001812:	f002 facf 	bl	8003db4 <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800181c:	f000 f9f2 	bl	8001c04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001820:	f002 fa78 	bl	8003d14 <HAL_PWREx_EnableOverDrive>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800182a:	f000 f9eb 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001834:	2302      	movs	r3, #2
 8001836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800184e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001852:	2103      	movs	r1, #3
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fd5b 	bl	8004310 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001860:	f000 f9d0 	bl	8001c04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <SystemClock_Config+0x130>)
 8001866:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001868:	2300      	movs	r3, #0
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4618      	mov	r0, r3
 8001878:	f002 ff70 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001882:	f000 f9bf 	bl	8001c04 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	37e0      	adds	r7, #224	; 0xe0
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000
 8001898:	00200100 	.word	0x00200100

0800189c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4aaa      	ldr	r2, [pc, #680]	; (8001b54 <HAL_UART_RxCpltCallback+0x2b8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f040 8142 	bne.w	8001b34 <HAL_UART_RxCpltCallback+0x298>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 80018b0:	2204      	movs	r2, #4
 80018b2:	49a9      	ldr	r1, [pc, #676]	; (8001b58 <HAL_UART_RxCpltCallback+0x2bc>)
 80018b4:	48a9      	ldr	r0, [pc, #676]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 80018b6:	f006 fb2d 	bl	8007f14 <strncmp>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 80018c0:	4ba7      	ldr	r3, [pc, #668]	; (8001b60 <HAL_UART_RxCpltCallback+0x2c4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 80018c6:	4ba7      	ldr	r3, [pc, #668]	; (8001b64 <HAL_UART_RxCpltCallback+0x2c8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80018cc:	48a6      	ldr	r0, [pc, #664]	; (8001b68 <HAL_UART_RxCpltCallback+0x2cc>)
 80018ce:	f003 fbeb 	bl	80050a8 <HAL_TIM_Base_Start_IT>
 80018d2:	e135      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 80018d4:	2204      	movs	r2, #4
 80018d6:	49a5      	ldr	r1, [pc, #660]	; (8001b6c <HAL_UART_RxCpltCallback+0x2d0>)
 80018d8:	48a0      	ldr	r0, [pc, #640]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 80018da:	f006 fb1b 	bl	8007f14 <strncmp>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d107      	bne.n	80018f4 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 80018e4:	4ba2      	ldr	r3, [pc, #648]	; (8001b70 <HAL_UART_RxCpltCallback+0x2d4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80018ea:	2101      	movs	r1, #1
 80018ec:	48a1      	ldr	r0, [pc, #644]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 80018ee:	f002 f886 	bl	80039fe <HAL_GPIO_TogglePin>
 80018f2:	e125      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 80018f4:	2204      	movs	r2, #4
 80018f6:	49a0      	ldr	r1, [pc, #640]	; (8001b78 <HAL_UART_RxCpltCallback+0x2dc>)
 80018f8:	4898      	ldr	r0, [pc, #608]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 80018fa:	f006 fb0b 	bl	8007f14 <strncmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 8001904:	4b9a      	ldr	r3, [pc, #616]	; (8001b70 <HAL_UART_RxCpltCallback+0x2d4>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	4899      	ldr	r0, [pc, #612]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 800190e:	f002 f876 	bl	80039fe <HAL_GPIO_TogglePin>
 8001912:	e115      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 8001914:	2204      	movs	r2, #4
 8001916:	4999      	ldr	r1, [pc, #612]	; (8001b7c <HAL_UART_RxCpltCallback+0x2e0>)
 8001918:	4890      	ldr	r0, [pc, #576]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 800191a:	f006 fafb 	bl	8007f14 <strncmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_UART_RxCpltCallback+0x9e>
			iSelected_leg = 0;
 8001924:	4b96      	ldr	r3, [pc, #600]	; (8001b80 <HAL_UART_RxCpltCallback+0x2e4>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800192a:	2101      	movs	r1, #1
 800192c:	4891      	ldr	r0, [pc, #580]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 800192e:	f002 f866 	bl	80039fe <HAL_GPIO_TogglePin>
			//start timera
			HAL_TIM_Base_Start_IT(&htim11);
 8001932:	4894      	ldr	r0, [pc, #592]	; (8001b84 <HAL_UART_RxCpltCallback+0x2e8>)
 8001934:	f003 fbb8 	bl	80050a8 <HAL_TIM_Base_Start_IT>
 8001938:	e102      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 800193a:	2204      	movs	r2, #4
 800193c:	4992      	ldr	r1, [pc, #584]	; (8001b88 <HAL_UART_RxCpltCallback+0x2ec>)
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001940:	f006 fae8 	bl	8007f14 <strncmp>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_UART_RxCpltCallback+0xc4>
			iSelected_leg = 1;
 800194a:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <HAL_UART_RxCpltCallback+0x2e4>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	4888      	ldr	r0, [pc, #544]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 8001954:	f002 f853 	bl	80039fe <HAL_GPIO_TogglePin>
			//start timera
			HAL_TIM_Base_Start_IT(&htim11);
 8001958:	488a      	ldr	r0, [pc, #552]	; (8001b84 <HAL_UART_RxCpltCallback+0x2e8>)
 800195a:	f003 fba5 	bl	80050a8 <HAL_TIM_Base_Start_IT>
 800195e:	e0ef      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001960:	4b7e      	ldr	r3, [pc, #504]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	2b50      	cmp	r3, #80	; 0x50
 8001966:	d113      	bne.n	8001990 <HAL_UART_RxCpltCallback+0xf4>

			if(iMode == 0){
 8001968:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_UART_RxCpltCallback+0x2d4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 80e6 	bne.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001974:	4879      	ldr	r0, [pc, #484]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001976:	f005 fe33 	bl	80075e0 <atoi>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b83      	ldr	r3, [pc, #524]	; (8001b8c <HAL_UART_RxCpltCallback+0x2f0>)
 8001980:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001982:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <HAL_UART_RxCpltCallback+0x2f4>)
 8001984:	220a      	movs	r2, #10
 8001986:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001988:	4882      	ldr	r0, [pc, #520]	; (8001b94 <HAL_UART_RxCpltCallback+0x2f8>)
 800198a:	f003 fb8d 	bl	80050a8 <HAL_TIM_Base_Start_IT>
 800198e:	e0d7      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001990:	2204      	movs	r2, #4
 8001992:	4981      	ldr	r1, [pc, #516]	; (8001b98 <HAL_UART_RxCpltCallback+0x2fc>)
 8001994:	4871      	ldr	r0, [pc, #452]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001996:	f006 fabd 	bl	8007f14 <strncmp>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d123      	bne.n	80019e8 <HAL_UART_RxCpltCallback+0x14c>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 80019a0:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_UART_RxCpltCallback+0x2d4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	f040 80ca 	bne.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
 80019ac:	4b74      	ldr	r3, [pc, #464]	; (8001b80 <HAL_UART_RxCpltCallback+0x2e4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	f000 80c4 	beq.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
 80019b8:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_UART_RxCpltCallback+0x300>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80bf 	beq.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
 80019c2:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <HAL_UART_RxCpltCallback+0x304>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80ba 	beq.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
				iSerialCounter = 0;
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <HAL_UART_RxCpltCallback+0x308>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 80019d2:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <HAL_UART_RxCpltCallback+0x30c>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 80019d8:	4874      	ldr	r0, [pc, #464]	; (8001bac <HAL_UART_RxCpltCallback+0x310>)
 80019da:	f003 fb65 	bl	80050a8 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80019de:	2101      	movs	r1, #1
 80019e0:	4864      	ldr	r0, [pc, #400]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 80019e2:	f002 f80c 	bl	80039fe <HAL_GPIO_TogglePin>
 80019e6:	e0ab      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 80019e8:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 80019ea:	78db      	ldrb	r3, [r3, #3]
 80019ec:	2b4e      	cmp	r3, #78	; 0x4e
 80019ee:	d10d      	bne.n	8001a0c <HAL_UART_RxCpltCallback+0x170>
			if(iMode == 1){
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_UART_RxCpltCallback+0x2d4>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f040 80a2 	bne.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 80019fc:	4857      	ldr	r0, [pc, #348]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 80019fe:	f005 fdef 	bl	80075e0 <atoi>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <HAL_UART_RxCpltCallback+0x300>)
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e099      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	2b52      	cmp	r3, #82	; 0x52
 8001a12:	d111      	bne.n	8001a38 <HAL_UART_RxCpltCallback+0x19c>
			if(iMode == 1){
 8001a14:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <HAL_UART_RxCpltCallback+0x2d4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	f040 8090 	bne.w	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 8001a20:	484e      	ldr	r0, [pc, #312]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001a22:	f005 fddd 	bl	80075e0 <atoi>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_UART_RxCpltCallback+0x304>)
 8001a2c:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 8001a2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_UART_RxCpltCallback+0x304>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a56      	ldr	r2, [pc, #344]	; (8001b8c <HAL_UART_RxCpltCallback+0x2f0>)
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e083      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001a38:	2204      	movs	r2, #4
 8001a3a:	495d      	ldr	r1, [pc, #372]	; (8001bb0 <HAL_UART_RxCpltCallback+0x314>)
 8001a3c:	4847      	ldr	r0, [pc, #284]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001a3e:	f006 fa69 	bl	8007f14 <strncmp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d139      	bne.n	8001abc <HAL_UART_RxCpltCallback+0x220>

			HAL_UART_Transmit(&huart3, "STOP", 4, 100);
 8001a48:	2364      	movs	r3, #100	; 0x64
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4959      	ldr	r1, [pc, #356]	; (8001bb4 <HAL_UART_RxCpltCallback+0x318>)
 8001a4e:	485a      	ldr	r0, [pc, #360]	; (8001bb8 <HAL_UART_RxCpltCallback+0x31c>)
 8001a50:	f004 f80e 	bl	8005a70 <HAL_UART_Transmit>
			TxHeader.StdId = 0x60A;
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_UART_RxCpltCallback+0x320>)
 8001a56:	f240 620a 	movw	r2, #1546	; 0x60a
 8001a5a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_UART_RxCpltCallback+0x320>)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a64:	2222      	movs	r2, #34	; 0x22
 8001a66:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001a68:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001a6e:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a70:	2260      	movs	r2, #96	; 0x60
 8001a72:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001a74:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001a80:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001a86:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_UART_RxCpltCallback+0x328>)
 8001a94:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001a96:	4949      	ldr	r1, [pc, #292]	; (8001bbc <HAL_UART_RxCpltCallback+0x320>)
 8001a98:	484b      	ldr	r0, [pc, #300]	; (8001bc8 <HAL_UART_RxCpltCallback+0x32c>)
 8001a9a:	f001 f805 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_UART_RxCpltCallback+0x212>
				fnLEDsErrorState();
 8001aa4:	f7fe ff18 	bl	80008d8 <fnLEDsErrorState>
				Error_Handler();
 8001aa8:	f000 f8ac 	bl	8001c04 <Error_Handler>
 8001aac:	e048      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
			}
			else{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab4:	482f      	ldr	r0, [pc, #188]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 8001ab6:	f001 ff89 	bl	80039cc <HAL_GPIO_WritePin>
 8001aba:	e041      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001abc:	2204      	movs	r2, #4
 8001abe:	4943      	ldr	r1, [pc, #268]	; (8001bcc <HAL_UART_RxCpltCallback+0x330>)
 8001ac0:	4826      	ldr	r0, [pc, #152]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001ac2:	f006 fa27 	bl	8007f14 <strncmp>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d139      	bne.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>

			TxHeader.StdId = 0x60A;
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_UART_RxCpltCallback+0x320>)
 8001ace:	f240 620a 	movw	r2, #1546	; 0x60a
 8001ad2:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_UART_RxCpltCallback+0x320>)
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001adc:	2222      	movs	r2, #34	; 0x22
 8001ade:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001ae8:	2260      	movs	r2, #96	; 0x60
 8001aea:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001af4:	220f      	movs	r2, #15
 8001af6:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_UART_RxCpltCallback+0x328>)
 8001b0c:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_UART_RxCpltCallback+0x324>)
 8001b0e:	492b      	ldr	r1, [pc, #172]	; (8001bbc <HAL_UART_RxCpltCallback+0x320>)
 8001b10:	482d      	ldr	r0, [pc, #180]	; (8001bc8 <HAL_UART_RxCpltCallback+0x32c>)
 8001b12:	f000 ffc9 	bl	8002aa8 <HAL_CAN_AddTxMessage>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_UART_RxCpltCallback+0x28a>
				fnLEDsErrorState();
 8001b1c:	f7fe fedc 	bl	80008d8 <fnLEDsErrorState>
				Error_Handler();
 8001b20:	f000 f870 	bl	8001c04 <Error_Handler>
 8001b24:	e00c      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>
			}
			else{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <HAL_UART_RxCpltCallback+0x2d8>)
 8001b2e:	f001 ff4d 	bl	80039cc <HAL_GPIO_WritePin>
 8001b32:	e005      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x2a4>



	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	220c      	movs	r2, #12
 8001b38:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <HAL_UART_RxCpltCallback+0x334>)
 8001b3a:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <HAL_UART_RxCpltCallback+0x31c>)
 8001b3c:	f003 ff98 	bl	8005a70 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001b40:	2204      	movs	r2, #4
 8001b42:	4906      	ldr	r1, [pc, #24]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c0>)
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <HAL_UART_RxCpltCallback+0x31c>)
 8001b46:	f004 f826 	bl	8005b96 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40004800 	.word	0x40004800
 8001b58:	0800a49c 	.word	0x0800a49c
 8001b5c:	20000238 	.word	0x20000238
 8001b60:	20000002 	.word	0x20000002
 8001b64:	20000003 	.word	0x20000003
 8001b68:	20000320 	.word	0x20000320
 8001b6c:	0800a4cc 	.word	0x0800a4cc
 8001b70:	20000000 	.word	0x20000000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	0800a4d4 	.word	0x0800a4d4
 8001b7c:	0800a4e4 	.word	0x0800a4e4
 8001b80:	20000001 	.word	0x20000001
 8001b84:	20000404 	.word	0x20000404
 8001b88:	0800a4dc 	.word	0x0800a4dc
 8001b8c:	200002cc 	.word	0x200002cc
 8001b90:	20000004 	.word	0x20000004
 8001b94:	2000036c 	.word	0x2000036c
 8001b98:	0800a4b4 	.word	0x0800a4b4
 8001b9c:	20000014 	.word	0x20000014
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000005 	.word	0x20000005
 8001bac:	200003b8 	.word	0x200003b8
 8001bb0:	0800a4bc 	.word	0x0800a4bc
 8001bb4:	0800a494 	.word	0x0800a494
 8001bb8:	20000450 	.word	0x20000450
 8001bbc:	20000250 	.word	0x20000250
 8001bc0:	20000268 	.word	0x20000268
 8001bc4:	20000270 	.word	0x20000270
 8001bc8:	20000210 	.word	0x20000210
 8001bcc:	0800a4c4 	.word	0x0800a4c4
 8001bd0:	0800a4a4 	.word	0x0800a4a4

08001bd4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 f83b 	bl	8002c5e <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001bec:	f001 ff07 	bl	80039fe <HAL_GPIO_TogglePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000290 	.word	0x20000290
 8001bfc:	20000274 	.word	0x20000274
 8001c00:	40020400 	.word	0x40020400

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x44>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_MspInit+0x44>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x44>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler+0x4>

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca4:	f000 fc90 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <CAN1_RX0_IRQHandler+0x10>)
 8001cb2:	f001 f90c 	bl	8002ece <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000210 	.word	0x20000210

08001cc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cc6:	f003 fbcb 	bl	8005460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200003b8 	.word	0x200003b8

08001cd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cda:	f003 fbc1 	bl	8005460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000404 	.word	0x20000404

08001ce8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM3_IRQHandler+0x10>)
 8001cee:	f003 fbb7 	bl	8005460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200002d4 	.word	0x200002d4

08001cfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <USART3_IRQHandler+0x10>)
 8001d02:	f003 ff97 	bl	8005c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000450 	.word	0x20000450

08001d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d18:	f001 fe8c 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM6_DAC_IRQHandler+0x10>)
 8001d26:	f003 fb9b 	bl	8005460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000320 	.word	0x20000320

08001d34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM7_IRQHandler+0x10>)
 8001d3a:	f003 fb91 	bl	8005460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000036c 	.word	0x2000036c

08001d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_kill>:

int _kill(int pid, int sig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d62:	f005 fc41 	bl	80075e8 <__errno>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2216      	movs	r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_exit>:

void _exit (int status)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffe7 	bl	8001d58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d8a:	e7fe      	b.n	8001d8a <_exit+0x12>

08001d8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d9e:	f3af 8000 	nop.w
 8001da2:	4601      	mov	r1, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf0      	blt.n	8001d9e <_read+0x12>
	}

return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf1      	blt.n	8001dd8 <_write+0x12>
	}
	return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_close>:

int _close(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e26:	605a      	str	r2, [r3, #4]
	return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_isatty>:

int _isatty(int file)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f005 fba6 	bl	80075e8 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20080000 	.word	0x20080000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	200002d0 	.word	0x200002d0
 8001ed0:	200008f0 	.word	0x200008f0

08001ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f005 fb98 	bl	800763c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <MX_TIM3_Init+0xa8>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f44:	2301      	movs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f54:	2301      	movs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f68:	f003 f946 	bl	80051f8 <HAL_TIM_Encoder_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f72:	f7ff fe47 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4619      	mov	r1, r3
 8001f82:	4806      	ldr	r0, [pc, #24]	; (8001f9c <MX_TIM3_Init+0xa4>)
 8001f84:	f003 fc7a 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f8e:	f7ff fe39 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	3730      	adds	r7, #48	; 0x30
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200002d4 	.word	0x200002d4
 8001fa0:	40000400 	.word	0x40000400

08001fa4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <MX_TIM6_Init+0x68>)
 8001fb6:	4a16      	ldr	r2, [pc, #88]	; (8002010 <MX_TIM6_Init+0x6c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <MX_TIM6_Init+0x68>)
 8001fbc:	f242 527f 	movw	r2, #9599	; 0x257f
 8001fc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_TIM6_Init+0x68>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_TIM6_Init+0x68>)
 8001fca:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_TIM6_Init+0x68>)
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <MX_TIM6_Init+0x68>)
 8001fd8:	f002 ffe8 	bl	8004fac <HAL_TIM_Base_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001fe2:	f7ff fe0f 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4806      	ldr	r0, [pc, #24]	; (800200c <MX_TIM6_Init+0x68>)
 8001ff4:	f003 fc42 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001ffe:	f7ff fe01 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000320 	.word	0x20000320
 8002010:	40001000 	.word	0x40001000

08002014 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_TIM7_Init+0x68>)
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <MX_TIM7_Init+0x6c>)
 8002028:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_TIM7_Init+0x68>)
 800202c:	f242 527f 	movw	r2, #9599	; 0x257f
 8002030:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_TIM7_Init+0x68>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_TIM7_Init+0x68>)
 800203a:	f241 3287 	movw	r2, #4999	; 0x1387
 800203e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_TIM7_Init+0x68>)
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <MX_TIM7_Init+0x68>)
 8002048:	f002 ffb0 	bl	8004fac <HAL_TIM_Base_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002052:	f7ff fdd7 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_TIM7_Init+0x68>)
 8002064:	f003 fc0a 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800206e:	f7ff fdc9 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000036c 	.word	0x2000036c
 8002080:	40001400 	.word	0x40001400

08002084 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_TIM10_Init+0x40>)
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <MX_TIM10_Init+0x44>)
 800208c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <MX_TIM10_Init+0x40>)
 8002090:	f242 527f 	movw	r2, #9599	; 0x257f
 8002094:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_TIM10_Init+0x40>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_TIM10_Init+0x40>)
 800209e:	f241 3287 	movw	r2, #4999	; 0x1387
 80020a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_TIM10_Init+0x40>)
 80020b2:	f002 ff7b 	bl	8004fac <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80020bc:	f7ff fda2 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200003b8 	.word	0x200003b8
 80020c8:	40014400 	.word	0x40014400

080020cc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_TIM11_Init+0x40>)
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <MX_TIM11_Init+0x44>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9600-1;
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <MX_TIM11_Init+0x40>)
 80020d8:	f242 527f 	movw	r2, #9599	; 0x257f
 80020dc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_TIM11_Init+0x40>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_TIM11_Init+0x40>)
 80020e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80020ea:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <MX_TIM11_Init+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_TIM11_Init+0x40>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_TIM11_Init+0x40>)
 80020fa:	f002 ff57 	bl	8004fac <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002104:	f7ff fd7e 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000404 	.word	0x20000404
 8002110:	40014800 	.word	0x40014800

08002114 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d14b      	bne.n	80021ce <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a28      	ldr	r2, [pc, #160]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800217e:	2340      	movs	r3, #64	; 0x40
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800218e:	2302      	movs	r3, #2
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4811      	ldr	r0, [pc, #68]	; (80021e0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800219a:	f001 fa6b 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ae:	2302      	movs	r3, #2
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	480a      	ldr	r0, [pc, #40]	; (80021e4 <HAL_TIM_Encoder_MspInit+0xd0>)
 80021ba:	f001 fa5b 	bl	8003674 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	201d      	movs	r0, #29
 80021c4:	f001 f98d 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021c8:	201d      	movs	r0, #29
 80021ca:	f001 f9a6 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020800 	.word	0x40020800

080021e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <HAL_TIM_Base_MspInit+0xe0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d114      	bne.n	8002224 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a33      	ldr	r2, [pc, #204]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2036      	movs	r0, #54	; 0x36
 8002218:	f001 f963 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800221c:	2036      	movs	r0, #54	; 0x36
 800221e:	f001 f97c 	bl	800351a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002222:	e04c      	b.n	80022be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_TIM_Base_MspInit+0xe8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d114      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a26      	ldr	r2, [pc, #152]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002234:	f043 0320 	orr.w	r3, r3, #32
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2037      	movs	r0, #55	; 0x37
 800224c:	f001 f949 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002250:	2037      	movs	r0, #55	; 0x37
 8002252:	f001 f962 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 8002256:	e032      	b.n	80022be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM10)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_TIM_Base_MspInit+0xec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d114      	bne.n	800228c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2019      	movs	r0, #25
 8002280:	f001 f92f 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002284:	2019      	movs	r0, #25
 8002286:	f001 f948 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 800228a:	e018      	b.n	80022be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d113      	bne.n	80022be <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_TIM_Base_MspInit+0xe4>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	201a      	movs	r0, #26
 80022b4:	f001 f915 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022b8:	201a      	movs	r0, #26
 80022ba:	f001 f92e 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40001000 	.word	0x40001000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40001400 	.word	0x40001400
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800

080022dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_USART3_UART_Init+0x58>)
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <MX_USART3_UART_Init+0x5c>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <MX_USART3_UART_Init+0x58>)
 80022e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART3_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_USART3_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART3_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART3_UART_Init+0x58>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART3_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART3_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART3_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART3_UART_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USART3_UART_Init+0x58>)
 8002320:	f003 fb58 	bl	80059d4 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800232a:	f7ff fc6b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000450 	.word	0x20000450
 8002338:	40004800 	.word	0x40004800

0800233c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_UART_MspInit+0x8c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d130      	bne.n	80023c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_UART_MspInit+0x90>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a14      	ldr	r2, [pc, #80]	; (80023cc <HAL_UART_MspInit+0x90>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_UART_MspInit+0x90>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800238e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a0:	2307      	movs	r3, #7
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4809      	ldr	r0, [pc, #36]	; (80023d0 <HAL_UART_MspInit+0x94>)
 80023ac:	f001 f962 	bl	8003674 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2027      	movs	r0, #39	; 0x27
 80023b6:	f001 f894 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023ba:	2027      	movs	r0, #39	; 0x27
 80023bc:	f001 f8ad 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40004800 	.word	0x40004800
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020c00 	.word	0x40020c00

080023d4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e2:	2206      	movs	r2, #6
 80023e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800240c:	2201      	movs	r2, #1
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002418:	f001 fb24 	bl	8003a64 <HAL_PCD_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002422:	f7ff fbef 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200004d4 	.word	0x200004d4

08002430 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002450:	d141      	bne.n	80024d6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800246a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800247c:	230a      	movs	r3, #10
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4817      	ldr	r0, [pc, #92]	; (80024e4 <HAL_PCD_MspInit+0xb4>)
 8002488:	f001 f8f4 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800248c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4810      	ldr	r0, [pc, #64]	; (80024e4 <HAL_PCD_MspInit+0xb4>)
 80024a2:	f001 f8e7 	bl	8003674 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 80024ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b0:	6353      	str	r3, [r2, #52]	; 0x34
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_PCD_MspInit+0xb0>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000

080024e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ec:	480d      	ldr	r0, [pc, #52]	; (8002524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ee:	490e      	ldr	r1, [pc, #56]	; (8002528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002504:	4c0b      	ldr	r4, [pc, #44]	; (8002534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002512:	f7ff fcdf 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002516:	f005 f86d 	bl	80075f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251a:	f7ff f8bf 	bl	800169c <main>
  bx  lr    
 800251e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002520:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800252c:	0800a8f4 	.word	0x0800a8f4
  ldr r2, =_sbss
 8002530:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002534:	200008ec 	.word	0x200008ec

08002538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC_IRQHandler>
	...

0800253c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_Init+0x28>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_Init+0x28>)
 8002546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254c:	2003      	movs	r0, #3
 800254e:	f000 ffbd 	bl	80034cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002552:	2000      	movs	r0, #0
 8002554:	f000 f808 	bl	8002568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002558:	f7ff fb5a 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x54>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x58>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f000 ffd5 	bl	8003536 <HAL_SYSTICK_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00e      	b.n	80025b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d80a      	bhi.n	80025b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f000 ff9d 	bl	80034e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <HAL_InitTick+0x5c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000018 	.word	0x20000018
 80025c0:	20000020 	.word	0x20000020
 80025c4:	2000001c 	.word	0x2000001c

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000020 	.word	0x20000020
 80025ec:	200008d8 	.word	0x200008d8

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	200008d8 	.word	0x200008d8

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff ffee 	bl	80025f0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262e:	bf00      	nop
 8002630:	f7ff ffde 	bl	80025f0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000020 	.word	0x20000020

08002650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0ed      	b.n	800283e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fd fff8 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002684:	f7ff ffb4 	bl	80025f0 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800268a:	e012      	b.n	80026b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800268c:	f7ff ffb0 	bl	80025f0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d90b      	bls.n	80026b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2205      	movs	r2, #5
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0c5      	b.n	800283e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0e5      	beq.n	800268c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0202 	bic.w	r2, r2, #2
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d0:	f7ff ff8e 	bl	80025f0 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026d6:	e012      	b.n	80026fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026d8:	f7ff ff8a 	bl	80025f0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b0a      	cmp	r3, #10
 80026e4:	d90b      	bls.n	80026fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2205      	movs	r2, #5
 80026f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e09f      	b.n	800283e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e5      	bne.n	80026d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7e1b      	ldrb	r3, [r3, #24]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d108      	bne.n	8002726 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e007      	b.n	8002736 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7e5b      	ldrb	r3, [r3, #25]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e007      	b.n	8002760 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7e9b      	ldrb	r3, [r3, #26]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0220 	orr.w	r2, r2, #32
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0220 	bic.w	r2, r2, #32
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7edb      	ldrb	r3, [r3, #27]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0210 	bic.w	r2, r2, #16
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0210 	orr.w	r2, r2, #16
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7f1b      	ldrb	r3, [r3, #28]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d108      	bne.n	80027ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0208 	orr.w	r2, r2, #8
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e007      	b.n	80027de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0208 	bic.w	r2, r2, #8
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7f5b      	ldrb	r3, [r3, #29]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0204 	orr.w	r2, r2, #4
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0204 	bic.w	r2, r2, #4
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	ea42 0103 	orr.w	r1, r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d003      	beq.n	800286e <HAL_CAN_ConfigFilter+0x26>
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b02      	cmp	r3, #2
 800286a:	f040 80c7 	bne.w	80029fc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <HAL_CAN_ConfigFilter+0x1d0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d001      	beq.n	800287c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_CAN_ConfigFilter+0x1d4>)
 800287a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a63      	ldr	r2, [pc, #396]	; (8002a1c <HAL_CAN_ConfigFilter+0x1d4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800289a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	431a      	orrs	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2201      	movs	r2, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d123      	bne.n	800292a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	401a      	ands	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002904:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3248      	adds	r2, #72	; 0x48
 800290a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800291e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d122      	bne.n	8002978 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	431a      	orrs	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002952:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3248      	adds	r2, #72	; 0x48
 8002958:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800296c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	3348      	adds	r3, #72	; 0x48
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002992:	e007      	b.n	80029a4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80029be:	e007      	b.n	80029d0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e006      	b.n	8002a0a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40003400 	.word	0x40003400
 8002a1c:	40006400 	.word	0x40006400

08002a20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d12e      	bne.n	8002a92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff fdd0 	bl	80025f0 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a52:	e012      	b.n	8002a7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a54:	f7ff fdcc 	bl	80025f0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b0a      	cmp	r3, #10
 8002a60:	d90b      	bls.n	8002a7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2205      	movs	r2, #5
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e012      	b.n	8002aa0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e5      	bne.n	8002a54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e006      	b.n	8002aa0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d003      	beq.n	8002ad4 <HAL_CAN_AddTxMessage+0x2c>
 8002acc:	7ffb      	ldrb	r3, [r7, #31]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	f040 80b8 	bne.w	8002c44 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80a0 	beq.w	8002c34 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	0e1b      	lsrs	r3, r3, #24
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d907      	bls.n	8002b14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e09e      	b.n	8002c52 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b14:	2201      	movs	r2, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	6809      	ldr	r1, [r1, #0]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	440b      	add	r3, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e00f      	b.n	8002b62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	440b      	add	r3, r1
 8002b60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	440b      	add	r3, r1
 8002b72:	3304      	adds	r3, #4
 8002b74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	7d1b      	ldrb	r3, [r3, #20]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d111      	bne.n	8002ba2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3318      	adds	r3, #24
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4413      	add	r3, r2
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3318      	adds	r3, #24
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3307      	adds	r3, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	061a      	lsls	r2, r3, #24
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3306      	adds	r3, #6
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3305      	adds	r3, #5
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	3204      	adds	r2, #4
 8002bc2:	7812      	ldrb	r2, [r2, #0]
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	6811      	ldr	r1, [r2, #0]
 8002bca:	ea43 0200 	orr.w	r2, r3, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002bd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3303      	adds	r3, #3
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	061a      	lsls	r2, r3, #24
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3302      	adds	r3, #2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6811      	ldr	r1, [r2, #0]
 8002c00:	ea43 0200 	orr.w	r2, r3, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3318      	adds	r3, #24
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3318      	adds	r3, #24
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	440b      	add	r3, r1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e00e      	b.n	8002c52 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e006      	b.n	8002c52 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b087      	sub	sp, #28
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c72:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d003      	beq.n	8002c82 <HAL_CAN_GetRxMessage+0x24>
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	f040 80f3 	bne.w	8002e68 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10e      	bne.n	8002ca6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0e7      	b.n	8002e76 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0d8      	b.n	8002e76 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	331b      	adds	r3, #27
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0204 	and.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	331b      	adds	r3, #27
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	4413      	add	r3, r2
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0d5b      	lsrs	r3, r3, #21
 8002cf2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	331b      	adds	r3, #27
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4413      	add	r3, r2
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	08db      	lsrs	r3, r3, #3
 8002d0c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	331b      	adds	r3, #27
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0202 	and.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	331b      	adds	r3, #27
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	331b      	adds	r3, #27
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	331b      	adds	r3, #27
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0a1a      	lsrs	r2, r3, #8
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0c1a      	lsrs	r2, r3, #16
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3302      	adds	r3, #2
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e1a      	lsrs	r2, r3, #24
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	3304      	adds	r3, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0a1a      	lsrs	r2, r3, #8
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3305      	adds	r3, #5
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0c1a      	lsrs	r2, r3, #16
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	3306      	adds	r3, #6
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0e1a      	lsrs	r2, r3, #24
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3307      	adds	r3, #7
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	e007      	b.n	8002e64 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e006      	b.n	8002e76 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d002      	beq.n	8002ea0 <HAL_CAN_ActivateNotification+0x1e>
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d109      	bne.n	8002eb4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6959      	ldr	r1, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e006      	b.n	8002ec2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08a      	sub	sp, #40	; 0x28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d07c      	beq.n	800300e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d023      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f983 	bl	800323c <HAL_CAN_TxMailbox0CompleteCallback>
 8002f36:	e016      	b.n	8002f66 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e00c      	b.n	8002f66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	e002      	b.n	8002f66 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f989 	bl	8003278 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d024      	beq.n	8002fba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f963 	bl	8003250 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f8a:	e016      	b.n	8002fba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	e00c      	b.n	8002fba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e002      	b.n	8002fba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f969 	bl	800328c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d024      	beq.n	800300e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f943 	bl	8003264 <HAL_CAN_TxMailbox2CompleteCallback>
 8002fde:	e016      	b.n	800300e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e00c      	b.n	800300e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e002      	b.n	800300e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f949 	bl	80032a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003028:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2210      	movs	r2, #16
 8003030:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2208      	movs	r2, #8
 800304c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f930 	bl	80032b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fe fdb1 	bl	8001bd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2210      	movs	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2208      	movs	r2, #8
 80030b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f912 	bl	80032dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8f9 	bl	80032c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8fc 	bl	80032f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2208      	movs	r2, #8
 8003112:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8f5 	bl	8003304 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d07b      	beq.n	800321c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d072      	beq.n	8003214 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003188:	2b00      	cmp	r3, #0
 800318a:	d043      	beq.n	8003214 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003192:	2b00      	cmp	r3, #0
 8003194:	d03e      	beq.n	8003214 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800319c:	2b60      	cmp	r3, #96	; 0x60
 800319e:	d02b      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x32a>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d82e      	bhi.n	8003202 <HAL_CAN_IRQHandler+0x334>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d022      	beq.n	80031ee <HAL_CAN_IRQHandler+0x320>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d82a      	bhi.n	8003202 <HAL_CAN_IRQHandler+0x334>
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d019      	beq.n	80031e4 <HAL_CAN_IRQHandler+0x316>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d826      	bhi.n	8003202 <HAL_CAN_IRQHandler+0x334>
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d010      	beq.n	80031da <HAL_CAN_IRQHandler+0x30c>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d822      	bhi.n	8003202 <HAL_CAN_IRQHandler+0x334>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d002      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x2f8>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d005      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031c4:	e01d      	b.n	8003202 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ce:	e019      	b.n	8003204 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f043 0310 	orr.w	r3, r3, #16
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031d8:	e014      	b.n	8003204 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031e2:	e00f      	b.n	8003204 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ec:	e00a      	b.n	8003204 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f6:	e005      	b.n	8003204 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003200:	e000      	b.n	8003204 <HAL_CAN_IRQHandler+0x336>
            break;
 8003202:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003212:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2204      	movs	r2, #4
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f872 	bl	8003318 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003234:	bf00      	nop
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <__NVIC_SetPriorityGrouping+0x40>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <__NVIC_SetPriorityGrouping+0x40>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00
 8003370:	05fa0000 	.word	0x05fa0000

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db0b      	blt.n	80033ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4907      	ldr	r1, [pc, #28]	; (80033c8 <__NVIC_EnableIRQ+0x38>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2001      	movs	r0, #1
 80033b2:	fa00 f202 	lsl.w	r2, r0, r2
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db0a      	blt.n	80033f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	490c      	ldr	r1, [pc, #48]	; (8003418 <__NVIC_SetPriority+0x4c>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	440b      	add	r3, r1
 80033f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f4:	e00a      	b.n	800340c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <__NVIC_SetPriority+0x50>)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3b04      	subs	r3, #4
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	440b      	add	r3, r1
 800340a:	761a      	strb	r2, [r3, #24]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f1c3 0307 	rsb	r3, r3, #7
 800343a:	2b04      	cmp	r3, #4
 800343c:	bf28      	it	cs
 800343e:	2304      	movcs	r3, #4
 8003440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3304      	adds	r3, #4
 8003446:	2b06      	cmp	r3, #6
 8003448:	d902      	bls.n	8003450 <NVIC_EncodePriority+0x30>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b03      	subs	r3, #3
 800344e:	e000      	b.n	8003452 <NVIC_EncodePriority+0x32>
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	401a      	ands	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43d9      	mvns	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	4313      	orrs	r3, r2
         );
}
 800347a:	4618      	mov	r0, r3
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003498:	d301      	bcc.n	800349e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <SysTick_Config+0x40>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a6:	210f      	movs	r1, #15
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f7ff ff8e 	bl	80033cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <SysTick_Config+0x40>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <SysTick_Config+0x40>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000e010 	.word	0xe000e010

080034cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff29 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff3e 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff8e 	bl	8003420 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5d 	bl	80033cc <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff31 	bl	8003390 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa2 	bl	8003488 <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff f848 	bl	80025f0 <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d008      	beq.n	8003580 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e052      	b.n	8003626 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0216 	bic.w	r2, r2, #22
 800358e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <HAL_DMA_Abort+0x62>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0208 	bic.w	r2, r2, #8
 80035be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d0:	e013      	b.n	80035fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d2:	f7ff f80d 	bl	80025f0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d90c      	bls.n	80035fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e015      	b.n	8003626 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e4      	bne.n	80035d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	223f      	movs	r2, #63	; 0x3f
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d004      	beq.n	800364c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e00c      	b.n	8003666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2205      	movs	r2, #5
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	e175      	b.n	8003980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003694:	2201      	movs	r2, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f040 8164 	bne.w	800397a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d005      	beq.n	80036ca <HAL_GPIO_Init+0x56>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d130      	bne.n	800372c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 0201 	and.w	r2, r3, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d017      	beq.n	8003768 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d123      	bne.n	80037bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	08da      	lsrs	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3208      	adds	r2, #8
 800377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	220f      	movs	r2, #15
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	08da      	lsrs	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3208      	adds	r2, #8
 80037b6:	69b9      	ldr	r1, [r7, #24]
 80037b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	2203      	movs	r2, #3
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80be 	beq.w	800397a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_GPIO_Init+0x324>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	4a65      	ldr	r2, [pc, #404]	; (8003998 <HAL_GPIO_Init+0x324>)
 8003804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003808:	6453      	str	r3, [r2, #68]	; 0x44
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_GPIO_Init+0x324>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003816:	4a61      	ldr	r2, [pc, #388]	; (800399c <HAL_GPIO_Init+0x328>)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_GPIO_Init+0x32c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d037      	beq.n	80038b2 <HAL_GPIO_Init+0x23e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_GPIO_Init+0x330>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_GPIO_Init+0x23a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_GPIO_Init+0x334>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <HAL_GPIO_Init+0x236>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a55      	ldr	r2, [pc, #340]	; (80039ac <HAL_GPIO_Init+0x338>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d025      	beq.n	80038a6 <HAL_GPIO_Init+0x232>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_GPIO_Init+0x33c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x22e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_GPIO_Init+0x340>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0x22a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_GPIO_Init+0x344>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x226>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a51      	ldr	r2, [pc, #324]	; (80039bc <HAL_GPIO_Init+0x348>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_GPIO_Init+0x222>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_GPIO_Init+0x34c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_GPIO_Init+0x21e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4f      	ldr	r2, [pc, #316]	; (80039c4 <HAL_GPIO_Init+0x350>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_GPIO_Init+0x21a>
 800388a:	2309      	movs	r3, #9
 800388c:	e012      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800388e:	230a      	movs	r3, #10
 8003890:	e010      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003892:	2308      	movs	r3, #8
 8003894:	e00e      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003896:	2307      	movs	r3, #7
 8003898:	e00c      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389a:	2306      	movs	r3, #6
 800389c:	e00a      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389e:	2305      	movs	r3, #5
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038b2:	2300      	movs	r3, #0
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038c4:	4935      	ldr	r1, [pc, #212]	; (800399c <HAL_GPIO_Init+0x328>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f6:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_GPIO_Init+0x354>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_GPIO_Init+0x354>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_GPIO_Init+0x354>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	f67f ae86 	bls.w	8003694 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40013800 	.word	0x40013800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40021400 	.word	0x40021400
 80039b8:	40021800 	.word	0x40021800
 80039bc:	40021c00 	.word	0x40021c00
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40022400 	.word	0x40022400
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	4613      	mov	r3, r2
 80039da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039e8:	e003      	b.n	80039f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	041a      	lsls	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	619a      	str	r2, [r3, #24]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a10:	887a      	ldrh	r2, [r7, #2]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	041a      	lsls	r2, r3, #16
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	400b      	ands	r3, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fde2 	bl	800161c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40013c00 	.word	0x40013c00

08003a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a66:	b08f      	sub	sp, #60	; 0x3c
 8003a68:	af0a      	add	r7, sp, #40	; 0x28
 8003a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e116      	b.n	8003ca4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fe fccd 	bl	8002430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fafd 	bl	80070b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	687e      	ldr	r6, [r7, #4]
 8003ac2:	466d      	mov	r5, sp
 8003ac4:	f106 0410 	add.w	r4, r6, #16
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad8:	1d33      	adds	r3, r6, #4
 8003ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f003 fa91 	bl	8007004 <USB_CoreInit>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d7      	b.n	8003ca4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 faeb 	bl	80070d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e04a      	b.n	8003b9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	333d      	adds	r3, #61	; 0x3d
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	333c      	adds	r3, #60	; 0x3c
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	b298      	uxth	r0, r3
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3342      	adds	r3, #66	; 0x42
 8003b42:	4602      	mov	r2, r0
 8003b44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	333f      	adds	r3, #63	; 0x3f
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3344      	adds	r3, #68	; 0x44
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3348      	adds	r3, #72	; 0x48
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3350      	adds	r3, #80	; 0x50
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3af      	bcc.n	8003b06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e044      	b.n	8003c36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	3301      	adds	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3b5      	bcc.n	8003bac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	687e      	ldr	r6, [r7, #4]
 8003c48:	466d      	mov	r5, sp
 8003c4a:	f106 0410 	add.w	r4, r6, #16
 8003c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5e:	1d33      	adds	r3, r6, #4
 8003c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c62:	6838      	ldr	r0, [r7, #0]
 8003c64:	f003 fa84 	bl	8007170 <USB_DevInit>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e014      	b.n	8003ca4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f80a 	bl	8003cac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 fc3e 	bl	800751e <USB_DevDisconnect>

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	10000003 	.word	0x10000003

08003cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40007000 	.word	0x40007000

08003d14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_PWREx_EnableOverDrive+0x98>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a22      	ldr	r2, [pc, #136]	; (8003dac <HAL_PWREx_EnableOverDrive+0x98>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_PWREx_EnableOverDrive+0x98>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d42:	f7fe fc55 	bl	80025f0 <HAL_GetTick>
 8003d46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d48:	e009      	b.n	8003d5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d4a:	f7fe fc51 	bl	80025f0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d58:	d901      	bls.n	8003d5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e022      	b.n	8003da4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6a:	d1ee      	bne.n	8003d4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d78:	f7fe fc3a 	bl	80025f0 <HAL_GetTick>
 8003d7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d7e:	e009      	b.n	8003d94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d80:	f7fe fc36 	bl	80025f0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d8e:	d901      	bls.n	8003d94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e007      	b.n	8003da4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003da0:	d1ee      	bne.n	8003d80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e29b      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8087 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd8:	4b96      	ldr	r3, [pc, #600]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d00c      	beq.n	8003dfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de4:	4b93      	ldr	r3, [pc, #588]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d112      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62>
 8003df0:	4b90      	ldr	r3, [pc, #576]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfe:	4b8d      	ldr	r3, [pc, #564]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d06c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x130>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d168      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e275      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x7a>
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a83      	ldr	r2, [pc, #524]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e02e      	b.n	8003e8c <HAL_RCC_OscConfig+0xd8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x9c>
 8003e36:	4b7f      	ldr	r3, [pc, #508]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7e      	ldr	r2, [pc, #504]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7b      	ldr	r2, [pc, #492]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e01d      	b.n	8003e8c <HAL_RCC_OscConfig+0xd8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0xc0>
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a75      	ldr	r2, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b73      	ldr	r3, [pc, #460]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a72      	ldr	r2, [pc, #456]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0xd8>
 8003e74:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6e      	ldr	r2, [pc, #440]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6b      	ldr	r2, [pc, #428]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe fbac 	bl	80025f0 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fe fba8 	bl	80025f0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e229      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b61      	ldr	r3, [pc, #388]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0xe8>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fb98 	bl	80025f0 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fb94 	bl	80025f0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e215      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	4b57      	ldr	r3, [pc, #348]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x110>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d069      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef2:	4b50      	ldr	r3, [pc, #320]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b4d      	ldr	r3, [pc, #308]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x190>
 8003f0a:	4b4a      	ldr	r3, [pc, #296]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1e9      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b41      	ldr	r3, [pc, #260]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	493d      	ldr	r1, [pc, #244]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e040      	b.n	8003fc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d023      	beq.n	8003f94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b39      	ldr	r3, [pc, #228]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a38      	ldr	r2, [pc, #224]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe fb4a 	bl	80025f0 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fe fb46 	bl	80025f0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1c7      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f72:	4b30      	ldr	r3, [pc, #192]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4929      	ldr	r1, [pc, #164]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
 8003f92:	e018      	b.n	8003fc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fb26 	bl	80025f0 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fb22 	bl	80025f0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1a3      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d038      	beq.n	8004044 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d019      	beq.n	800400e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fda:	4b16      	ldr	r3, [pc, #88]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fe fb03 	bl	80025f0 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fe faff 	bl	80025f0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e180      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x23a>
 800400c:	e01a      	b.n	8004044 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8004010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004012:	4a08      	ldr	r2, [pc, #32]	; (8004034 <HAL_RCC_OscConfig+0x280>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fe fae9 	bl	80025f0 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004022:	f7fe fae5 	bl	80025f0 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d903      	bls.n	8004038 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e166      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
 8004034:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	4b92      	ldr	r3, [pc, #584]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 800403a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ee      	bne.n	8004022 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a4 	beq.w	800419a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b8c      	ldr	r3, [pc, #560]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b89      	ldr	r3, [pc, #548]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a88      	ldr	r2, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b86      	ldr	r3, [pc, #536]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407a:	4b83      	ldr	r3, [pc, #524]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004086:	4b80      	ldr	r3, [pc, #512]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7f      	ldr	r2, [pc, #508]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fe faad 	bl	80025f0 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fe faa9 	bl	80025f0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e12a      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ac:	4b76      	ldr	r3, [pc, #472]	; (8004288 <HAL_RCC_OscConfig+0x4d4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x31a>
 80040c0:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a6f      	ldr	r2, [pc, #444]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	e02d      	b.n	800412a <HAL_RCC_OscConfig+0x376>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x33c>
 80040d6:	4b6b      	ldr	r3, [pc, #428]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a67      	ldr	r2, [pc, #412]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	e01c      	b.n	800412a <HAL_RCC_OscConfig+0x376>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d10c      	bne.n	8004112 <HAL_RCC_OscConfig+0x35e>
 80040f8:	4b62      	ldr	r3, [pc, #392]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a61      	ldr	r2, [pc, #388]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
 8004104:	4b5f      	ldr	r3, [pc, #380]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4a5e      	ldr	r2, [pc, #376]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
 8004110:	e00b      	b.n	800412a <HAL_RCC_OscConfig+0x376>
 8004112:	4b5c      	ldr	r3, [pc, #368]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a5b      	ldr	r2, [pc, #364]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d015      	beq.n	800415e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fe fa5d 	bl	80025f0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fe fa59 	bl	80025f0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0d8      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ee      	beq.n	800413a <HAL_RCC_OscConfig+0x386>
 800415c:	e014      	b.n	8004188 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415e:	f7fe fa47 	bl	80025f0 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004164:	e00a      	b.n	800417c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fe fa43 	bl	80025f0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f241 3288 	movw	r2, #5000	; 0x1388
 8004174:	4293      	cmp	r3, r2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e0c2      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ee      	bne.n	8004166 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80ae 	beq.w	8004300 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d06d      	beq.n	800428c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d14b      	bne.n	8004250 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a31      	ldr	r2, [pc, #196]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80041be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fe fa14 	bl	80025f0 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fe fa10 	bl	80025f0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e091      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	491b      	ldr	r1, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe f9e2 	bl	80025f0 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fe f9de 	bl	80025f0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e05f      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x47c>
 800424e:	e057      	b.n	8004300 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe f9c8 	bl	80025f0 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe f9c4 	bl	80025f0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e045      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_OscConfig+0x4d0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x4b0>
 8004282:	e03d      	b.n	8004300 <HAL_RCC_OscConfig+0x54c>
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800428c:	4b1f      	ldr	r3, [pc, #124]	; (800430c <HAL_RCC_OscConfig+0x558>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d030      	beq.n	80042fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d129      	bne.n	80042fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d122      	bne.n	80042fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d119      	bne.n	80042fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	3b01      	subs	r3, #1
 80042d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d10f      	bne.n	80042fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800

08004310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0d0      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d910      	bls.n	8004358 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4965      	ldr	r1, [pc, #404]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0b8      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d020      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004370:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a58      	ldr	r2, [pc, #352]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800437a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004388:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 800438e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	494d      	ldr	r1, [pc, #308]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d040      	beq.n	8004434 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b47      	ldr	r3, [pc, #284]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d115      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e07f      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e073      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e06b      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f2:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4936      	ldr	r1, [pc, #216]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fe f8f4 	bl	80025f0 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	e00a      	b.n	8004422 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440c:	f7fe f8f0 	bl	80025f0 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e053      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 020c 	and.w	r2, r3, #12
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	429a      	cmp	r2, r3
 8004432:	d1eb      	bne.n	800440c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d210      	bcs.n	8004464 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 020f 	bic.w	r2, r3, #15
 800444a:	4922      	ldr	r1, [pc, #136]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e032      	b.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4916      	ldr	r1, [pc, #88]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	490e      	ldr	r1, [pc, #56]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044a2:	f000 f821 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	490a      	ldr	r1, [pc, #40]	; (80044dc <HAL_RCC_ClockConfig+0x1cc>)
 80044b4:	5ccb      	ldrb	r3, [r1, r3]
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x1d0>)
 80044bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x1d4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe f850 	bl	8002568 <HAL_InitTick>

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023c00 	.word	0x40023c00
 80044d8:	40023800 	.word	0x40023800
 80044dc:	0800a4ec 	.word	0x0800a4ec
 80044e0:	20000018 	.word	0x20000018
 80044e4:	2000001c 	.word	0x2000001c

080044e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ec:	b094      	sub	sp, #80	; 0x50
 80044ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
 80044f4:	2300      	movs	r3, #0
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	2300      	movs	r3, #0
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004500:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d00d      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x40>
 800450c:	2b08      	cmp	r3, #8
 800450e:	f200 80e1 	bhi.w	80046d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x34>
 8004516:	2b04      	cmp	r3, #4
 8004518:	d003      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0x3a>
 800451a:	e0db      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b73      	ldr	r3, [pc, #460]	; (80046ec <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004520:	e0db      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004522:	4b73      	ldr	r3, [pc, #460]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004526:	e0d8      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004528:	4b6f      	ldr	r3, [pc, #444]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004532:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d063      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453e:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	2200      	movs	r2, #0
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
 8004548:	63fa      	str	r2, [r7, #60]	; 0x3c
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
 8004556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456c:	0150      	lsls	r0, r2, #5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4621      	mov	r1, r4
 8004574:	1a51      	subs	r1, r2, r1
 8004576:	6139      	str	r1, [r7, #16]
 8004578:	4629      	mov	r1, r5
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800458c:	4659      	mov	r1, fp
 800458e:	018b      	lsls	r3, r1, #6
 8004590:	4651      	mov	r1, sl
 8004592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004596:	4651      	mov	r1, sl
 8004598:	018a      	lsls	r2, r1, #6
 800459a:	4651      	mov	r1, sl
 800459c:	ebb2 0801 	subs.w	r8, r2, r1
 80045a0:	4659      	mov	r1, fp
 80045a2:	eb63 0901 	sbc.w	r9, r3, r1
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ba:	4690      	mov	r8, r2
 80045bc:	4699      	mov	r9, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	eb18 0303 	adds.w	r3, r8, r3
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	462b      	mov	r3, r5
 80045c8:	eb49 0303 	adc.w	r3, r9, r3
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045da:	4629      	mov	r1, r5
 80045dc:	024b      	lsls	r3, r1, #9
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e4:	4621      	mov	r1, r4
 80045e6:	024a      	lsls	r2, r1, #9
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045f8:	f7fb fe7a 	bl	80002f0 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004604:	e058      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	2200      	movs	r2, #0
 800460e:	4618      	mov	r0, r3
 8004610:	4611      	mov	r1, r2
 8004612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f04f 0100 	mov.w	r1, #0
 800462c:	0159      	lsls	r1, r3, #5
 800462e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004632:	0150      	lsls	r0, r2, #5
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4641      	mov	r1, r8
 800463a:	ebb2 0a01 	subs.w	sl, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb63 0b01 	sbc.w	fp, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004658:	ebb2 040a 	subs.w	r4, r2, sl
 800465c:	eb63 050b 	sbc.w	r5, r3, fp
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	00eb      	lsls	r3, r5, #3
 800466a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466e:	00e2      	lsls	r2, r4, #3
 8004670:	4614      	mov	r4, r2
 8004672:	461d      	mov	r5, r3
 8004674:	4643      	mov	r3, r8
 8004676:	18e3      	adds	r3, r4, r3
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	464b      	mov	r3, r9
 800467c:	eb45 0303 	adc.w	r3, r5, r3
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800468e:	4629      	mov	r1, r5
 8004690:	028b      	lsls	r3, r1, #10
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004698:	4621      	mov	r1, r4
 800469a:	028a      	lsls	r2, r1, #10
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	61fa      	str	r2, [r7, #28]
 80046a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ac:	f7fb fe20 	bl	80002f0 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	3301      	adds	r3, #1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80046c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046d2:	e002      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetSysClockFreq+0x204>)
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3750      	adds	r7, #80	; 0x50
 80046e0:	46bd      	mov	sp, r7
 80046e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000018 	.word	0x20000018

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	0800a4fc 	.word	0x0800a4fc

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004738:	f7ff ffdc 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 800473c:	4602      	mov	r2, r0
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0b5b      	lsrs	r3, r3, #13
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4903      	ldr	r1, [pc, #12]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	0800a4fc 	.word	0x0800a4fc

0800475c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004784:	4b69      	ldr	r3, [pc, #420]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a68      	ldr	r2, [pc, #416]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800478e:	6093      	str	r3, [r2, #8]
 8004790:	4b66      	ldr	r3, [pc, #408]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	4964      	ldr	r1, [pc, #400]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d017      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b6:	4b5d      	ldr	r3, [pc, #372]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	4959      	ldr	r1, [pc, #356]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d4:	d101      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d017      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	494a      	ldr	r1, [pc, #296]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004810:	d101      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800481e:	2301      	movs	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 808b 	beq.w	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004840:	4b3a      	ldr	r3, [pc, #232]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	4a39      	ldr	r2, [pc, #228]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484a:	6413      	str	r3, [r2, #64]	; 0x40
 800484c:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a34      	ldr	r2, [pc, #208]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800485e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004864:	f7fd fec4 	bl	80025f0 <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fd fec0 	bl	80025f0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e38f      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d035      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d02e      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a8:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a1d      	ldr	r2, [pc, #116]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048ca:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d114      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fe88 	bl	80025f0 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fd fe84 	bl	80025f0 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e351      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ee      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004912:	d111      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004922:	400b      	ands	r3, r1
 8004924:	4901      	ldr	r1, [pc, #4]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
 800492a:	e00b      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800492c:	40023800 	.word	0x40023800
 8004930:	40007000 	.word	0x40007000
 8004934:	0ffffcff 	.word	0x0ffffcff
 8004938:	4bac      	ldr	r3, [pc, #688]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4aab      	ldr	r2, [pc, #684]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004942:	6093      	str	r3, [r2, #8]
 8004944:	4ba9      	ldr	r3, [pc, #676]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	49a6      	ldr	r1, [pc, #664]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004952:	4313      	orrs	r3, r2
 8004954:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004962:	4ba2      	ldr	r3, [pc, #648]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004968:	4aa0      	ldr	r2, [pc, #640]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800496e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004972:	4b9e      	ldr	r3, [pc, #632]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004974:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	499b      	ldr	r1, [pc, #620]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004990:	4b96      	ldr	r3, [pc, #600]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499e:	4993      	ldr	r1, [pc, #588]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b2:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c0:	498a      	ldr	r1, [pc, #552]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d4:	4b85      	ldr	r3, [pc, #532]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e2:	4982      	ldr	r1, [pc, #520]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049f6:	4b7d      	ldr	r3, [pc, #500]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4979      	ldr	r1, [pc, #484]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a18:	4b74      	ldr	r3, [pc, #464]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	4971      	ldr	r1, [pc, #452]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a3a:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f023 020c 	bic.w	r2, r3, #12
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a48:	4968      	ldr	r1, [pc, #416]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5c:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4960      	ldr	r1, [pc, #384]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	4957      	ldr	r1, [pc, #348]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aa0:	4b52      	ldr	r3, [pc, #328]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	494f      	ldr	r1, [pc, #316]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	4946      	ldr	r1, [pc, #280]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	493e      	ldr	r1, [pc, #248]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b14:	4935      	ldr	r1, [pc, #212]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b28:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b36:	492d      	ldr	r1, [pc, #180]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b58:	4924      	ldr	r1, [pc, #144]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b68:	d101      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	4914      	ldr	r1, [pc, #80]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bbc:	490b      	ldr	r1, [pc, #44]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00f      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be0:	4902      	ldr	r1, [pc, #8]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bfc:	4b8a      	ldr	r3, [pc, #552]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	4986      	ldr	r1, [pc, #536]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c20:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c30:	497d      	ldr	r1, [pc, #500]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d006      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80d6 	beq.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c4c:	4b76      	ldr	r3, [pc, #472]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a75      	ldr	r2, [pc, #468]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c58:	f7fd fcca 	bl	80025f0 <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c60:	f7fd fcc6 	bl	80025f0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e195      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c72:	4b6d      	ldr	r3, [pc, #436]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d021      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11d      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c92:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca6:	0e1b      	lsrs	r3, r3, #24
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	019a      	lsls	r2, r3, #6
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	4958      	ldr	r1, [pc, #352]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02e      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf8:	d129      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cfa:	4b4b      	ldr	r3, [pc, #300]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d08:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0e:	0f1b      	lsrs	r3, r3, #28
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	019a      	lsls	r2, r3, #6
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	493e      	ldr	r1, [pc, #248]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d36:	4b3c      	ldr	r3, [pc, #240]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3c:	f023 021f 	bic.w	r2, r3, #31
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	3b01      	subs	r3, #1
 8004d46:	4938      	ldr	r1, [pc, #224]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01d      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d5a:	4b33      	ldr	r3, [pc, #204]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d60:	0e1b      	lsrs	r3, r3, #24
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d68:	4b2f      	ldr	r3, [pc, #188]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6e:	0f1b      	lsrs	r3, r3, #28
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	019a      	lsls	r2, r3, #6
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	071b      	lsls	r3, r3, #28
 8004d8e:	4926      	ldr	r1, [pc, #152]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	019a      	lsls	r2, r3, #6
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	071b      	lsls	r3, r3, #28
 8004dbe:	491a      	ldr	r1, [pc, #104]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dc6:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd2:	f7fd fc0d 	bl	80025f0 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dda:	f7fd fc09 	bl	80025f0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b64      	cmp	r3, #100	; 0x64
 8004de6:	d901      	bls.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0d8      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	f040 80ce 	bne.w	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0c:	f7fd fbf0 	bl	80025f0 <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e12:	e00b      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e14:	f7fd fbec 	bl	80025f0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d904      	bls.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0bb      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e2c:	4b5e      	ldr	r3, [pc, #376]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e38:	d0ec      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02e      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d12a      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e62:	4b51      	ldr	r3, [pc, #324]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e70:	4b4d      	ldr	r3, [pc, #308]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	0f1b      	lsrs	r3, r3, #28
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	019a      	lsls	r2, r3, #6
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	061b      	lsls	r3, r3, #24
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	071b      	lsls	r3, r3, #28
 8004e96:	4944      	ldr	r1, [pc, #272]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e9e:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	3b01      	subs	r3, #1
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	493d      	ldr	r1, [pc, #244]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d022      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ecc:	d11d      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ece:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed4:	0e1b      	lsrs	r3, r3, #24
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004edc:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	0f1b      	lsrs	r3, r3, #28
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	019a      	lsls	r2, r3, #6
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	4929      	ldr	r1, [pc, #164]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d028      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	019a      	lsls	r2, r3, #6
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	061b      	lsls	r3, r3, #24
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	071b      	lsls	r3, r3, #28
 8004f4a:	4917      	ldr	r1, [pc, #92]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4911      	ldr	r1, [pc, #68]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a0e      	ldr	r2, [pc, #56]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f74:	f7fd fb3c 	bl	80025f0 <HAL_GetTick>
 8004f78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f7c:	f7fd fb38 	bl	80025f0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e007      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9a:	d1ef      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800

08004fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e049      	b.n	8005052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fd f908 	bl	80021e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fb80 	bl	80056f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a1a      	ldr	r2, [r3, #32]
 8005068:	f241 1311 	movw	r3, #4369	; 0x1111
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_TIM_Base_Stop+0x38>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	f240 4344 	movw	r3, #1092	; 0x444
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d107      	bne.n	8005092 <HAL_TIM_Base_Stop+0x38>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e054      	b.n	800516a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a26      	ldr	r2, [pc, #152]	; (8005178 <HAL_TIM_Base_Start_IT+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d01d      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_TIM_Base_Start_IT+0xd4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	; (8005180 <HAL_TIM_Base_Start_IT+0xd8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_TIM_Base_Start_IT+0xdc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <HAL_TIM_Base_Start_IT+0xe0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	; (800518c <HAL_TIM_Base_Start_IT+0xe4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_TIM_Base_Start_IT+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d115      	bne.n	8005154 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	4b19      	ldr	r3, [pc, #100]	; (8005194 <HAL_TIM_Base_Start_IT+0xec>)
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d015      	beq.n	8005166 <HAL_TIM_Base_Start_IT+0xbe>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d011      	beq.n	8005166 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e008      	b.n	8005166 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e000      	b.n	8005168 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40001800 	.word	0x40001800
 8005194:	00010007 	.word	0x00010007

08005198 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <HAL_TIM_Base_Stop_IT+0x48>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	f240 4344 	movw	r3, #1092	; 0x444
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_Base_Stop_IT+0x48>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e08f      	b.n	800532c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc ff77 	bl	8002114 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_TIM_Encoder_Init+0x13c>)
 800523a:	400b      	ands	r3, r1
 800523c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 fa51 	bl	80056f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_TIM_Encoder_Init+0x140>)
 8005274:	4013      	ands	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	4313      	orrs	r3, r2
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4b2b      	ldr	r3, [pc, #172]	; (800533c <HAL_TIM_Encoder_Init+0x144>)
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <HAL_TIM_Encoder_Init+0x148>)
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	4313      	orrs	r3, r2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	011a      	lsls	r2, r3, #4
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	031b      	lsls	r3, r3, #12
 80052b8:	4313      	orrs	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4313      	orrs	r3, r2
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	fffebff8 	.word	0xfffebff8
 8005338:	fffffcfc 	.word	0xfffffcfc
 800533c:	fffff3f3 	.word	0xfffff3f3
 8005340:	ffff0f0f 	.word	0xffff0f0f

08005344 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005354:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800535c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005364:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800536c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d110      	bne.n	8005396 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d102      	bne.n	8005380 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800537a:	7b7b      	ldrb	r3, [r7, #13]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e069      	b.n	8005458 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005394:	e031      	b.n	80053fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d110      	bne.n	80053be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d102      	bne.n	80053a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053a2:	7b3b      	ldrb	r3, [r7, #12]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e055      	b.n	8005458 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053bc:	e01d      	b.n	80053fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d108      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ca:	7b7b      	ldrb	r3, [r7, #13]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d0:	7b3b      	ldrb	r3, [r7, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e03e      	b.n	8005458 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_TIM_Encoder_Start+0xc4>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b04      	cmp	r3, #4
 8005404:	d008      	beq.n	8005418 <HAL_TIM_Encoder_Start+0xd4>
 8005406:	e00f      	b.n	8005428 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2201      	movs	r2, #1
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fa0d 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8005416:	e016      	b.n	8005446 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	2104      	movs	r1, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fa05 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8005426:	e00e      	b.n	8005446 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2201      	movs	r2, #1
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f9fd 	bl	8005830 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	2104      	movs	r1, #4
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f9f6 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8005444:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d122      	bne.n	80054bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d11b      	bne.n	80054bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0202 	mvn.w	r2, #2
 800548c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f905 	bl	80056b2 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8f7 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f908 	bl	80056c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d122      	bne.n	8005510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d11b      	bne.n	8005510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0204 	mvn.w	r2, #4
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8db 	bl	80056b2 <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8cd 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8de 	bl	80056c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b08      	cmp	r3, #8
 800551c:	d122      	bne.n	8005564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d11b      	bne.n	8005564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0208 	mvn.w	r2, #8
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8b1 	bl	80056b2 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8a3 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8b4 	bl	80056c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b10      	cmp	r3, #16
 8005570:	d122      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b10      	cmp	r3, #16
 800557e:	d11b      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0210 	mvn.w	r2, #16
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2208      	movs	r2, #8
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f887 	bl	80056b2 <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f879 	bl	800569e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f88a 	bl	80056c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0201 	mvn.w	r2, #1
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb ffae 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d10e      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9ce 	bl	80059ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561e:	d10e      	bne.n	800563e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d107      	bne.n	800563e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9c1 	bl	80059c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d10e      	bne.n	800566a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d107      	bne.n	800566a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f838 	bl	80056da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b20      	cmp	r3, #32
 8005676:	d10e      	bne.n	8005696 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b20      	cmp	r3, #32
 8005684:	d107      	bne.n	8005696 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0220 	mvn.w	r2, #32
 800568e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f981 	bl	8005998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a40      	ldr	r2, [pc, #256]	; (8005804 <TIM_Base_SetConfig+0x114>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d00f      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3d      	ldr	r2, [pc, #244]	; (8005808 <TIM_Base_SetConfig+0x118>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3c      	ldr	r2, [pc, #240]	; (800580c <TIM_Base_SetConfig+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d007      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a3b      	ldr	r2, [pc, #236]	; (8005810 <TIM_Base_SetConfig+0x120>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a3a      	ldr	r2, [pc, #232]	; (8005814 <TIM_Base_SetConfig+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d108      	bne.n	8005742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2f      	ldr	r2, [pc, #188]	; (8005804 <TIM_Base_SetConfig+0x114>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d02b      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d027      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2c      	ldr	r2, [pc, #176]	; (8005808 <TIM_Base_SetConfig+0x118>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d023      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2b      	ldr	r2, [pc, #172]	; (800580c <TIM_Base_SetConfig+0x11c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01f      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <TIM_Base_SetConfig+0x120>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01b      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a29      	ldr	r2, [pc, #164]	; (8005814 <TIM_Base_SetConfig+0x124>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d017      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a28      	ldr	r2, [pc, #160]	; (8005818 <TIM_Base_SetConfig+0x128>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <TIM_Base_SetConfig+0x12c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00f      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <TIM_Base_SetConfig+0x130>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00b      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_Base_SetConfig+0x134>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a24      	ldr	r2, [pc, #144]	; (8005828 <TIM_Base_SetConfig+0x138>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <TIM_Base_SetConfig+0x13c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <TIM_Base_SetConfig+0x114>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0xf8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <TIM_Base_SetConfig+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d103      	bne.n	80057f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	615a      	str	r2, [r3, #20]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40010000 	.word	0x40010000
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	40010400 	.word	0x40010400
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800
 8005824:	40001800 	.word	0x40001800
 8005828:	40001c00 	.word	0x40001c00
 800582c:	40002000 	.word	0x40002000

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e06d      	b.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a30      	ldr	r2, [pc, #192]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d108      	bne.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a20      	ldr	r2, [pc, #128]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d022      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005906:	d01d      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1a      	ldr	r2, [pc, #104]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a15      	ldr	r2, [pc, #84]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d10c      	bne.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	4313      	orrs	r3, r2
 8005954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	40010000 	.word	0x40010000
 8005980:	40010400 	.word	0x40010400
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40014000 	.word	0x40014000
 8005994:	40001800 	.word	0x40001800

08005998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e040      	b.n	8005a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc fca0 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fc18 	bl	8006248 <UART_SetConfig>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e022      	b.n	8005a68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fe70 	bl	8006710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fef7 	bl	8006854 <UART_CheckIdleState>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08a      	sub	sp, #40	; 0x28
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	f040 8081 	bne.w	8005b8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_UART_Transmit+0x26>
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e079      	b.n	8005b8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_UART_Transmit+0x38>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e072      	b.n	8005b8e <HAL_UART_Transmit+0x11e>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2221      	movs	r2, #33	; 0x21
 8005abc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005abe:	f7fc fd97 	bl	80025f0 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005adc:	d108      	bne.n	8005af0 <HAL_UART_Transmit+0x80>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e003      	b.n	8005af8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b00:	e02c      	b.n	8005b5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 feea 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e038      	b.n	8005b8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3302      	adds	r3, #2
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e007      	b.n	8005b4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1cc      	bne.n	8005b02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2140      	movs	r1, #64	; 0x40
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 feb7 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e005      	b.n	8005b8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08a      	sub	sp, #40	; 0x28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d13d      	bne.n	8005c28 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Receive_IT+0x22>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e036      	b.n	8005c2a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Receive_IT+0x34>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e02f      	b.n	8005c2a <HAL_UART_Receive_IT+0x94>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	69f9      	ldr	r1, [r7, #28]
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 ff26 	bl	8006a70 <UART_Start_Receive_IT>
 8005c24:	4603      	mov	r3, r0
 8005c26:	e000      	b.n	8005c2a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3728      	adds	r7, #40	; 0x28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b0ba      	sub	sp, #232	; 0xe8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c62:	4013      	ands	r3, r2
 8005c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00f      	beq.n	8005c9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 82a4 	beq.w	80061da <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
      }
      return;
 8005c9a:	e29e      	b.n	80061da <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8117 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cb6:	4b85      	ldr	r3, [pc, #532]	; (8005ecc <HAL_UART_IRQHandler+0x298>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 810a 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d011      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xbc>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce6:	f043 0201 	orr.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <HAL_UART_IRQHandler+0xec>
 8005cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d16:	f043 0204 	orr.w	r2, r3, #4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d011      	beq.n	8005d50 <HAL_UART_IRQHandler+0x11c>
 8005d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d46:	f043 0202 	orr.w	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d012      	beq.n	8005dbe <HAL_UART_IRQHandler+0x18a>
 8005d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 820a 	beq.w	80061de <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d005      	beq.n	8005e16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d04f      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fef4 	bl	8006c04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d141      	bne.n	8005eae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d9      	bne.n	8005e2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d013      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <HAL_UART_IRQHandler+0x29c>)
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fd fbcf 	bl	800362e <HAL_DMA_Abort_IT>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d017      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	e00f      	b.n	8005ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9ae 	bl	8006208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	e00b      	b.n	8005ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9aa 	bl	8006208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	e007      	b.n	8005ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9a6 	bl	8006208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005ec4:	e18b      	b.n	80061de <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec6:	bf00      	nop
    return;
 8005ec8:	e189      	b.n	80061de <HAL_UART_IRQHandler+0x5aa>
 8005eca:	bf00      	nop
 8005ecc:	04000120 	.word	0x04000120
 8005ed0:	08006ccb 	.word	0x08006ccb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 8144 	bne.w	8006166 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 813d 	beq.w	8006166 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8136 	beq.w	8006166 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2210      	movs	r2, #16
 8005f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	f040 80b2 	bne.w	8006076 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 815d 	beq.w	80061e2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f32:	429a      	cmp	r2, r3
 8005f34:	f080 8155 	bcs.w	80061e2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4c:	f000 8085 	beq.w	800605a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1da      	bne.n	8005f50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e1      	bne.n	8005f9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602a:	f023 0310 	bic.w	r3, r3, #16
 800602e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603c:	65bb      	str	r3, [r7, #88]	; 0x58
 800603e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800604a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e4      	bne.n	800601a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fa7a 	bl	800354e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006066:	b29b      	uxth	r3, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	b29b      	uxth	r3, r3
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8d4 	bl	800621c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006074:	e0b5      	b.n	80061e2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006082:	b29b      	uxth	r3, r3
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80a7 	beq.w	80061e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80a2 	beq.w	80061e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
 80060c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e4      	bne.n	80060a2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3308      	adds	r3, #8
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	623b      	str	r3, [r7, #32]
   return(result);
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3308      	adds	r3, #8
 80060f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060fc:	633a      	str	r2, [r7, #48]	; 0x30
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e3      	bne.n	80060d8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006144:	61fb      	str	r3, [r7, #28]
 8006146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	617b      	str	r3, [r7, #20]
   return(result);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e4      	bne.n	8006122 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f85c 	bl	800621c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006164:	e03f      	b.n	80061e6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <HAL_UART_IRQHandler+0x55c>
 8006172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006186:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f853 	bl	8006234 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800618e:	e02d      	b.n	80061ec <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00e      	beq.n	80061ba <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01c      	beq.n	80061ea <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
    }
    return;
 80061b8:	e017      	b.n	80061ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <HAL_UART_IRQHandler+0x5b8>
 80061c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fd8f 	bl	8006cf6 <UART_EndTransmit_IT>
    return;
 80061d8:	e008      	b.n	80061ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80061da:	bf00      	nop
 80061dc:	e006      	b.n	80061ec <HAL_UART_IRQHandler+0x5b8>
    return;
 80061de:	bf00      	nop
 80061e0:	e004      	b.n	80061ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_UART_IRQHandler+0x5b8>
    return;
 80061ea:	bf00      	nop
  }

}
 80061ec:	37e8      	adds	r7, #232	; 0xe8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4ba6      	ldr	r3, [pc, #664]	; (800650c <UART_SetConfig+0x2c4>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	6979      	ldr	r1, [r7, #20]
 800627c:	430b      	orrs	r3, r1
 800627e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a94      	ldr	r2, [pc, #592]	; (8006510 <UART_SetConfig+0x2c8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d120      	bne.n	8006306 <UART_SetConfig+0xbe>
 80062c4:	4b93      	ldr	r3, [pc, #588]	; (8006514 <UART_SetConfig+0x2cc>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d816      	bhi.n	8006300 <UART_SetConfig+0xb8>
 80062d2:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <UART_SetConfig+0x90>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	080062f5 	.word	0x080062f5
 80062e0:	080062ef 	.word	0x080062ef
 80062e4:	080062fb 	.word	0x080062fb
 80062e8:	2301      	movs	r3, #1
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e150      	b.n	8006590 <UART_SetConfig+0x348>
 80062ee:	2302      	movs	r3, #2
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e14d      	b.n	8006590 <UART_SetConfig+0x348>
 80062f4:	2304      	movs	r3, #4
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e14a      	b.n	8006590 <UART_SetConfig+0x348>
 80062fa:	2308      	movs	r3, #8
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e147      	b.n	8006590 <UART_SetConfig+0x348>
 8006300:	2310      	movs	r3, #16
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e144      	b.n	8006590 <UART_SetConfig+0x348>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a83      	ldr	r2, [pc, #524]	; (8006518 <UART_SetConfig+0x2d0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d132      	bne.n	8006376 <UART_SetConfig+0x12e>
 8006310:	4b80      	ldr	r3, [pc, #512]	; (8006514 <UART_SetConfig+0x2cc>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b0c      	cmp	r3, #12
 800631c:	d828      	bhi.n	8006370 <UART_SetConfig+0x128>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0xdc>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006359 	.word	0x08006359
 8006328:	08006371 	.word	0x08006371
 800632c:	08006371 	.word	0x08006371
 8006330:	08006371 	.word	0x08006371
 8006334:	08006365 	.word	0x08006365
 8006338:	08006371 	.word	0x08006371
 800633c:	08006371 	.word	0x08006371
 8006340:	08006371 	.word	0x08006371
 8006344:	0800635f 	.word	0x0800635f
 8006348:	08006371 	.word	0x08006371
 800634c:	08006371 	.word	0x08006371
 8006350:	08006371 	.word	0x08006371
 8006354:	0800636b 	.word	0x0800636b
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e118      	b.n	8006590 <UART_SetConfig+0x348>
 800635e:	2302      	movs	r3, #2
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e115      	b.n	8006590 <UART_SetConfig+0x348>
 8006364:	2304      	movs	r3, #4
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e112      	b.n	8006590 <UART_SetConfig+0x348>
 800636a:	2308      	movs	r3, #8
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e10f      	b.n	8006590 <UART_SetConfig+0x348>
 8006370:	2310      	movs	r3, #16
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e10c      	b.n	8006590 <UART_SetConfig+0x348>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a68      	ldr	r2, [pc, #416]	; (800651c <UART_SetConfig+0x2d4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d120      	bne.n	80063c2 <UART_SetConfig+0x17a>
 8006380:	4b64      	ldr	r3, [pc, #400]	; (8006514 <UART_SetConfig+0x2cc>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800638a:	2b30      	cmp	r3, #48	; 0x30
 800638c:	d013      	beq.n	80063b6 <UART_SetConfig+0x16e>
 800638e:	2b30      	cmp	r3, #48	; 0x30
 8006390:	d814      	bhi.n	80063bc <UART_SetConfig+0x174>
 8006392:	2b20      	cmp	r3, #32
 8006394:	d009      	beq.n	80063aa <UART_SetConfig+0x162>
 8006396:	2b20      	cmp	r3, #32
 8006398:	d810      	bhi.n	80063bc <UART_SetConfig+0x174>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <UART_SetConfig+0x15c>
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d006      	beq.n	80063b0 <UART_SetConfig+0x168>
 80063a2:	e00b      	b.n	80063bc <UART_SetConfig+0x174>
 80063a4:	2300      	movs	r3, #0
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e0f2      	b.n	8006590 <UART_SetConfig+0x348>
 80063aa:	2302      	movs	r3, #2
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e0ef      	b.n	8006590 <UART_SetConfig+0x348>
 80063b0:	2304      	movs	r3, #4
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e0ec      	b.n	8006590 <UART_SetConfig+0x348>
 80063b6:	2308      	movs	r3, #8
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0e9      	b.n	8006590 <UART_SetConfig+0x348>
 80063bc:	2310      	movs	r3, #16
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e0e6      	b.n	8006590 <UART_SetConfig+0x348>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a56      	ldr	r2, [pc, #344]	; (8006520 <UART_SetConfig+0x2d8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d120      	bne.n	800640e <UART_SetConfig+0x1c6>
 80063cc:	4b51      	ldr	r3, [pc, #324]	; (8006514 <UART_SetConfig+0x2cc>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063d6:	2bc0      	cmp	r3, #192	; 0xc0
 80063d8:	d013      	beq.n	8006402 <UART_SetConfig+0x1ba>
 80063da:	2bc0      	cmp	r3, #192	; 0xc0
 80063dc:	d814      	bhi.n	8006408 <UART_SetConfig+0x1c0>
 80063de:	2b80      	cmp	r3, #128	; 0x80
 80063e0:	d009      	beq.n	80063f6 <UART_SetConfig+0x1ae>
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d810      	bhi.n	8006408 <UART_SetConfig+0x1c0>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <UART_SetConfig+0x1a8>
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d006      	beq.n	80063fc <UART_SetConfig+0x1b4>
 80063ee:	e00b      	b.n	8006408 <UART_SetConfig+0x1c0>
 80063f0:	2300      	movs	r3, #0
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e0cc      	b.n	8006590 <UART_SetConfig+0x348>
 80063f6:	2302      	movs	r3, #2
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e0c9      	b.n	8006590 <UART_SetConfig+0x348>
 80063fc:	2304      	movs	r3, #4
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e0c6      	b.n	8006590 <UART_SetConfig+0x348>
 8006402:	2308      	movs	r3, #8
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e0c3      	b.n	8006590 <UART_SetConfig+0x348>
 8006408:	2310      	movs	r3, #16
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e0c0      	b.n	8006590 <UART_SetConfig+0x348>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a44      	ldr	r2, [pc, #272]	; (8006524 <UART_SetConfig+0x2dc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d125      	bne.n	8006464 <UART_SetConfig+0x21c>
 8006418:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <UART_SetConfig+0x2cc>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006426:	d017      	beq.n	8006458 <UART_SetConfig+0x210>
 8006428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800642c:	d817      	bhi.n	800645e <UART_SetConfig+0x216>
 800642e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006432:	d00b      	beq.n	800644c <UART_SetConfig+0x204>
 8006434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006438:	d811      	bhi.n	800645e <UART_SetConfig+0x216>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <UART_SetConfig+0x1fe>
 800643e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006442:	d006      	beq.n	8006452 <UART_SetConfig+0x20a>
 8006444:	e00b      	b.n	800645e <UART_SetConfig+0x216>
 8006446:	2300      	movs	r3, #0
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e0a1      	b.n	8006590 <UART_SetConfig+0x348>
 800644c:	2302      	movs	r3, #2
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e09e      	b.n	8006590 <UART_SetConfig+0x348>
 8006452:	2304      	movs	r3, #4
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e09b      	b.n	8006590 <UART_SetConfig+0x348>
 8006458:	2308      	movs	r3, #8
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e098      	b.n	8006590 <UART_SetConfig+0x348>
 800645e:	2310      	movs	r3, #16
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e095      	b.n	8006590 <UART_SetConfig+0x348>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <UART_SetConfig+0x2e0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d125      	bne.n	80064ba <UART_SetConfig+0x272>
 800646e:	4b29      	ldr	r3, [pc, #164]	; (8006514 <UART_SetConfig+0x2cc>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800647c:	d017      	beq.n	80064ae <UART_SetConfig+0x266>
 800647e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006482:	d817      	bhi.n	80064b4 <UART_SetConfig+0x26c>
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006488:	d00b      	beq.n	80064a2 <UART_SetConfig+0x25a>
 800648a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648e:	d811      	bhi.n	80064b4 <UART_SetConfig+0x26c>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <UART_SetConfig+0x254>
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006498:	d006      	beq.n	80064a8 <UART_SetConfig+0x260>
 800649a:	e00b      	b.n	80064b4 <UART_SetConfig+0x26c>
 800649c:	2301      	movs	r3, #1
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e076      	b.n	8006590 <UART_SetConfig+0x348>
 80064a2:	2302      	movs	r3, #2
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e073      	b.n	8006590 <UART_SetConfig+0x348>
 80064a8:	2304      	movs	r3, #4
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e070      	b.n	8006590 <UART_SetConfig+0x348>
 80064ae:	2308      	movs	r3, #8
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e06d      	b.n	8006590 <UART_SetConfig+0x348>
 80064b4:	2310      	movs	r3, #16
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e06a      	b.n	8006590 <UART_SetConfig+0x348>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1b      	ldr	r2, [pc, #108]	; (800652c <UART_SetConfig+0x2e4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d138      	bne.n	8006536 <UART_SetConfig+0x2ee>
 80064c4:	4b13      	ldr	r3, [pc, #76]	; (8006514 <UART_SetConfig+0x2cc>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064d2:	d017      	beq.n	8006504 <UART_SetConfig+0x2bc>
 80064d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064d8:	d82a      	bhi.n	8006530 <UART_SetConfig+0x2e8>
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d00b      	beq.n	80064f8 <UART_SetConfig+0x2b0>
 80064e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e4:	d824      	bhi.n	8006530 <UART_SetConfig+0x2e8>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <UART_SetConfig+0x2aa>
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	d006      	beq.n	80064fe <UART_SetConfig+0x2b6>
 80064f0:	e01e      	b.n	8006530 <UART_SetConfig+0x2e8>
 80064f2:	2300      	movs	r3, #0
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e04b      	b.n	8006590 <UART_SetConfig+0x348>
 80064f8:	2302      	movs	r3, #2
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e048      	b.n	8006590 <UART_SetConfig+0x348>
 80064fe:	2304      	movs	r3, #4
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e045      	b.n	8006590 <UART_SetConfig+0x348>
 8006504:	2308      	movs	r3, #8
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e042      	b.n	8006590 <UART_SetConfig+0x348>
 800650a:	bf00      	nop
 800650c:	efff69f3 	.word	0xefff69f3
 8006510:	40011000 	.word	0x40011000
 8006514:	40023800 	.word	0x40023800
 8006518:	40004400 	.word	0x40004400
 800651c:	40004800 	.word	0x40004800
 8006520:	40004c00 	.word	0x40004c00
 8006524:	40005000 	.word	0x40005000
 8006528:	40011400 	.word	0x40011400
 800652c:	40007800 	.word	0x40007800
 8006530:	2310      	movs	r3, #16
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e02c      	b.n	8006590 <UART_SetConfig+0x348>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a72      	ldr	r2, [pc, #456]	; (8006704 <UART_SetConfig+0x4bc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d125      	bne.n	800658c <UART_SetConfig+0x344>
 8006540:	4b71      	ldr	r3, [pc, #452]	; (8006708 <UART_SetConfig+0x4c0>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800654a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800654e:	d017      	beq.n	8006580 <UART_SetConfig+0x338>
 8006550:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006554:	d817      	bhi.n	8006586 <UART_SetConfig+0x33e>
 8006556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655a:	d00b      	beq.n	8006574 <UART_SetConfig+0x32c>
 800655c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006560:	d811      	bhi.n	8006586 <UART_SetConfig+0x33e>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <UART_SetConfig+0x326>
 8006566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656a:	d006      	beq.n	800657a <UART_SetConfig+0x332>
 800656c:	e00b      	b.n	8006586 <UART_SetConfig+0x33e>
 800656e:	2300      	movs	r3, #0
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e00d      	b.n	8006590 <UART_SetConfig+0x348>
 8006574:	2302      	movs	r3, #2
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e00a      	b.n	8006590 <UART_SetConfig+0x348>
 800657a:	2304      	movs	r3, #4
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e007      	b.n	8006590 <UART_SetConfig+0x348>
 8006580:	2308      	movs	r3, #8
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e004      	b.n	8006590 <UART_SetConfig+0x348>
 8006586:	2310      	movs	r3, #16
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e001      	b.n	8006590 <UART_SetConfig+0x348>
 800658c:	2310      	movs	r3, #16
 800658e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006598:	d15b      	bne.n	8006652 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d828      	bhi.n	80065f2 <UART_SetConfig+0x3aa>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0x360>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065f3 	.word	0x080065f3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065f3 	.word	0x080065f3
 80065c4:	080065f3 	.word	0x080065f3
 80065c8:	080065eb 	.word	0x080065eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7fe f89e 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 80065d0:	61b8      	str	r0, [r7, #24]
        break;
 80065d2:	e013      	b.n	80065fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe f8ae 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 80065d8:	61b8      	str	r0, [r7, #24]
        break;
 80065da:	e00f      	b.n	80065fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065dc:	4b4b      	ldr	r3, [pc, #300]	; (800670c <UART_SetConfig+0x4c4>)
 80065de:	61bb      	str	r3, [r7, #24]
        break;
 80065e0:	e00c      	b.n	80065fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fd ff81 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80065e6:	61b8      	str	r0, [r7, #24]
        break;
 80065e8:	e008      	b.n	80065fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ee:	61bb      	str	r3, [r7, #24]
        break;
 80065f0:	e004      	b.n	80065fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	77bb      	strb	r3, [r7, #30]
        break;
 80065fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d074      	beq.n	80066ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	005a      	lsls	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	441a      	add	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d916      	bls.n	800664c <UART_SetConfig+0x404>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006624:	d212      	bcs.n	800664c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f023 030f 	bic.w	r3, r3, #15
 800662e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	b29b      	uxth	r3, r3
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	b29a      	uxth	r2, r3
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	4313      	orrs	r3, r2
 8006640:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	89fa      	ldrh	r2, [r7, #14]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e04f      	b.n	80066ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	77bb      	strb	r3, [r7, #30]
 8006650:	e04c      	b.n	80066ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006652:	7ffb      	ldrb	r3, [r7, #31]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d828      	bhi.n	80066aa <UART_SetConfig+0x462>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <UART_SetConfig+0x418>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006685 	.word	0x08006685
 8006664:	0800668d 	.word	0x0800668d
 8006668:	08006695 	.word	0x08006695
 800666c:	080066ab 	.word	0x080066ab
 8006670:	0800669b 	.word	0x0800669b
 8006674:	080066ab 	.word	0x080066ab
 8006678:	080066ab 	.word	0x080066ab
 800667c:	080066ab 	.word	0x080066ab
 8006680:	080066a3 	.word	0x080066a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006684:	f7fe f842 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8006688:	61b8      	str	r0, [r7, #24]
        break;
 800668a:	e013      	b.n	80066b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800668c:	f7fe f852 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8006690:	61b8      	str	r0, [r7, #24]
        break;
 8006692:	e00f      	b.n	80066b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006694:	4b1d      	ldr	r3, [pc, #116]	; (800670c <UART_SetConfig+0x4c4>)
 8006696:	61bb      	str	r3, [r7, #24]
        break;
 8006698:	e00c      	b.n	80066b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669a:	f7fd ff25 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 800669e:	61b8      	str	r0, [r7, #24]
        break;
 80066a0:	e008      	b.n	80066b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a6:	61bb      	str	r3, [r7, #24]
        break;
 80066a8:	e004      	b.n	80066b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	77bb      	strb	r3, [r7, #30]
        break;
 80066b2:	bf00      	nop
    }

    if (pclk != 0U)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085a      	lsrs	r2, r3, #1
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	441a      	add	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d909      	bls.n	80066e8 <UART_SetConfig+0x4a0>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066da:	d205      	bcs.n	80066e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e001      	b.n	80066ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40007c00 	.word	0x40007c00
 8006708:	40023800 	.word	0x40023800
 800670c:	00f42400 	.word	0x00f42400

08006710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01a      	beq.n	8006826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680e:	d10a      	bne.n	8006826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006864:	f7fb fec4 	bl	80025f0 <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b08      	cmp	r3, #8
 8006876:	d10e      	bne.n	8006896 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f82d 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e023      	b.n	80068de <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d10e      	bne.n	80068c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f817 	bl	80068e6 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e00d      	b.n	80068de <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b09c      	sub	sp, #112	; 0x70
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f6:	e0a5      	b.n	8006a44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	f000 80a1 	beq.w	8006a44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006902:	f7fb fe75 	bl	80025f0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800690e:	429a      	cmp	r2, r3
 8006910:	d302      	bcc.n	8006918 <UART_WaitOnFlagUntilTimeout+0x32>
 8006912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006914:	2b00      	cmp	r3, #0
 8006916:	d13e      	bne.n	8006996 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800692c:	667b      	str	r3, [r7, #100]	; 0x64
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006938:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800693c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e6      	bne.n	8006918 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	663b      	str	r3, [r7, #96]	; 0x60
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800696a:	64ba      	str	r2, [r7, #72]	; 0x48
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e5      	bne.n	800694a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e067      	b.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d04f      	beq.n	8006a44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b2:	d147      	bne.n	8006a44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
 80069de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e6      	bne.n	80069be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f023 0301 	bic.w	r3, r3, #1
 8006a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a10:	623a      	str	r2, [r7, #32]
 8006a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	69f9      	ldr	r1, [r7, #28]
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e5      	bne.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e010      	b.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	f43f af4a 	beq.w	80068f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3770      	adds	r7, #112	; 0x70
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b097      	sub	sp, #92	; 0x5c
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88fa      	ldrh	r2, [r7, #6]
 8006a88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d10e      	bne.n	8006ac2 <UART_Start_Receive_IT+0x52>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <UART_Start_Receive_IT+0x48>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab6:	e02d      	b.n	8006b14 <UART_Start_Receive_IT+0xa4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	22ff      	movs	r2, #255	; 0xff
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac0:	e028      	b.n	8006b14 <UART_Start_Receive_IT+0xa4>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <UART_Start_Receive_IT+0x76>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <UART_Start_Receive_IT+0x6c>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	22ff      	movs	r2, #255	; 0xff
 8006ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ada:	e01b      	b.n	8006b14 <UART_Start_Receive_IT+0xa4>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	227f      	movs	r2, #127	; 0x7f
 8006ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae4:	e016      	b.n	8006b14 <UART_Start_Receive_IT+0xa4>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aee:	d10d      	bne.n	8006b0c <UART_Start_Receive_IT+0x9c>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <UART_Start_Receive_IT+0x92>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	227f      	movs	r2, #127	; 0x7f
 8006afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b00:	e008      	b.n	8006b14 <UART_Start_Receive_IT+0xa4>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	223f      	movs	r2, #63	; 0x3f
 8006b06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b0a:	e003      	b.n	8006b14 <UART_Start_Receive_IT+0xa4>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2222      	movs	r2, #34	; 0x22
 8006b20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	657b      	str	r3, [r7, #84]	; 0x54
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	d107      	bne.n	8006b70 <UART_Start_Receive_IT+0x100>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a24      	ldr	r2, [pc, #144]	; (8006bfc <UART_Start_Receive_IT+0x18c>)
 8006b6c:	665a      	str	r2, [r3, #100]	; 0x64
 8006b6e:	e002      	b.n	8006b76 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <UART_Start_Receive_IT+0x190>)
 8006b74:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d019      	beq.n	8006bba <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_Start_Receive_IT+0x116>
 8006bb8:	e018      	b.n	8006bec <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f043 0320 	orr.w	r3, r3, #32
 8006bce:	653b      	str	r3, [r7, #80]	; 0x50
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd8:	623b      	str	r3, [r7, #32]
 8006bda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	69f9      	ldr	r1, [r7, #28]
 8006bde:	6a3a      	ldr	r2, [r7, #32]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e6      	bne.n	8006bba <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	375c      	adds	r7, #92	; 0x5c
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	08006ea7 	.word	0x08006ea7
 8006c00:	08006d4b 	.word	0x08006d4b

08006c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b095      	sub	sp, #84	; 0x54
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d118      	bne.n	8006cac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 0310 	bic.w	r3, r3, #16
 8006c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6979      	ldr	r1, [r7, #20]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006cbe:	bf00      	nop
 8006cc0:	3754      	adds	r7, #84	; 0x54
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fa8d 	bl	8006208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b088      	sub	sp, #32
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6979      	ldr	r1, [r7, #20]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e6      	bne.n	8006cfe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff fa59 	bl	80061f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d42:	bf00      	nop
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b096      	sub	sp, #88	; 0x58
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d60:	2b22      	cmp	r3, #34	; 0x22
 8006d62:	f040 8094 	bne.w	8006e8e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006d74:	b2d9      	uxtb	r1, r3
 8006d76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	400a      	ands	r2, r1
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d177      	bne.n	8006e9e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e6      	bne.n	8006dae <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3308      	adds	r3, #8
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	623b      	str	r3, [r7, #32]
   return(result);
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e00:	633a      	str	r2, [r7, #48]	; 0x30
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e5      	bne.n	8006de0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d12e      	bne.n	8006e86 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0310 	bic.w	r3, r3, #16
 8006e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d103      	bne.n	8006e76 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2210      	movs	r2, #16
 8006e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff f9cc 	bl	800621c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e84:	e00b      	b.n	8006e9e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fa fd08 	bl	800189c <HAL_UART_RxCpltCallback>
}
 8006e8c:	e007      	b.n	8006e9e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0208 	orr.w	r2, r2, #8
 8006e9c:	619a      	str	r2, [r3, #24]
}
 8006e9e:	bf00      	nop
 8006ea0:	3758      	adds	r7, #88	; 0x58
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b096      	sub	sp, #88	; 0x58
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebc:	2b22      	cmp	r3, #34	; 0x22
 8006ebe:	f040 8094 	bne.w	8006fea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ed2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006ed6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006eda:	4013      	ands	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	1c9a      	adds	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d177      	bne.n	8006ffa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	643b      	str	r3, [r7, #64]	; 0x40
 8006f2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e5      	bne.n	8006f3c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d12e      	bne.n	8006fe2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6979      	ldr	r1, [r7, #20]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e6      	bne.n	8006f8a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b10      	cmp	r3, #16
 8006fc8:	d103      	bne.n	8006fd2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff f91e 	bl	800621c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe0:	e00b      	b.n	8006ffa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fa fc5a 	bl	800189c <HAL_UART_RxCpltCallback>
}
 8006fe8:	e007      	b.n	8006ffa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0208 	orr.w	r2, r2, #8
 8006ff8:	619a      	str	r2, [r3, #24]
}
 8006ffa:	bf00      	nop
 8006ffc:	3758      	adds	r7, #88	; 0x58
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007004:	b084      	sub	sp, #16
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	f107 001c 	add.w	r0, r7, #28
 8007012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	2b01      	cmp	r3, #1
 800701a:	d120      	bne.n	800705e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <USB_CoreInit+0xac>)
 800702e:	4013      	ands	r3, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d105      	bne.n	8007052 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa92 	bl	800757c <USB_CoreReset>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]
 800705c:	e010      	b.n	8007080 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa86 	bl	800757c <USB_CoreReset>
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	2b01      	cmp	r3, #1
 8007084:	d10b      	bne.n	800709e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f043 0206 	orr.w	r2, r3, #6
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f043 0220 	orr.w	r2, r3, #32
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070aa:	b004      	add	sp, #16
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	ffbdffbf 	.word	0xffbdffbf

080070b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f023 0201 	bic.w	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d115      	bne.n	8007124 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007104:	2001      	movs	r0, #1
 8007106:	f7fb fa7f 	bl	8002608 <HAL_Delay>
      ms++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa25 	bl	8007560 <USB_GetMode>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d01e      	beq.n	800715a <USB_SetCurrentMode+0x84>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b31      	cmp	r3, #49	; 0x31
 8007120:	d9f0      	bls.n	8007104 <USB_SetCurrentMode+0x2e>
 8007122:	e01a      	b.n	800715a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d115      	bne.n	8007156 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007136:	2001      	movs	r0, #1
 8007138:	f7fb fa66 	bl	8002608 <HAL_Delay>
      ms++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa0c 	bl	8007560 <USB_GetMode>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <USB_SetCurrentMode+0x84>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b31      	cmp	r3, #49	; 0x31
 8007152:	d9f0      	bls.n	8007136 <USB_SetCurrentMode+0x60>
 8007154:	e001      	b.n	800715a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e005      	b.n	8007166 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b32      	cmp	r3, #50	; 0x32
 800715e:	d101      	bne.n	8007164 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007170:	b084      	sub	sp, #16
 8007172:	b580      	push	{r7, lr}
 8007174:	b086      	sub	sp, #24
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800717e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	e009      	b.n	80071a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3340      	adds	r3, #64	; 0x40
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3301      	adds	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b0e      	cmp	r3, #14
 80071a8:	d9f2      	bls.n	8007190 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11c      	bne.n	80071ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071be:	f043 0302 	orr.w	r3, r3, #2
 80071c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e005      	b.n	80071f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071fc:	461a      	mov	r2, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	4619      	mov	r1, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007210:	461a      	mov	r2, r3
 8007212:	680b      	ldr	r3, [r1, #0]
 8007214:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	2b01      	cmp	r3, #1
 800721a:	d10c      	bne.n	8007236 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007222:	2100      	movs	r1, #0
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f961 	bl	80074ec <USB_SetDevSpeed>
 800722a:	e008      	b.n	800723e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800722c:	2101      	movs	r1, #1
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f95c 	bl	80074ec <USB_SetDevSpeed>
 8007234:	e003      	b.n	800723e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007236:	2103      	movs	r1, #3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f957 	bl	80074ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800723e:	2110      	movs	r1, #16
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8f3 	bl	800742c <USB_FlushTxFifo>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f91d 	bl	8007490 <USB_FlushRxFifo>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007266:	461a      	mov	r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007272:	461a      	mov	r2, r3
 8007274:	2300      	movs	r3, #0
 8007276:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727e:	461a      	mov	r2, r3
 8007280:	2300      	movs	r3, #0
 8007282:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	e043      	b.n	8007312 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800729c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a0:	d118      	bne.n	80072d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b4:	461a      	mov	r2, r3
 80072b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	e013      	b.n	80072e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	461a      	mov	r2, r3
 80072cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e008      	b.n	80072e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	461a      	mov	r2, r3
 80072e2:	2300      	movs	r3, #0
 80072e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	461a      	mov	r2, r3
 80072f4:	2300      	movs	r3, #0
 80072f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007304:	461a      	mov	r2, r3
 8007306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800730a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	3301      	adds	r3, #1
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	429a      	cmp	r2, r3
 8007318:	d3b7      	bcc.n	800728a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	e043      	b.n	80073a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007336:	d118      	bne.n	800736a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	461a      	mov	r2, r3
 800734c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e013      	b.n	800737c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	461a      	mov	r2, r3
 8007362:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	e008      	b.n	800737c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007376:	461a      	mov	r2, r3
 8007378:	2300      	movs	r3, #0
 800737a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007388:	461a      	mov	r2, r3
 800738a:	2300      	movs	r3, #0
 800738c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739a:	461a      	mov	r2, r3
 800739c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	3301      	adds	r3, #1
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d3b7      	bcc.n	8007320 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f043 0210 	orr.w	r2, r3, #16
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699a      	ldr	r2, [r3, #24]
 80073e8:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <USB_DevInit+0x2b4>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f043 0208 	orr.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007404:	2b01      	cmp	r3, #1
 8007406:	d105      	bne.n	8007414 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	4b06      	ldr	r3, [pc, #24]	; (8007428 <USB_DevInit+0x2b8>)
 800740e:	4313      	orrs	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007420:	b004      	add	sp, #16
 8007422:	4770      	bx	lr
 8007424:	803c3800 	.word	0x803c3800
 8007428:	40000004 	.word	0x40000004

0800742c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3301      	adds	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	4a12      	ldr	r2, [pc, #72]	; (800748c <USB_FlushTxFifo+0x60>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e01a      	b.n	8007480 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	daf3      	bge.n	800743a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	019b      	lsls	r3, r3, #6
 800745a:	f043 0220 	orr.w	r2, r3, #32
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	4a08      	ldr	r2, [pc, #32]	; (800748c <USB_FlushTxFifo+0x60>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e006      	b.n	8007480 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b20      	cmp	r3, #32
 800747c:	d0f1      	beq.n	8007462 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	00030d40 	.word	0x00030d40

08007490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <USB_FlushRxFifo+0x58>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e017      	b.n	80074dc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	daf3      	bge.n	800749c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2210      	movs	r2, #16
 80074bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <USB_FlushRxFifo+0x58>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e006      	b.n	80074dc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d0f1      	beq.n	80074be <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	00030d40 	.word	0x00030d40

080074ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800750c:	4313      	orrs	r3, r2
 800750e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007538:	f023 0303 	bic.w	r3, r3, #3
 800753c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0301 	and.w	r3, r3, #1
}
 8007570:	4618      	mov	r0, r3
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3301      	adds	r3, #1
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	4a13      	ldr	r2, [pc, #76]	; (80075dc <USB_CoreReset+0x60>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d901      	bls.n	8007598 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e01a      	b.n	80075ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	daf3      	bge.n	8007588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f043 0201 	orr.w	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	4a09      	ldr	r2, [pc, #36]	; (80075dc <USB_CoreReset+0x60>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d901      	bls.n	80075c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e006      	b.n	80075ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d0f1      	beq.n	80075b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	00030d40 	.word	0x00030d40

080075e0 <atoi>:
 80075e0:	220a      	movs	r2, #10
 80075e2:	2100      	movs	r1, #0
 80075e4:	f000 bd2c 	b.w	8008040 <strtol>

080075e8 <__errno>:
 80075e8:	4b01      	ldr	r3, [pc, #4]	; (80075f0 <__errno+0x8>)
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20000024 	.word	0x20000024

080075f4 <__libc_init_array>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4d0d      	ldr	r5, [pc, #52]	; (800762c <__libc_init_array+0x38>)
 80075f8:	4c0d      	ldr	r4, [pc, #52]	; (8007630 <__libc_init_array+0x3c>)
 80075fa:	1b64      	subs	r4, r4, r5
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	2600      	movs	r6, #0
 8007600:	42a6      	cmp	r6, r4
 8007602:	d109      	bne.n	8007618 <__libc_init_array+0x24>
 8007604:	4d0b      	ldr	r5, [pc, #44]	; (8007634 <__libc_init_array+0x40>)
 8007606:	4c0c      	ldr	r4, [pc, #48]	; (8007638 <__libc_init_array+0x44>)
 8007608:	f002 fefe 	bl	800a408 <_init>
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	2600      	movs	r6, #0
 8007612:	42a6      	cmp	r6, r4
 8007614:	d105      	bne.n	8007622 <__libc_init_array+0x2e>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	f855 3b04 	ldr.w	r3, [r5], #4
 800761c:	4798      	blx	r3
 800761e:	3601      	adds	r6, #1
 8007620:	e7ee      	b.n	8007600 <__libc_init_array+0xc>
 8007622:	f855 3b04 	ldr.w	r3, [r5], #4
 8007626:	4798      	blx	r3
 8007628:	3601      	adds	r6, #1
 800762a:	e7f2      	b.n	8007612 <__libc_init_array+0x1e>
 800762c:	0800a8ec 	.word	0x0800a8ec
 8007630:	0800a8ec 	.word	0x0800a8ec
 8007634:	0800a8ec 	.word	0x0800a8ec
 8007638:	0800a8f0 	.word	0x0800a8f0

0800763c <memset>:
 800763c:	4402      	add	r2, r0
 800763e:	4603      	mov	r3, r0
 8007640:	4293      	cmp	r3, r2
 8007642:	d100      	bne.n	8007646 <memset+0xa>
 8007644:	4770      	bx	lr
 8007646:	f803 1b01 	strb.w	r1, [r3], #1
 800764a:	e7f9      	b.n	8007640 <memset+0x4>

0800764c <__cvt>:
 800764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764e:	ed2d 8b02 	vpush	{d8}
 8007652:	eeb0 8b40 	vmov.f64	d8, d0
 8007656:	b085      	sub	sp, #20
 8007658:	4617      	mov	r7, r2
 800765a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800765c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800765e:	ee18 2a90 	vmov	r2, s17
 8007662:	f025 0520 	bic.w	r5, r5, #32
 8007666:	2a00      	cmp	r2, #0
 8007668:	bfb6      	itet	lt
 800766a:	222d      	movlt	r2, #45	; 0x2d
 800766c:	2200      	movge	r2, #0
 800766e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007672:	2d46      	cmp	r5, #70	; 0x46
 8007674:	460c      	mov	r4, r1
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	d004      	beq.n	8007684 <__cvt+0x38>
 800767a:	2d45      	cmp	r5, #69	; 0x45
 800767c:	d100      	bne.n	8007680 <__cvt+0x34>
 800767e:	3401      	adds	r4, #1
 8007680:	2102      	movs	r1, #2
 8007682:	e000      	b.n	8007686 <__cvt+0x3a>
 8007684:	2103      	movs	r1, #3
 8007686:	ab03      	add	r3, sp, #12
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	ab02      	add	r3, sp, #8
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	4622      	mov	r2, r4
 8007690:	4633      	mov	r3, r6
 8007692:	eeb0 0b48 	vmov.f64	d0, d8
 8007696:	f000 fd6b 	bl	8008170 <_dtoa_r>
 800769a:	2d47      	cmp	r5, #71	; 0x47
 800769c:	d101      	bne.n	80076a2 <__cvt+0x56>
 800769e:	07fb      	lsls	r3, r7, #31
 80076a0:	d51a      	bpl.n	80076d8 <__cvt+0x8c>
 80076a2:	2d46      	cmp	r5, #70	; 0x46
 80076a4:	eb00 0204 	add.w	r2, r0, r4
 80076a8:	d10c      	bne.n	80076c4 <__cvt+0x78>
 80076aa:	7803      	ldrb	r3, [r0, #0]
 80076ac:	2b30      	cmp	r3, #48	; 0x30
 80076ae:	d107      	bne.n	80076c0 <__cvt+0x74>
 80076b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80076b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b8:	bf1c      	itt	ne
 80076ba:	f1c4 0401 	rsbne	r4, r4, #1
 80076be:	6034      	strne	r4, [r6, #0]
 80076c0:	6833      	ldr	r3, [r6, #0]
 80076c2:	441a      	add	r2, r3
 80076c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80076c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076cc:	bf08      	it	eq
 80076ce:	9203      	streq	r2, [sp, #12]
 80076d0:	2130      	movs	r1, #48	; 0x30
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d307      	bcc.n	80076e8 <__cvt+0x9c>
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076dc:	1a1b      	subs	r3, r3, r0
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	b005      	add	sp, #20
 80076e2:	ecbd 8b02 	vpop	{d8}
 80076e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e8:	1c5c      	adds	r4, r3, #1
 80076ea:	9403      	str	r4, [sp, #12]
 80076ec:	7019      	strb	r1, [r3, #0]
 80076ee:	e7f0      	b.n	80076d2 <__cvt+0x86>

080076f0 <__exponent>:
 80076f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076f2:	4603      	mov	r3, r0
 80076f4:	2900      	cmp	r1, #0
 80076f6:	bfb8      	it	lt
 80076f8:	4249      	neglt	r1, r1
 80076fa:	f803 2b02 	strb.w	r2, [r3], #2
 80076fe:	bfb4      	ite	lt
 8007700:	222d      	movlt	r2, #45	; 0x2d
 8007702:	222b      	movge	r2, #43	; 0x2b
 8007704:	2909      	cmp	r1, #9
 8007706:	7042      	strb	r2, [r0, #1]
 8007708:	dd2a      	ble.n	8007760 <__exponent+0x70>
 800770a:	f10d 0407 	add.w	r4, sp, #7
 800770e:	46a4      	mov	ip, r4
 8007710:	270a      	movs	r7, #10
 8007712:	46a6      	mov	lr, r4
 8007714:	460a      	mov	r2, r1
 8007716:	fb91 f6f7 	sdiv	r6, r1, r7
 800771a:	fb07 1516 	mls	r5, r7, r6, r1
 800771e:	3530      	adds	r5, #48	; 0x30
 8007720:	2a63      	cmp	r2, #99	; 0x63
 8007722:	f104 34ff 	add.w	r4, r4, #4294967295
 8007726:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800772a:	4631      	mov	r1, r6
 800772c:	dcf1      	bgt.n	8007712 <__exponent+0x22>
 800772e:	3130      	adds	r1, #48	; 0x30
 8007730:	f1ae 0502 	sub.w	r5, lr, #2
 8007734:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007738:	1c44      	adds	r4, r0, #1
 800773a:	4629      	mov	r1, r5
 800773c:	4561      	cmp	r1, ip
 800773e:	d30a      	bcc.n	8007756 <__exponent+0x66>
 8007740:	f10d 0209 	add.w	r2, sp, #9
 8007744:	eba2 020e 	sub.w	r2, r2, lr
 8007748:	4565      	cmp	r5, ip
 800774a:	bf88      	it	hi
 800774c:	2200      	movhi	r2, #0
 800774e:	4413      	add	r3, r2
 8007750:	1a18      	subs	r0, r3, r0
 8007752:	b003      	add	sp, #12
 8007754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800775e:	e7ed      	b.n	800773c <__exponent+0x4c>
 8007760:	2330      	movs	r3, #48	; 0x30
 8007762:	3130      	adds	r1, #48	; 0x30
 8007764:	7083      	strb	r3, [r0, #2]
 8007766:	70c1      	strb	r1, [r0, #3]
 8007768:	1d03      	adds	r3, r0, #4
 800776a:	e7f1      	b.n	8007750 <__exponent+0x60>
 800776c:	0000      	movs	r0, r0
	...

08007770 <_printf_float>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	b08b      	sub	sp, #44	; 0x2c
 8007776:	460c      	mov	r4, r1
 8007778:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800777c:	4616      	mov	r6, r2
 800777e:	461f      	mov	r7, r3
 8007780:	4605      	mov	r5, r0
 8007782:	f001 fa63 	bl	8008c4c <_localeconv_r>
 8007786:	f8d0 b000 	ldr.w	fp, [r0]
 800778a:	4658      	mov	r0, fp
 800778c:	f7f8 fd58 	bl	8000240 <strlen>
 8007790:	2300      	movs	r3, #0
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	f8d8 3000 	ldr.w	r3, [r8]
 8007798:	f894 9018 	ldrb.w	r9, [r4, #24]
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	3307      	adds	r3, #7
 80077a0:	f023 0307 	bic.w	r3, r3, #7
 80077a4:	f103 0108 	add.w	r1, r3, #8
 80077a8:	f8c8 1000 	str.w	r1, [r8]
 80077ac:	4682      	mov	sl, r0
 80077ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80077b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007a18 <_printf_float+0x2a8>
 80077ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80077be:	eeb0 6bc0 	vabs.f64	d6, d0
 80077c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80077c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ca:	dd24      	ble.n	8007816 <_printf_float+0xa6>
 80077cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80077d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d4:	d502      	bpl.n	80077dc <_printf_float+0x6c>
 80077d6:	232d      	movs	r3, #45	; 0x2d
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077dc:	4b90      	ldr	r3, [pc, #576]	; (8007a20 <_printf_float+0x2b0>)
 80077de:	4891      	ldr	r0, [pc, #580]	; (8007a24 <_printf_float+0x2b4>)
 80077e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80077e4:	bf94      	ite	ls
 80077e6:	4698      	movls	r8, r3
 80077e8:	4680      	movhi	r8, r0
 80077ea:	2303      	movs	r3, #3
 80077ec:	6123      	str	r3, [r4, #16]
 80077ee:	f022 0204 	bic.w	r2, r2, #4
 80077f2:	2300      	movs	r3, #0
 80077f4:	6022      	str	r2, [r4, #0]
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	9700      	str	r7, [sp, #0]
 80077fa:	4633      	mov	r3, r6
 80077fc:	aa09      	add	r2, sp, #36	; 0x24
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f000 f9d3 	bl	8007bac <_printf_common>
 8007806:	3001      	adds	r0, #1
 8007808:	f040 808a 	bne.w	8007920 <_printf_float+0x1b0>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	b00b      	add	sp, #44	; 0x2c
 8007812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007816:	eeb4 0b40 	vcmp.f64	d0, d0
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	d709      	bvc.n	8007834 <_printf_float+0xc4>
 8007820:	ee10 3a90 	vmov	r3, s1
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfbc      	itt	lt
 8007828:	232d      	movlt	r3, #45	; 0x2d
 800782a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800782e:	487e      	ldr	r0, [pc, #504]	; (8007a28 <_printf_float+0x2b8>)
 8007830:	4b7e      	ldr	r3, [pc, #504]	; (8007a2c <_printf_float+0x2bc>)
 8007832:	e7d5      	b.n	80077e0 <_printf_float+0x70>
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800783a:	9104      	str	r1, [sp, #16]
 800783c:	1c59      	adds	r1, r3, #1
 800783e:	d13c      	bne.n	80078ba <_printf_float+0x14a>
 8007840:	2306      	movs	r3, #6
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	2300      	movs	r3, #0
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	ab08      	add	r3, sp, #32
 800784a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800784e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007852:	ab07      	add	r3, sp, #28
 8007854:	6861      	ldr	r1, [r4, #4]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	6022      	str	r2, [r4, #0]
 800785a:	f10d 031b 	add.w	r3, sp, #27
 800785e:	4628      	mov	r0, r5
 8007860:	f7ff fef4 	bl	800764c <__cvt>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	9907      	ldr	r1, [sp, #28]
 8007868:	2b47      	cmp	r3, #71	; 0x47
 800786a:	4680      	mov	r8, r0
 800786c:	d108      	bne.n	8007880 <_printf_float+0x110>
 800786e:	1cc8      	adds	r0, r1, #3
 8007870:	db02      	blt.n	8007878 <_printf_float+0x108>
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	4299      	cmp	r1, r3
 8007876:	dd41      	ble.n	80078fc <_printf_float+0x18c>
 8007878:	f1a9 0902 	sub.w	r9, r9, #2
 800787c:	fa5f f989 	uxtb.w	r9, r9
 8007880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007884:	d820      	bhi.n	80078c8 <_printf_float+0x158>
 8007886:	3901      	subs	r1, #1
 8007888:	464a      	mov	r2, r9
 800788a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800788e:	9107      	str	r1, [sp, #28]
 8007890:	f7ff ff2e 	bl	80076f0 <__exponent>
 8007894:	9a08      	ldr	r2, [sp, #32]
 8007896:	9004      	str	r0, [sp, #16]
 8007898:	1813      	adds	r3, r2, r0
 800789a:	2a01      	cmp	r2, #1
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	dc02      	bgt.n	80078a6 <_printf_float+0x136>
 80078a0:	6822      	ldr	r2, [r4, #0]
 80078a2:	07d2      	lsls	r2, r2, #31
 80078a4:	d501      	bpl.n	80078aa <_printf_float+0x13a>
 80078a6:	3301      	adds	r3, #1
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0a2      	beq.n	80077f8 <_printf_float+0x88>
 80078b2:	232d      	movs	r3, #45	; 0x2d
 80078b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b8:	e79e      	b.n	80077f8 <_printf_float+0x88>
 80078ba:	9904      	ldr	r1, [sp, #16]
 80078bc:	2947      	cmp	r1, #71	; 0x47
 80078be:	d1c1      	bne.n	8007844 <_printf_float+0xd4>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1bf      	bne.n	8007844 <_printf_float+0xd4>
 80078c4:	2301      	movs	r3, #1
 80078c6:	e7bc      	b.n	8007842 <_printf_float+0xd2>
 80078c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80078cc:	d118      	bne.n	8007900 <_printf_float+0x190>
 80078ce:	2900      	cmp	r1, #0
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	dd0b      	ble.n	80078ec <_printf_float+0x17c>
 80078d4:	6121      	str	r1, [r4, #16]
 80078d6:	b913      	cbnz	r3, 80078de <_printf_float+0x16e>
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	07d0      	lsls	r0, r2, #31
 80078dc:	d502      	bpl.n	80078e4 <_printf_float+0x174>
 80078de:	3301      	adds	r3, #1
 80078e0:	440b      	add	r3, r1
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	2300      	movs	r3, #0
 80078e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	e7de      	b.n	80078aa <_printf_float+0x13a>
 80078ec:	b913      	cbnz	r3, 80078f4 <_printf_float+0x184>
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	07d2      	lsls	r2, r2, #31
 80078f2:	d501      	bpl.n	80078f8 <_printf_float+0x188>
 80078f4:	3302      	adds	r3, #2
 80078f6:	e7f4      	b.n	80078e2 <_printf_float+0x172>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7f2      	b.n	80078e2 <_printf_float+0x172>
 80078fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	4299      	cmp	r1, r3
 8007904:	db05      	blt.n	8007912 <_printf_float+0x1a2>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	6121      	str	r1, [r4, #16]
 800790a:	07d8      	lsls	r0, r3, #31
 800790c:	d5ea      	bpl.n	80078e4 <_printf_float+0x174>
 800790e:	1c4b      	adds	r3, r1, #1
 8007910:	e7e7      	b.n	80078e2 <_printf_float+0x172>
 8007912:	2900      	cmp	r1, #0
 8007914:	bfd4      	ite	le
 8007916:	f1c1 0202 	rsble	r2, r1, #2
 800791a:	2201      	movgt	r2, #1
 800791c:	4413      	add	r3, r2
 800791e:	e7e0      	b.n	80078e2 <_printf_float+0x172>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	055a      	lsls	r2, r3, #21
 8007924:	d407      	bmi.n	8007936 <_printf_float+0x1c6>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	4642      	mov	r2, r8
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	d12a      	bne.n	800798a <_printf_float+0x21a>
 8007934:	e76a      	b.n	800780c <_printf_float+0x9c>
 8007936:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800793a:	f240 80e2 	bls.w	8007b02 <_printf_float+0x392>
 800793e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007942:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794a:	d133      	bne.n	80079b4 <_printf_float+0x244>
 800794c:	4a38      	ldr	r2, [pc, #224]	; (8007a30 <_printf_float+0x2c0>)
 800794e:	2301      	movs	r3, #1
 8007950:	4631      	mov	r1, r6
 8007952:	4628      	mov	r0, r5
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	f43f af58 	beq.w	800780c <_printf_float+0x9c>
 800795c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007960:	429a      	cmp	r2, r3
 8007962:	db02      	blt.n	800796a <_printf_float+0x1fa>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	07d8      	lsls	r0, r3, #31
 8007968:	d50f      	bpl.n	800798a <_printf_float+0x21a>
 800796a:	4653      	mov	r3, sl
 800796c:	465a      	mov	r2, fp
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f af49 	beq.w	800780c <_printf_float+0x9c>
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	f104 091a 	add.w	r9, r4, #26
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	3b01      	subs	r3, #1
 8007986:	4543      	cmp	r3, r8
 8007988:	dc09      	bgt.n	800799e <_printf_float+0x22e>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	079b      	lsls	r3, r3, #30
 800798e:	f100 8108 	bmi.w	8007ba2 <_printf_float+0x432>
 8007992:	68e0      	ldr	r0, [r4, #12]
 8007994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007996:	4298      	cmp	r0, r3
 8007998:	bfb8      	it	lt
 800799a:	4618      	movlt	r0, r3
 800799c:	e738      	b.n	8007810 <_printf_float+0xa0>
 800799e:	2301      	movs	r3, #1
 80079a0:	464a      	mov	r2, r9
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f af2f 	beq.w	800780c <_printf_float+0x9c>
 80079ae:	f108 0801 	add.w	r8, r8, #1
 80079b2:	e7e6      	b.n	8007982 <_printf_float+0x212>
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	dc3c      	bgt.n	8007a34 <_printf_float+0x2c4>
 80079ba:	4a1d      	ldr	r2, [pc, #116]	; (8007a30 <_printf_float+0x2c0>)
 80079bc:	2301      	movs	r3, #1
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	f43f af21 	beq.w	800780c <_printf_float+0x9c>
 80079ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	d102      	bne.n	80079d8 <_printf_float+0x268>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	07d9      	lsls	r1, r3, #31
 80079d6:	d5d8      	bpl.n	800798a <_printf_float+0x21a>
 80079d8:	4653      	mov	r3, sl
 80079da:	465a      	mov	r2, fp
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	f43f af12 	beq.w	800780c <_printf_float+0x9c>
 80079e8:	f04f 0900 	mov.w	r9, #0
 80079ec:	f104 0a1a 	add.w	sl, r4, #26
 80079f0:	9b07      	ldr	r3, [sp, #28]
 80079f2:	425b      	negs	r3, r3
 80079f4:	454b      	cmp	r3, r9
 80079f6:	dc01      	bgt.n	80079fc <_printf_float+0x28c>
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	e795      	b.n	8007928 <_printf_float+0x1b8>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4652      	mov	r2, sl
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f af00 	beq.w	800780c <_printf_float+0x9c>
 8007a0c:	f109 0901 	add.w	r9, r9, #1
 8007a10:	e7ee      	b.n	80079f0 <_printf_float+0x280>
 8007a12:	bf00      	nop
 8007a14:	f3af 8000 	nop.w
 8007a18:	ffffffff 	.word	0xffffffff
 8007a1c:	7fefffff 	.word	0x7fefffff
 8007a20:	0800a508 	.word	0x0800a508
 8007a24:	0800a50c 	.word	0x0800a50c
 8007a28:	0800a514 	.word	0x0800a514
 8007a2c:	0800a510 	.word	0x0800a510
 8007a30:	0800a518 	.word	0x0800a518
 8007a34:	9a08      	ldr	r2, [sp, #32]
 8007a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bfa8      	it	ge
 8007a3c:	461a      	movge	r2, r3
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	4691      	mov	r9, r2
 8007a42:	dc38      	bgt.n	8007ab6 <_printf_float+0x346>
 8007a44:	2300      	movs	r3, #0
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a4c:	f104 021a 	add.w	r2, r4, #26
 8007a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a52:	9905      	ldr	r1, [sp, #20]
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	eba3 0309 	sub.w	r3, r3, r9
 8007a5a:	428b      	cmp	r3, r1
 8007a5c:	dc33      	bgt.n	8007ac6 <_printf_float+0x356>
 8007a5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	db3c      	blt.n	8007ae0 <_printf_float+0x370>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	07da      	lsls	r2, r3, #31
 8007a6a:	d439      	bmi.n	8007ae0 <_printf_float+0x370>
 8007a6c:	9b08      	ldr	r3, [sp, #32]
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	9907      	ldr	r1, [sp, #28]
 8007a72:	1a9a      	subs	r2, r3, r2
 8007a74:	eba3 0901 	sub.w	r9, r3, r1
 8007a78:	4591      	cmp	r9, r2
 8007a7a:	bfa8      	it	ge
 8007a7c:	4691      	movge	r9, r2
 8007a7e:	f1b9 0f00 	cmp.w	r9, #0
 8007a82:	dc35      	bgt.n	8007af0 <_printf_float+0x380>
 8007a84:	f04f 0800 	mov.w	r8, #0
 8007a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a8c:	f104 0a1a 	add.w	sl, r4, #26
 8007a90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	eba3 0309 	sub.w	r3, r3, r9
 8007a9a:	4543      	cmp	r3, r8
 8007a9c:	f77f af75 	ble.w	800798a <_printf_float+0x21a>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4652      	mov	r2, sl
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f43f aeae 	beq.w	800780c <_printf_float+0x9c>
 8007ab0:	f108 0801 	add.w	r8, r8, #1
 8007ab4:	e7ec      	b.n	8007a90 <_printf_float+0x320>
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4642      	mov	r2, r8
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d1bf      	bne.n	8007a44 <_printf_float+0x2d4>
 8007ac4:	e6a2      	b.n	800780c <_printf_float+0x9c>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	9204      	str	r2, [sp, #16]
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f43f ae9b 	beq.w	800780c <_printf_float+0x9c>
 8007ad6:	9b05      	ldr	r3, [sp, #20]
 8007ad8:	9a04      	ldr	r2, [sp, #16]
 8007ada:	3301      	adds	r3, #1
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	e7b7      	b.n	8007a50 <_printf_float+0x2e0>
 8007ae0:	4653      	mov	r3, sl
 8007ae2:	465a      	mov	r2, fp
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1be      	bne.n	8007a6c <_printf_float+0x2fc>
 8007aee:	e68d      	b.n	800780c <_printf_float+0x9c>
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	464b      	mov	r3, r9
 8007af4:	4442      	add	r2, r8
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	d1c1      	bne.n	8007a84 <_printf_float+0x314>
 8007b00:	e684      	b.n	800780c <_printf_float+0x9c>
 8007b02:	9a08      	ldr	r2, [sp, #32]
 8007b04:	2a01      	cmp	r2, #1
 8007b06:	dc01      	bgt.n	8007b0c <_printf_float+0x39c>
 8007b08:	07db      	lsls	r3, r3, #31
 8007b0a:	d537      	bpl.n	8007b7c <_printf_float+0x40c>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4642      	mov	r2, r8
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	f43f ae78 	beq.w	800780c <_printf_float+0x9c>
 8007b1c:	4653      	mov	r3, sl
 8007b1e:	465a      	mov	r2, fp
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f ae70 	beq.w	800780c <_printf_float+0x9c>
 8007b2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b38:	d01b      	beq.n	8007b72 <_printf_float+0x402>
 8007b3a:	9b08      	ldr	r3, [sp, #32]
 8007b3c:	f108 0201 	add.w	r2, r8, #1
 8007b40:	3b01      	subs	r3, #1
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d10e      	bne.n	8007b6a <_printf_float+0x3fa>
 8007b4c:	e65e      	b.n	800780c <_printf_float+0x9c>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	464a      	mov	r2, r9
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f ae57 	beq.w	800780c <_printf_float+0x9c>
 8007b5e:	f108 0801 	add.w	r8, r8, #1
 8007b62:	9b08      	ldr	r3, [sp, #32]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	4543      	cmp	r3, r8
 8007b68:	dcf1      	bgt.n	8007b4e <_printf_float+0x3de>
 8007b6a:	9b04      	ldr	r3, [sp, #16]
 8007b6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b70:	e6db      	b.n	800792a <_printf_float+0x1ba>
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	f104 091a 	add.w	r9, r4, #26
 8007b7a:	e7f2      	b.n	8007b62 <_printf_float+0x3f2>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4642      	mov	r2, r8
 8007b80:	e7df      	b.n	8007b42 <_printf_float+0x3d2>
 8007b82:	2301      	movs	r3, #1
 8007b84:	464a      	mov	r2, r9
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f ae3d 	beq.w	800780c <_printf_float+0x9c>
 8007b92:	f108 0801 	add.w	r8, r8, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	4543      	cmp	r3, r8
 8007b9e:	dcf0      	bgt.n	8007b82 <_printf_float+0x412>
 8007ba0:	e6f7      	b.n	8007992 <_printf_float+0x222>
 8007ba2:	f04f 0800 	mov.w	r8, #0
 8007ba6:	f104 0919 	add.w	r9, r4, #25
 8007baa:	e7f4      	b.n	8007b96 <_printf_float+0x426>

08007bac <_printf_common>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	4699      	mov	r9, r3
 8007bb4:	688a      	ldr	r2, [r1, #8]
 8007bb6:	690b      	ldr	r3, [r1, #16]
 8007bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	bfb8      	it	lt
 8007bc0:	4613      	movlt	r3, r2
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bc8:	4607      	mov	r7, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	b10a      	cbz	r2, 8007bd2 <_printf_common+0x26>
 8007bce:	3301      	adds	r3, #1
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	0699      	lsls	r1, r3, #26
 8007bd6:	bf42      	ittt	mi
 8007bd8:	6833      	ldrmi	r3, [r6, #0]
 8007bda:	3302      	addmi	r3, #2
 8007bdc:	6033      	strmi	r3, [r6, #0]
 8007bde:	6825      	ldr	r5, [r4, #0]
 8007be0:	f015 0506 	ands.w	r5, r5, #6
 8007be4:	d106      	bne.n	8007bf4 <_printf_common+0x48>
 8007be6:	f104 0a19 	add.w	sl, r4, #25
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	6832      	ldr	r2, [r6, #0]
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc26      	bgt.n	8007c42 <_printf_common+0x96>
 8007bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bf8:	1e13      	subs	r3, r2, #0
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	bf18      	it	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	0692      	lsls	r2, r2, #26
 8007c02:	d42b      	bmi.n	8007c5c <_printf_common+0xb0>
 8007c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	47c0      	blx	r8
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d01e      	beq.n	8007c50 <_printf_common+0xa4>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	68e5      	ldr	r5, [r4, #12]
 8007c16:	6832      	ldr	r2, [r6, #0]
 8007c18:	f003 0306 	and.w	r3, r3, #6
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	bf08      	it	eq
 8007c20:	1aad      	subeq	r5, r5, r2
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	bf0c      	ite	eq
 8007c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c2c:	2500      	movne	r5, #0
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	bfc4      	itt	gt
 8007c32:	1a9b      	subgt	r3, r3, r2
 8007c34:	18ed      	addgt	r5, r5, r3
 8007c36:	2600      	movs	r6, #0
 8007c38:	341a      	adds	r4, #26
 8007c3a:	42b5      	cmp	r5, r6
 8007c3c:	d11a      	bne.n	8007c74 <_printf_common+0xc8>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e008      	b.n	8007c54 <_printf_common+0xa8>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4652      	mov	r2, sl
 8007c46:	4649      	mov	r1, r9
 8007c48:	4638      	mov	r0, r7
 8007c4a:	47c0      	blx	r8
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d103      	bne.n	8007c58 <_printf_common+0xac>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c58:	3501      	adds	r5, #1
 8007c5a:	e7c6      	b.n	8007bea <_printf_common+0x3e>
 8007c5c:	18e1      	adds	r1, r4, r3
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	2030      	movs	r0, #48	; 0x30
 8007c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c66:	4422      	add	r2, r4
 8007c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c70:	3302      	adds	r3, #2
 8007c72:	e7c7      	b.n	8007c04 <_printf_common+0x58>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4622      	mov	r2, r4
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	47c0      	blx	r8
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d0e6      	beq.n	8007c50 <_printf_common+0xa4>
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7d9      	b.n	8007c3a <_printf_common+0x8e>
	...

08007c88 <_printf_i>:
 8007c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	7e0f      	ldrb	r7, [r1, #24]
 8007c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c90:	2f78      	cmp	r7, #120	; 0x78
 8007c92:	4691      	mov	r9, r2
 8007c94:	4680      	mov	r8, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	469a      	mov	sl, r3
 8007c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c9e:	d807      	bhi.n	8007cb0 <_printf_i+0x28>
 8007ca0:	2f62      	cmp	r7, #98	; 0x62
 8007ca2:	d80a      	bhi.n	8007cba <_printf_i+0x32>
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	f000 80d8 	beq.w	8007e5a <_printf_i+0x1d2>
 8007caa:	2f58      	cmp	r7, #88	; 0x58
 8007cac:	f000 80a3 	beq.w	8007df6 <_printf_i+0x16e>
 8007cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cb8:	e03a      	b.n	8007d30 <_printf_i+0xa8>
 8007cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cbe:	2b15      	cmp	r3, #21
 8007cc0:	d8f6      	bhi.n	8007cb0 <_printf_i+0x28>
 8007cc2:	a101      	add	r1, pc, #4	; (adr r1, 8007cc8 <_printf_i+0x40>)
 8007cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cc8:	08007d21 	.word	0x08007d21
 8007ccc:	08007d35 	.word	0x08007d35
 8007cd0:	08007cb1 	.word	0x08007cb1
 8007cd4:	08007cb1 	.word	0x08007cb1
 8007cd8:	08007cb1 	.word	0x08007cb1
 8007cdc:	08007cb1 	.word	0x08007cb1
 8007ce0:	08007d35 	.word	0x08007d35
 8007ce4:	08007cb1 	.word	0x08007cb1
 8007ce8:	08007cb1 	.word	0x08007cb1
 8007cec:	08007cb1 	.word	0x08007cb1
 8007cf0:	08007cb1 	.word	0x08007cb1
 8007cf4:	08007e41 	.word	0x08007e41
 8007cf8:	08007d65 	.word	0x08007d65
 8007cfc:	08007e23 	.word	0x08007e23
 8007d00:	08007cb1 	.word	0x08007cb1
 8007d04:	08007cb1 	.word	0x08007cb1
 8007d08:	08007e63 	.word	0x08007e63
 8007d0c:	08007cb1 	.word	0x08007cb1
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007cb1 	.word	0x08007cb1
 8007d18:	08007cb1 	.word	0x08007cb1
 8007d1c:	08007e2b 	.word	0x08007e2b
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0a3      	b.n	8007e7c <_printf_i+0x1f4>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	6829      	ldr	r1, [r5, #0]
 8007d38:	0606      	lsls	r6, r0, #24
 8007d3a:	f101 0304 	add.w	r3, r1, #4
 8007d3e:	d50a      	bpl.n	8007d56 <_printf_i+0xce>
 8007d40:	680e      	ldr	r6, [r1, #0]
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	da03      	bge.n	8007d50 <_printf_i+0xc8>
 8007d48:	232d      	movs	r3, #45	; 0x2d
 8007d4a:	4276      	negs	r6, r6
 8007d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d50:	485e      	ldr	r0, [pc, #376]	; (8007ecc <_printf_i+0x244>)
 8007d52:	230a      	movs	r3, #10
 8007d54:	e019      	b.n	8007d8a <_printf_i+0x102>
 8007d56:	680e      	ldr	r6, [r1, #0]
 8007d58:	602b      	str	r3, [r5, #0]
 8007d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d5e:	bf18      	it	ne
 8007d60:	b236      	sxthne	r6, r6
 8007d62:	e7ef      	b.n	8007d44 <_printf_i+0xbc>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	1d19      	adds	r1, r3, #4
 8007d6a:	6029      	str	r1, [r5, #0]
 8007d6c:	0601      	lsls	r1, r0, #24
 8007d6e:	d501      	bpl.n	8007d74 <_printf_i+0xec>
 8007d70:	681e      	ldr	r6, [r3, #0]
 8007d72:	e002      	b.n	8007d7a <_printf_i+0xf2>
 8007d74:	0646      	lsls	r6, r0, #25
 8007d76:	d5fb      	bpl.n	8007d70 <_printf_i+0xe8>
 8007d78:	881e      	ldrh	r6, [r3, #0]
 8007d7a:	4854      	ldr	r0, [pc, #336]	; (8007ecc <_printf_i+0x244>)
 8007d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d7e:	bf0c      	ite	eq
 8007d80:	2308      	moveq	r3, #8
 8007d82:	230a      	movne	r3, #10
 8007d84:	2100      	movs	r1, #0
 8007d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d8a:	6865      	ldr	r5, [r4, #4]
 8007d8c:	60a5      	str	r5, [r4, #8]
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	bfa2      	ittt	ge
 8007d92:	6821      	ldrge	r1, [r4, #0]
 8007d94:	f021 0104 	bicge.w	r1, r1, #4
 8007d98:	6021      	strge	r1, [r4, #0]
 8007d9a:	b90e      	cbnz	r6, 8007da0 <_printf_i+0x118>
 8007d9c:	2d00      	cmp	r5, #0
 8007d9e:	d04d      	beq.n	8007e3c <_printf_i+0x1b4>
 8007da0:	4615      	mov	r5, r2
 8007da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007da6:	fb03 6711 	mls	r7, r3, r1, r6
 8007daa:	5dc7      	ldrb	r7, [r0, r7]
 8007dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007db0:	4637      	mov	r7, r6
 8007db2:	42bb      	cmp	r3, r7
 8007db4:	460e      	mov	r6, r1
 8007db6:	d9f4      	bls.n	8007da2 <_printf_i+0x11a>
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d10b      	bne.n	8007dd4 <_printf_i+0x14c>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	07de      	lsls	r6, r3, #31
 8007dc0:	d508      	bpl.n	8007dd4 <_printf_i+0x14c>
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	6861      	ldr	r1, [r4, #4]
 8007dc6:	4299      	cmp	r1, r3
 8007dc8:	bfde      	ittt	le
 8007dca:	2330      	movle	r3, #48	; 0x30
 8007dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dd4:	1b52      	subs	r2, r2, r5
 8007dd6:	6122      	str	r2, [r4, #16]
 8007dd8:	f8cd a000 	str.w	sl, [sp]
 8007ddc:	464b      	mov	r3, r9
 8007dde:	aa03      	add	r2, sp, #12
 8007de0:	4621      	mov	r1, r4
 8007de2:	4640      	mov	r0, r8
 8007de4:	f7ff fee2 	bl	8007bac <_printf_common>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d14c      	bne.n	8007e86 <_printf_i+0x1fe>
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	b004      	add	sp, #16
 8007df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df6:	4835      	ldr	r0, [pc, #212]	; (8007ecc <_printf_i+0x244>)
 8007df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007dfc:	6829      	ldr	r1, [r5, #0]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e04:	6029      	str	r1, [r5, #0]
 8007e06:	061d      	lsls	r5, r3, #24
 8007e08:	d514      	bpl.n	8007e34 <_printf_i+0x1ac>
 8007e0a:	07df      	lsls	r7, r3, #31
 8007e0c:	bf44      	itt	mi
 8007e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e12:	6023      	strmi	r3, [r4, #0]
 8007e14:	b91e      	cbnz	r6, 8007e1e <_printf_i+0x196>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	f023 0320 	bic.w	r3, r3, #32
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	2310      	movs	r3, #16
 8007e20:	e7b0      	b.n	8007d84 <_printf_i+0xfc>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	f043 0320 	orr.w	r3, r3, #32
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	2378      	movs	r3, #120	; 0x78
 8007e2c:	4828      	ldr	r0, [pc, #160]	; (8007ed0 <_printf_i+0x248>)
 8007e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e32:	e7e3      	b.n	8007dfc <_printf_i+0x174>
 8007e34:	0659      	lsls	r1, r3, #25
 8007e36:	bf48      	it	mi
 8007e38:	b2b6      	uxthmi	r6, r6
 8007e3a:	e7e6      	b.n	8007e0a <_printf_i+0x182>
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	e7bb      	b.n	8007db8 <_printf_i+0x130>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	6826      	ldr	r6, [r4, #0]
 8007e44:	6961      	ldr	r1, [r4, #20]
 8007e46:	1d18      	adds	r0, r3, #4
 8007e48:	6028      	str	r0, [r5, #0]
 8007e4a:	0635      	lsls	r5, r6, #24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	d501      	bpl.n	8007e54 <_printf_i+0x1cc>
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	e002      	b.n	8007e5a <_printf_i+0x1d2>
 8007e54:	0670      	lsls	r0, r6, #25
 8007e56:	d5fb      	bpl.n	8007e50 <_printf_i+0x1c8>
 8007e58:	8019      	strh	r1, [r3, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	4615      	mov	r5, r2
 8007e60:	e7ba      	b.n	8007dd8 <_printf_i+0x150>
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	1d1a      	adds	r2, r3, #4
 8007e66:	602a      	str	r2, [r5, #0]
 8007e68:	681d      	ldr	r5, [r3, #0]
 8007e6a:	6862      	ldr	r2, [r4, #4]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f7f8 f9ee 	bl	8000250 <memchr>
 8007e74:	b108      	cbz	r0, 8007e7a <_printf_i+0x1f2>
 8007e76:	1b40      	subs	r0, r0, r5
 8007e78:	6060      	str	r0, [r4, #4]
 8007e7a:	6863      	ldr	r3, [r4, #4]
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e84:	e7a8      	b.n	8007dd8 <_printf_i+0x150>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d0ab      	beq.n	8007dec <_printf_i+0x164>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	079b      	lsls	r3, r3, #30
 8007e98:	d413      	bmi.n	8007ec2 <_printf_i+0x23a>
 8007e9a:	68e0      	ldr	r0, [r4, #12]
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	4298      	cmp	r0, r3
 8007ea0:	bfb8      	it	lt
 8007ea2:	4618      	movlt	r0, r3
 8007ea4:	e7a4      	b.n	8007df0 <_printf_i+0x168>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4640      	mov	r0, r8
 8007eae:	47d0      	blx	sl
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d09b      	beq.n	8007dec <_printf_i+0x164>
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	68e3      	ldr	r3, [r4, #12]
 8007eb8:	9903      	ldr	r1, [sp, #12]
 8007eba:	1a5b      	subs	r3, r3, r1
 8007ebc:	42ab      	cmp	r3, r5
 8007ebe:	dcf2      	bgt.n	8007ea6 <_printf_i+0x21e>
 8007ec0:	e7eb      	b.n	8007e9a <_printf_i+0x212>
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	f104 0619 	add.w	r6, r4, #25
 8007ec8:	e7f5      	b.n	8007eb6 <_printf_i+0x22e>
 8007eca:	bf00      	nop
 8007ecc:	0800a51a 	.word	0x0800a51a
 8007ed0:	0800a52b 	.word	0x0800a52b

08007ed4 <siprintf>:
 8007ed4:	b40e      	push	{r1, r2, r3}
 8007ed6:	b500      	push	{lr}
 8007ed8:	b09c      	sub	sp, #112	; 0x70
 8007eda:	ab1d      	add	r3, sp, #116	; 0x74
 8007edc:	9002      	str	r0, [sp, #8]
 8007ede:	9006      	str	r0, [sp, #24]
 8007ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ee4:	4809      	ldr	r0, [pc, #36]	; (8007f0c <siprintf+0x38>)
 8007ee6:	9107      	str	r1, [sp, #28]
 8007ee8:	9104      	str	r1, [sp, #16]
 8007eea:	4909      	ldr	r1, [pc, #36]	; (8007f10 <siprintf+0x3c>)
 8007eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef0:	9105      	str	r1, [sp, #20]
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	a902      	add	r1, sp, #8
 8007ef8:	f001 fb98 	bl	800962c <_svfiprintf_r>
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	b01c      	add	sp, #112	; 0x70
 8007f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f08:	b003      	add	sp, #12
 8007f0a:	4770      	bx	lr
 8007f0c:	20000024 	.word	0x20000024
 8007f10:	ffff0208 	.word	0xffff0208

08007f14 <strncmp>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	b17a      	cbz	r2, 8007f38 <strncmp+0x24>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	3901      	subs	r1, #1
 8007f1c:	1884      	adds	r4, r0, r2
 8007f1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f26:	4290      	cmp	r0, r2
 8007f28:	d101      	bne.n	8007f2e <strncmp+0x1a>
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	d101      	bne.n	8007f32 <strncmp+0x1e>
 8007f2e:	1a80      	subs	r0, r0, r2
 8007f30:	bd10      	pop	{r4, pc}
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d1f3      	bne.n	8007f1e <strncmp+0xa>
 8007f36:	e7fa      	b.n	8007f2e <strncmp+0x1a>
 8007f38:	4610      	mov	r0, r2
 8007f3a:	e7f9      	b.n	8007f30 <strncmp+0x1c>

08007f3c <_strtol_l.constprop.0>:
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f42:	d001      	beq.n	8007f48 <_strtol_l.constprop.0+0xc>
 8007f44:	2b24      	cmp	r3, #36	; 0x24
 8007f46:	d906      	bls.n	8007f56 <_strtol_l.constprop.0+0x1a>
 8007f48:	f7ff fb4e 	bl	80075e8 <__errno>
 8007f4c:	2316      	movs	r3, #22
 8007f4e:	6003      	str	r3, [r0, #0]
 8007f50:	2000      	movs	r0, #0
 8007f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800803c <_strtol_l.constprop.0+0x100>
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	462e      	mov	r6, r5
 8007f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f62:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f66:	f017 0708 	ands.w	r7, r7, #8
 8007f6a:	d1f7      	bne.n	8007f5c <_strtol_l.constprop.0+0x20>
 8007f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8007f6e:	d132      	bne.n	8007fd6 <_strtol_l.constprop.0+0x9a>
 8007f70:	782c      	ldrb	r4, [r5, #0]
 8007f72:	2701      	movs	r7, #1
 8007f74:	1cb5      	adds	r5, r6, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d05b      	beq.n	8008032 <_strtol_l.constprop.0+0xf6>
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d109      	bne.n	8007f92 <_strtol_l.constprop.0+0x56>
 8007f7e:	2c30      	cmp	r4, #48	; 0x30
 8007f80:	d107      	bne.n	8007f92 <_strtol_l.constprop.0+0x56>
 8007f82:	782c      	ldrb	r4, [r5, #0]
 8007f84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f88:	2c58      	cmp	r4, #88	; 0x58
 8007f8a:	d14d      	bne.n	8008028 <_strtol_l.constprop.0+0xec>
 8007f8c:	786c      	ldrb	r4, [r5, #1]
 8007f8e:	2310      	movs	r3, #16
 8007f90:	3502      	adds	r5, #2
 8007f92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f9a:	f04f 0c00 	mov.w	ip, #0
 8007f9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007fa2:	4666      	mov	r6, ip
 8007fa4:	fb03 8a19 	mls	sl, r3, r9, r8
 8007fa8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007fac:	f1be 0f09 	cmp.w	lr, #9
 8007fb0:	d816      	bhi.n	8007fe0 <_strtol_l.constprop.0+0xa4>
 8007fb2:	4674      	mov	r4, lr
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	dd24      	ble.n	8008002 <_strtol_l.constprop.0+0xc6>
 8007fb8:	f1bc 0f00 	cmp.w	ip, #0
 8007fbc:	db1e      	blt.n	8007ffc <_strtol_l.constprop.0+0xc0>
 8007fbe:	45b1      	cmp	r9, r6
 8007fc0:	d31c      	bcc.n	8007ffc <_strtol_l.constprop.0+0xc0>
 8007fc2:	d101      	bne.n	8007fc8 <_strtol_l.constprop.0+0x8c>
 8007fc4:	45a2      	cmp	sl, r4
 8007fc6:	db19      	blt.n	8007ffc <_strtol_l.constprop.0+0xc0>
 8007fc8:	fb06 4603 	mla	r6, r6, r3, r4
 8007fcc:	f04f 0c01 	mov.w	ip, #1
 8007fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fd4:	e7e8      	b.n	8007fa8 <_strtol_l.constprop.0+0x6c>
 8007fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8007fd8:	bf04      	itt	eq
 8007fda:	782c      	ldrbeq	r4, [r5, #0]
 8007fdc:	1cb5      	addeq	r5, r6, #2
 8007fde:	e7ca      	b.n	8007f76 <_strtol_l.constprop.0+0x3a>
 8007fe0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fe4:	f1be 0f19 	cmp.w	lr, #25
 8007fe8:	d801      	bhi.n	8007fee <_strtol_l.constprop.0+0xb2>
 8007fea:	3c37      	subs	r4, #55	; 0x37
 8007fec:	e7e2      	b.n	8007fb4 <_strtol_l.constprop.0+0x78>
 8007fee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007ff2:	f1be 0f19 	cmp.w	lr, #25
 8007ff6:	d804      	bhi.n	8008002 <_strtol_l.constprop.0+0xc6>
 8007ff8:	3c57      	subs	r4, #87	; 0x57
 8007ffa:	e7db      	b.n	8007fb4 <_strtol_l.constprop.0+0x78>
 8007ffc:	f04f 3cff 	mov.w	ip, #4294967295
 8008000:	e7e6      	b.n	8007fd0 <_strtol_l.constprop.0+0x94>
 8008002:	f1bc 0f00 	cmp.w	ip, #0
 8008006:	da05      	bge.n	8008014 <_strtol_l.constprop.0+0xd8>
 8008008:	2322      	movs	r3, #34	; 0x22
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	4646      	mov	r6, r8
 800800e:	b942      	cbnz	r2, 8008022 <_strtol_l.constprop.0+0xe6>
 8008010:	4630      	mov	r0, r6
 8008012:	e79e      	b.n	8007f52 <_strtol_l.constprop.0+0x16>
 8008014:	b107      	cbz	r7, 8008018 <_strtol_l.constprop.0+0xdc>
 8008016:	4276      	negs	r6, r6
 8008018:	2a00      	cmp	r2, #0
 800801a:	d0f9      	beq.n	8008010 <_strtol_l.constprop.0+0xd4>
 800801c:	f1bc 0f00 	cmp.w	ip, #0
 8008020:	d000      	beq.n	8008024 <_strtol_l.constprop.0+0xe8>
 8008022:	1e69      	subs	r1, r5, #1
 8008024:	6011      	str	r1, [r2, #0]
 8008026:	e7f3      	b.n	8008010 <_strtol_l.constprop.0+0xd4>
 8008028:	2430      	movs	r4, #48	; 0x30
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1b1      	bne.n	8007f92 <_strtol_l.constprop.0+0x56>
 800802e:	2308      	movs	r3, #8
 8008030:	e7af      	b.n	8007f92 <_strtol_l.constprop.0+0x56>
 8008032:	2c30      	cmp	r4, #48	; 0x30
 8008034:	d0a5      	beq.n	8007f82 <_strtol_l.constprop.0+0x46>
 8008036:	230a      	movs	r3, #10
 8008038:	e7ab      	b.n	8007f92 <_strtol_l.constprop.0+0x56>
 800803a:	bf00      	nop
 800803c:	0800a53d 	.word	0x0800a53d

08008040 <strtol>:
 8008040:	4613      	mov	r3, r2
 8008042:	460a      	mov	r2, r1
 8008044:	4601      	mov	r1, r0
 8008046:	4802      	ldr	r0, [pc, #8]	; (8008050 <strtol+0x10>)
 8008048:	6800      	ldr	r0, [r0, #0]
 800804a:	f7ff bf77 	b.w	8007f3c <_strtol_l.constprop.0>
 800804e:	bf00      	nop
 8008050:	20000024 	.word	0x20000024

08008054 <quorem>:
 8008054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	6903      	ldr	r3, [r0, #16]
 800805a:	690c      	ldr	r4, [r1, #16]
 800805c:	42a3      	cmp	r3, r4
 800805e:	4607      	mov	r7, r0
 8008060:	f2c0 8081 	blt.w	8008166 <quorem+0x112>
 8008064:	3c01      	subs	r4, #1
 8008066:	f101 0814 	add.w	r8, r1, #20
 800806a:	f100 0514 	add.w	r5, r0, #20
 800806e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807c:	3301      	adds	r3, #1
 800807e:	429a      	cmp	r2, r3
 8008080:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008088:	fbb2 f6f3 	udiv	r6, r2, r3
 800808c:	d331      	bcc.n	80080f2 <quorem+0x9e>
 800808e:	f04f 0e00 	mov.w	lr, #0
 8008092:	4640      	mov	r0, r8
 8008094:	46ac      	mov	ip, r5
 8008096:	46f2      	mov	sl, lr
 8008098:	f850 2b04 	ldr.w	r2, [r0], #4
 800809c:	b293      	uxth	r3, r2
 800809e:	fb06 e303 	mla	r3, r6, r3, lr
 80080a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	ebaa 0303 	sub.w	r3, sl, r3
 80080ac:	f8dc a000 	ldr.w	sl, [ip]
 80080b0:	0c12      	lsrs	r2, r2, #16
 80080b2:	fa13 f38a 	uxtah	r3, r3, sl
 80080b6:	fb06 e202 	mla	r2, r6, r2, lr
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	9b00      	ldr	r3, [sp, #0]
 80080be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080c2:	b292      	uxth	r2, r2
 80080c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80080d0:	4581      	cmp	r9, r0
 80080d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d6:	f84c 3b04 	str.w	r3, [ip], #4
 80080da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080de:	d2db      	bcs.n	8008098 <quorem+0x44>
 80080e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80080e4:	b92b      	cbnz	r3, 80080f2 <quorem+0x9e>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	429d      	cmp	r5, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	d32e      	bcc.n	800814e <quorem+0xfa>
 80080f0:	613c      	str	r4, [r7, #16]
 80080f2:	4638      	mov	r0, r7
 80080f4:	f001 f846 	bl	8009184 <__mcmp>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	db24      	blt.n	8008146 <quorem+0xf2>
 80080fc:	3601      	adds	r6, #1
 80080fe:	4628      	mov	r0, r5
 8008100:	f04f 0c00 	mov.w	ip, #0
 8008104:	f858 2b04 	ldr.w	r2, [r8], #4
 8008108:	f8d0 e000 	ldr.w	lr, [r0]
 800810c:	b293      	uxth	r3, r2
 800810e:	ebac 0303 	sub.w	r3, ip, r3
 8008112:	0c12      	lsrs	r2, r2, #16
 8008114:	fa13 f38e 	uxtah	r3, r3, lr
 8008118:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800811c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008120:	b29b      	uxth	r3, r3
 8008122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008126:	45c1      	cmp	r9, r8
 8008128:	f840 3b04 	str.w	r3, [r0], #4
 800812c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008130:	d2e8      	bcs.n	8008104 <quorem+0xb0>
 8008132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800813a:	b922      	cbnz	r2, 8008146 <quorem+0xf2>
 800813c:	3b04      	subs	r3, #4
 800813e:	429d      	cmp	r5, r3
 8008140:	461a      	mov	r2, r3
 8008142:	d30a      	bcc.n	800815a <quorem+0x106>
 8008144:	613c      	str	r4, [r7, #16]
 8008146:	4630      	mov	r0, r6
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	3b04      	subs	r3, #4
 8008152:	2a00      	cmp	r2, #0
 8008154:	d1cc      	bne.n	80080f0 <quorem+0x9c>
 8008156:	3c01      	subs	r4, #1
 8008158:	e7c7      	b.n	80080ea <quorem+0x96>
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	3b04      	subs	r3, #4
 800815e:	2a00      	cmp	r2, #0
 8008160:	d1f0      	bne.n	8008144 <quorem+0xf0>
 8008162:	3c01      	subs	r4, #1
 8008164:	e7eb      	b.n	800813e <quorem+0xea>
 8008166:	2000      	movs	r0, #0
 8008168:	e7ee      	b.n	8008148 <quorem+0xf4>
 800816a:	0000      	movs	r0, r0
 800816c:	0000      	movs	r0, r0
	...

08008170 <_dtoa_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	ed2d 8b02 	vpush	{d8}
 8008178:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800817a:	b091      	sub	sp, #68	; 0x44
 800817c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008180:	ec59 8b10 	vmov	r8, r9, d0
 8008184:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008186:	9106      	str	r1, [sp, #24]
 8008188:	4606      	mov	r6, r0
 800818a:	9208      	str	r2, [sp, #32]
 800818c:	930c      	str	r3, [sp, #48]	; 0x30
 800818e:	b975      	cbnz	r5, 80081ae <_dtoa_r+0x3e>
 8008190:	2010      	movs	r0, #16
 8008192:	f000 fd5f 	bl	8008c54 <malloc>
 8008196:	4602      	mov	r2, r0
 8008198:	6270      	str	r0, [r6, #36]	; 0x24
 800819a:	b920      	cbnz	r0, 80081a6 <_dtoa_r+0x36>
 800819c:	4baa      	ldr	r3, [pc, #680]	; (8008448 <_dtoa_r+0x2d8>)
 800819e:	21ea      	movs	r1, #234	; 0xea
 80081a0:	48aa      	ldr	r0, [pc, #680]	; (800844c <_dtoa_r+0x2dc>)
 80081a2:	f001 fb53 	bl	800984c <__assert_func>
 80081a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081aa:	6005      	str	r5, [r0, #0]
 80081ac:	60c5      	str	r5, [r0, #12]
 80081ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081b0:	6819      	ldr	r1, [r3, #0]
 80081b2:	b151      	cbz	r1, 80081ca <_dtoa_r+0x5a>
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	604a      	str	r2, [r1, #4]
 80081b8:	2301      	movs	r3, #1
 80081ba:	4093      	lsls	r3, r2
 80081bc:	608b      	str	r3, [r1, #8]
 80081be:	4630      	mov	r0, r6
 80081c0:	f000 fd9e 	bl	8008d00 <_Bfree>
 80081c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f1b9 0300 	subs.w	r3, r9, #0
 80081ce:	bfbb      	ittet	lt
 80081d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	9303      	strlt	r3, [sp, #12]
 80081d6:	2300      	movge	r3, #0
 80081d8:	2201      	movlt	r2, #1
 80081da:	bfac      	ite	ge
 80081dc:	6023      	strge	r3, [r4, #0]
 80081de:	6022      	strlt	r2, [r4, #0]
 80081e0:	4b9b      	ldr	r3, [pc, #620]	; (8008450 <_dtoa_r+0x2e0>)
 80081e2:	9c03      	ldr	r4, [sp, #12]
 80081e4:	43a3      	bics	r3, r4
 80081e6:	d11c      	bne.n	8008222 <_dtoa_r+0xb2>
 80081e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80081f4:	ea53 0308 	orrs.w	r3, r3, r8
 80081f8:	f000 84fd 	beq.w	8008bf6 <_dtoa_r+0xa86>
 80081fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081fe:	b963      	cbnz	r3, 800821a <_dtoa_r+0xaa>
 8008200:	4b94      	ldr	r3, [pc, #592]	; (8008454 <_dtoa_r+0x2e4>)
 8008202:	e01f      	b.n	8008244 <_dtoa_r+0xd4>
 8008204:	4b94      	ldr	r3, [pc, #592]	; (8008458 <_dtoa_r+0x2e8>)
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	3308      	adds	r3, #8
 800820a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	9801      	ldr	r0, [sp, #4]
 8008210:	b011      	add	sp, #68	; 0x44
 8008212:	ecbd 8b02 	vpop	{d8}
 8008216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821a:	4b8e      	ldr	r3, [pc, #568]	; (8008454 <_dtoa_r+0x2e4>)
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	3303      	adds	r3, #3
 8008220:	e7f3      	b.n	800820a <_dtoa_r+0x9a>
 8008222:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008226:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800822a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822e:	d10b      	bne.n	8008248 <_dtoa_r+0xd8>
 8008230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008232:	2301      	movs	r3, #1
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 84d9 	beq.w	8008bf0 <_dtoa_r+0xa80>
 800823e:	4887      	ldr	r0, [pc, #540]	; (800845c <_dtoa_r+0x2ec>)
 8008240:	6018      	str	r0, [r3, #0]
 8008242:	1e43      	subs	r3, r0, #1
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	e7e2      	b.n	800820e <_dtoa_r+0x9e>
 8008248:	a90f      	add	r1, sp, #60	; 0x3c
 800824a:	aa0e      	add	r2, sp, #56	; 0x38
 800824c:	4630      	mov	r0, r6
 800824e:	eeb0 0b48 	vmov.f64	d0, d8
 8008252:	f001 f83d 	bl	80092d0 <__d2b>
 8008256:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800825a:	4605      	mov	r5, r0
 800825c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800825e:	2900      	cmp	r1, #0
 8008260:	d046      	beq.n	80082f0 <_dtoa_r+0x180>
 8008262:	ee18 4a90 	vmov	r4, s17
 8008266:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800826a:	ec53 2b18 	vmov	r2, r3, d8
 800826e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008272:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008276:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800827a:	2400      	movs	r4, #0
 800827c:	ec43 2b16 	vmov	d6, r2, r3
 8008280:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008284:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008430 <_dtoa_r+0x2c0>
 8008288:	ee36 7b47 	vsub.f64	d7, d6, d7
 800828c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008438 <_dtoa_r+0x2c8>
 8008290:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008294:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008440 <_dtoa_r+0x2d0>
 8008298:	ee07 1a90 	vmov	s15, r1
 800829c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80082a0:	eeb0 7b46 	vmov.f64	d7, d6
 80082a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80082a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80082ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80082b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b4:	ee16 ba90 	vmov	fp, s13
 80082b8:	940a      	str	r4, [sp, #40]	; 0x28
 80082ba:	d508      	bpl.n	80082ce <_dtoa_r+0x15e>
 80082bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80082c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80082c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c8:	bf18      	it	ne
 80082ca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80082ce:	f1bb 0f16 	cmp.w	fp, #22
 80082d2:	d82f      	bhi.n	8008334 <_dtoa_r+0x1c4>
 80082d4:	4b62      	ldr	r3, [pc, #392]	; (8008460 <_dtoa_r+0x2f0>)
 80082d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082da:	ed93 7b00 	vldr	d7, [r3]
 80082de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	d501      	bpl.n	80082ec <_dtoa_r+0x17c>
 80082e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082ec:	2300      	movs	r3, #0
 80082ee:	e022      	b.n	8008336 <_dtoa_r+0x1c6>
 80082f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082f2:	4401      	add	r1, r0
 80082f4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	bfc1      	itttt	gt
 80082fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008300:	fa04 f303 	lslgt.w	r3, r4, r3
 8008304:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008308:	fa28 f804 	lsrgt.w	r8, r8, r4
 800830c:	bfd6      	itet	le
 800830e:	f1c3 0320 	rsble	r3, r3, #32
 8008312:	ea43 0808 	orrgt.w	r8, r3, r8
 8008316:	fa08 f803 	lslle.w	r8, r8, r3
 800831a:	ee07 8a90 	vmov	s15, r8
 800831e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008322:	3901      	subs	r1, #1
 8008324:	ee17 4a90 	vmov	r4, s15
 8008328:	ec53 2b17 	vmov	r2, r3, d7
 800832c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008330:	2401      	movs	r4, #1
 8008332:	e7a3      	b.n	800827c <_dtoa_r+0x10c>
 8008334:	2301      	movs	r3, #1
 8008336:	930b      	str	r3, [sp, #44]	; 0x2c
 8008338:	1a43      	subs	r3, r0, r1
 800833a:	1e5a      	subs	r2, r3, #1
 800833c:	bf45      	ittet	mi
 800833e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008342:	9304      	strmi	r3, [sp, #16]
 8008344:	2300      	movpl	r3, #0
 8008346:	2300      	movmi	r3, #0
 8008348:	9205      	str	r2, [sp, #20]
 800834a:	bf54      	ite	pl
 800834c:	9304      	strpl	r3, [sp, #16]
 800834e:	9305      	strmi	r3, [sp, #20]
 8008350:	f1bb 0f00 	cmp.w	fp, #0
 8008354:	db18      	blt.n	8008388 <_dtoa_r+0x218>
 8008356:	9b05      	ldr	r3, [sp, #20]
 8008358:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800835c:	445b      	add	r3, fp
 800835e:	9305      	str	r3, [sp, #20]
 8008360:	2300      	movs	r3, #0
 8008362:	9a06      	ldr	r2, [sp, #24]
 8008364:	2a09      	cmp	r2, #9
 8008366:	d849      	bhi.n	80083fc <_dtoa_r+0x28c>
 8008368:	2a05      	cmp	r2, #5
 800836a:	bfc4      	itt	gt
 800836c:	3a04      	subgt	r2, #4
 800836e:	9206      	strgt	r2, [sp, #24]
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	f1a2 0202 	sub.w	r2, r2, #2
 8008376:	bfcc      	ite	gt
 8008378:	2400      	movgt	r4, #0
 800837a:	2401      	movle	r4, #1
 800837c:	2a03      	cmp	r2, #3
 800837e:	d848      	bhi.n	8008412 <_dtoa_r+0x2a2>
 8008380:	e8df f002 	tbb	[pc, r2]
 8008384:	3a2c2e0b 	.word	0x3a2c2e0b
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	2200      	movs	r2, #0
 800838c:	eba3 030b 	sub.w	r3, r3, fp
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	9209      	str	r2, [sp, #36]	; 0x24
 8008394:	f1cb 0300 	rsb	r3, fp, #0
 8008398:	e7e3      	b.n	8008362 <_dtoa_r+0x1f2>
 800839a:	2200      	movs	r2, #0
 800839c:	9207      	str	r2, [sp, #28]
 800839e:	9a08      	ldr	r2, [sp, #32]
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	dc39      	bgt.n	8008418 <_dtoa_r+0x2a8>
 80083a4:	f04f 0a01 	mov.w	sl, #1
 80083a8:	46d1      	mov	r9, sl
 80083aa:	4652      	mov	r2, sl
 80083ac:	f8cd a020 	str.w	sl, [sp, #32]
 80083b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80083b2:	2100      	movs	r1, #0
 80083b4:	6079      	str	r1, [r7, #4]
 80083b6:	2004      	movs	r0, #4
 80083b8:	f100 0c14 	add.w	ip, r0, #20
 80083bc:	4594      	cmp	ip, r2
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	d92f      	bls.n	8008422 <_dtoa_r+0x2b2>
 80083c2:	4630      	mov	r0, r6
 80083c4:	930d      	str	r3, [sp, #52]	; 0x34
 80083c6:	f000 fc5b 	bl	8008c80 <_Balloc>
 80083ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083cc:	9001      	str	r0, [sp, #4]
 80083ce:	4602      	mov	r2, r0
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d149      	bne.n	8008468 <_dtoa_r+0x2f8>
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <_dtoa_r+0x2f4>)
 80083d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083da:	e6e1      	b.n	80081a0 <_dtoa_r+0x30>
 80083dc:	2201      	movs	r2, #1
 80083de:	e7dd      	b.n	800839c <_dtoa_r+0x22c>
 80083e0:	2200      	movs	r2, #0
 80083e2:	9207      	str	r2, [sp, #28]
 80083e4:	9a08      	ldr	r2, [sp, #32]
 80083e6:	eb0b 0a02 	add.w	sl, fp, r2
 80083ea:	f10a 0901 	add.w	r9, sl, #1
 80083ee:	464a      	mov	r2, r9
 80083f0:	2a01      	cmp	r2, #1
 80083f2:	bfb8      	it	lt
 80083f4:	2201      	movlt	r2, #1
 80083f6:	e7db      	b.n	80083b0 <_dtoa_r+0x240>
 80083f8:	2201      	movs	r2, #1
 80083fa:	e7f2      	b.n	80083e2 <_dtoa_r+0x272>
 80083fc:	2401      	movs	r4, #1
 80083fe:	2200      	movs	r2, #0
 8008400:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008404:	f04f 3aff 	mov.w	sl, #4294967295
 8008408:	2100      	movs	r1, #0
 800840a:	46d1      	mov	r9, sl
 800840c:	2212      	movs	r2, #18
 800840e:	9108      	str	r1, [sp, #32]
 8008410:	e7ce      	b.n	80083b0 <_dtoa_r+0x240>
 8008412:	2201      	movs	r2, #1
 8008414:	9207      	str	r2, [sp, #28]
 8008416:	e7f5      	b.n	8008404 <_dtoa_r+0x294>
 8008418:	f8dd a020 	ldr.w	sl, [sp, #32]
 800841c:	46d1      	mov	r9, sl
 800841e:	4652      	mov	r2, sl
 8008420:	e7c6      	b.n	80083b0 <_dtoa_r+0x240>
 8008422:	3101      	adds	r1, #1
 8008424:	6079      	str	r1, [r7, #4]
 8008426:	0040      	lsls	r0, r0, #1
 8008428:	e7c6      	b.n	80083b8 <_dtoa_r+0x248>
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	0800a64a 	.word	0x0800a64a
 800844c:	0800a661 	.word	0x0800a661
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	0800a646 	.word	0x0800a646
 8008458:	0800a63d 	.word	0x0800a63d
 800845c:	0800a519 	.word	0x0800a519
 8008460:	0800a758 	.word	0x0800a758
 8008464:	0800a6bc 	.word	0x0800a6bc
 8008468:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800846a:	9901      	ldr	r1, [sp, #4]
 800846c:	6011      	str	r1, [r2, #0]
 800846e:	f1b9 0f0e 	cmp.w	r9, #14
 8008472:	d86c      	bhi.n	800854e <_dtoa_r+0x3de>
 8008474:	2c00      	cmp	r4, #0
 8008476:	d06a      	beq.n	800854e <_dtoa_r+0x3de>
 8008478:	f1bb 0f00 	cmp.w	fp, #0
 800847c:	f340 80a0 	ble.w	80085c0 <_dtoa_r+0x450>
 8008480:	49c1      	ldr	r1, [pc, #772]	; (8008788 <_dtoa_r+0x618>)
 8008482:	f00b 020f 	and.w	r2, fp, #15
 8008486:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800848a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800848e:	ed92 7b00 	vldr	d7, [r2]
 8008492:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008496:	f000 8087 	beq.w	80085a8 <_dtoa_r+0x438>
 800849a:	4abc      	ldr	r2, [pc, #752]	; (800878c <_dtoa_r+0x61c>)
 800849c:	ed92 6b08 	vldr	d6, [r2, #32]
 80084a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80084a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80084a8:	f001 010f 	and.w	r1, r1, #15
 80084ac:	2203      	movs	r2, #3
 80084ae:	48b7      	ldr	r0, [pc, #732]	; (800878c <_dtoa_r+0x61c>)
 80084b0:	2900      	cmp	r1, #0
 80084b2:	d17b      	bne.n	80085ac <_dtoa_r+0x43c>
 80084b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80084b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80084bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084c2:	2900      	cmp	r1, #0
 80084c4:	f000 80a2 	beq.w	800860c <_dtoa_r+0x49c>
 80084c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80084cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d8:	f140 8098 	bpl.w	800860c <_dtoa_r+0x49c>
 80084dc:	f1b9 0f00 	cmp.w	r9, #0
 80084e0:	f000 8094 	beq.w	800860c <_dtoa_r+0x49c>
 80084e4:	f1ba 0f00 	cmp.w	sl, #0
 80084e8:	dd2f      	ble.n	800854a <_dtoa_r+0x3da>
 80084ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80084ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084f6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80084fa:	3201      	adds	r2, #1
 80084fc:	4650      	mov	r0, sl
 80084fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008502:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008506:	ee07 2a90 	vmov	s15, r2
 800850a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800850e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008512:	ee15 4a90 	vmov	r4, s11
 8008516:	ec52 1b15 	vmov	r1, r2, d5
 800851a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800851e:	2800      	cmp	r0, #0
 8008520:	d177      	bne.n	8008612 <_dtoa_r+0x4a2>
 8008522:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008526:	ee36 6b47 	vsub.f64	d6, d6, d7
 800852a:	ec42 1b17 	vmov	d7, r1, r2
 800852e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008536:	f300 8263 	bgt.w	8008a00 <_dtoa_r+0x890>
 800853a:	eeb1 7b47 	vneg.f64	d7, d7
 800853e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	f100 8258 	bmi.w	80089fa <_dtoa_r+0x88a>
 800854a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800854e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008550:	2a00      	cmp	r2, #0
 8008552:	f2c0 811d 	blt.w	8008790 <_dtoa_r+0x620>
 8008556:	f1bb 0f0e 	cmp.w	fp, #14
 800855a:	f300 8119 	bgt.w	8008790 <_dtoa_r+0x620>
 800855e:	4b8a      	ldr	r3, [pc, #552]	; (8008788 <_dtoa_r+0x618>)
 8008560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008564:	ed93 6b00 	vldr	d6, [r3]
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f280 80b7 	bge.w	80086de <_dtoa_r+0x56e>
 8008570:	f1b9 0f00 	cmp.w	r9, #0
 8008574:	f300 80b3 	bgt.w	80086de <_dtoa_r+0x56e>
 8008578:	f040 823f 	bne.w	80089fa <_dtoa_r+0x88a>
 800857c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008580:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008584:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008588:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800858c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008590:	464c      	mov	r4, r9
 8008592:	464f      	mov	r7, r9
 8008594:	f280 8215 	bge.w	80089c2 <_dtoa_r+0x852>
 8008598:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800859c:	2331      	movs	r3, #49	; 0x31
 800859e:	f808 3b01 	strb.w	r3, [r8], #1
 80085a2:	f10b 0b01 	add.w	fp, fp, #1
 80085a6:	e211      	b.n	80089cc <_dtoa_r+0x85c>
 80085a8:	2202      	movs	r2, #2
 80085aa:	e780      	b.n	80084ae <_dtoa_r+0x33e>
 80085ac:	07cc      	lsls	r4, r1, #31
 80085ae:	d504      	bpl.n	80085ba <_dtoa_r+0x44a>
 80085b0:	ed90 6b00 	vldr	d6, [r0]
 80085b4:	3201      	adds	r2, #1
 80085b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085ba:	1049      	asrs	r1, r1, #1
 80085bc:	3008      	adds	r0, #8
 80085be:	e777      	b.n	80084b0 <_dtoa_r+0x340>
 80085c0:	d022      	beq.n	8008608 <_dtoa_r+0x498>
 80085c2:	f1cb 0100 	rsb	r1, fp, #0
 80085c6:	4a70      	ldr	r2, [pc, #448]	; (8008788 <_dtoa_r+0x618>)
 80085c8:	f001 000f 	and.w	r0, r1, #15
 80085cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80085d0:	ed92 7b00 	vldr	d7, [r2]
 80085d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80085d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085dc:	486b      	ldr	r0, [pc, #428]	; (800878c <_dtoa_r+0x61c>)
 80085de:	1109      	asrs	r1, r1, #4
 80085e0:	2400      	movs	r4, #0
 80085e2:	2202      	movs	r2, #2
 80085e4:	b929      	cbnz	r1, 80085f2 <_dtoa_r+0x482>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	f43f af6a 	beq.w	80084c0 <_dtoa_r+0x350>
 80085ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085f0:	e766      	b.n	80084c0 <_dtoa_r+0x350>
 80085f2:	07cf      	lsls	r7, r1, #31
 80085f4:	d505      	bpl.n	8008602 <_dtoa_r+0x492>
 80085f6:	ed90 6b00 	vldr	d6, [r0]
 80085fa:	3201      	adds	r2, #1
 80085fc:	2401      	movs	r4, #1
 80085fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008602:	1049      	asrs	r1, r1, #1
 8008604:	3008      	adds	r0, #8
 8008606:	e7ed      	b.n	80085e4 <_dtoa_r+0x474>
 8008608:	2202      	movs	r2, #2
 800860a:	e759      	b.n	80084c0 <_dtoa_r+0x350>
 800860c:	465f      	mov	r7, fp
 800860e:	4648      	mov	r0, r9
 8008610:	e775      	b.n	80084fe <_dtoa_r+0x38e>
 8008612:	ec42 1b17 	vmov	d7, r1, r2
 8008616:	4a5c      	ldr	r2, [pc, #368]	; (8008788 <_dtoa_r+0x618>)
 8008618:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800861c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	1814      	adds	r4, r2, r0
 8008624:	9a07      	ldr	r2, [sp, #28]
 8008626:	b352      	cbz	r2, 800867e <_dtoa_r+0x50e>
 8008628:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800862c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008630:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008634:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008638:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800863c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008640:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008644:	ee14 2a90 	vmov	r2, s9
 8008648:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800864c:	3230      	adds	r2, #48	; 0x30
 800864e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008652:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865a:	f808 2b01 	strb.w	r2, [r8], #1
 800865e:	d439      	bmi.n	80086d4 <_dtoa_r+0x564>
 8008660:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008664:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866c:	d472      	bmi.n	8008754 <_dtoa_r+0x5e4>
 800866e:	45a0      	cmp	r8, r4
 8008670:	f43f af6b 	beq.w	800854a <_dtoa_r+0x3da>
 8008674:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008678:	ee26 6b03 	vmul.f64	d6, d6, d3
 800867c:	e7e0      	b.n	8008640 <_dtoa_r+0x4d0>
 800867e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008682:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008686:	4621      	mov	r1, r4
 8008688:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800868c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008690:	ee14 2a90 	vmov	r2, s9
 8008694:	3230      	adds	r2, #48	; 0x30
 8008696:	f808 2b01 	strb.w	r2, [r8], #1
 800869a:	45a0      	cmp	r8, r4
 800869c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80086a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80086a4:	d118      	bne.n	80086d8 <_dtoa_r+0x568>
 80086a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80086aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80086ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80086b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b6:	dc4d      	bgt.n	8008754 <_dtoa_r+0x5e4>
 80086b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80086bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c4:	f57f af41 	bpl.w	800854a <_dtoa_r+0x3da>
 80086c8:	4688      	mov	r8, r1
 80086ca:	3901      	subs	r1, #1
 80086cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80086d0:	2b30      	cmp	r3, #48	; 0x30
 80086d2:	d0f9      	beq.n	80086c8 <_dtoa_r+0x558>
 80086d4:	46bb      	mov	fp, r7
 80086d6:	e02a      	b.n	800872e <_dtoa_r+0x5be>
 80086d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80086dc:	e7d6      	b.n	800868c <_dtoa_r+0x51c>
 80086de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80086e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80086ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80086f2:	ee15 3a10 	vmov	r3, s10
 80086f6:	3330      	adds	r3, #48	; 0x30
 80086f8:	f808 3b01 	strb.w	r3, [r8], #1
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	eba8 0303 	sub.w	r3, r8, r3
 8008702:	4599      	cmp	r9, r3
 8008704:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008708:	eea3 7b46 	vfms.f64	d7, d3, d6
 800870c:	d133      	bne.n	8008776 <_dtoa_r+0x606>
 800870e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008712:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871a:	dc1a      	bgt.n	8008752 <_dtoa_r+0x5e2>
 800871c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008724:	d103      	bne.n	800872e <_dtoa_r+0x5be>
 8008726:	ee15 3a10 	vmov	r3, s10
 800872a:	07d9      	lsls	r1, r3, #31
 800872c:	d411      	bmi.n	8008752 <_dtoa_r+0x5e2>
 800872e:	4629      	mov	r1, r5
 8008730:	4630      	mov	r0, r6
 8008732:	f000 fae5 	bl	8008d00 <_Bfree>
 8008736:	2300      	movs	r3, #0
 8008738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800873a:	f888 3000 	strb.w	r3, [r8]
 800873e:	f10b 0301 	add.w	r3, fp, #1
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008746:	2b00      	cmp	r3, #0
 8008748:	f43f ad61 	beq.w	800820e <_dtoa_r+0x9e>
 800874c:	f8c3 8000 	str.w	r8, [r3]
 8008750:	e55d      	b.n	800820e <_dtoa_r+0x9e>
 8008752:	465f      	mov	r7, fp
 8008754:	4643      	mov	r3, r8
 8008756:	4698      	mov	r8, r3
 8008758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800875c:	2a39      	cmp	r2, #57	; 0x39
 800875e:	d106      	bne.n	800876e <_dtoa_r+0x5fe>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d1f7      	bne.n	8008756 <_dtoa_r+0x5e6>
 8008766:	9901      	ldr	r1, [sp, #4]
 8008768:	2230      	movs	r2, #48	; 0x30
 800876a:	3701      	adds	r7, #1
 800876c:	700a      	strb	r2, [r1, #0]
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	3201      	adds	r2, #1
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e7ae      	b.n	80086d4 <_dtoa_r+0x564>
 8008776:	ee27 7b04 	vmul.f64	d7, d7, d4
 800877a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008782:	d1b2      	bne.n	80086ea <_dtoa_r+0x57a>
 8008784:	e7d3      	b.n	800872e <_dtoa_r+0x5be>
 8008786:	bf00      	nop
 8008788:	0800a758 	.word	0x0800a758
 800878c:	0800a730 	.word	0x0800a730
 8008790:	9907      	ldr	r1, [sp, #28]
 8008792:	2900      	cmp	r1, #0
 8008794:	f000 80d0 	beq.w	8008938 <_dtoa_r+0x7c8>
 8008798:	9906      	ldr	r1, [sp, #24]
 800879a:	2901      	cmp	r1, #1
 800879c:	f300 80b4 	bgt.w	8008908 <_dtoa_r+0x798>
 80087a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087a2:	2900      	cmp	r1, #0
 80087a4:	f000 80ac 	beq.w	8008900 <_dtoa_r+0x790>
 80087a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80087b0:	461c      	mov	r4, r3
 80087b2:	930a      	str	r3, [sp, #40]	; 0x28
 80087b4:	9b04      	ldr	r3, [sp, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	9b05      	ldr	r3, [sp, #20]
 80087bc:	2101      	movs	r1, #1
 80087be:	4413      	add	r3, r2
 80087c0:	4630      	mov	r0, r6
 80087c2:	9305      	str	r3, [sp, #20]
 80087c4:	f000 fb54 	bl	8008e70 <__i2b>
 80087c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ca:	4607      	mov	r7, r0
 80087cc:	f1b8 0f00 	cmp.w	r8, #0
 80087d0:	dd0d      	ble.n	80087ee <_dtoa_r+0x67e>
 80087d2:	9a05      	ldr	r2, [sp, #20]
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	dd0a      	ble.n	80087ee <_dtoa_r+0x67e>
 80087d8:	4542      	cmp	r2, r8
 80087da:	9904      	ldr	r1, [sp, #16]
 80087dc:	bfa8      	it	ge
 80087de:	4642      	movge	r2, r8
 80087e0:	1a89      	subs	r1, r1, r2
 80087e2:	9104      	str	r1, [sp, #16]
 80087e4:	9905      	ldr	r1, [sp, #20]
 80087e6:	eba8 0802 	sub.w	r8, r8, r2
 80087ea:	1a8a      	subs	r2, r1, r2
 80087ec:	9205      	str	r2, [sp, #20]
 80087ee:	b303      	cbz	r3, 8008832 <_dtoa_r+0x6c2>
 80087f0:	9a07      	ldr	r2, [sp, #28]
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	f000 80a5 	beq.w	8008942 <_dtoa_r+0x7d2>
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	dd13      	ble.n	8008824 <_dtoa_r+0x6b4>
 80087fc:	4639      	mov	r1, r7
 80087fe:	4622      	mov	r2, r4
 8008800:	4630      	mov	r0, r6
 8008802:	930d      	str	r3, [sp, #52]	; 0x34
 8008804:	f000 fbf4 	bl	8008ff0 <__pow5mult>
 8008808:	462a      	mov	r2, r5
 800880a:	4601      	mov	r1, r0
 800880c:	4607      	mov	r7, r0
 800880e:	4630      	mov	r0, r6
 8008810:	f000 fb44 	bl	8008e9c <__multiply>
 8008814:	4629      	mov	r1, r5
 8008816:	900a      	str	r0, [sp, #40]	; 0x28
 8008818:	4630      	mov	r0, r6
 800881a:	f000 fa71 	bl	8008d00 <_Bfree>
 800881e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008822:	4615      	mov	r5, r2
 8008824:	1b1a      	subs	r2, r3, r4
 8008826:	d004      	beq.n	8008832 <_dtoa_r+0x6c2>
 8008828:	4629      	mov	r1, r5
 800882a:	4630      	mov	r0, r6
 800882c:	f000 fbe0 	bl	8008ff0 <__pow5mult>
 8008830:	4605      	mov	r5, r0
 8008832:	2101      	movs	r1, #1
 8008834:	4630      	mov	r0, r6
 8008836:	f000 fb1b 	bl	8008e70 <__i2b>
 800883a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	f340 8081 	ble.w	8008946 <_dtoa_r+0x7d6>
 8008844:	461a      	mov	r2, r3
 8008846:	4601      	mov	r1, r0
 8008848:	4630      	mov	r0, r6
 800884a:	f000 fbd1 	bl	8008ff0 <__pow5mult>
 800884e:	9b06      	ldr	r3, [sp, #24]
 8008850:	2b01      	cmp	r3, #1
 8008852:	4604      	mov	r4, r0
 8008854:	dd7a      	ble.n	800894c <_dtoa_r+0x7dc>
 8008856:	2300      	movs	r3, #0
 8008858:	930a      	str	r3, [sp, #40]	; 0x28
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008860:	6910      	ldr	r0, [r2, #16]
 8008862:	f000 fab5 	bl	8008dd0 <__hi0bits>
 8008866:	f1c0 0020 	rsb	r0, r0, #32
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	4418      	add	r0, r3
 800886e:	f010 001f 	ands.w	r0, r0, #31
 8008872:	f000 808c 	beq.w	800898e <_dtoa_r+0x81e>
 8008876:	f1c0 0220 	rsb	r2, r0, #32
 800887a:	2a04      	cmp	r2, #4
 800887c:	f340 8085 	ble.w	800898a <_dtoa_r+0x81a>
 8008880:	f1c0 001c 	rsb	r0, r0, #28
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	4403      	add	r3, r0
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	4403      	add	r3, r0
 800888e:	4480      	add	r8, r0
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd05      	ble.n	80088a4 <_dtoa_r+0x734>
 8008898:	4629      	mov	r1, r5
 800889a:	461a      	mov	r2, r3
 800889c:	4630      	mov	r0, r6
 800889e:	f000 fc01 	bl	80090a4 <__lshift>
 80088a2:	4605      	mov	r5, r0
 80088a4:	9b05      	ldr	r3, [sp, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	dd05      	ble.n	80088b6 <_dtoa_r+0x746>
 80088aa:	4621      	mov	r1, r4
 80088ac:	461a      	mov	r2, r3
 80088ae:	4630      	mov	r0, r6
 80088b0:	f000 fbf8 	bl	80090a4 <__lshift>
 80088b4:	4604      	mov	r4, r0
 80088b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d06a      	beq.n	8008992 <_dtoa_r+0x822>
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 fc60 	bl	8009184 <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	da64      	bge.n	8008992 <_dtoa_r+0x822>
 80088c8:	2300      	movs	r3, #0
 80088ca:	4629      	mov	r1, r5
 80088cc:	220a      	movs	r2, #10
 80088ce:	4630      	mov	r0, r6
 80088d0:	f000 fa38 	bl	8008d44 <__multadd>
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088da:	4605      	mov	r5, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8191 	beq.w	8008c04 <_dtoa_r+0xa94>
 80088e2:	4639      	mov	r1, r7
 80088e4:	2300      	movs	r3, #0
 80088e6:	220a      	movs	r2, #10
 80088e8:	4630      	mov	r0, r6
 80088ea:	f000 fa2b 	bl	8008d44 <__multadd>
 80088ee:	f1ba 0f00 	cmp.w	sl, #0
 80088f2:	4607      	mov	r7, r0
 80088f4:	f300 808d 	bgt.w	8008a12 <_dtoa_r+0x8a2>
 80088f8:	9b06      	ldr	r3, [sp, #24]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	dc50      	bgt.n	80089a0 <_dtoa_r+0x830>
 80088fe:	e088      	b.n	8008a12 <_dtoa_r+0x8a2>
 8008900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008902:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008906:	e751      	b.n	80087ac <_dtoa_r+0x63c>
 8008908:	f109 34ff 	add.w	r4, r9, #4294967295
 800890c:	42a3      	cmp	r3, r4
 800890e:	bfbf      	itttt	lt
 8008910:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008912:	1ae3      	sublt	r3, r4, r3
 8008914:	18d2      	addlt	r2, r2, r3
 8008916:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008918:	bfb6      	itet	lt
 800891a:	4623      	movlt	r3, r4
 800891c:	1b1c      	subge	r4, r3, r4
 800891e:	2400      	movlt	r4, #0
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	bfb5      	itete	lt
 8008926:	9a04      	ldrlt	r2, [sp, #16]
 8008928:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800892c:	eba2 0809 	sublt.w	r8, r2, r9
 8008930:	464a      	movge	r2, r9
 8008932:	bfb8      	it	lt
 8008934:	2200      	movlt	r2, #0
 8008936:	e73c      	b.n	80087b2 <_dtoa_r+0x642>
 8008938:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800893c:	9f07      	ldr	r7, [sp, #28]
 800893e:	461c      	mov	r4, r3
 8008940:	e744      	b.n	80087cc <_dtoa_r+0x65c>
 8008942:	461a      	mov	r2, r3
 8008944:	e770      	b.n	8008828 <_dtoa_r+0x6b8>
 8008946:	9b06      	ldr	r3, [sp, #24]
 8008948:	2b01      	cmp	r3, #1
 800894a:	dc18      	bgt.n	800897e <_dtoa_r+0x80e>
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	b9b3      	cbnz	r3, 800897e <_dtoa_r+0x80e>
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008956:	b9a2      	cbnz	r2, 8008982 <_dtoa_r+0x812>
 8008958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800895c:	0d12      	lsrs	r2, r2, #20
 800895e:	0512      	lsls	r2, r2, #20
 8008960:	b18a      	cbz	r2, 8008986 <_dtoa_r+0x816>
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	3301      	adds	r3, #1
 8008966:	9304      	str	r3, [sp, #16]
 8008968:	9b05      	ldr	r3, [sp, #20]
 800896a:	3301      	adds	r3, #1
 800896c:	9305      	str	r3, [sp, #20]
 800896e:	2301      	movs	r3, #1
 8008970:	930a      	str	r3, [sp, #40]	; 0x28
 8008972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008974:	2b00      	cmp	r3, #0
 8008976:	f47f af70 	bne.w	800885a <_dtoa_r+0x6ea>
 800897a:	2001      	movs	r0, #1
 800897c:	e775      	b.n	800886a <_dtoa_r+0x6fa>
 800897e:	2300      	movs	r3, #0
 8008980:	e7f6      	b.n	8008970 <_dtoa_r+0x800>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	e7f4      	b.n	8008970 <_dtoa_r+0x800>
 8008986:	920a      	str	r2, [sp, #40]	; 0x28
 8008988:	e7f3      	b.n	8008972 <_dtoa_r+0x802>
 800898a:	d082      	beq.n	8008892 <_dtoa_r+0x722>
 800898c:	4610      	mov	r0, r2
 800898e:	301c      	adds	r0, #28
 8008990:	e778      	b.n	8008884 <_dtoa_r+0x714>
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	dc37      	bgt.n	8008a08 <_dtoa_r+0x898>
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	2b02      	cmp	r3, #2
 800899c:	dd34      	ble.n	8008a08 <_dtoa_r+0x898>
 800899e:	46ca      	mov	sl, r9
 80089a0:	f1ba 0f00 	cmp.w	sl, #0
 80089a4:	d10d      	bne.n	80089c2 <_dtoa_r+0x852>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4653      	mov	r3, sl
 80089aa:	2205      	movs	r2, #5
 80089ac:	4630      	mov	r0, r6
 80089ae:	f000 f9c9 	bl	8008d44 <__multadd>
 80089b2:	4601      	mov	r1, r0
 80089b4:	4604      	mov	r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fbe4 	bl	8009184 <__mcmp>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f73f adeb 	bgt.w	8008598 <_dtoa_r+0x428>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089c8:	ea6f 0b03 	mvn.w	fp, r3
 80089cc:	f04f 0900 	mov.w	r9, #0
 80089d0:	4621      	mov	r1, r4
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 f994 	bl	8008d00 <_Bfree>
 80089d8:	2f00      	cmp	r7, #0
 80089da:	f43f aea8 	beq.w	800872e <_dtoa_r+0x5be>
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	d005      	beq.n	80089f0 <_dtoa_r+0x880>
 80089e4:	45b9      	cmp	r9, r7
 80089e6:	d003      	beq.n	80089f0 <_dtoa_r+0x880>
 80089e8:	4649      	mov	r1, r9
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 f988 	bl	8008d00 <_Bfree>
 80089f0:	4639      	mov	r1, r7
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f984 	bl	8008d00 <_Bfree>
 80089f8:	e699      	b.n	800872e <_dtoa_r+0x5be>
 80089fa:	2400      	movs	r4, #0
 80089fc:	4627      	mov	r7, r4
 80089fe:	e7e0      	b.n	80089c2 <_dtoa_r+0x852>
 8008a00:	46bb      	mov	fp, r7
 8008a02:	4604      	mov	r4, r0
 8008a04:	4607      	mov	r7, r0
 8008a06:	e5c7      	b.n	8008598 <_dtoa_r+0x428>
 8008a08:	9b07      	ldr	r3, [sp, #28]
 8008a0a:	46ca      	mov	sl, r9
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8100 	beq.w	8008c12 <_dtoa_r+0xaa2>
 8008a12:	f1b8 0f00 	cmp.w	r8, #0
 8008a16:	dd05      	ble.n	8008a24 <_dtoa_r+0x8b4>
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 fb41 	bl	80090a4 <__lshift>
 8008a22:	4607      	mov	r7, r0
 8008a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d05d      	beq.n	8008ae6 <_dtoa_r+0x976>
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f927 	bl	8008c80 <_Balloc>
 8008a32:	4680      	mov	r8, r0
 8008a34:	b928      	cbnz	r0, 8008a42 <_dtoa_r+0x8d2>
 8008a36:	4b82      	ldr	r3, [pc, #520]	; (8008c40 <_dtoa_r+0xad0>)
 8008a38:	4602      	mov	r2, r0
 8008a3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a3e:	f7ff bbaf 	b.w	80081a0 <_dtoa_r+0x30>
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	3202      	adds	r2, #2
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	f107 010c 	add.w	r1, r7, #12
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	f000 f909 	bl	8008c64 <memcpy>
 8008a52:	2201      	movs	r2, #1
 8008a54:	4641      	mov	r1, r8
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 fb24 	bl	80090a4 <__lshift>
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	4453      	add	r3, sl
 8008a66:	9308      	str	r3, [sp, #32]
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	46b9      	mov	r9, r7
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	4607      	mov	r7, r0
 8008a74:	9b04      	ldr	r3, [sp, #16]
 8008a76:	4621      	mov	r1, r4
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	f7ff fae9 	bl	8008054 <quorem>
 8008a82:	4603      	mov	r3, r0
 8008a84:	3330      	adds	r3, #48	; 0x30
 8008a86:	9005      	str	r0, [sp, #20]
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8e:	f000 fb79 	bl	8009184 <__mcmp>
 8008a92:	463a      	mov	r2, r7
 8008a94:	4682      	mov	sl, r0
 8008a96:	4621      	mov	r1, r4
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 fb8f 	bl	80091bc <__mdiff>
 8008a9e:	68c2      	ldr	r2, [r0, #12]
 8008aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	bb0a      	cbnz	r2, 8008aea <_dtoa_r+0x97a>
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 fb6b 	bl	8009184 <__mcmp>
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	4641      	mov	r1, r8
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008aba:	f000 f921 	bl	8008d00 <_Bfree>
 8008abe:	9b06      	ldr	r3, [sp, #24]
 8008ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ac2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ac6:	ea43 0102 	orr.w	r1, r3, r2
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	430b      	orrs	r3, r1
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	d10d      	bne.n	8008aee <_dtoa_r+0x97e>
 8008ad2:	2b39      	cmp	r3, #57	; 0x39
 8008ad4:	d029      	beq.n	8008b2a <_dtoa_r+0x9ba>
 8008ad6:	f1ba 0f00 	cmp.w	sl, #0
 8008ada:	dd01      	ble.n	8008ae0 <_dtoa_r+0x970>
 8008adc:	9b05      	ldr	r3, [sp, #20]
 8008ade:	3331      	adds	r3, #49	; 0x31
 8008ae0:	9a02      	ldr	r2, [sp, #8]
 8008ae2:	7013      	strb	r3, [r2, #0]
 8008ae4:	e774      	b.n	80089d0 <_dtoa_r+0x860>
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	e7b8      	b.n	8008a5c <_dtoa_r+0x8ec>
 8008aea:	2201      	movs	r2, #1
 8008aec:	e7e1      	b.n	8008ab2 <_dtoa_r+0x942>
 8008aee:	f1ba 0f00 	cmp.w	sl, #0
 8008af2:	db06      	blt.n	8008b02 <_dtoa_r+0x992>
 8008af4:	9906      	ldr	r1, [sp, #24]
 8008af6:	ea41 0a0a 	orr.w	sl, r1, sl
 8008afa:	9907      	ldr	r1, [sp, #28]
 8008afc:	ea5a 0101 	orrs.w	r1, sl, r1
 8008b00:	d120      	bne.n	8008b44 <_dtoa_r+0x9d4>
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	ddec      	ble.n	8008ae0 <_dtoa_r+0x970>
 8008b06:	4629      	mov	r1, r5
 8008b08:	2201      	movs	r2, #1
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	f000 fac9 	bl	80090a4 <__lshift>
 8008b12:	4621      	mov	r1, r4
 8008b14:	4605      	mov	r5, r0
 8008b16:	f000 fb35 	bl	8009184 <__mcmp>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	dc02      	bgt.n	8008b26 <_dtoa_r+0x9b6>
 8008b20:	d1de      	bne.n	8008ae0 <_dtoa_r+0x970>
 8008b22:	07da      	lsls	r2, r3, #31
 8008b24:	d5dc      	bpl.n	8008ae0 <_dtoa_r+0x970>
 8008b26:	2b39      	cmp	r3, #57	; 0x39
 8008b28:	d1d8      	bne.n	8008adc <_dtoa_r+0x96c>
 8008b2a:	9a02      	ldr	r2, [sp, #8]
 8008b2c:	2339      	movs	r3, #57	; 0x39
 8008b2e:	7013      	strb	r3, [r2, #0]
 8008b30:	4643      	mov	r3, r8
 8008b32:	4698      	mov	r8, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008b3a:	2a39      	cmp	r2, #57	; 0x39
 8008b3c:	d051      	beq.n	8008be2 <_dtoa_r+0xa72>
 8008b3e:	3201      	adds	r2, #1
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	e745      	b.n	80089d0 <_dtoa_r+0x860>
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	dd03      	ble.n	8008b50 <_dtoa_r+0x9e0>
 8008b48:	2b39      	cmp	r3, #57	; 0x39
 8008b4a:	d0ee      	beq.n	8008b2a <_dtoa_r+0x9ba>
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	e7c7      	b.n	8008ae0 <_dtoa_r+0x970>
 8008b50:	9a04      	ldr	r2, [sp, #16]
 8008b52:	9908      	ldr	r1, [sp, #32]
 8008b54:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	d02b      	beq.n	8008bb4 <_dtoa_r+0xa44>
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	2300      	movs	r3, #0
 8008b60:	220a      	movs	r2, #10
 8008b62:	4630      	mov	r0, r6
 8008b64:	f000 f8ee 	bl	8008d44 <__multadd>
 8008b68:	45b9      	cmp	r9, r7
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	f04f 0300 	mov.w	r3, #0
 8008b70:	f04f 020a 	mov.w	r2, #10
 8008b74:	4649      	mov	r1, r9
 8008b76:	4630      	mov	r0, r6
 8008b78:	d107      	bne.n	8008b8a <_dtoa_r+0xa1a>
 8008b7a:	f000 f8e3 	bl	8008d44 <__multadd>
 8008b7e:	4681      	mov	r9, r0
 8008b80:	4607      	mov	r7, r0
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	3301      	adds	r3, #1
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	e774      	b.n	8008a74 <_dtoa_r+0x904>
 8008b8a:	f000 f8db 	bl	8008d44 <__multadd>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4681      	mov	r9, r0
 8008b92:	2300      	movs	r3, #0
 8008b94:	220a      	movs	r2, #10
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 f8d4 	bl	8008d44 <__multadd>
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	e7f0      	b.n	8008b82 <_dtoa_r+0xa12>
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	9a01      	ldr	r2, [sp, #4]
 8008ba6:	bfcc      	ite	gt
 8008ba8:	46d0      	movgt	r8, sl
 8008baa:	f04f 0801 	movle.w	r8, #1
 8008bae:	4490      	add	r8, r2
 8008bb0:	f04f 0900 	mov.w	r9, #0
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4630      	mov	r0, r6
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	f000 fa72 	bl	80090a4 <__lshift>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	f000 fade 	bl	8009184 <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	dcb1      	bgt.n	8008b30 <_dtoa_r+0x9c0>
 8008bcc:	d102      	bne.n	8008bd4 <_dtoa_r+0xa64>
 8008bce:	9b02      	ldr	r3, [sp, #8]
 8008bd0:	07db      	lsls	r3, r3, #31
 8008bd2:	d4ad      	bmi.n	8008b30 <_dtoa_r+0x9c0>
 8008bd4:	4643      	mov	r3, r8
 8008bd6:	4698      	mov	r8, r3
 8008bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bdc:	2a30      	cmp	r2, #48	; 0x30
 8008bde:	d0fa      	beq.n	8008bd6 <_dtoa_r+0xa66>
 8008be0:	e6f6      	b.n	80089d0 <_dtoa_r+0x860>
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d1a4      	bne.n	8008b32 <_dtoa_r+0x9c2>
 8008be8:	f10b 0b01 	add.w	fp, fp, #1
 8008bec:	2331      	movs	r3, #49	; 0x31
 8008bee:	e778      	b.n	8008ae2 <_dtoa_r+0x972>
 8008bf0:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <_dtoa_r+0xad4>)
 8008bf2:	f7ff bb27 	b.w	8008244 <_dtoa_r+0xd4>
 8008bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f47f ab03 	bne.w	8008204 <_dtoa_r+0x94>
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <_dtoa_r+0xad8>)
 8008c00:	f7ff bb20 	b.w	8008244 <_dtoa_r+0xd4>
 8008c04:	f1ba 0f00 	cmp.w	sl, #0
 8008c08:	dc03      	bgt.n	8008c12 <_dtoa_r+0xaa2>
 8008c0a:	9b06      	ldr	r3, [sp, #24]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	f73f aec7 	bgt.w	80089a0 <_dtoa_r+0x830>
 8008c12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f7ff fa1b 	bl	8008054 <quorem>
 8008c1e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c22:	f808 3b01 	strb.w	r3, [r8], #1
 8008c26:	9a01      	ldr	r2, [sp, #4]
 8008c28:	eba8 0202 	sub.w	r2, r8, r2
 8008c2c:	4592      	cmp	sl, r2
 8008c2e:	ddb7      	ble.n	8008ba0 <_dtoa_r+0xa30>
 8008c30:	4629      	mov	r1, r5
 8008c32:	2300      	movs	r3, #0
 8008c34:	220a      	movs	r2, #10
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 f884 	bl	8008d44 <__multadd>
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	e7ea      	b.n	8008c16 <_dtoa_r+0xaa6>
 8008c40:	0800a6bc 	.word	0x0800a6bc
 8008c44:	0800a518 	.word	0x0800a518
 8008c48:	0800a63d 	.word	0x0800a63d

08008c4c <_localeconv_r>:
 8008c4c:	4800      	ldr	r0, [pc, #0]	; (8008c50 <_localeconv_r+0x4>)
 8008c4e:	4770      	bx	lr
 8008c50:	20000178 	.word	0x20000178

08008c54 <malloc>:
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <malloc+0xc>)
 8008c56:	4601      	mov	r1, r0
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	f000 bc17 	b.w	800948c <_malloc_r>
 8008c5e:	bf00      	nop
 8008c60:	20000024 	.word	0x20000024

08008c64 <memcpy>:
 8008c64:	440a      	add	r2, r1
 8008c66:	4291      	cmp	r1, r2
 8008c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6c:	d100      	bne.n	8008c70 <memcpy+0xc>
 8008c6e:	4770      	bx	lr
 8008c70:	b510      	push	{r4, lr}
 8008c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c7a:	4291      	cmp	r1, r2
 8008c7c:	d1f9      	bne.n	8008c72 <memcpy+0xe>
 8008c7e:	bd10      	pop	{r4, pc}

08008c80 <_Balloc>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c84:	4604      	mov	r4, r0
 8008c86:	460d      	mov	r5, r1
 8008c88:	b976      	cbnz	r6, 8008ca8 <_Balloc+0x28>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	f7ff ffe2 	bl	8008c54 <malloc>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6260      	str	r0, [r4, #36]	; 0x24
 8008c94:	b920      	cbnz	r0, 8008ca0 <_Balloc+0x20>
 8008c96:	4b18      	ldr	r3, [pc, #96]	; (8008cf8 <_Balloc+0x78>)
 8008c98:	4818      	ldr	r0, [pc, #96]	; (8008cfc <_Balloc+0x7c>)
 8008c9a:	2166      	movs	r1, #102	; 0x66
 8008c9c:	f000 fdd6 	bl	800984c <__assert_func>
 8008ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca4:	6006      	str	r6, [r0, #0]
 8008ca6:	60c6      	str	r6, [r0, #12]
 8008ca8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008caa:	68f3      	ldr	r3, [r6, #12]
 8008cac:	b183      	cbz	r3, 8008cd0 <_Balloc+0x50>
 8008cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cb6:	b9b8      	cbnz	r0, 8008ce8 <_Balloc+0x68>
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f605 	lsl.w	r6, r1, r5
 8008cbe:	1d72      	adds	r2, r6, #5
 8008cc0:	0092      	lsls	r2, r2, #2
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fb60 	bl	8009388 <_calloc_r>
 8008cc8:	b160      	cbz	r0, 8008ce4 <_Balloc+0x64>
 8008cca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cce:	e00e      	b.n	8008cee <_Balloc+0x6e>
 8008cd0:	2221      	movs	r2, #33	; 0x21
 8008cd2:	2104      	movs	r1, #4
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fb57 	bl	8009388 <_calloc_r>
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	60f0      	str	r0, [r6, #12]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e4      	bne.n	8008cae <_Balloc+0x2e>
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	6802      	ldr	r2, [r0, #0]
 8008cea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cf4:	e7f7      	b.n	8008ce6 <_Balloc+0x66>
 8008cf6:	bf00      	nop
 8008cf8:	0800a64a 	.word	0x0800a64a
 8008cfc:	0800a6cd 	.word	0x0800a6cd

08008d00 <_Bfree>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d04:	4605      	mov	r5, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	b976      	cbnz	r6, 8008d28 <_Bfree+0x28>
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	f7ff ffa2 	bl	8008c54 <malloc>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6268      	str	r0, [r5, #36]	; 0x24
 8008d14:	b920      	cbnz	r0, 8008d20 <_Bfree+0x20>
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <_Bfree+0x3c>)
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <_Bfree+0x40>)
 8008d1a:	218a      	movs	r1, #138	; 0x8a
 8008d1c:	f000 fd96 	bl	800984c <__assert_func>
 8008d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d24:	6006      	str	r6, [r0, #0]
 8008d26:	60c6      	str	r6, [r0, #12]
 8008d28:	b13c      	cbz	r4, 8008d3a <_Bfree+0x3a>
 8008d2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d2c:	6862      	ldr	r2, [r4, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d34:	6021      	str	r1, [r4, #0]
 8008d36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	0800a64a 	.word	0x0800a64a
 8008d40:	0800a6cd 	.word	0x0800a6cd

08008d44 <__multadd>:
 8008d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	690d      	ldr	r5, [r1, #16]
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	461e      	mov	r6, r3
 8008d50:	f101 0c14 	add.w	ip, r1, #20
 8008d54:	2000      	movs	r0, #0
 8008d56:	f8dc 3000 	ldr.w	r3, [ip]
 8008d5a:	b299      	uxth	r1, r3
 8008d5c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d60:	0c1e      	lsrs	r6, r3, #16
 8008d62:	0c0b      	lsrs	r3, r1, #16
 8008d64:	fb02 3306 	mla	r3, r2, r6, r3
 8008d68:	b289      	uxth	r1, r1
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d70:	4285      	cmp	r5, r0
 8008d72:	f84c 1b04 	str.w	r1, [ip], #4
 8008d76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d7a:	dcec      	bgt.n	8008d56 <__multadd+0x12>
 8008d7c:	b30e      	cbz	r6, 8008dc2 <__multadd+0x7e>
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dc19      	bgt.n	8008db8 <__multadd+0x74>
 8008d84:	6861      	ldr	r1, [r4, #4]
 8008d86:	4638      	mov	r0, r7
 8008d88:	3101      	adds	r1, #1
 8008d8a:	f7ff ff79 	bl	8008c80 <_Balloc>
 8008d8e:	4680      	mov	r8, r0
 8008d90:	b928      	cbnz	r0, 8008d9e <__multadd+0x5a>
 8008d92:	4602      	mov	r2, r0
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <__multadd+0x84>)
 8008d96:	480d      	ldr	r0, [pc, #52]	; (8008dcc <__multadd+0x88>)
 8008d98:	21b5      	movs	r1, #181	; 0xb5
 8008d9a:	f000 fd57 	bl	800984c <__assert_func>
 8008d9e:	6922      	ldr	r2, [r4, #16]
 8008da0:	3202      	adds	r2, #2
 8008da2:	f104 010c 	add.w	r1, r4, #12
 8008da6:	0092      	lsls	r2, r2, #2
 8008da8:	300c      	adds	r0, #12
 8008daa:	f7ff ff5b 	bl	8008c64 <memcpy>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff ffa5 	bl	8008d00 <_Bfree>
 8008db6:	4644      	mov	r4, r8
 8008db8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	615e      	str	r6, [r3, #20]
 8008dc0:	6125      	str	r5, [r4, #16]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc8:	0800a6bc 	.word	0x0800a6bc
 8008dcc:	0800a6cd 	.word	0x0800a6cd

08008dd0 <__hi0bits>:
 8008dd0:	0c03      	lsrs	r3, r0, #16
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	b9d3      	cbnz	r3, 8008e0c <__hi0bits+0x3c>
 8008dd6:	0400      	lsls	r0, r0, #16
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dde:	bf04      	itt	eq
 8008de0:	0200      	lsleq	r0, r0, #8
 8008de2:	3308      	addeq	r3, #8
 8008de4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008de8:	bf04      	itt	eq
 8008dea:	0100      	lsleq	r0, r0, #4
 8008dec:	3304      	addeq	r3, #4
 8008dee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008df2:	bf04      	itt	eq
 8008df4:	0080      	lsleq	r0, r0, #2
 8008df6:	3302      	addeq	r3, #2
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	db05      	blt.n	8008e08 <__hi0bits+0x38>
 8008dfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e00:	f103 0301 	add.w	r3, r3, #1
 8008e04:	bf08      	it	eq
 8008e06:	2320      	moveq	r3, #32
 8008e08:	4618      	mov	r0, r3
 8008e0a:	4770      	bx	lr
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e7e4      	b.n	8008dda <__hi0bits+0xa>

08008e10 <__lo0bits>:
 8008e10:	6803      	ldr	r3, [r0, #0]
 8008e12:	f013 0207 	ands.w	r2, r3, #7
 8008e16:	4601      	mov	r1, r0
 8008e18:	d00b      	beq.n	8008e32 <__lo0bits+0x22>
 8008e1a:	07da      	lsls	r2, r3, #31
 8008e1c:	d423      	bmi.n	8008e66 <__lo0bits+0x56>
 8008e1e:	0798      	lsls	r0, r3, #30
 8008e20:	bf49      	itett	mi
 8008e22:	085b      	lsrmi	r3, r3, #1
 8008e24:	089b      	lsrpl	r3, r3, #2
 8008e26:	2001      	movmi	r0, #1
 8008e28:	600b      	strmi	r3, [r1, #0]
 8008e2a:	bf5c      	itt	pl
 8008e2c:	600b      	strpl	r3, [r1, #0]
 8008e2e:	2002      	movpl	r0, #2
 8008e30:	4770      	bx	lr
 8008e32:	b298      	uxth	r0, r3
 8008e34:	b9a8      	cbnz	r0, 8008e62 <__lo0bits+0x52>
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	2010      	movs	r0, #16
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	b90a      	cbnz	r2, 8008e42 <__lo0bits+0x32>
 8008e3e:	3008      	adds	r0, #8
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	071a      	lsls	r2, r3, #28
 8008e44:	bf04      	itt	eq
 8008e46:	091b      	lsreq	r3, r3, #4
 8008e48:	3004      	addeq	r0, #4
 8008e4a:	079a      	lsls	r2, r3, #30
 8008e4c:	bf04      	itt	eq
 8008e4e:	089b      	lsreq	r3, r3, #2
 8008e50:	3002      	addeq	r0, #2
 8008e52:	07da      	lsls	r2, r3, #31
 8008e54:	d403      	bmi.n	8008e5e <__lo0bits+0x4e>
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	f100 0001 	add.w	r0, r0, #1
 8008e5c:	d005      	beq.n	8008e6a <__lo0bits+0x5a>
 8008e5e:	600b      	str	r3, [r1, #0]
 8008e60:	4770      	bx	lr
 8008e62:	4610      	mov	r0, r2
 8008e64:	e7e9      	b.n	8008e3a <__lo0bits+0x2a>
 8008e66:	2000      	movs	r0, #0
 8008e68:	4770      	bx	lr
 8008e6a:	2020      	movs	r0, #32
 8008e6c:	4770      	bx	lr
	...

08008e70 <__i2b>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	460c      	mov	r4, r1
 8008e74:	2101      	movs	r1, #1
 8008e76:	f7ff ff03 	bl	8008c80 <_Balloc>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	b928      	cbnz	r0, 8008e8a <__i2b+0x1a>
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <__i2b+0x24>)
 8008e80:	4805      	ldr	r0, [pc, #20]	; (8008e98 <__i2b+0x28>)
 8008e82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e86:	f000 fce1 	bl	800984c <__assert_func>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	6144      	str	r4, [r0, #20]
 8008e8e:	6103      	str	r3, [r0, #16]
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	bf00      	nop
 8008e94:	0800a6bc 	.word	0x0800a6bc
 8008e98:	0800a6cd 	.word	0x0800a6cd

08008e9c <__multiply>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	4691      	mov	r9, r2
 8008ea2:	690a      	ldr	r2, [r1, #16]
 8008ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	bfb8      	it	lt
 8008eac:	460b      	movlt	r3, r1
 8008eae:	460c      	mov	r4, r1
 8008eb0:	bfbc      	itt	lt
 8008eb2:	464c      	movlt	r4, r9
 8008eb4:	4699      	movlt	r9, r3
 8008eb6:	6927      	ldr	r7, [r4, #16]
 8008eb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ebc:	68a3      	ldr	r3, [r4, #8]
 8008ebe:	6861      	ldr	r1, [r4, #4]
 8008ec0:	eb07 060a 	add.w	r6, r7, sl
 8008ec4:	42b3      	cmp	r3, r6
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	bfb8      	it	lt
 8008eca:	3101      	addlt	r1, #1
 8008ecc:	f7ff fed8 	bl	8008c80 <_Balloc>
 8008ed0:	b930      	cbnz	r0, 8008ee0 <__multiply+0x44>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	4b44      	ldr	r3, [pc, #272]	; (8008fe8 <__multiply+0x14c>)
 8008ed6:	4845      	ldr	r0, [pc, #276]	; (8008fec <__multiply+0x150>)
 8008ed8:	f240 115d 	movw	r1, #349	; 0x15d
 8008edc:	f000 fcb6 	bl	800984c <__assert_func>
 8008ee0:	f100 0514 	add.w	r5, r0, #20
 8008ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ee8:	462b      	mov	r3, r5
 8008eea:	2200      	movs	r2, #0
 8008eec:	4543      	cmp	r3, r8
 8008eee:	d321      	bcc.n	8008f34 <__multiply+0x98>
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ef8:	f109 0314 	add.w	r3, r9, #20
 8008efc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f00:	9202      	str	r2, [sp, #8]
 8008f02:	1b3a      	subs	r2, r7, r4
 8008f04:	3a15      	subs	r2, #21
 8008f06:	f022 0203 	bic.w	r2, r2, #3
 8008f0a:	3204      	adds	r2, #4
 8008f0c:	f104 0115 	add.w	r1, r4, #21
 8008f10:	428f      	cmp	r7, r1
 8008f12:	bf38      	it	cc
 8008f14:	2204      	movcc	r2, #4
 8008f16:	9201      	str	r2, [sp, #4]
 8008f18:	9a02      	ldr	r2, [sp, #8]
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d80c      	bhi.n	8008f3a <__multiply+0x9e>
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	dd03      	ble.n	8008f2c <__multiply+0x90>
 8008f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d05a      	beq.n	8008fe2 <__multiply+0x146>
 8008f2c:	6106      	str	r6, [r0, #16]
 8008f2e:	b005      	add	sp, #20
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	f843 2b04 	str.w	r2, [r3], #4
 8008f38:	e7d8      	b.n	8008eec <__multiply+0x50>
 8008f3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f3e:	f1ba 0f00 	cmp.w	sl, #0
 8008f42:	d024      	beq.n	8008f8e <__multiply+0xf2>
 8008f44:	f104 0e14 	add.w	lr, r4, #20
 8008f48:	46a9      	mov	r9, r5
 8008f4a:	f04f 0c00 	mov.w	ip, #0
 8008f4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f52:	f8d9 1000 	ldr.w	r1, [r9]
 8008f56:	fa1f fb82 	uxth.w	fp, r2
 8008f5a:	b289      	uxth	r1, r1
 8008f5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f64:	f8d9 2000 	ldr.w	r2, [r9]
 8008f68:	4461      	add	r1, ip
 8008f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f76:	b289      	uxth	r1, r1
 8008f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f7c:	4577      	cmp	r7, lr
 8008f7e:	f849 1b04 	str.w	r1, [r9], #4
 8008f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f86:	d8e2      	bhi.n	8008f4e <__multiply+0xb2>
 8008f88:	9a01      	ldr	r2, [sp, #4]
 8008f8a:	f845 c002 	str.w	ip, [r5, r2]
 8008f8e:	9a03      	ldr	r2, [sp, #12]
 8008f90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f94:	3304      	adds	r3, #4
 8008f96:	f1b9 0f00 	cmp.w	r9, #0
 8008f9a:	d020      	beq.n	8008fde <__multiply+0x142>
 8008f9c:	6829      	ldr	r1, [r5, #0]
 8008f9e:	f104 0c14 	add.w	ip, r4, #20
 8008fa2:	46ae      	mov	lr, r5
 8008fa4:	f04f 0a00 	mov.w	sl, #0
 8008fa8:	f8bc b000 	ldrh.w	fp, [ip]
 8008fac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fb0:	fb09 220b 	mla	r2, r9, fp, r2
 8008fb4:	4492      	add	sl, r2
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fbc:	f84e 1b04 	str.w	r1, [lr], #4
 8008fc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fc4:	f8be 1000 	ldrh.w	r1, [lr]
 8008fc8:	0c12      	lsrs	r2, r2, #16
 8008fca:	fb09 1102 	mla	r1, r9, r2, r1
 8008fce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fd2:	4567      	cmp	r7, ip
 8008fd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fd8:	d8e6      	bhi.n	8008fa8 <__multiply+0x10c>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	50a9      	str	r1, [r5, r2]
 8008fde:	3504      	adds	r5, #4
 8008fe0:	e79a      	b.n	8008f18 <__multiply+0x7c>
 8008fe2:	3e01      	subs	r6, #1
 8008fe4:	e79c      	b.n	8008f20 <__multiply+0x84>
 8008fe6:	bf00      	nop
 8008fe8:	0800a6bc 	.word	0x0800a6bc
 8008fec:	0800a6cd 	.word	0x0800a6cd

08008ff0 <__pow5mult>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	f012 0203 	ands.w	r2, r2, #3
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	d007      	beq.n	8009010 <__pow5mult+0x20>
 8009000:	4c25      	ldr	r4, [pc, #148]	; (8009098 <__pow5mult+0xa8>)
 8009002:	3a01      	subs	r2, #1
 8009004:	2300      	movs	r3, #0
 8009006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800900a:	f7ff fe9b 	bl	8008d44 <__multadd>
 800900e:	4607      	mov	r7, r0
 8009010:	10ad      	asrs	r5, r5, #2
 8009012:	d03d      	beq.n	8009090 <__pow5mult+0xa0>
 8009014:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009016:	b97c      	cbnz	r4, 8009038 <__pow5mult+0x48>
 8009018:	2010      	movs	r0, #16
 800901a:	f7ff fe1b 	bl	8008c54 <malloc>
 800901e:	4602      	mov	r2, r0
 8009020:	6270      	str	r0, [r6, #36]	; 0x24
 8009022:	b928      	cbnz	r0, 8009030 <__pow5mult+0x40>
 8009024:	4b1d      	ldr	r3, [pc, #116]	; (800909c <__pow5mult+0xac>)
 8009026:	481e      	ldr	r0, [pc, #120]	; (80090a0 <__pow5mult+0xb0>)
 8009028:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800902c:	f000 fc0e 	bl	800984c <__assert_func>
 8009030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009034:	6004      	str	r4, [r0, #0]
 8009036:	60c4      	str	r4, [r0, #12]
 8009038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800903c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009040:	b94c      	cbnz	r4, 8009056 <__pow5mult+0x66>
 8009042:	f240 2171 	movw	r1, #625	; 0x271
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff ff12 	bl	8008e70 <__i2b>
 800904c:	2300      	movs	r3, #0
 800904e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009052:	4604      	mov	r4, r0
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	07eb      	lsls	r3, r5, #31
 800905c:	d50a      	bpl.n	8009074 <__pow5mult+0x84>
 800905e:	4639      	mov	r1, r7
 8009060:	4622      	mov	r2, r4
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff1a 	bl	8008e9c <__multiply>
 8009068:	4639      	mov	r1, r7
 800906a:	4680      	mov	r8, r0
 800906c:	4630      	mov	r0, r6
 800906e:	f7ff fe47 	bl	8008d00 <_Bfree>
 8009072:	4647      	mov	r7, r8
 8009074:	106d      	asrs	r5, r5, #1
 8009076:	d00b      	beq.n	8009090 <__pow5mult+0xa0>
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	b938      	cbnz	r0, 800908c <__pow5mult+0x9c>
 800907c:	4622      	mov	r2, r4
 800907e:	4621      	mov	r1, r4
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff ff0b 	bl	8008e9c <__multiply>
 8009086:	6020      	str	r0, [r4, #0]
 8009088:	f8c0 9000 	str.w	r9, [r0]
 800908c:	4604      	mov	r4, r0
 800908e:	e7e4      	b.n	800905a <__pow5mult+0x6a>
 8009090:	4638      	mov	r0, r7
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009096:	bf00      	nop
 8009098:	0800a820 	.word	0x0800a820
 800909c:	0800a64a 	.word	0x0800a64a
 80090a0:	0800a6cd 	.word	0x0800a6cd

080090a4 <__lshift>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	6849      	ldr	r1, [r1, #4]
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	4607      	mov	r7, r0
 80090b6:	4691      	mov	r9, r2
 80090b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090bc:	f108 0601 	add.w	r6, r8, #1
 80090c0:	42b3      	cmp	r3, r6
 80090c2:	db0b      	blt.n	80090dc <__lshift+0x38>
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff fddb 	bl	8008c80 <_Balloc>
 80090ca:	4605      	mov	r5, r0
 80090cc:	b948      	cbnz	r0, 80090e2 <__lshift+0x3e>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b2a      	ldr	r3, [pc, #168]	; (800917c <__lshift+0xd8>)
 80090d2:	482b      	ldr	r0, [pc, #172]	; (8009180 <__lshift+0xdc>)
 80090d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090d8:	f000 fbb8 	bl	800984c <__assert_func>
 80090dc:	3101      	adds	r1, #1
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	e7ee      	b.n	80090c0 <__lshift+0x1c>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f100 0114 	add.w	r1, r0, #20
 80090e8:	f100 0210 	add.w	r2, r0, #16
 80090ec:	4618      	mov	r0, r3
 80090ee:	4553      	cmp	r3, sl
 80090f0:	db37      	blt.n	8009162 <__lshift+0xbe>
 80090f2:	6920      	ldr	r0, [r4, #16]
 80090f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090f8:	f104 0314 	add.w	r3, r4, #20
 80090fc:	f019 091f 	ands.w	r9, r9, #31
 8009100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009108:	d02f      	beq.n	800916a <__lshift+0xc6>
 800910a:	f1c9 0e20 	rsb	lr, r9, #32
 800910e:	468a      	mov	sl, r1
 8009110:	f04f 0c00 	mov.w	ip, #0
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	fa02 f209 	lsl.w	r2, r2, r9
 800911a:	ea42 020c 	orr.w	r2, r2, ip
 800911e:	f84a 2b04 	str.w	r2, [sl], #4
 8009122:	f853 2b04 	ldr.w	r2, [r3], #4
 8009126:	4298      	cmp	r0, r3
 8009128:	fa22 fc0e 	lsr.w	ip, r2, lr
 800912c:	d8f2      	bhi.n	8009114 <__lshift+0x70>
 800912e:	1b03      	subs	r3, r0, r4
 8009130:	3b15      	subs	r3, #21
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	3304      	adds	r3, #4
 8009138:	f104 0215 	add.w	r2, r4, #21
 800913c:	4290      	cmp	r0, r2
 800913e:	bf38      	it	cc
 8009140:	2304      	movcc	r3, #4
 8009142:	f841 c003 	str.w	ip, [r1, r3]
 8009146:	f1bc 0f00 	cmp.w	ip, #0
 800914a:	d001      	beq.n	8009150 <__lshift+0xac>
 800914c:	f108 0602 	add.w	r6, r8, #2
 8009150:	3e01      	subs	r6, #1
 8009152:	4638      	mov	r0, r7
 8009154:	612e      	str	r6, [r5, #16]
 8009156:	4621      	mov	r1, r4
 8009158:	f7ff fdd2 	bl	8008d00 <_Bfree>
 800915c:	4628      	mov	r0, r5
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	f842 0f04 	str.w	r0, [r2, #4]!
 8009166:	3301      	adds	r3, #1
 8009168:	e7c1      	b.n	80090ee <__lshift+0x4a>
 800916a:	3904      	subs	r1, #4
 800916c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009170:	f841 2f04 	str.w	r2, [r1, #4]!
 8009174:	4298      	cmp	r0, r3
 8009176:	d8f9      	bhi.n	800916c <__lshift+0xc8>
 8009178:	e7ea      	b.n	8009150 <__lshift+0xac>
 800917a:	bf00      	nop
 800917c:	0800a6bc 	.word	0x0800a6bc
 8009180:	0800a6cd 	.word	0x0800a6cd

08009184 <__mcmp>:
 8009184:	b530      	push	{r4, r5, lr}
 8009186:	6902      	ldr	r2, [r0, #16]
 8009188:	690c      	ldr	r4, [r1, #16]
 800918a:	1b12      	subs	r2, r2, r4
 800918c:	d10e      	bne.n	80091ac <__mcmp+0x28>
 800918e:	f100 0314 	add.w	r3, r0, #20
 8009192:	3114      	adds	r1, #20
 8009194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800919c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091a4:	42a5      	cmp	r5, r4
 80091a6:	d003      	beq.n	80091b0 <__mcmp+0x2c>
 80091a8:	d305      	bcc.n	80091b6 <__mcmp+0x32>
 80091aa:	2201      	movs	r2, #1
 80091ac:	4610      	mov	r0, r2
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	4283      	cmp	r3, r0
 80091b2:	d3f3      	bcc.n	800919c <__mcmp+0x18>
 80091b4:	e7fa      	b.n	80091ac <__mcmp+0x28>
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	e7f7      	b.n	80091ac <__mcmp+0x28>

080091bc <__mdiff>:
 80091bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	4606      	mov	r6, r0
 80091c4:	4611      	mov	r1, r2
 80091c6:	4620      	mov	r0, r4
 80091c8:	4690      	mov	r8, r2
 80091ca:	f7ff ffdb 	bl	8009184 <__mcmp>
 80091ce:	1e05      	subs	r5, r0, #0
 80091d0:	d110      	bne.n	80091f4 <__mdiff+0x38>
 80091d2:	4629      	mov	r1, r5
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff fd53 	bl	8008c80 <_Balloc>
 80091da:	b930      	cbnz	r0, 80091ea <__mdiff+0x2e>
 80091dc:	4b3a      	ldr	r3, [pc, #232]	; (80092c8 <__mdiff+0x10c>)
 80091de:	4602      	mov	r2, r0
 80091e0:	f240 2132 	movw	r1, #562	; 0x232
 80091e4:	4839      	ldr	r0, [pc, #228]	; (80092cc <__mdiff+0x110>)
 80091e6:	f000 fb31 	bl	800984c <__assert_func>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	bfa4      	itt	ge
 80091f6:	4643      	movge	r3, r8
 80091f8:	46a0      	movge	r8, r4
 80091fa:	4630      	mov	r0, r6
 80091fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009200:	bfa6      	itte	ge
 8009202:	461c      	movge	r4, r3
 8009204:	2500      	movge	r5, #0
 8009206:	2501      	movlt	r5, #1
 8009208:	f7ff fd3a 	bl	8008c80 <_Balloc>
 800920c:	b920      	cbnz	r0, 8009218 <__mdiff+0x5c>
 800920e:	4b2e      	ldr	r3, [pc, #184]	; (80092c8 <__mdiff+0x10c>)
 8009210:	4602      	mov	r2, r0
 8009212:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009216:	e7e5      	b.n	80091e4 <__mdiff+0x28>
 8009218:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800921c:	6926      	ldr	r6, [r4, #16]
 800921e:	60c5      	str	r5, [r0, #12]
 8009220:	f104 0914 	add.w	r9, r4, #20
 8009224:	f108 0514 	add.w	r5, r8, #20
 8009228:	f100 0e14 	add.w	lr, r0, #20
 800922c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009234:	f108 0210 	add.w	r2, r8, #16
 8009238:	46f2      	mov	sl, lr
 800923a:	2100      	movs	r1, #0
 800923c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009240:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009244:	fa1f f883 	uxth.w	r8, r3
 8009248:	fa11 f18b 	uxtah	r1, r1, fp
 800924c:	0c1b      	lsrs	r3, r3, #16
 800924e:	eba1 0808 	sub.w	r8, r1, r8
 8009252:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009256:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800925a:	fa1f f888 	uxth.w	r8, r8
 800925e:	1419      	asrs	r1, r3, #16
 8009260:	454e      	cmp	r6, r9
 8009262:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009266:	f84a 3b04 	str.w	r3, [sl], #4
 800926a:	d8e7      	bhi.n	800923c <__mdiff+0x80>
 800926c:	1b33      	subs	r3, r6, r4
 800926e:	3b15      	subs	r3, #21
 8009270:	f023 0303 	bic.w	r3, r3, #3
 8009274:	3304      	adds	r3, #4
 8009276:	3415      	adds	r4, #21
 8009278:	42a6      	cmp	r6, r4
 800927a:	bf38      	it	cc
 800927c:	2304      	movcc	r3, #4
 800927e:	441d      	add	r5, r3
 8009280:	4473      	add	r3, lr
 8009282:	469e      	mov	lr, r3
 8009284:	462e      	mov	r6, r5
 8009286:	4566      	cmp	r6, ip
 8009288:	d30e      	bcc.n	80092a8 <__mdiff+0xec>
 800928a:	f10c 0203 	add.w	r2, ip, #3
 800928e:	1b52      	subs	r2, r2, r5
 8009290:	f022 0203 	bic.w	r2, r2, #3
 8009294:	3d03      	subs	r5, #3
 8009296:	45ac      	cmp	ip, r5
 8009298:	bf38      	it	cc
 800929a:	2200      	movcc	r2, #0
 800929c:	441a      	add	r2, r3
 800929e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092a2:	b17b      	cbz	r3, 80092c4 <__mdiff+0x108>
 80092a4:	6107      	str	r7, [r0, #16]
 80092a6:	e7a3      	b.n	80091f0 <__mdiff+0x34>
 80092a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80092ac:	fa11 f288 	uxtah	r2, r1, r8
 80092b0:	1414      	asrs	r4, r2, #16
 80092b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092b6:	b292      	uxth	r2, r2
 80092b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092bc:	f84e 2b04 	str.w	r2, [lr], #4
 80092c0:	1421      	asrs	r1, r4, #16
 80092c2:	e7e0      	b.n	8009286 <__mdiff+0xca>
 80092c4:	3f01      	subs	r7, #1
 80092c6:	e7ea      	b.n	800929e <__mdiff+0xe2>
 80092c8:	0800a6bc 	.word	0x0800a6bc
 80092cc:	0800a6cd 	.word	0x0800a6cd

080092d0 <__d2b>:
 80092d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	4689      	mov	r9, r1
 80092d6:	2101      	movs	r1, #1
 80092d8:	ec57 6b10 	vmov	r6, r7, d0
 80092dc:	4690      	mov	r8, r2
 80092de:	f7ff fccf 	bl	8008c80 <_Balloc>
 80092e2:	4604      	mov	r4, r0
 80092e4:	b930      	cbnz	r0, 80092f4 <__d2b+0x24>
 80092e6:	4602      	mov	r2, r0
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <__d2b+0xb0>)
 80092ea:	4826      	ldr	r0, [pc, #152]	; (8009384 <__d2b+0xb4>)
 80092ec:	f240 310a 	movw	r1, #778	; 0x30a
 80092f0:	f000 faac 	bl	800984c <__assert_func>
 80092f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092fc:	bb35      	cbnz	r5, 800934c <__d2b+0x7c>
 80092fe:	2e00      	cmp	r6, #0
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	d028      	beq.n	8009356 <__d2b+0x86>
 8009304:	4668      	mov	r0, sp
 8009306:	9600      	str	r6, [sp, #0]
 8009308:	f7ff fd82 	bl	8008e10 <__lo0bits>
 800930c:	9900      	ldr	r1, [sp, #0]
 800930e:	b300      	cbz	r0, 8009352 <__d2b+0x82>
 8009310:	9a01      	ldr	r2, [sp, #4]
 8009312:	f1c0 0320 	rsb	r3, r0, #32
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	430b      	orrs	r3, r1
 800931c:	40c2      	lsrs	r2, r0
 800931e:	6163      	str	r3, [r4, #20]
 8009320:	9201      	str	r2, [sp, #4]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	61a3      	str	r3, [r4, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	bf14      	ite	ne
 800932a:	2202      	movne	r2, #2
 800932c:	2201      	moveq	r2, #1
 800932e:	6122      	str	r2, [r4, #16]
 8009330:	b1d5      	cbz	r5, 8009368 <__d2b+0x98>
 8009332:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009336:	4405      	add	r5, r0
 8009338:	f8c9 5000 	str.w	r5, [r9]
 800933c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009340:	f8c8 0000 	str.w	r0, [r8]
 8009344:	4620      	mov	r0, r4
 8009346:	b003      	add	sp, #12
 8009348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800934c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009350:	e7d5      	b.n	80092fe <__d2b+0x2e>
 8009352:	6161      	str	r1, [r4, #20]
 8009354:	e7e5      	b.n	8009322 <__d2b+0x52>
 8009356:	a801      	add	r0, sp, #4
 8009358:	f7ff fd5a 	bl	8008e10 <__lo0bits>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	6163      	str	r3, [r4, #20]
 8009360:	2201      	movs	r2, #1
 8009362:	6122      	str	r2, [r4, #16]
 8009364:	3020      	adds	r0, #32
 8009366:	e7e3      	b.n	8009330 <__d2b+0x60>
 8009368:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800936c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009370:	f8c9 0000 	str.w	r0, [r9]
 8009374:	6918      	ldr	r0, [r3, #16]
 8009376:	f7ff fd2b 	bl	8008dd0 <__hi0bits>
 800937a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800937e:	e7df      	b.n	8009340 <__d2b+0x70>
 8009380:	0800a6bc 	.word	0x0800a6bc
 8009384:	0800a6cd 	.word	0x0800a6cd

08009388 <_calloc_r>:
 8009388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800938a:	fba1 2402 	umull	r2, r4, r1, r2
 800938e:	b94c      	cbnz	r4, 80093a4 <_calloc_r+0x1c>
 8009390:	4611      	mov	r1, r2
 8009392:	9201      	str	r2, [sp, #4]
 8009394:	f000 f87a 	bl	800948c <_malloc_r>
 8009398:	9a01      	ldr	r2, [sp, #4]
 800939a:	4605      	mov	r5, r0
 800939c:	b930      	cbnz	r0, 80093ac <_calloc_r+0x24>
 800939e:	4628      	mov	r0, r5
 80093a0:	b003      	add	sp, #12
 80093a2:	bd30      	pop	{r4, r5, pc}
 80093a4:	220c      	movs	r2, #12
 80093a6:	6002      	str	r2, [r0, #0]
 80093a8:	2500      	movs	r5, #0
 80093aa:	e7f8      	b.n	800939e <_calloc_r+0x16>
 80093ac:	4621      	mov	r1, r4
 80093ae:	f7fe f945 	bl	800763c <memset>
 80093b2:	e7f4      	b.n	800939e <_calloc_r+0x16>

080093b4 <_free_r>:
 80093b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d044      	beq.n	8009444 <_free_r+0x90>
 80093ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093be:	9001      	str	r0, [sp, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f1a1 0404 	sub.w	r4, r1, #4
 80093c6:	bfb8      	it	lt
 80093c8:	18e4      	addlt	r4, r4, r3
 80093ca:	f000 fa9b 	bl	8009904 <__malloc_lock>
 80093ce:	4a1e      	ldr	r2, [pc, #120]	; (8009448 <_free_r+0x94>)
 80093d0:	9801      	ldr	r0, [sp, #4]
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	b933      	cbnz	r3, 80093e4 <_free_r+0x30>
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6014      	str	r4, [r2, #0]
 80093da:	b003      	add	sp, #12
 80093dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093e0:	f000 ba96 	b.w	8009910 <__malloc_unlock>
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d908      	bls.n	80093fa <_free_r+0x46>
 80093e8:	6825      	ldr	r5, [r4, #0]
 80093ea:	1961      	adds	r1, r4, r5
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1949      	addeq	r1, r1, r5
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	e7ed      	b.n	80093d6 <_free_r+0x22>
 80093fa:	461a      	mov	r2, r3
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b10b      	cbz	r3, 8009404 <_free_r+0x50>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d9fa      	bls.n	80093fa <_free_r+0x46>
 8009404:	6811      	ldr	r1, [r2, #0]
 8009406:	1855      	adds	r5, r2, r1
 8009408:	42a5      	cmp	r5, r4
 800940a:	d10b      	bne.n	8009424 <_free_r+0x70>
 800940c:	6824      	ldr	r4, [r4, #0]
 800940e:	4421      	add	r1, r4
 8009410:	1854      	adds	r4, r2, r1
 8009412:	42a3      	cmp	r3, r4
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	d1e0      	bne.n	80093da <_free_r+0x26>
 8009418:	681c      	ldr	r4, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	6053      	str	r3, [r2, #4]
 800941e:	4421      	add	r1, r4
 8009420:	6011      	str	r1, [r2, #0]
 8009422:	e7da      	b.n	80093da <_free_r+0x26>
 8009424:	d902      	bls.n	800942c <_free_r+0x78>
 8009426:	230c      	movs	r3, #12
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	e7d6      	b.n	80093da <_free_r+0x26>
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	1961      	adds	r1, r4, r5
 8009430:	428b      	cmp	r3, r1
 8009432:	bf04      	itt	eq
 8009434:	6819      	ldreq	r1, [r3, #0]
 8009436:	685b      	ldreq	r3, [r3, #4]
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	bf04      	itt	eq
 800943c:	1949      	addeq	r1, r1, r5
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	6054      	str	r4, [r2, #4]
 8009442:	e7ca      	b.n	80093da <_free_r+0x26>
 8009444:	b003      	add	sp, #12
 8009446:	bd30      	pop	{r4, r5, pc}
 8009448:	200008dc 	.word	0x200008dc

0800944c <sbrk_aligned>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	4e0e      	ldr	r6, [pc, #56]	; (8009488 <sbrk_aligned+0x3c>)
 8009450:	460c      	mov	r4, r1
 8009452:	6831      	ldr	r1, [r6, #0]
 8009454:	4605      	mov	r5, r0
 8009456:	b911      	cbnz	r1, 800945e <sbrk_aligned+0x12>
 8009458:	f000 f9e8 	bl	800982c <_sbrk_r>
 800945c:	6030      	str	r0, [r6, #0]
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f9e3 	bl	800982c <_sbrk_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d00a      	beq.n	8009480 <sbrk_aligned+0x34>
 800946a:	1cc4      	adds	r4, r0, #3
 800946c:	f024 0403 	bic.w	r4, r4, #3
 8009470:	42a0      	cmp	r0, r4
 8009472:	d007      	beq.n	8009484 <sbrk_aligned+0x38>
 8009474:	1a21      	subs	r1, r4, r0
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f9d8 	bl	800982c <_sbrk_r>
 800947c:	3001      	adds	r0, #1
 800947e:	d101      	bne.n	8009484 <sbrk_aligned+0x38>
 8009480:	f04f 34ff 	mov.w	r4, #4294967295
 8009484:	4620      	mov	r0, r4
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	200008e0 	.word	0x200008e0

0800948c <_malloc_r>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	1ccd      	adds	r5, r1, #3
 8009492:	f025 0503 	bic.w	r5, r5, #3
 8009496:	3508      	adds	r5, #8
 8009498:	2d0c      	cmp	r5, #12
 800949a:	bf38      	it	cc
 800949c:	250c      	movcc	r5, #12
 800949e:	2d00      	cmp	r5, #0
 80094a0:	4607      	mov	r7, r0
 80094a2:	db01      	blt.n	80094a8 <_malloc_r+0x1c>
 80094a4:	42a9      	cmp	r1, r5
 80094a6:	d905      	bls.n	80094b4 <_malloc_r+0x28>
 80094a8:	230c      	movs	r3, #12
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	2600      	movs	r6, #0
 80094ae:	4630      	mov	r0, r6
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	4e2e      	ldr	r6, [pc, #184]	; (8009570 <_malloc_r+0xe4>)
 80094b6:	f000 fa25 	bl	8009904 <__malloc_lock>
 80094ba:	6833      	ldr	r3, [r6, #0]
 80094bc:	461c      	mov	r4, r3
 80094be:	bb34      	cbnz	r4, 800950e <_malloc_r+0x82>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4638      	mov	r0, r7
 80094c4:	f7ff ffc2 	bl	800944c <sbrk_aligned>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	4604      	mov	r4, r0
 80094cc:	d14d      	bne.n	800956a <_malloc_r+0xde>
 80094ce:	6834      	ldr	r4, [r6, #0]
 80094d0:	4626      	mov	r6, r4
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d140      	bne.n	8009558 <_malloc_r+0xcc>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	4631      	mov	r1, r6
 80094da:	4638      	mov	r0, r7
 80094dc:	eb04 0803 	add.w	r8, r4, r3
 80094e0:	f000 f9a4 	bl	800982c <_sbrk_r>
 80094e4:	4580      	cmp	r8, r0
 80094e6:	d13a      	bne.n	800955e <_malloc_r+0xd2>
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	3503      	adds	r5, #3
 80094ec:	1a6d      	subs	r5, r5, r1
 80094ee:	f025 0503 	bic.w	r5, r5, #3
 80094f2:	3508      	adds	r5, #8
 80094f4:	2d0c      	cmp	r5, #12
 80094f6:	bf38      	it	cc
 80094f8:	250c      	movcc	r5, #12
 80094fa:	4629      	mov	r1, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff ffa5 	bl	800944c <sbrk_aligned>
 8009502:	3001      	adds	r0, #1
 8009504:	d02b      	beq.n	800955e <_malloc_r+0xd2>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	442b      	add	r3, r5
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	e00e      	b.n	800952c <_malloc_r+0xa0>
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	1b52      	subs	r2, r2, r5
 8009512:	d41e      	bmi.n	8009552 <_malloc_r+0xc6>
 8009514:	2a0b      	cmp	r2, #11
 8009516:	d916      	bls.n	8009546 <_malloc_r+0xba>
 8009518:	1961      	adds	r1, r4, r5
 800951a:	42a3      	cmp	r3, r4
 800951c:	6025      	str	r5, [r4, #0]
 800951e:	bf18      	it	ne
 8009520:	6059      	strne	r1, [r3, #4]
 8009522:	6863      	ldr	r3, [r4, #4]
 8009524:	bf08      	it	eq
 8009526:	6031      	streq	r1, [r6, #0]
 8009528:	5162      	str	r2, [r4, r5]
 800952a:	604b      	str	r3, [r1, #4]
 800952c:	4638      	mov	r0, r7
 800952e:	f104 060b 	add.w	r6, r4, #11
 8009532:	f000 f9ed 	bl	8009910 <__malloc_unlock>
 8009536:	f026 0607 	bic.w	r6, r6, #7
 800953a:	1d23      	adds	r3, r4, #4
 800953c:	1af2      	subs	r2, r6, r3
 800953e:	d0b6      	beq.n	80094ae <_malloc_r+0x22>
 8009540:	1b9b      	subs	r3, r3, r6
 8009542:	50a3      	str	r3, [r4, r2]
 8009544:	e7b3      	b.n	80094ae <_malloc_r+0x22>
 8009546:	6862      	ldr	r2, [r4, #4]
 8009548:	42a3      	cmp	r3, r4
 800954a:	bf0c      	ite	eq
 800954c:	6032      	streq	r2, [r6, #0]
 800954e:	605a      	strne	r2, [r3, #4]
 8009550:	e7ec      	b.n	800952c <_malloc_r+0xa0>
 8009552:	4623      	mov	r3, r4
 8009554:	6864      	ldr	r4, [r4, #4]
 8009556:	e7b2      	b.n	80094be <_malloc_r+0x32>
 8009558:	4634      	mov	r4, r6
 800955a:	6876      	ldr	r6, [r6, #4]
 800955c:	e7b9      	b.n	80094d2 <_malloc_r+0x46>
 800955e:	230c      	movs	r3, #12
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	4638      	mov	r0, r7
 8009564:	f000 f9d4 	bl	8009910 <__malloc_unlock>
 8009568:	e7a1      	b.n	80094ae <_malloc_r+0x22>
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	e7de      	b.n	800952c <_malloc_r+0xa0>
 800956e:	bf00      	nop
 8009570:	200008dc 	.word	0x200008dc

08009574 <__ssputs_r>:
 8009574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009578:	688e      	ldr	r6, [r1, #8]
 800957a:	429e      	cmp	r6, r3
 800957c:	4682      	mov	sl, r0
 800957e:	460c      	mov	r4, r1
 8009580:	4690      	mov	r8, r2
 8009582:	461f      	mov	r7, r3
 8009584:	d838      	bhi.n	80095f8 <__ssputs_r+0x84>
 8009586:	898a      	ldrh	r2, [r1, #12]
 8009588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800958c:	d032      	beq.n	80095f4 <__ssputs_r+0x80>
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	6909      	ldr	r1, [r1, #16]
 8009592:	eba5 0901 	sub.w	r9, r5, r1
 8009596:	6965      	ldr	r5, [r4, #20]
 8009598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800959c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a0:	3301      	adds	r3, #1
 80095a2:	444b      	add	r3, r9
 80095a4:	106d      	asrs	r5, r5, #1
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf38      	it	cc
 80095aa:	461d      	movcc	r5, r3
 80095ac:	0553      	lsls	r3, r2, #21
 80095ae:	d531      	bpl.n	8009614 <__ssputs_r+0xa0>
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7ff ff6b 	bl	800948c <_malloc_r>
 80095b6:	4606      	mov	r6, r0
 80095b8:	b950      	cbnz	r0, 80095d0 <__ssputs_r+0x5c>
 80095ba:	230c      	movs	r3, #12
 80095bc:	f8ca 3000 	str.w	r3, [sl]
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c6:	81a3      	strh	r3, [r4, #12]
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295
 80095cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d0:	6921      	ldr	r1, [r4, #16]
 80095d2:	464a      	mov	r2, r9
 80095d4:	f7ff fb46 	bl	8008c64 <memcpy>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	6126      	str	r6, [r4, #16]
 80095e6:	6165      	str	r5, [r4, #20]
 80095e8:	444e      	add	r6, r9
 80095ea:	eba5 0509 	sub.w	r5, r5, r9
 80095ee:	6026      	str	r6, [r4, #0]
 80095f0:	60a5      	str	r5, [r4, #8]
 80095f2:	463e      	mov	r6, r7
 80095f4:	42be      	cmp	r6, r7
 80095f6:	d900      	bls.n	80095fa <__ssputs_r+0x86>
 80095f8:	463e      	mov	r6, r7
 80095fa:	6820      	ldr	r0, [r4, #0]
 80095fc:	4632      	mov	r2, r6
 80095fe:	4641      	mov	r1, r8
 8009600:	f000 f966 	bl	80098d0 <memmove>
 8009604:	68a3      	ldr	r3, [r4, #8]
 8009606:	1b9b      	subs	r3, r3, r6
 8009608:	60a3      	str	r3, [r4, #8]
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	4433      	add	r3, r6
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	2000      	movs	r0, #0
 8009612:	e7db      	b.n	80095cc <__ssputs_r+0x58>
 8009614:	462a      	mov	r2, r5
 8009616:	f000 f981 	bl	800991c <_realloc_r>
 800961a:	4606      	mov	r6, r0
 800961c:	2800      	cmp	r0, #0
 800961e:	d1e1      	bne.n	80095e4 <__ssputs_r+0x70>
 8009620:	6921      	ldr	r1, [r4, #16]
 8009622:	4650      	mov	r0, sl
 8009624:	f7ff fec6 	bl	80093b4 <_free_r>
 8009628:	e7c7      	b.n	80095ba <__ssputs_r+0x46>
	...

0800962c <_svfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4698      	mov	r8, r3
 8009632:	898b      	ldrh	r3, [r1, #12]
 8009634:	061b      	lsls	r3, r3, #24
 8009636:	b09d      	sub	sp, #116	; 0x74
 8009638:	4607      	mov	r7, r0
 800963a:	460d      	mov	r5, r1
 800963c:	4614      	mov	r4, r2
 800963e:	d50e      	bpl.n	800965e <_svfiprintf_r+0x32>
 8009640:	690b      	ldr	r3, [r1, #16]
 8009642:	b963      	cbnz	r3, 800965e <_svfiprintf_r+0x32>
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	f7ff ff21 	bl	800948c <_malloc_r>
 800964a:	6028      	str	r0, [r5, #0]
 800964c:	6128      	str	r0, [r5, #16]
 800964e:	b920      	cbnz	r0, 800965a <_svfiprintf_r+0x2e>
 8009650:	230c      	movs	r3, #12
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e0d1      	b.n	80097fe <_svfiprintf_r+0x1d2>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	616b      	str	r3, [r5, #20]
 800965e:	2300      	movs	r3, #0
 8009660:	9309      	str	r3, [sp, #36]	; 0x24
 8009662:	2320      	movs	r3, #32
 8009664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009668:	f8cd 800c 	str.w	r8, [sp, #12]
 800966c:	2330      	movs	r3, #48	; 0x30
 800966e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009818 <_svfiprintf_r+0x1ec>
 8009672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009676:	f04f 0901 	mov.w	r9, #1
 800967a:	4623      	mov	r3, r4
 800967c:	469a      	mov	sl, r3
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	b10a      	cbz	r2, 8009688 <_svfiprintf_r+0x5c>
 8009684:	2a25      	cmp	r2, #37	; 0x25
 8009686:	d1f9      	bne.n	800967c <_svfiprintf_r+0x50>
 8009688:	ebba 0b04 	subs.w	fp, sl, r4
 800968c:	d00b      	beq.n	80096a6 <_svfiprintf_r+0x7a>
 800968e:	465b      	mov	r3, fp
 8009690:	4622      	mov	r2, r4
 8009692:	4629      	mov	r1, r5
 8009694:	4638      	mov	r0, r7
 8009696:	f7ff ff6d 	bl	8009574 <__ssputs_r>
 800969a:	3001      	adds	r0, #1
 800969c:	f000 80aa 	beq.w	80097f4 <_svfiprintf_r+0x1c8>
 80096a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a2:	445a      	add	r2, fp
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a2 	beq.w	80097f4 <_svfiprintf_r+0x1c8>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c6:	931a      	str	r3, [sp, #104]	; 0x68
 80096c8:	4654      	mov	r4, sl
 80096ca:	2205      	movs	r2, #5
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	4851      	ldr	r0, [pc, #324]	; (8009818 <_svfiprintf_r+0x1ec>)
 80096d2:	f7f6 fdbd 	bl	8000250 <memchr>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	b9d8      	cbnz	r0, 8009712 <_svfiprintf_r+0xe6>
 80096da:	06d0      	lsls	r0, r2, #27
 80096dc:	bf44      	itt	mi
 80096de:	2320      	movmi	r3, #32
 80096e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e4:	0711      	lsls	r1, r2, #28
 80096e6:	bf44      	itt	mi
 80096e8:	232b      	movmi	r3, #43	; 0x2b
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d015      	beq.n	8009722 <_svfiprintf_r+0xf6>
 80096f6:	9a07      	ldr	r2, [sp, #28]
 80096f8:	4654      	mov	r4, sl
 80096fa:	2000      	movs	r0, #0
 80096fc:	f04f 0c0a 	mov.w	ip, #10
 8009700:	4621      	mov	r1, r4
 8009702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009706:	3b30      	subs	r3, #48	; 0x30
 8009708:	2b09      	cmp	r3, #9
 800970a:	d94e      	bls.n	80097aa <_svfiprintf_r+0x17e>
 800970c:	b1b0      	cbz	r0, 800973c <_svfiprintf_r+0x110>
 800970e:	9207      	str	r2, [sp, #28]
 8009710:	e014      	b.n	800973c <_svfiprintf_r+0x110>
 8009712:	eba0 0308 	sub.w	r3, r0, r8
 8009716:	fa09 f303 	lsl.w	r3, r9, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	46a2      	mov	sl, r4
 8009720:	e7d2      	b.n	80096c8 <_svfiprintf_r+0x9c>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbb      	ittet	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	f042 0202 	orrlt.w	r2, r2, #2
 8009734:	9307      	strge	r3, [sp, #28]
 8009736:	9307      	strlt	r3, [sp, #28]
 8009738:	bfb8      	it	lt
 800973a:	9204      	strlt	r2, [sp, #16]
 800973c:	7823      	ldrb	r3, [r4, #0]
 800973e:	2b2e      	cmp	r3, #46	; 0x2e
 8009740:	d10c      	bne.n	800975c <_svfiprintf_r+0x130>
 8009742:	7863      	ldrb	r3, [r4, #1]
 8009744:	2b2a      	cmp	r3, #42	; 0x2a
 8009746:	d135      	bne.n	80097b4 <_svfiprintf_r+0x188>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfb8      	it	lt
 8009754:	f04f 33ff 	movlt.w	r3, #4294967295
 8009758:	3402      	adds	r4, #2
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009828 <_svfiprintf_r+0x1fc>
 8009760:	7821      	ldrb	r1, [r4, #0]
 8009762:	2203      	movs	r2, #3
 8009764:	4650      	mov	r0, sl
 8009766:	f7f6 fd73 	bl	8000250 <memchr>
 800976a:	b140      	cbz	r0, 800977e <_svfiprintf_r+0x152>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	eba0 000a 	sub.w	r0, r0, sl
 8009772:	fa03 f000 	lsl.w	r0, r3, r0
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	4303      	orrs	r3, r0
 800977a:	3401      	adds	r4, #1
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009782:	4826      	ldr	r0, [pc, #152]	; (800981c <_svfiprintf_r+0x1f0>)
 8009784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009788:	2206      	movs	r2, #6
 800978a:	f7f6 fd61 	bl	8000250 <memchr>
 800978e:	2800      	cmp	r0, #0
 8009790:	d038      	beq.n	8009804 <_svfiprintf_r+0x1d8>
 8009792:	4b23      	ldr	r3, [pc, #140]	; (8009820 <_svfiprintf_r+0x1f4>)
 8009794:	bb1b      	cbnz	r3, 80097de <_svfiprintf_r+0x1b2>
 8009796:	9b03      	ldr	r3, [sp, #12]
 8009798:	3307      	adds	r3, #7
 800979a:	f023 0307 	bic.w	r3, r3, #7
 800979e:	3308      	adds	r3, #8
 80097a0:	9303      	str	r3, [sp, #12]
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	4433      	add	r3, r6
 80097a6:	9309      	str	r3, [sp, #36]	; 0x24
 80097a8:	e767      	b.n	800967a <_svfiprintf_r+0x4e>
 80097aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ae:	460c      	mov	r4, r1
 80097b0:	2001      	movs	r0, #1
 80097b2:	e7a5      	b.n	8009700 <_svfiprintf_r+0xd4>
 80097b4:	2300      	movs	r3, #0
 80097b6:	3401      	adds	r4, #1
 80097b8:	9305      	str	r3, [sp, #20]
 80097ba:	4619      	mov	r1, r3
 80097bc:	f04f 0c0a 	mov.w	ip, #10
 80097c0:	4620      	mov	r0, r4
 80097c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c6:	3a30      	subs	r2, #48	; 0x30
 80097c8:	2a09      	cmp	r2, #9
 80097ca:	d903      	bls.n	80097d4 <_svfiprintf_r+0x1a8>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0c5      	beq.n	800975c <_svfiprintf_r+0x130>
 80097d0:	9105      	str	r1, [sp, #20]
 80097d2:	e7c3      	b.n	800975c <_svfiprintf_r+0x130>
 80097d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d8:	4604      	mov	r4, r0
 80097da:	2301      	movs	r3, #1
 80097dc:	e7f0      	b.n	80097c0 <_svfiprintf_r+0x194>
 80097de:	ab03      	add	r3, sp, #12
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	462a      	mov	r2, r5
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <_svfiprintf_r+0x1f8>)
 80097e6:	a904      	add	r1, sp, #16
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7fd ffc1 	bl	8007770 <_printf_float>
 80097ee:	1c42      	adds	r2, r0, #1
 80097f0:	4606      	mov	r6, r0
 80097f2:	d1d6      	bne.n	80097a2 <_svfiprintf_r+0x176>
 80097f4:	89ab      	ldrh	r3, [r5, #12]
 80097f6:	065b      	lsls	r3, r3, #25
 80097f8:	f53f af2c 	bmi.w	8009654 <_svfiprintf_r+0x28>
 80097fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fe:	b01d      	add	sp, #116	; 0x74
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	ab03      	add	r3, sp, #12
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	462a      	mov	r2, r5
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <_svfiprintf_r+0x1f8>)
 800980c:	a904      	add	r1, sp, #16
 800980e:	4638      	mov	r0, r7
 8009810:	f7fe fa3a 	bl	8007c88 <_printf_i>
 8009814:	e7eb      	b.n	80097ee <_svfiprintf_r+0x1c2>
 8009816:	bf00      	nop
 8009818:	0800a82c 	.word	0x0800a82c
 800981c:	0800a836 	.word	0x0800a836
 8009820:	08007771 	.word	0x08007771
 8009824:	08009575 	.word	0x08009575
 8009828:	0800a832 	.word	0x0800a832

0800982c <_sbrk_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	; (8009848 <_sbrk_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f8 fb16 	bl	8001e68 <_sbrk>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_sbrk_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_sbrk_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	200008e4 	.word	0x200008e4

0800984c <__assert_func>:
 800984c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800984e:	4614      	mov	r4, r2
 8009850:	461a      	mov	r2, r3
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <__assert_func+0x2c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4605      	mov	r5, r0
 8009858:	68d8      	ldr	r0, [r3, #12]
 800985a:	b14c      	cbz	r4, 8009870 <__assert_func+0x24>
 800985c:	4b07      	ldr	r3, [pc, #28]	; (800987c <__assert_func+0x30>)
 800985e:	9100      	str	r1, [sp, #0]
 8009860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009864:	4906      	ldr	r1, [pc, #24]	; (8009880 <__assert_func+0x34>)
 8009866:	462b      	mov	r3, r5
 8009868:	f000 f80e 	bl	8009888 <fiprintf>
 800986c:	f000 faac 	bl	8009dc8 <abort>
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <__assert_func+0x38>)
 8009872:	461c      	mov	r4, r3
 8009874:	e7f3      	b.n	800985e <__assert_func+0x12>
 8009876:	bf00      	nop
 8009878:	20000024 	.word	0x20000024
 800987c:	0800a83d 	.word	0x0800a83d
 8009880:	0800a84a 	.word	0x0800a84a
 8009884:	0800a878 	.word	0x0800a878

08009888 <fiprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b503      	push	{r0, r1, lr}
 800988c:	4601      	mov	r1, r0
 800988e:	ab03      	add	r3, sp, #12
 8009890:	4805      	ldr	r0, [pc, #20]	; (80098a8 <fiprintf+0x20>)
 8009892:	f853 2b04 	ldr.w	r2, [r3], #4
 8009896:	6800      	ldr	r0, [r0, #0]
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	f000 f897 	bl	80099cc <_vfiprintf_r>
 800989e:	b002      	add	sp, #8
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	20000024 	.word	0x20000024

080098ac <__ascii_mbtowc>:
 80098ac:	b082      	sub	sp, #8
 80098ae:	b901      	cbnz	r1, 80098b2 <__ascii_mbtowc+0x6>
 80098b0:	a901      	add	r1, sp, #4
 80098b2:	b142      	cbz	r2, 80098c6 <__ascii_mbtowc+0x1a>
 80098b4:	b14b      	cbz	r3, 80098ca <__ascii_mbtowc+0x1e>
 80098b6:	7813      	ldrb	r3, [r2, #0]
 80098b8:	600b      	str	r3, [r1, #0]
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	1e10      	subs	r0, r2, #0
 80098be:	bf18      	it	ne
 80098c0:	2001      	movne	r0, #1
 80098c2:	b002      	add	sp, #8
 80098c4:	4770      	bx	lr
 80098c6:	4610      	mov	r0, r2
 80098c8:	e7fb      	b.n	80098c2 <__ascii_mbtowc+0x16>
 80098ca:	f06f 0001 	mvn.w	r0, #1
 80098ce:	e7f8      	b.n	80098c2 <__ascii_mbtowc+0x16>

080098d0 <memmove>:
 80098d0:	4288      	cmp	r0, r1
 80098d2:	b510      	push	{r4, lr}
 80098d4:	eb01 0402 	add.w	r4, r1, r2
 80098d8:	d902      	bls.n	80098e0 <memmove+0x10>
 80098da:	4284      	cmp	r4, r0
 80098dc:	4623      	mov	r3, r4
 80098de:	d807      	bhi.n	80098f0 <memmove+0x20>
 80098e0:	1e43      	subs	r3, r0, #1
 80098e2:	42a1      	cmp	r1, r4
 80098e4:	d008      	beq.n	80098f8 <memmove+0x28>
 80098e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ee:	e7f8      	b.n	80098e2 <memmove+0x12>
 80098f0:	4402      	add	r2, r0
 80098f2:	4601      	mov	r1, r0
 80098f4:	428a      	cmp	r2, r1
 80098f6:	d100      	bne.n	80098fa <memmove+0x2a>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009902:	e7f7      	b.n	80098f4 <memmove+0x24>

08009904 <__malloc_lock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_lock+0x8>)
 8009906:	f000 bc1f 	b.w	800a148 <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	200008e8 	.word	0x200008e8

08009910 <__malloc_unlock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_unlock+0x8>)
 8009912:	f000 bc1a 	b.w	800a14a <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	200008e8 	.word	0x200008e8

0800991c <_realloc_r>:
 800991c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009920:	4680      	mov	r8, r0
 8009922:	4614      	mov	r4, r2
 8009924:	460e      	mov	r6, r1
 8009926:	b921      	cbnz	r1, 8009932 <_realloc_r+0x16>
 8009928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	4611      	mov	r1, r2
 800992e:	f7ff bdad 	b.w	800948c <_malloc_r>
 8009932:	b92a      	cbnz	r2, 8009940 <_realloc_r+0x24>
 8009934:	f7ff fd3e 	bl	80093b4 <_free_r>
 8009938:	4625      	mov	r5, r4
 800993a:	4628      	mov	r0, r5
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	f000 fc6a 	bl	800a218 <_malloc_usable_size_r>
 8009944:	4284      	cmp	r4, r0
 8009946:	4607      	mov	r7, r0
 8009948:	d802      	bhi.n	8009950 <_realloc_r+0x34>
 800994a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800994e:	d812      	bhi.n	8009976 <_realloc_r+0x5a>
 8009950:	4621      	mov	r1, r4
 8009952:	4640      	mov	r0, r8
 8009954:	f7ff fd9a 	bl	800948c <_malloc_r>
 8009958:	4605      	mov	r5, r0
 800995a:	2800      	cmp	r0, #0
 800995c:	d0ed      	beq.n	800993a <_realloc_r+0x1e>
 800995e:	42bc      	cmp	r4, r7
 8009960:	4622      	mov	r2, r4
 8009962:	4631      	mov	r1, r6
 8009964:	bf28      	it	cs
 8009966:	463a      	movcs	r2, r7
 8009968:	f7ff f97c 	bl	8008c64 <memcpy>
 800996c:	4631      	mov	r1, r6
 800996e:	4640      	mov	r0, r8
 8009970:	f7ff fd20 	bl	80093b4 <_free_r>
 8009974:	e7e1      	b.n	800993a <_realloc_r+0x1e>
 8009976:	4635      	mov	r5, r6
 8009978:	e7df      	b.n	800993a <_realloc_r+0x1e>

0800997a <__sfputc_r>:
 800997a:	6893      	ldr	r3, [r2, #8]
 800997c:	3b01      	subs	r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	b410      	push	{r4}
 8009982:	6093      	str	r3, [r2, #8]
 8009984:	da08      	bge.n	8009998 <__sfputc_r+0x1e>
 8009986:	6994      	ldr	r4, [r2, #24]
 8009988:	42a3      	cmp	r3, r4
 800998a:	db01      	blt.n	8009990 <__sfputc_r+0x16>
 800998c:	290a      	cmp	r1, #10
 800998e:	d103      	bne.n	8009998 <__sfputc_r+0x1e>
 8009990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009994:	f000 b94a 	b.w	8009c2c <__swbuf_r>
 8009998:	6813      	ldr	r3, [r2, #0]
 800999a:	1c58      	adds	r0, r3, #1
 800999c:	6010      	str	r0, [r2, #0]
 800999e:	7019      	strb	r1, [r3, #0]
 80099a0:	4608      	mov	r0, r1
 80099a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <__sfputs_r>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	4614      	mov	r4, r2
 80099b0:	18d5      	adds	r5, r2, r3
 80099b2:	42ac      	cmp	r4, r5
 80099b4:	d101      	bne.n	80099ba <__sfputs_r+0x12>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e007      	b.n	80099ca <__sfputs_r+0x22>
 80099ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099be:	463a      	mov	r2, r7
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff ffda 	bl	800997a <__sfputc_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	d1f3      	bne.n	80099b2 <__sfputs_r+0xa>
 80099ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099cc <_vfiprintf_r>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	460d      	mov	r5, r1
 80099d2:	b09d      	sub	sp, #116	; 0x74
 80099d4:	4614      	mov	r4, r2
 80099d6:	4698      	mov	r8, r3
 80099d8:	4606      	mov	r6, r0
 80099da:	b118      	cbz	r0, 80099e4 <_vfiprintf_r+0x18>
 80099dc:	6983      	ldr	r3, [r0, #24]
 80099de:	b90b      	cbnz	r3, 80099e4 <_vfiprintf_r+0x18>
 80099e0:	f000 fb14 	bl	800a00c <__sinit>
 80099e4:	4b89      	ldr	r3, [pc, #548]	; (8009c0c <_vfiprintf_r+0x240>)
 80099e6:	429d      	cmp	r5, r3
 80099e8:	d11b      	bne.n	8009a22 <_vfiprintf_r+0x56>
 80099ea:	6875      	ldr	r5, [r6, #4]
 80099ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ee:	07d9      	lsls	r1, r3, #31
 80099f0:	d405      	bmi.n	80099fe <_vfiprintf_r+0x32>
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d402      	bmi.n	80099fe <_vfiprintf_r+0x32>
 80099f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099fa:	f000 fba5 	bl	800a148 <__retarget_lock_acquire_recursive>
 80099fe:	89ab      	ldrh	r3, [r5, #12]
 8009a00:	071b      	lsls	r3, r3, #28
 8009a02:	d501      	bpl.n	8009a08 <_vfiprintf_r+0x3c>
 8009a04:	692b      	ldr	r3, [r5, #16]
 8009a06:	b9eb      	cbnz	r3, 8009a44 <_vfiprintf_r+0x78>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f96e 	bl	8009cec <__swsetup_r>
 8009a10:	b1c0      	cbz	r0, 8009a44 <_vfiprintf_r+0x78>
 8009a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a14:	07dc      	lsls	r4, r3, #31
 8009a16:	d50e      	bpl.n	8009a36 <_vfiprintf_r+0x6a>
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	b01d      	add	sp, #116	; 0x74
 8009a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a22:	4b7b      	ldr	r3, [pc, #492]	; (8009c10 <_vfiprintf_r+0x244>)
 8009a24:	429d      	cmp	r5, r3
 8009a26:	d101      	bne.n	8009a2c <_vfiprintf_r+0x60>
 8009a28:	68b5      	ldr	r5, [r6, #8]
 8009a2a:	e7df      	b.n	80099ec <_vfiprintf_r+0x20>
 8009a2c:	4b79      	ldr	r3, [pc, #484]	; (8009c14 <_vfiprintf_r+0x248>)
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	bf08      	it	eq
 8009a32:	68f5      	ldreq	r5, [r6, #12]
 8009a34:	e7da      	b.n	80099ec <_vfiprintf_r+0x20>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	0598      	lsls	r0, r3, #22
 8009a3a:	d4ed      	bmi.n	8009a18 <_vfiprintf_r+0x4c>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3e:	f000 fb84 	bl	800a14a <__retarget_lock_release_recursive>
 8009a42:	e7e9      	b.n	8009a18 <_vfiprintf_r+0x4c>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a52:	2330      	movs	r3, #48	; 0x30
 8009a54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c18 <_vfiprintf_r+0x24c>
 8009a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a5c:	f04f 0901 	mov.w	r9, #1
 8009a60:	4623      	mov	r3, r4
 8009a62:	469a      	mov	sl, r3
 8009a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a68:	b10a      	cbz	r2, 8009a6e <_vfiprintf_r+0xa2>
 8009a6a:	2a25      	cmp	r2, #37	; 0x25
 8009a6c:	d1f9      	bne.n	8009a62 <_vfiprintf_r+0x96>
 8009a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a72:	d00b      	beq.n	8009a8c <_vfiprintf_r+0xc0>
 8009a74:	465b      	mov	r3, fp
 8009a76:	4622      	mov	r2, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ff94 	bl	80099a8 <__sfputs_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	f000 80aa 	beq.w	8009bda <_vfiprintf_r+0x20e>
 8009a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a88:	445a      	add	r2, fp
 8009a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80a2 	beq.w	8009bda <_vfiprintf_r+0x20e>
 8009a96:	2300      	movs	r3, #0
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa0:	f10a 0a01 	add.w	sl, sl, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aac:	931a      	str	r3, [sp, #104]	; 0x68
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab6:	4858      	ldr	r0, [pc, #352]	; (8009c18 <_vfiprintf_r+0x24c>)
 8009ab8:	f7f6 fbca 	bl	8000250 <memchr>
 8009abc:	9a04      	ldr	r2, [sp, #16]
 8009abe:	b9d8      	cbnz	r0, 8009af8 <_vfiprintf_r+0x12c>
 8009ac0:	06d1      	lsls	r1, r2, #27
 8009ac2:	bf44      	itt	mi
 8009ac4:	2320      	movmi	r3, #32
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aca:	0713      	lsls	r3, r2, #28
 8009acc:	bf44      	itt	mi
 8009ace:	232b      	movmi	r3, #43	; 0x2b
 8009ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8009ada:	d015      	beq.n	8009b08 <_vfiprintf_r+0x13c>
 8009adc:	9a07      	ldr	r2, [sp, #28]
 8009ade:	4654      	mov	r4, sl
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f04f 0c0a 	mov.w	ip, #10
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aec:	3b30      	subs	r3, #48	; 0x30
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d94e      	bls.n	8009b90 <_vfiprintf_r+0x1c4>
 8009af2:	b1b0      	cbz	r0, 8009b22 <_vfiprintf_r+0x156>
 8009af4:	9207      	str	r2, [sp, #28]
 8009af6:	e014      	b.n	8009b22 <_vfiprintf_r+0x156>
 8009af8:	eba0 0308 	sub.w	r3, r0, r8
 8009afc:	fa09 f303 	lsl.w	r3, r9, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	46a2      	mov	sl, r4
 8009b06:	e7d2      	b.n	8009aae <_vfiprintf_r+0xe2>
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	1d19      	adds	r1, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	9103      	str	r1, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bfbb      	ittet	lt
 8009b14:	425b      	neglt	r3, r3
 8009b16:	f042 0202 	orrlt.w	r2, r2, #2
 8009b1a:	9307      	strge	r3, [sp, #28]
 8009b1c:	9307      	strlt	r3, [sp, #28]
 8009b1e:	bfb8      	it	lt
 8009b20:	9204      	strlt	r2, [sp, #16]
 8009b22:	7823      	ldrb	r3, [r4, #0]
 8009b24:	2b2e      	cmp	r3, #46	; 0x2e
 8009b26:	d10c      	bne.n	8009b42 <_vfiprintf_r+0x176>
 8009b28:	7863      	ldrb	r3, [r4, #1]
 8009b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2c:	d135      	bne.n	8009b9a <_vfiprintf_r+0x1ce>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	9203      	str	r2, [sp, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfb8      	it	lt
 8009b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b3e:	3402      	adds	r4, #2
 8009b40:	9305      	str	r3, [sp, #20]
 8009b42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c28 <_vfiprintf_r+0x25c>
 8009b46:	7821      	ldrb	r1, [r4, #0]
 8009b48:	2203      	movs	r2, #3
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	f7f6 fb80 	bl	8000250 <memchr>
 8009b50:	b140      	cbz	r0, 8009b64 <_vfiprintf_r+0x198>
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	eba0 000a 	sub.w	r0, r0, sl
 8009b58:	fa03 f000 	lsl.w	r0, r3, r0
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	4303      	orrs	r3, r0
 8009b60:	3401      	adds	r4, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	482c      	ldr	r0, [pc, #176]	; (8009c1c <_vfiprintf_r+0x250>)
 8009b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b6e:	2206      	movs	r2, #6
 8009b70:	f7f6 fb6e 	bl	8000250 <memchr>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d03f      	beq.n	8009bf8 <_vfiprintf_r+0x22c>
 8009b78:	4b29      	ldr	r3, [pc, #164]	; (8009c20 <_vfiprintf_r+0x254>)
 8009b7a:	bb1b      	cbnz	r3, 8009bc4 <_vfiprintf_r+0x1f8>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	3308      	adds	r3, #8
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8a:	443b      	add	r3, r7
 8009b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8e:	e767      	b.n	8009a60 <_vfiprintf_r+0x94>
 8009b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b94:	460c      	mov	r4, r1
 8009b96:	2001      	movs	r0, #1
 8009b98:	e7a5      	b.n	8009ae6 <_vfiprintf_r+0x11a>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0c0a 	mov.w	ip, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bac:	3a30      	subs	r2, #48	; 0x30
 8009bae:	2a09      	cmp	r2, #9
 8009bb0:	d903      	bls.n	8009bba <_vfiprintf_r+0x1ee>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c5      	beq.n	8009b42 <_vfiprintf_r+0x176>
 8009bb6:	9105      	str	r1, [sp, #20]
 8009bb8:	e7c3      	b.n	8009b42 <_vfiprintf_r+0x176>
 8009bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7f0      	b.n	8009ba6 <_vfiprintf_r+0x1da>
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <_vfiprintf_r+0x258>)
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7fd fdce 	bl	8007770 <_printf_float>
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	1c78      	adds	r0, r7, #1
 8009bd8:	d1d6      	bne.n	8009b88 <_vfiprintf_r+0x1bc>
 8009bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bdc:	07d9      	lsls	r1, r3, #31
 8009bde:	d405      	bmi.n	8009bec <_vfiprintf_r+0x220>
 8009be0:	89ab      	ldrh	r3, [r5, #12]
 8009be2:	059a      	lsls	r2, r3, #22
 8009be4:	d402      	bmi.n	8009bec <_vfiprintf_r+0x220>
 8009be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009be8:	f000 faaf 	bl	800a14a <__retarget_lock_release_recursive>
 8009bec:	89ab      	ldrh	r3, [r5, #12]
 8009bee:	065b      	lsls	r3, r3, #25
 8009bf0:	f53f af12 	bmi.w	8009a18 <_vfiprintf_r+0x4c>
 8009bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf6:	e711      	b.n	8009a1c <_vfiprintf_r+0x50>
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <_vfiprintf_r+0x258>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7fe f840 	bl	8007c88 <_printf_i>
 8009c08:	e7e4      	b.n	8009bd4 <_vfiprintf_r+0x208>
 8009c0a:	bf00      	nop
 8009c0c:	0800a8a4 	.word	0x0800a8a4
 8009c10:	0800a8c4 	.word	0x0800a8c4
 8009c14:	0800a884 	.word	0x0800a884
 8009c18:	0800a82c 	.word	0x0800a82c
 8009c1c:	0800a836 	.word	0x0800a836
 8009c20:	08007771 	.word	0x08007771
 8009c24:	080099a9 	.word	0x080099a9
 8009c28:	0800a832 	.word	0x0800a832

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	460e      	mov	r6, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x12>
 8009c36:	6983      	ldr	r3, [r0, #24]
 8009c38:	b90b      	cbnz	r3, 8009c3e <__swbuf_r+0x12>
 8009c3a:	f000 f9e7 	bl	800a00c <__sinit>
 8009c3e:	4b21      	ldr	r3, [pc, #132]	; (8009cc4 <__swbuf_r+0x98>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d12b      	bne.n	8009c9c <__swbuf_r+0x70>
 8009c44:	686c      	ldr	r4, [r5, #4]
 8009c46:	69a3      	ldr	r3, [r4, #24]
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	071a      	lsls	r2, r3, #28
 8009c4e:	d52f      	bpl.n	8009cb0 <__swbuf_r+0x84>
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	b36b      	cbz	r3, 8009cb0 <__swbuf_r+0x84>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	1ac0      	subs	r0, r0, r3
 8009c5a:	6963      	ldr	r3, [r4, #20]
 8009c5c:	b2f6      	uxtb	r6, r6
 8009c5e:	4283      	cmp	r3, r0
 8009c60:	4637      	mov	r7, r6
 8009c62:	dc04      	bgt.n	8009c6e <__swbuf_r+0x42>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f93c 	bl	8009ee4 <_fflush_r>
 8009c6c:	bb30      	cbnz	r0, 8009cbc <__swbuf_r+0x90>
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	60a3      	str	r3, [r4, #8]
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	6022      	str	r2, [r4, #0]
 8009c7a:	701e      	strb	r6, [r3, #0]
 8009c7c:	6963      	ldr	r3, [r4, #20]
 8009c7e:	3001      	adds	r0, #1
 8009c80:	4283      	cmp	r3, r0
 8009c82:	d004      	beq.n	8009c8e <__swbuf_r+0x62>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	07db      	lsls	r3, r3, #31
 8009c88:	d506      	bpl.n	8009c98 <__swbuf_r+0x6c>
 8009c8a:	2e0a      	cmp	r6, #10
 8009c8c:	d104      	bne.n	8009c98 <__swbuf_r+0x6c>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f927 	bl	8009ee4 <_fflush_r>
 8009c96:	b988      	cbnz	r0, 8009cbc <__swbuf_r+0x90>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <__swbuf_r+0x9c>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	d101      	bne.n	8009ca6 <__swbuf_r+0x7a>
 8009ca2:	68ac      	ldr	r4, [r5, #8]
 8009ca4:	e7cf      	b.n	8009c46 <__swbuf_r+0x1a>
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <__swbuf_r+0xa0>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	bf08      	it	eq
 8009cac:	68ec      	ldreq	r4, [r5, #12]
 8009cae:	e7ca      	b.n	8009c46 <__swbuf_r+0x1a>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f000 f81a 	bl	8009cec <__swsetup_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0cb      	beq.n	8009c54 <__swbuf_r+0x28>
 8009cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc0:	e7ea      	b.n	8009c98 <__swbuf_r+0x6c>
 8009cc2:	bf00      	nop
 8009cc4:	0800a8a4 	.word	0x0800a8a4
 8009cc8:	0800a8c4 	.word	0x0800a8c4
 8009ccc:	0800a884 	.word	0x0800a884

08009cd0 <__ascii_wctomb>:
 8009cd0:	b149      	cbz	r1, 8009ce6 <__ascii_wctomb+0x16>
 8009cd2:	2aff      	cmp	r2, #255	; 0xff
 8009cd4:	bf85      	ittet	hi
 8009cd6:	238a      	movhi	r3, #138	; 0x8a
 8009cd8:	6003      	strhi	r3, [r0, #0]
 8009cda:	700a      	strbls	r2, [r1, #0]
 8009cdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ce0:	bf98      	it	ls
 8009ce2:	2001      	movls	r0, #1
 8009ce4:	4770      	bx	lr
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4770      	bx	lr
	...

08009cec <__swsetup_r>:
 8009cec:	4b32      	ldr	r3, [pc, #200]	; (8009db8 <__swsetup_r+0xcc>)
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	b125      	cbz	r5, 8009d02 <__swsetup_r+0x16>
 8009cf8:	69ab      	ldr	r3, [r5, #24]
 8009cfa:	b913      	cbnz	r3, 8009d02 <__swsetup_r+0x16>
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 f985 	bl	800a00c <__sinit>
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <__swsetup_r+0xd0>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	d10f      	bne.n	8009d28 <__swsetup_r+0x3c>
 8009d08:	686c      	ldr	r4, [r5, #4]
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d10:	0719      	lsls	r1, r3, #28
 8009d12:	d42c      	bmi.n	8009d6e <__swsetup_r+0x82>
 8009d14:	06dd      	lsls	r5, r3, #27
 8009d16:	d411      	bmi.n	8009d3c <__swsetup_r+0x50>
 8009d18:	2309      	movs	r3, #9
 8009d1a:	6033      	str	r3, [r6, #0]
 8009d1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	f04f 30ff 	mov.w	r0, #4294967295
 8009d26:	e03e      	b.n	8009da6 <__swsetup_r+0xba>
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <__swsetup_r+0xd4>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <__swsetup_r+0x46>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7eb      	b.n	8009d0a <__swsetup_r+0x1e>
 8009d32:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <__swsetup_r+0xd8>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7e6      	b.n	8009d0a <__swsetup_r+0x1e>
 8009d3c:	0758      	lsls	r0, r3, #29
 8009d3e:	d512      	bpl.n	8009d66 <__swsetup_r+0x7a>
 8009d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d42:	b141      	cbz	r1, 8009d56 <__swsetup_r+0x6a>
 8009d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d48:	4299      	cmp	r1, r3
 8009d4a:	d002      	beq.n	8009d52 <__swsetup_r+0x66>
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff fb31 	bl	80093b4 <_free_r>
 8009d52:	2300      	movs	r3, #0
 8009d54:	6363      	str	r3, [r4, #52]	; 0x34
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6063      	str	r3, [r4, #4]
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f043 0308 	orr.w	r3, r3, #8
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	b94b      	cbnz	r3, 8009d86 <__swsetup_r+0x9a>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d7c:	d003      	beq.n	8009d86 <__swsetup_r+0x9a>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4630      	mov	r0, r6
 8009d82:	f000 fa09 	bl	800a198 <__smakebuf_r>
 8009d86:	89a0      	ldrh	r0, [r4, #12]
 8009d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d8c:	f010 0301 	ands.w	r3, r0, #1
 8009d90:	d00a      	beq.n	8009da8 <__swsetup_r+0xbc>
 8009d92:	2300      	movs	r3, #0
 8009d94:	60a3      	str	r3, [r4, #8]
 8009d96:	6963      	ldr	r3, [r4, #20]
 8009d98:	425b      	negs	r3, r3
 8009d9a:	61a3      	str	r3, [r4, #24]
 8009d9c:	6923      	ldr	r3, [r4, #16]
 8009d9e:	b943      	cbnz	r3, 8009db2 <__swsetup_r+0xc6>
 8009da0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009da4:	d1ba      	bne.n	8009d1c <__swsetup_r+0x30>
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	0781      	lsls	r1, r0, #30
 8009daa:	bf58      	it	pl
 8009dac:	6963      	ldrpl	r3, [r4, #20]
 8009dae:	60a3      	str	r3, [r4, #8]
 8009db0:	e7f4      	b.n	8009d9c <__swsetup_r+0xb0>
 8009db2:	2000      	movs	r0, #0
 8009db4:	e7f7      	b.n	8009da6 <__swsetup_r+0xba>
 8009db6:	bf00      	nop
 8009db8:	20000024 	.word	0x20000024
 8009dbc:	0800a8a4 	.word	0x0800a8a4
 8009dc0:	0800a8c4 	.word	0x0800a8c4
 8009dc4:	0800a884 	.word	0x0800a884

08009dc8 <abort>:
 8009dc8:	b508      	push	{r3, lr}
 8009dca:	2006      	movs	r0, #6
 8009dcc:	f000 fa54 	bl	800a278 <raise>
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f7f7 ffd1 	bl	8001d78 <_exit>
	...

08009dd8 <__sflush_r>:
 8009dd8:	898a      	ldrh	r2, [r1, #12]
 8009dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dde:	4605      	mov	r5, r0
 8009de0:	0710      	lsls	r0, r2, #28
 8009de2:	460c      	mov	r4, r1
 8009de4:	d458      	bmi.n	8009e98 <__sflush_r+0xc0>
 8009de6:	684b      	ldr	r3, [r1, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dc05      	bgt.n	8009df8 <__sflush_r+0x20>
 8009dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	dc02      	bgt.n	8009df8 <__sflush_r+0x20>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	d0f9      	beq.n	8009df2 <__sflush_r+0x1a>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e04:	682f      	ldr	r7, [r5, #0]
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	d032      	beq.n	8009e70 <__sflush_r+0x98>
 8009e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	075a      	lsls	r2, r3, #29
 8009e10:	d505      	bpl.n	8009e1e <__sflush_r+0x46>
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	1ac0      	subs	r0, r0, r3
 8009e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e18:	b10b      	cbz	r3, 8009e1e <__sflush_r+0x46>
 8009e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e1c:	1ac0      	subs	r0, r0, r3
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4602      	mov	r2, r0
 8009e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e24:	6a21      	ldr	r1, [r4, #32]
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b0      	blx	r6
 8009e2a:	1c43      	adds	r3, r0, #1
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	d106      	bne.n	8009e3e <__sflush_r+0x66>
 8009e30:	6829      	ldr	r1, [r5, #0]
 8009e32:	291d      	cmp	r1, #29
 8009e34:	d82c      	bhi.n	8009e90 <__sflush_r+0xb8>
 8009e36:	4a2a      	ldr	r2, [pc, #168]	; (8009ee0 <__sflush_r+0x108>)
 8009e38:	40ca      	lsrs	r2, r1
 8009e3a:	07d6      	lsls	r6, r2, #31
 8009e3c:	d528      	bpl.n	8009e90 <__sflush_r+0xb8>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	6062      	str	r2, [r4, #4]
 8009e42:	04d9      	lsls	r1, r3, #19
 8009e44:	6922      	ldr	r2, [r4, #16]
 8009e46:	6022      	str	r2, [r4, #0]
 8009e48:	d504      	bpl.n	8009e54 <__sflush_r+0x7c>
 8009e4a:	1c42      	adds	r2, r0, #1
 8009e4c:	d101      	bne.n	8009e52 <__sflush_r+0x7a>
 8009e4e:	682b      	ldr	r3, [r5, #0]
 8009e50:	b903      	cbnz	r3, 8009e54 <__sflush_r+0x7c>
 8009e52:	6560      	str	r0, [r4, #84]	; 0x54
 8009e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e56:	602f      	str	r7, [r5, #0]
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	d0ca      	beq.n	8009df2 <__sflush_r+0x1a>
 8009e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e60:	4299      	cmp	r1, r3
 8009e62:	d002      	beq.n	8009e6a <__sflush_r+0x92>
 8009e64:	4628      	mov	r0, r5
 8009e66:	f7ff faa5 	bl	80093b4 <_free_r>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e6e:	e7c1      	b.n	8009df4 <__sflush_r+0x1c>
 8009e70:	6a21      	ldr	r1, [r4, #32]
 8009e72:	2301      	movs	r3, #1
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b0      	blx	r6
 8009e78:	1c41      	adds	r1, r0, #1
 8009e7a:	d1c7      	bne.n	8009e0c <__sflush_r+0x34>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0c4      	beq.n	8009e0c <__sflush_r+0x34>
 8009e82:	2b1d      	cmp	r3, #29
 8009e84:	d001      	beq.n	8009e8a <__sflush_r+0xb2>
 8009e86:	2b16      	cmp	r3, #22
 8009e88:	d101      	bne.n	8009e8e <__sflush_r+0xb6>
 8009e8a:	602f      	str	r7, [r5, #0]
 8009e8c:	e7b1      	b.n	8009df2 <__sflush_r+0x1a>
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	e7ad      	b.n	8009df4 <__sflush_r+0x1c>
 8009e98:	690f      	ldr	r7, [r1, #16]
 8009e9a:	2f00      	cmp	r7, #0
 8009e9c:	d0a9      	beq.n	8009df2 <__sflush_r+0x1a>
 8009e9e:	0793      	lsls	r3, r2, #30
 8009ea0:	680e      	ldr	r6, [r1, #0]
 8009ea2:	bf08      	it	eq
 8009ea4:	694b      	ldreq	r3, [r1, #20]
 8009ea6:	600f      	str	r7, [r1, #0]
 8009ea8:	bf18      	it	ne
 8009eaa:	2300      	movne	r3, #0
 8009eac:	eba6 0807 	sub.w	r8, r6, r7
 8009eb0:	608b      	str	r3, [r1, #8]
 8009eb2:	f1b8 0f00 	cmp.w	r8, #0
 8009eb6:	dd9c      	ble.n	8009df2 <__sflush_r+0x1a>
 8009eb8:	6a21      	ldr	r1, [r4, #32]
 8009eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ebc:	4643      	mov	r3, r8
 8009ebe:	463a      	mov	r2, r7
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	47b0      	blx	r6
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	dc06      	bgt.n	8009ed6 <__sflush_r+0xfe>
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed4:	e78e      	b.n	8009df4 <__sflush_r+0x1c>
 8009ed6:	4407      	add	r7, r0
 8009ed8:	eba8 0800 	sub.w	r8, r8, r0
 8009edc:	e7e9      	b.n	8009eb2 <__sflush_r+0xda>
 8009ede:	bf00      	nop
 8009ee0:	20400001 	.word	0x20400001

08009ee4 <_fflush_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	690b      	ldr	r3, [r1, #16]
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	b913      	cbnz	r3, 8009ef4 <_fflush_r+0x10>
 8009eee:	2500      	movs	r5, #0
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	b118      	cbz	r0, 8009efe <_fflush_r+0x1a>
 8009ef6:	6983      	ldr	r3, [r0, #24]
 8009ef8:	b90b      	cbnz	r3, 8009efe <_fflush_r+0x1a>
 8009efa:	f000 f887 	bl	800a00c <__sinit>
 8009efe:	4b14      	ldr	r3, [pc, #80]	; (8009f50 <_fflush_r+0x6c>)
 8009f00:	429c      	cmp	r4, r3
 8009f02:	d11b      	bne.n	8009f3c <_fflush_r+0x58>
 8009f04:	686c      	ldr	r4, [r5, #4]
 8009f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0ef      	beq.n	8009eee <_fflush_r+0xa>
 8009f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f10:	07d0      	lsls	r0, r2, #31
 8009f12:	d404      	bmi.n	8009f1e <_fflush_r+0x3a>
 8009f14:	0599      	lsls	r1, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_fflush_r+0x3a>
 8009f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1a:	f000 f915 	bl	800a148 <__retarget_lock_acquire_recursive>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	4621      	mov	r1, r4
 8009f22:	f7ff ff59 	bl	8009dd8 <__sflush_r>
 8009f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f28:	07da      	lsls	r2, r3, #31
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	d4e0      	bmi.n	8009ef0 <_fflush_r+0xc>
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	059b      	lsls	r3, r3, #22
 8009f32:	d4dd      	bmi.n	8009ef0 <_fflush_r+0xc>
 8009f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f36:	f000 f908 	bl	800a14a <__retarget_lock_release_recursive>
 8009f3a:	e7d9      	b.n	8009ef0 <_fflush_r+0xc>
 8009f3c:	4b05      	ldr	r3, [pc, #20]	; (8009f54 <_fflush_r+0x70>)
 8009f3e:	429c      	cmp	r4, r3
 8009f40:	d101      	bne.n	8009f46 <_fflush_r+0x62>
 8009f42:	68ac      	ldr	r4, [r5, #8]
 8009f44:	e7df      	b.n	8009f06 <_fflush_r+0x22>
 8009f46:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <_fflush_r+0x74>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	bf08      	it	eq
 8009f4c:	68ec      	ldreq	r4, [r5, #12]
 8009f4e:	e7da      	b.n	8009f06 <_fflush_r+0x22>
 8009f50:	0800a8a4 	.word	0x0800a8a4
 8009f54:	0800a8c4 	.word	0x0800a8c4
 8009f58:	0800a884 	.word	0x0800a884

08009f5c <std>:
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	4604      	mov	r4, r0
 8009f62:	e9c0 3300 	strd	r3, r3, [r0]
 8009f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f6a:	6083      	str	r3, [r0, #8]
 8009f6c:	8181      	strh	r1, [r0, #12]
 8009f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f70:	81c2      	strh	r2, [r0, #14]
 8009f72:	6183      	str	r3, [r0, #24]
 8009f74:	4619      	mov	r1, r3
 8009f76:	2208      	movs	r2, #8
 8009f78:	305c      	adds	r0, #92	; 0x5c
 8009f7a:	f7fd fb5f 	bl	800763c <memset>
 8009f7e:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <std+0x38>)
 8009f80:	6263      	str	r3, [r4, #36]	; 0x24
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <std+0x3c>)
 8009f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f86:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <std+0x40>)
 8009f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <std+0x44>)
 8009f8c:	6224      	str	r4, [r4, #32]
 8009f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	bf00      	nop
 8009f94:	0800a2b1 	.word	0x0800a2b1
 8009f98:	0800a2d3 	.word	0x0800a2d3
 8009f9c:	0800a30b 	.word	0x0800a30b
 8009fa0:	0800a32f 	.word	0x0800a32f

08009fa4 <_cleanup_r>:
 8009fa4:	4901      	ldr	r1, [pc, #4]	; (8009fac <_cleanup_r+0x8>)
 8009fa6:	f000 b8af 	b.w	800a108 <_fwalk_reent>
 8009faa:	bf00      	nop
 8009fac:	08009ee5 	.word	0x08009ee5

08009fb0 <__sfmoreglue>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	2268      	movs	r2, #104	; 0x68
 8009fb4:	1e4d      	subs	r5, r1, #1
 8009fb6:	4355      	muls	r5, r2
 8009fb8:	460e      	mov	r6, r1
 8009fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fbe:	f7ff fa65 	bl	800948c <_malloc_r>
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	b140      	cbz	r0, 8009fd8 <__sfmoreglue+0x28>
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8009fcc:	300c      	adds	r0, #12
 8009fce:	60a0      	str	r0, [r4, #8]
 8009fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fd4:	f7fd fb32 	bl	800763c <memset>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	bd70      	pop	{r4, r5, r6, pc}

08009fdc <__sfp_lock_acquire>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__sfp_lock_acquire+0x8>)
 8009fde:	f000 b8b3 	b.w	800a148 <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	200008e9 	.word	0x200008e9

08009fe8 <__sfp_lock_release>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__sfp_lock_release+0x8>)
 8009fea:	f000 b8ae 	b.w	800a14a <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	200008e9 	.word	0x200008e9

08009ff4 <__sinit_lock_acquire>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__sinit_lock_acquire+0x8>)
 8009ff6:	f000 b8a7 	b.w	800a148 <__retarget_lock_acquire_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	200008ea 	.word	0x200008ea

0800a000 <__sinit_lock_release>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__sinit_lock_release+0x8>)
 800a002:	f000 b8a2 	b.w	800a14a <__retarget_lock_release_recursive>
 800a006:	bf00      	nop
 800a008:	200008ea 	.word	0x200008ea

0800a00c <__sinit>:
 800a00c:	b510      	push	{r4, lr}
 800a00e:	4604      	mov	r4, r0
 800a010:	f7ff fff0 	bl	8009ff4 <__sinit_lock_acquire>
 800a014:	69a3      	ldr	r3, [r4, #24]
 800a016:	b11b      	cbz	r3, 800a020 <__sinit+0x14>
 800a018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a01c:	f7ff bff0 	b.w	800a000 <__sinit_lock_release>
 800a020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a024:	6523      	str	r3, [r4, #80]	; 0x50
 800a026:	4b13      	ldr	r3, [pc, #76]	; (800a074 <__sinit+0x68>)
 800a028:	4a13      	ldr	r2, [pc, #76]	; (800a078 <__sinit+0x6c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a02e:	42a3      	cmp	r3, r4
 800a030:	bf04      	itt	eq
 800a032:	2301      	moveq	r3, #1
 800a034:	61a3      	streq	r3, [r4, #24]
 800a036:	4620      	mov	r0, r4
 800a038:	f000 f820 	bl	800a07c <__sfp>
 800a03c:	6060      	str	r0, [r4, #4]
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 f81c 	bl	800a07c <__sfp>
 800a044:	60a0      	str	r0, [r4, #8]
 800a046:	4620      	mov	r0, r4
 800a048:	f000 f818 	bl	800a07c <__sfp>
 800a04c:	2200      	movs	r2, #0
 800a04e:	60e0      	str	r0, [r4, #12]
 800a050:	2104      	movs	r1, #4
 800a052:	6860      	ldr	r0, [r4, #4]
 800a054:	f7ff ff82 	bl	8009f5c <std>
 800a058:	68a0      	ldr	r0, [r4, #8]
 800a05a:	2201      	movs	r2, #1
 800a05c:	2109      	movs	r1, #9
 800a05e:	f7ff ff7d 	bl	8009f5c <std>
 800a062:	68e0      	ldr	r0, [r4, #12]
 800a064:	2202      	movs	r2, #2
 800a066:	2112      	movs	r1, #18
 800a068:	f7ff ff78 	bl	8009f5c <std>
 800a06c:	2301      	movs	r3, #1
 800a06e:	61a3      	str	r3, [r4, #24]
 800a070:	e7d2      	b.n	800a018 <__sinit+0xc>
 800a072:	bf00      	nop
 800a074:	0800a504 	.word	0x0800a504
 800a078:	08009fa5 	.word	0x08009fa5

0800a07c <__sfp>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	4607      	mov	r7, r0
 800a080:	f7ff ffac 	bl	8009fdc <__sfp_lock_acquire>
 800a084:	4b1e      	ldr	r3, [pc, #120]	; (800a100 <__sfp+0x84>)
 800a086:	681e      	ldr	r6, [r3, #0]
 800a088:	69b3      	ldr	r3, [r6, #24]
 800a08a:	b913      	cbnz	r3, 800a092 <__sfp+0x16>
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7ff ffbd 	bl	800a00c <__sinit>
 800a092:	3648      	adds	r6, #72	; 0x48
 800a094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a098:	3b01      	subs	r3, #1
 800a09a:	d503      	bpl.n	800a0a4 <__sfp+0x28>
 800a09c:	6833      	ldr	r3, [r6, #0]
 800a09e:	b30b      	cbz	r3, 800a0e4 <__sfp+0x68>
 800a0a0:	6836      	ldr	r6, [r6, #0]
 800a0a2:	e7f7      	b.n	800a094 <__sfp+0x18>
 800a0a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0a8:	b9d5      	cbnz	r5, 800a0e0 <__sfp+0x64>
 800a0aa:	4b16      	ldr	r3, [pc, #88]	; (800a104 <__sfp+0x88>)
 800a0ac:	60e3      	str	r3, [r4, #12]
 800a0ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0b2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0b4:	f000 f847 	bl	800a146 <__retarget_lock_init_recursive>
 800a0b8:	f7ff ff96 	bl	8009fe8 <__sfp_lock_release>
 800a0bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0c4:	6025      	str	r5, [r4, #0]
 800a0c6:	61a5      	str	r5, [r4, #24]
 800a0c8:	2208      	movs	r2, #8
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0d0:	f7fd fab4 	bl	800763c <memset>
 800a0d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0dc:	4620      	mov	r0, r4
 800a0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e0:	3468      	adds	r4, #104	; 0x68
 800a0e2:	e7d9      	b.n	800a098 <__sfp+0x1c>
 800a0e4:	2104      	movs	r1, #4
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f7ff ff62 	bl	8009fb0 <__sfmoreglue>
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	6030      	str	r0, [r6, #0]
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d1d5      	bne.n	800a0a0 <__sfp+0x24>
 800a0f4:	f7ff ff78 	bl	8009fe8 <__sfp_lock_release>
 800a0f8:	230c      	movs	r3, #12
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	e7ee      	b.n	800a0dc <__sfp+0x60>
 800a0fe:	bf00      	nop
 800a100:	0800a504 	.word	0x0800a504
 800a104:	ffff0001 	.word	0xffff0001

0800a108 <_fwalk_reent>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	4606      	mov	r6, r0
 800a10e:	4688      	mov	r8, r1
 800a110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a114:	2700      	movs	r7, #0
 800a116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a11a:	f1b9 0901 	subs.w	r9, r9, #1
 800a11e:	d505      	bpl.n	800a12c <_fwalk_reent+0x24>
 800a120:	6824      	ldr	r4, [r4, #0]
 800a122:	2c00      	cmp	r4, #0
 800a124:	d1f7      	bne.n	800a116 <_fwalk_reent+0xe>
 800a126:	4638      	mov	r0, r7
 800a128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a12c:	89ab      	ldrh	r3, [r5, #12]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d907      	bls.n	800a142 <_fwalk_reent+0x3a>
 800a132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a136:	3301      	adds	r3, #1
 800a138:	d003      	beq.n	800a142 <_fwalk_reent+0x3a>
 800a13a:	4629      	mov	r1, r5
 800a13c:	4630      	mov	r0, r6
 800a13e:	47c0      	blx	r8
 800a140:	4307      	orrs	r7, r0
 800a142:	3568      	adds	r5, #104	; 0x68
 800a144:	e7e9      	b.n	800a11a <_fwalk_reent+0x12>

0800a146 <__retarget_lock_init_recursive>:
 800a146:	4770      	bx	lr

0800a148 <__retarget_lock_acquire_recursive>:
 800a148:	4770      	bx	lr

0800a14a <__retarget_lock_release_recursive>:
 800a14a:	4770      	bx	lr

0800a14c <__swhatbuf_r>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	460e      	mov	r6, r1
 800a150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a154:	2900      	cmp	r1, #0
 800a156:	b096      	sub	sp, #88	; 0x58
 800a158:	4614      	mov	r4, r2
 800a15a:	461d      	mov	r5, r3
 800a15c:	da08      	bge.n	800a170 <__swhatbuf_r+0x24>
 800a15e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	061a      	lsls	r2, r3, #24
 800a168:	d410      	bmi.n	800a18c <__swhatbuf_r+0x40>
 800a16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a16e:	e00e      	b.n	800a18e <__swhatbuf_r+0x42>
 800a170:	466a      	mov	r2, sp
 800a172:	f000 f903 	bl	800a37c <_fstat_r>
 800a176:	2800      	cmp	r0, #0
 800a178:	dbf1      	blt.n	800a15e <__swhatbuf_r+0x12>
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a180:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a184:	425a      	negs	r2, r3
 800a186:	415a      	adcs	r2, r3
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	e7ee      	b.n	800a16a <__swhatbuf_r+0x1e>
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	2000      	movs	r0, #0
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	b016      	add	sp, #88	; 0x58
 800a194:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a198 <__smakebuf_r>:
 800a198:	898b      	ldrh	r3, [r1, #12]
 800a19a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a19c:	079d      	lsls	r5, r3, #30
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	d507      	bpl.n	800a1b4 <__smakebuf_r+0x1c>
 800a1a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	6123      	str	r3, [r4, #16]
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	6163      	str	r3, [r4, #20]
 800a1b0:	b002      	add	sp, #8
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	ab01      	add	r3, sp, #4
 800a1b6:	466a      	mov	r2, sp
 800a1b8:	f7ff ffc8 	bl	800a14c <__swhatbuf_r>
 800a1bc:	9900      	ldr	r1, [sp, #0]
 800a1be:	4605      	mov	r5, r0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff f963 	bl	800948c <_malloc_r>
 800a1c6:	b948      	cbnz	r0, 800a1dc <__smakebuf_r+0x44>
 800a1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1cc:	059a      	lsls	r2, r3, #22
 800a1ce:	d4ef      	bmi.n	800a1b0 <__smakebuf_r+0x18>
 800a1d0:	f023 0303 	bic.w	r3, r3, #3
 800a1d4:	f043 0302 	orr.w	r3, r3, #2
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	e7e3      	b.n	800a1a4 <__smakebuf_r+0xc>
 800a1dc:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <__smakebuf_r+0x7c>)
 800a1de:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	6020      	str	r0, [r4, #0]
 800a1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	9b00      	ldr	r3, [sp, #0]
 800a1ec:	6163      	str	r3, [r4, #20]
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	6120      	str	r0, [r4, #16]
 800a1f2:	b15b      	cbz	r3, 800a20c <__smakebuf_r+0x74>
 800a1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f8d1 	bl	800a3a0 <_isatty_r>
 800a1fe:	b128      	cbz	r0, 800a20c <__smakebuf_r+0x74>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f023 0303 	bic.w	r3, r3, #3
 800a206:	f043 0301 	orr.w	r3, r3, #1
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	89a0      	ldrh	r0, [r4, #12]
 800a20e:	4305      	orrs	r5, r0
 800a210:	81a5      	strh	r5, [r4, #12]
 800a212:	e7cd      	b.n	800a1b0 <__smakebuf_r+0x18>
 800a214:	08009fa5 	.word	0x08009fa5

0800a218 <_malloc_usable_size_r>:
 800a218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a21c:	1f18      	subs	r0, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfbc      	itt	lt
 800a222:	580b      	ldrlt	r3, [r1, r0]
 800a224:	18c0      	addlt	r0, r0, r3
 800a226:	4770      	bx	lr

0800a228 <_raise_r>:
 800a228:	291f      	cmp	r1, #31
 800a22a:	b538      	push	{r3, r4, r5, lr}
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	d904      	bls.n	800a23c <_raise_r+0x14>
 800a232:	2316      	movs	r3, #22
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	f04f 30ff 	mov.w	r0, #4294967295
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a23e:	b112      	cbz	r2, 800a246 <_raise_r+0x1e>
 800a240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a244:	b94b      	cbnz	r3, 800a25a <_raise_r+0x32>
 800a246:	4620      	mov	r0, r4
 800a248:	f000 f830 	bl	800a2ac <_getpid_r>
 800a24c:	462a      	mov	r2, r5
 800a24e:	4601      	mov	r1, r0
 800a250:	4620      	mov	r0, r4
 800a252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a256:	f000 b817 	b.w	800a288 <_kill_r>
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d00a      	beq.n	800a274 <_raise_r+0x4c>
 800a25e:	1c59      	adds	r1, r3, #1
 800a260:	d103      	bne.n	800a26a <_raise_r+0x42>
 800a262:	2316      	movs	r3, #22
 800a264:	6003      	str	r3, [r0, #0]
 800a266:	2001      	movs	r0, #1
 800a268:	e7e7      	b.n	800a23a <_raise_r+0x12>
 800a26a:	2400      	movs	r4, #0
 800a26c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a270:	4628      	mov	r0, r5
 800a272:	4798      	blx	r3
 800a274:	2000      	movs	r0, #0
 800a276:	e7e0      	b.n	800a23a <_raise_r+0x12>

0800a278 <raise>:
 800a278:	4b02      	ldr	r3, [pc, #8]	; (800a284 <raise+0xc>)
 800a27a:	4601      	mov	r1, r0
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	f7ff bfd3 	b.w	800a228 <_raise_r>
 800a282:	bf00      	nop
 800a284:	20000024 	.word	0x20000024

0800a288 <_kill_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d07      	ldr	r5, [pc, #28]	; (800a2a8 <_kill_r+0x20>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	602b      	str	r3, [r5, #0]
 800a296:	f7f7 fd5f 	bl	8001d58 <_kill>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d102      	bne.n	800a2a4 <_kill_r+0x1c>
 800a29e:	682b      	ldr	r3, [r5, #0]
 800a2a0:	b103      	cbz	r3, 800a2a4 <_kill_r+0x1c>
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	bd38      	pop	{r3, r4, r5, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200008e4 	.word	0x200008e4

0800a2ac <_getpid_r>:
 800a2ac:	f7f7 bd4c 	b.w	8001d48 <_getpid>

0800a2b0 <__sread>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b8:	f000 f894 	bl	800a3e4 <_read_r>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	bfab      	itete	ge
 800a2c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a2c4:	181b      	addge	r3, r3, r0
 800a2c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2ca:	bfac      	ite	ge
 800a2cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ce:	81a3      	strhlt	r3, [r4, #12]
 800a2d0:	bd10      	pop	{r4, pc}

0800a2d2 <__swrite>:
 800a2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d6:	461f      	mov	r7, r3
 800a2d8:	898b      	ldrh	r3, [r1, #12]
 800a2da:	05db      	lsls	r3, r3, #23
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	d505      	bpl.n	800a2f0 <__swrite+0x1e>
 800a2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f000 f868 	bl	800a3c0 <_lseek_r>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	463b      	mov	r3, r7
 800a300:	4628      	mov	r0, r5
 800a302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a306:	f000 b817 	b.w	800a338 <_write_r>

0800a30a <__sseek>:
 800a30a:	b510      	push	{r4, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a312:	f000 f855 	bl	800a3c0 <_lseek_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	bf15      	itete	ne
 800a31c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a31e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a326:	81a3      	strheq	r3, [r4, #12]
 800a328:	bf18      	it	ne
 800a32a:	81a3      	strhne	r3, [r4, #12]
 800a32c:	bd10      	pop	{r4, pc}

0800a32e <__sclose>:
 800a32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a332:	f000 b813 	b.w	800a35c <_close_r>
	...

0800a338 <_write_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4d07      	ldr	r5, [pc, #28]	; (800a358 <_write_r+0x20>)
 800a33c:	4604      	mov	r4, r0
 800a33e:	4608      	mov	r0, r1
 800a340:	4611      	mov	r1, r2
 800a342:	2200      	movs	r2, #0
 800a344:	602a      	str	r2, [r5, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	f7f7 fd3d 	bl	8001dc6 <_write>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d102      	bne.n	800a356 <_write_r+0x1e>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	b103      	cbz	r3, 800a356 <_write_r+0x1e>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	200008e4 	.word	0x200008e4

0800a35c <_close_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d06      	ldr	r5, [pc, #24]	; (800a378 <_close_r+0x1c>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f7 fd49 	bl	8001dfe <_close>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_close_r+0x1a>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_close_r+0x1a>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	200008e4 	.word	0x200008e4

0800a37c <_fstat_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d07      	ldr	r5, [pc, #28]	; (800a39c <_fstat_r+0x20>)
 800a380:	2300      	movs	r3, #0
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	4611      	mov	r1, r2
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	f7f7 fd44 	bl	8001e16 <_fstat>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d102      	bne.n	800a398 <_fstat_r+0x1c>
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	b103      	cbz	r3, 800a398 <_fstat_r+0x1c>
 800a396:	6023      	str	r3, [r4, #0]
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	bf00      	nop
 800a39c:	200008e4 	.word	0x200008e4

0800a3a0 <_isatty_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d06      	ldr	r5, [pc, #24]	; (800a3bc <_isatty_r+0x1c>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	f7f7 fd43 	bl	8001e36 <_isatty>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_isatty_r+0x1a>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_isatty_r+0x1a>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	200008e4 	.word	0x200008e4

0800a3c0 <_lseek_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	; (800a3e0 <_lseek_r+0x20>)
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	602a      	str	r2, [r5, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f7f7 fd3c 	bl	8001e4c <_lseek>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_lseek_r+0x1e>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_lseek_r+0x1e>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	200008e4 	.word	0x200008e4

0800a3e4 <_read_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d07      	ldr	r5, [pc, #28]	; (800a404 <_read_r+0x20>)
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	602a      	str	r2, [r5, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f7f7 fcca 	bl	8001d8c <_read>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_read_r+0x1e>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_read_r+0x1e>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	200008e4 	.word	0x200008e4

0800a408 <_init>:
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	bf00      	nop
 800a40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40e:	bc08      	pop	{r3}
 800a410:	469e      	mov	lr, r3
 800a412:	4770      	bx	lr

0800a414 <_fini>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	bf00      	nop
 800a418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41a:	bc08      	pop	{r3}
 800a41c:	469e      	mov	lr, r3
 800a41e:	4770      	bx	lr
